// Code generated by go-swagger; DO NOT EDIT.

package tier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/seasonpass-sdk/pkg/seasonpassclientmodels"
)

// ReorderTierReader is a Reader for the ReorderTier structure.
type ReorderTierReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReorderTierReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReorderTierOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReorderTierBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewReorderTierNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewReorderTierConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewReorderTierUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PUT /seasonpass/admin/namespaces/{namespace}/seasons/{seasonId}/tiers/{id}/reorder returns an error %d: %s", response.Code(), string(data))
	}
}

// NewReorderTierOK creates a ReorderTierOK with default headers values
func NewReorderTierOK() *ReorderTierOK {
	return &ReorderTierOK{}
}

/*ReorderTierOK handles this case with default header values.

  successful operation
*/
type ReorderTierOK struct {
	Payload *seasonpassclientmodels.Tier
}

func (o *ReorderTierOK) Error() string {
	return fmt.Sprintf("[PUT /seasonpass/admin/namespaces/{namespace}/seasons/{seasonId}/tiers/{id}/reorder][%d] reorderTierOK  %+v", 200, o.Payload)
}

func (o *ReorderTierOK) GetPayload() *seasonpassclientmodels.Tier {
	return o.Payload
}

func (o *ReorderTierOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(seasonpassclientmodels.Tier)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReorderTierBadRequest creates a ReorderTierBadRequest with default headers values
func NewReorderTierBadRequest() *ReorderTierBadRequest {
	return &ReorderTierBadRequest{}
}

/*ReorderTierBadRequest handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20026</td><td>publisher namespace not allowed</td></tr></table>
*/
type ReorderTierBadRequest struct {
	Payload *seasonpassclientmodels.ErrorEntity
}

func (o *ReorderTierBadRequest) Error() string {
	return fmt.Sprintf("[PUT /seasonpass/admin/namespaces/{namespace}/seasons/{seasonId}/tiers/{id}/reorder][%d] reorderTierBadRequest  %+v", 400, o.Payload)
}

func (o *ReorderTierBadRequest) GetPayload() *seasonpassclientmodels.ErrorEntity {
	return o.Payload
}

func (o *ReorderTierBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(seasonpassclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReorderTierNotFound creates a ReorderTierNotFound with default headers values
func NewReorderTierNotFound() *ReorderTierNotFound {
	return &ReorderTierNotFound{}
}

/*ReorderTierNotFound handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>49143</td><td>Season [{seasonId}] does not exist in namespace [{namespace}]</td></tr><tr><td>49146</td><td>Tier does not exist</td></tr></table>
*/
type ReorderTierNotFound struct {
	Payload *seasonpassclientmodels.ErrorEntity
}

func (o *ReorderTierNotFound) Error() string {
	return fmt.Sprintf("[PUT /seasonpass/admin/namespaces/{namespace}/seasons/{seasonId}/tiers/{id}/reorder][%d] reorderTierNotFound  %+v", 404, o.Payload)
}

func (o *ReorderTierNotFound) GetPayload() *seasonpassclientmodels.ErrorEntity {
	return o.Payload
}

func (o *ReorderTierNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(seasonpassclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReorderTierConflict creates a ReorderTierConflict with default headers values
func NewReorderTierConflict() *ReorderTierConflict {
	return &ReorderTierConflict{}
}

/*ReorderTierConflict handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>49171</td><td>Invalid season status [{status}]</td></tr></table>
*/
type ReorderTierConflict struct {
	Payload *seasonpassclientmodels.ErrorEntity
}

func (o *ReorderTierConflict) Error() string {
	return fmt.Sprintf("[PUT /seasonpass/admin/namespaces/{namespace}/seasons/{seasonId}/tiers/{id}/reorder][%d] reorderTierConflict  %+v", 409, o.Payload)
}

func (o *ReorderTierConflict) GetPayload() *seasonpassclientmodels.ErrorEntity {
	return o.Payload
}

func (o *ReorderTierConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(seasonpassclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReorderTierUnprocessableEntity creates a ReorderTierUnprocessableEntity with default headers values
func NewReorderTierUnprocessableEntity() *ReorderTierUnprocessableEntity {
	return &ReorderTierUnprocessableEntity{}
}

/*ReorderTierUnprocessableEntity handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type ReorderTierUnprocessableEntity struct {
	Payload *seasonpassclientmodels.ValidationErrorEntity
}

func (o *ReorderTierUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /seasonpass/admin/namespaces/{namespace}/seasons/{seasonId}/tiers/{id}/reorder][%d] reorderTierUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ReorderTierUnprocessableEntity) GetPayload() *seasonpassclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *ReorderTierUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(seasonpassclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
