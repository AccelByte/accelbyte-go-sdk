// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserDLCRecord user DLC record
//
// swagger:model UserDLCRecord
type UserDLCRecord struct {

	// id
	ID string `json:"id,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// obtained at
	// Format: date-time
	ObtainedAt *strfmt.DateTime `json:"obtainedAt,omitempty"`

	// platform
	// Enum: [EPICGAMES PSN STEAM XBOX]
	Platform string `json:"platform,omitempty"`

	// revocation result
	RevocationResult *RevocationResult `json:"revocationResult,omitempty"`

	// revoke results
	RevokeResults []*RevokeResult `json:"revokeResults"`

	// revoked at
	// Format: date-time
	RevokedAt *strfmt.DateTime `json:"revokedAt,omitempty"`

	// rewards
	Rewards []*PlatformReward `json:"rewards"`

	// sources
	// Unique: true
	Sources []string `json:"sources"`

	// status
	// Enum: [FULFILLED REVOKED REVOKE_FAILED]
	Status string `json:"status,omitempty"`

	// transaction Id
	TransactionID string `json:"transactionId,omitempty"`

	// userId
	UserID string `json:"userId,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this user DLC record
func (m *UserDLCRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObtainedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevocationResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevokeResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevokedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserDLCRecord) validateObtainedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ObtainedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("obtainedAt", "body", "date-time", m.ObtainedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var userDlcRecordTypePlatformPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EPICGAMES","PSN","STEAM","XBOX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userDlcRecordTypePlatformPropEnum = append(userDlcRecordTypePlatformPropEnum, v)
	}
}

const (

	// UserDLCRecordPlatformEPICGAMES captures enum value "EPICGAMES"
	UserDLCRecordPlatformEPICGAMES string = "EPICGAMES"

	// UserDLCRecordPlatformPSN captures enum value "PSN"
	UserDLCRecordPlatformPSN string = "PSN"

	// UserDLCRecordPlatformSTEAM captures enum value "STEAM"
	UserDLCRecordPlatformSTEAM string = "STEAM"

	// UserDLCRecordPlatformXBOX captures enum value "XBOX"
	UserDLCRecordPlatformXBOX string = "XBOX"
)

// prop value enum
func (m *UserDLCRecord) validatePlatformEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userDlcRecordTypePlatformPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserDLCRecord) validatePlatform(formats strfmt.Registry) error {

	if swag.IsZero(m.Platform) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlatformEnum("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *UserDLCRecord) validateRevocationResult(formats strfmt.Registry) error {

	if swag.IsZero(m.RevocationResult) { // not required
		return nil
	}

	if m.RevocationResult != nil {
		if err := m.RevocationResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revocationResult")
			}
			return err
		}
	}

	return nil
}

func (m *UserDLCRecord) validateRevokeResults(formats strfmt.Registry) error {

	if swag.IsZero(m.RevokeResults) { // not required
		return nil
	}

	for i := 0; i < len(m.RevokeResults); i++ {
		if swag.IsZero(m.RevokeResults[i]) { // not required
			continue
		}

		if m.RevokeResults[i] != nil {
			if err := m.RevokeResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("revokeResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserDLCRecord) validateRevokedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.RevokedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("revokedAt", "body", "date-time", m.RevokedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserDLCRecord) validateRewards(formats strfmt.Registry) error {

	if swag.IsZero(m.Rewards) { // not required
		return nil
	}

	for i := 0; i < len(m.Rewards); i++ {
		if swag.IsZero(m.Rewards[i]) { // not required
			continue
		}

		if m.Rewards[i] != nil {
			if err := m.Rewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserDLCRecord) validateSources(formats strfmt.Registry) error {

	if swag.IsZero(m.Sources) { // not required
		return nil
	}

	if err := validate.UniqueItems("sources", "body", m.Sources); err != nil {
		return err
	}

	return nil
}

var userDlcRecordTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FULFILLED","REVOKED","REVOKE_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userDlcRecordTypeStatusPropEnum = append(userDlcRecordTypeStatusPropEnum, v)
	}
}

const (

	// UserDLCRecordStatusFULFILLED captures enum value "FULFILLED"
	UserDLCRecordStatusFULFILLED string = "FULFILLED"

	// UserDLCRecordStatusREVOKED captures enum value "REVOKED"
	UserDLCRecordStatusREVOKED string = "REVOKED"

	// UserDLCRecordStatusREVOKEFAILED captures enum value "REVOKE_FAILED"
	UserDLCRecordStatusREVOKEFAILED string = "REVOKE_FAILED"
)

// prop value enum
func (m *UserDLCRecord) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userDlcRecordTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserDLCRecord) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserDLCRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserDLCRecord) UnmarshalBinary(b []byte) error {
	var res UserDLCRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
