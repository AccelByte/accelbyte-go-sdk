// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/dsmc-sdk/pkg/dsmcclientmodels"
)

// CreateImageReader is a Reader for the CreateImage structure.
type CreateImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewCreateImageNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateImageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateImageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateImageConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateImageNoContent creates a CreateImageNoContent with default headers values
func NewCreateImageNoContent() *CreateImageNoContent {
	return &CreateImageNoContent{}
}

/*CreateImageNoContent handles this case with default header values.

image created
*/
type CreateImageNoContent struct {
}

func (o *CreateImageNoContent) Error() string {
	return fmt.Sprintf("[POST /dsmcontroller/admin/images][%d] createImageNoContent ", 204)
}

func (o *CreateImageNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateImageBadRequest creates a CreateImageBadRequest with default headers values
func NewCreateImageBadRequest() *CreateImageBadRequest {
	return &CreateImageBadRequest{}
}

/*CreateImageBadRequest handles this case with default header values.

malformed request
*/
type CreateImageBadRequest struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *CreateImageBadRequest) Error() string {
	return fmt.Sprintf("[POST /dsmcontroller/admin/images][%d] createImageBadRequest  %+v", 400, o.Payload)
}

func (o *CreateImageBadRequest) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *CreateImageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateImageUnauthorized creates a CreateImageUnauthorized with default headers values
func NewCreateImageUnauthorized() *CreateImageUnauthorized {
	return &CreateImageUnauthorized{}
}

/*CreateImageUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateImageUnauthorized struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *CreateImageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dsmcontroller/admin/images][%d] createImageUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateImageUnauthorized) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *CreateImageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateImageConflict creates a CreateImageConflict with default headers values
func NewCreateImageConflict() *CreateImageConflict {
	return &CreateImageConflict{}
}

/*CreateImageConflict handles this case with default header values.

conflict. duplicate image version record
*/
type CreateImageConflict struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *CreateImageConflict) Error() string {
	return fmt.Sprintf("[POST /dsmcontroller/admin/images][%d] createImageConflict  %+v", 409, o.Payload)
}

func (o *CreateImageConflict) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *CreateImageConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateImageInternalServerError creates a CreateImageInternalServerError with default headers values
func NewCreateImageInternalServerError() *CreateImageInternalServerError {
	return &CreateImageInternalServerError{}
}

/*CreateImageInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateImageInternalServerError struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *CreateImageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dsmcontroller/admin/images][%d] createImageInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateImageInternalServerError) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *CreateImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
