// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRemovePlayerFromSessionParams creates a new RemovePlayerFromSessionParams object
// with the default values initialized.
func NewRemovePlayerFromSessionParams() *RemovePlayerFromSessionParams {
	var ()
	return &RemovePlayerFromSessionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRemovePlayerFromSessionParamsWithTimeout creates a new RemovePlayerFromSessionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemovePlayerFromSessionParamsWithTimeout(timeout time.Duration) *RemovePlayerFromSessionParams {
	var ()
	return &RemovePlayerFromSessionParams{

		timeout: timeout,
	}
}

// NewRemovePlayerFromSessionParamsWithContext creates a new RemovePlayerFromSessionParams object
// with the default values initialized, and the ability to set a context for a request
func NewRemovePlayerFromSessionParamsWithContext(ctx context.Context) *RemovePlayerFromSessionParams {
	var ()
	return &RemovePlayerFromSessionParams{

		Context: ctx,
	}
}

// NewRemovePlayerFromSessionParamsWithHTTPClient creates a new RemovePlayerFromSessionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemovePlayerFromSessionParamsWithHTTPClient(client *http.Client) *RemovePlayerFromSessionParams {
	var ()
	return &RemovePlayerFromSessionParams{
		HTTPClient: client,
	}
}

/*RemovePlayerFromSessionParams contains all the parameters to send to the API endpoint
for the remove player from session operation typically these are written to a http.Request
*/
type RemovePlayerFromSessionParams struct {

	/*Namespace
	  namespace of the game

	*/
	Namespace string
	/*SessionID
	  session ID

	*/
	SessionID string
	/*UserID
	  user ID

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remove player from session params
func (o *RemovePlayerFromSessionParams) WithTimeout(timeout time.Duration) *RemovePlayerFromSessionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove player from session params
func (o *RemovePlayerFromSessionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove player from session params
func (o *RemovePlayerFromSessionParams) WithContext(ctx context.Context) *RemovePlayerFromSessionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove player from session params
func (o *RemovePlayerFromSessionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove player from session params
func (o *RemovePlayerFromSessionParams) WithHTTPClient(client *http.Client) *RemovePlayerFromSessionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove player from session params
func (o *RemovePlayerFromSessionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNamespace adds the namespace to the remove player from session params
func (o *RemovePlayerFromSessionParams) WithNamespace(namespace string) *RemovePlayerFromSessionParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the remove player from session params
func (o *RemovePlayerFromSessionParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithSessionID adds the sessionID to the remove player from session params
func (o *RemovePlayerFromSessionParams) WithSessionID(sessionID string) *RemovePlayerFromSessionParams {
	o.SetSessionID(sessionID)
	return o
}

// SetSessionID adds the sessionId to the remove player from session params
func (o *RemovePlayerFromSessionParams) SetSessionID(sessionID string) {
	o.SessionID = sessionID
}

// WithUserID adds the userID to the remove player from session params
func (o *RemovePlayerFromSessionParams) WithUserID(userID string) *RemovePlayerFromSessionParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the remove player from session params
func (o *RemovePlayerFromSessionParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *RemovePlayerFromSessionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param sessionID
	if err := r.SetPathParam("sessionID", o.SessionID); err != nil {
		return err
	}

	// path param user_id
	if err := r.SetPathParam("user_id", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
