// Code generated by go-swagger; DO NOT EDIT.

package iamclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelGetLinkHeadlessAccountConflictResponse model get link headless account conflict response
//
// swagger:model model.GetLinkHeadlessAccountConflictResponse
type ModelGetLinkHeadlessAccountConflictResponse struct {

	// only exists when platformLinkConflict=false & platformAlreadyLinked=false
	CurrentAccount *ModelAccountProgressionInfo `json:"currentAccount,omitempty"`

	// only exists when platformLinkConflict=false & platformAlreadyLinked=false
	HeadlessAccount *ModelAccountProgressionInfo `json:"headlessAccount,omitempty"`

	// if full account already linked to this platform
	// Required: true
	PlatformAlreadyLinked *bool `json:"platformAlreadyLinked"`

	// platform Id
	// Required: true
	PlatformID *string `json:"platformId"`

	// if linked to this platform's other account
	// Required: true
	PlatformLinkConflict *bool `json:"platformLinkConflict"`
}

// Validate validates this model get link headless account conflict response
func (m *ModelGetLinkHeadlessAccountConflictResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadlessAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformAlreadyLinked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformLinkConflict(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelGetLinkHeadlessAccountConflictResponse) validateCurrentAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentAccount) { // not required
		return nil
	}

	if m.CurrentAccount != nil {
		if err := m.CurrentAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentAccount")
			}
			return err
		}
	}

	return nil
}

func (m *ModelGetLinkHeadlessAccountConflictResponse) validateHeadlessAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.HeadlessAccount) { // not required
		return nil
	}

	if m.HeadlessAccount != nil {
		if err := m.HeadlessAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headlessAccount")
			}
			return err
		}
	}

	return nil
}

func (m *ModelGetLinkHeadlessAccountConflictResponse) validatePlatformAlreadyLinked(formats strfmt.Registry) error {

	if err := validate.Required("platformAlreadyLinked", "body", m.PlatformAlreadyLinked); err != nil {
		return err
	}

	return nil
}

func (m *ModelGetLinkHeadlessAccountConflictResponse) validatePlatformID(formats strfmt.Registry) error {

	if err := validate.Required("platformId", "body", m.PlatformID); err != nil {
		return err
	}

	return nil
}

func (m *ModelGetLinkHeadlessAccountConflictResponse) validatePlatformLinkConflict(formats strfmt.Registry) error {

	if err := validate.Required("platformLinkConflict", "body", m.PlatformLinkConflict); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelGetLinkHeadlessAccountConflictResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelGetLinkHeadlessAccountConflictResponse) UnmarshalBinary(b []byte) error {
	var res ModelGetLinkHeadlessAccountConflictResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
