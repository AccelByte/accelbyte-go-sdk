// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package global_achievements

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"reflect"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new global achievements API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for global achievements API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ClaimGlobalAchievementReward(params *ClaimGlobalAchievementRewardParams, authInfo runtime.ClientAuthInfoWriter) (*ClaimGlobalAchievementRewardAccepted, *ClaimGlobalAchievementRewardBadRequest, *ClaimGlobalAchievementRewardUnauthorized, *ClaimGlobalAchievementRewardInternalServerError, error)
	ClaimGlobalAchievementRewardShort(params *ClaimGlobalAchievementRewardParams, authInfo runtime.ClientAuthInfoWriter) (*ClaimGlobalAchievementRewardAccepted, error)
	PublicListGlobalAchievements(params *PublicListGlobalAchievementsParams, authInfo runtime.ClientAuthInfoWriter) (*PublicListGlobalAchievementsOK, *PublicListGlobalAchievementsBadRequest, *PublicListGlobalAchievementsUnauthorized, *PublicListGlobalAchievementsInternalServerError, error)
	PublicListGlobalAchievementsShort(params *PublicListGlobalAchievementsParams, authInfo runtime.ClientAuthInfoWriter) (*PublicListGlobalAchievementsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Deprecated: Use ClaimGlobalAchievementRewardShort instead.

  ClaimGlobalAchievementReward claims global achievement reward

  &lt;p&gt;Required permission
			&lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:ACHIEVEMENT [READ]&lt;/code&gt; and scope &lt;code&gt;social&lt;/code&gt;&lt;/p&gt;
			&lt;p&gt;Note:&lt;/p&gt;
			&lt;p&gt; Global achievement should be unlocked to claim the reward. Only contributor of global achievement are eligible for rewards
*/
func (a *Client) ClaimGlobalAchievementReward(params *ClaimGlobalAchievementRewardParams, authInfo runtime.ClientAuthInfoWriter) (*ClaimGlobalAchievementRewardAccepted, *ClaimGlobalAchievementRewardBadRequest, *ClaimGlobalAchievementRewardUnauthorized, *ClaimGlobalAchievementRewardInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClaimGlobalAchievementRewardParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ClaimGlobalAchievementReward",
		Method:             "POST",
		PathPattern:        "/achievement/v1/public/namespaces/{namespace}/users/{userId}/global/achievements/{achievementCode}/claim",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClaimGlobalAchievementRewardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *ClaimGlobalAchievementRewardAccepted:
		return v, nil, nil, nil, nil

	case *ClaimGlobalAchievementRewardBadRequest:
		return nil, v, nil, nil, nil

	case *ClaimGlobalAchievementRewardUnauthorized:
		return nil, nil, v, nil, nil

	case *ClaimGlobalAchievementRewardInternalServerError:
		return nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  ClaimGlobalAchievementRewardShort claims global achievement reward

  &lt;p&gt;Required permission
			&lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:ACHIEVEMENT [READ]&lt;/code&gt; and scope &lt;code&gt;social&lt;/code&gt;&lt;/p&gt;
			&lt;p&gt;Note:&lt;/p&gt;
			&lt;p&gt; Global achievement should be unlocked to claim the reward. Only contributor of global achievement are eligible for rewards
*/
func (a *Client) ClaimGlobalAchievementRewardShort(params *ClaimGlobalAchievementRewardParams, authInfo runtime.ClientAuthInfoWriter) (*ClaimGlobalAchievementRewardAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClaimGlobalAchievementRewardParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ClaimGlobalAchievementReward",
		Method:             "POST",
		PathPattern:        "/achievement/v1/public/namespaces/{namespace}/users/{userId}/global/achievements/{achievementCode}/claim",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClaimGlobalAchievementRewardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *ClaimGlobalAchievementRewardAccepted:
		return v, nil
	case *ClaimGlobalAchievementRewardBadRequest:
		return nil, v
	case *ClaimGlobalAchievementRewardUnauthorized:
		return nil, v
	case *ClaimGlobalAchievementRewardInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
Deprecated: Use PublicListGlobalAchievementsShort instead.

  PublicListGlobalAchievements queries global achievements include achieved and in progress

  &lt;p&gt;Required permission
			&lt;code&gt;NAMESPACE:{namespace}:ACHIEVEMENT [READ]&lt;/code&gt; and scope &lt;code&gt;social&lt;/code&gt;&lt;/p&gt;
			&lt;p&gt;Note:&lt;/p&gt;
			&lt;p&gt; Global achievement status value mean: &lt;code&gt;status = 1 (in progress)&lt;/code&gt; and &lt;code&gt;status = 2 (unlocked)&lt;/code&gt;&lt;/p&gt;
*/
func (a *Client) PublicListGlobalAchievements(params *PublicListGlobalAchievementsParams, authInfo runtime.ClientAuthInfoWriter) (*PublicListGlobalAchievementsOK, *PublicListGlobalAchievementsBadRequest, *PublicListGlobalAchievementsUnauthorized, *PublicListGlobalAchievementsInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicListGlobalAchievementsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicListGlobalAchievements",
		Method:             "GET",
		PathPattern:        "/achievement/v1/public/namespaces/{namespace}/global/achievements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicListGlobalAchievementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *PublicListGlobalAchievementsOK:
		return v, nil, nil, nil, nil

	case *PublicListGlobalAchievementsBadRequest:
		return nil, v, nil, nil, nil

	case *PublicListGlobalAchievementsUnauthorized:
		return nil, nil, v, nil, nil

	case *PublicListGlobalAchievementsInternalServerError:
		return nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PublicListGlobalAchievementsShort queries global achievements include achieved and in progress

  &lt;p&gt;Required permission
			&lt;code&gt;NAMESPACE:{namespace}:ACHIEVEMENT [READ]&lt;/code&gt; and scope &lt;code&gt;social&lt;/code&gt;&lt;/p&gt;
			&lt;p&gt;Note:&lt;/p&gt;
			&lt;p&gt; Global achievement status value mean: &lt;code&gt;status = 1 (in progress)&lt;/code&gt; and &lt;code&gt;status = 2 (unlocked)&lt;/code&gt;&lt;/p&gt;
*/
func (a *Client) PublicListGlobalAchievementsShort(params *PublicListGlobalAchievementsParams, authInfo runtime.ClientAuthInfoWriter) (*PublicListGlobalAchievementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicListGlobalAchievementsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicListGlobalAchievements",
		Method:             "GET",
		PathPattern:        "/achievement/v1/public/namespaces/{namespace}/global/achievements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicListGlobalAchievementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *PublicListGlobalAchievementsOK:
		return v, nil
	case *PublicListGlobalAchievementsBadRequest:
		return nil, v
	case *PublicListGlobalAchievementsUnauthorized:
		return nil, v
	case *PublicListGlobalAchievementsInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
