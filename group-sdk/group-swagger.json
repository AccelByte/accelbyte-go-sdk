{
  "swagger": "2.0",
  "info": {
    "description": "Justice Group Service",
    "title": "justice-group-service",
    "contact": {
      "name": "Engineering Team at AccelByte",
      "url": "https://accelbyte.io",
      "email": "engineering@accelbyte.io"
    },
    "version": "2.8.0"
  },
  "paths": {
    "/group/v1/admin/namespaces/{namespace}/configuration": {
      "get": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:GROUP:CONFIGURATION [READ]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to get existing configuration. This Configuration is used to be the main rule of the service. Each namespace will have its own configuration\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73101\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "List Group Configuration",
        "operationId": "listGroupConfigurationAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "size of displayed data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The start position that points to query data",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ListConfigurationResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73131\u003c/td\u003e\u003ctd\u003eglobal configuration not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:GROUP:CONFIGURATION [CREATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to create new configuration. Before creating the configuration, make sure that member role for admin and group member are already created before.\u003c/p\u003e\n\t\t\t\u003cp\u003eFor each of the global rule, it will be the rule detail that consists of these fields: \u003c/p\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eruleAttribute\u003c/b\u003e: attribute of the player that needs to be checked\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eruleCriteria\u003c/b\u003e: criteria of the value. The value will be in enum of EQUAL, MINIMUM, MAXIMUM\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eruleValue\u003c/b\u003e: value that needs to be checked\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003cp\u003eAllowed Action can only be filled with any available action in the Group Service. For the configuration, the only value is \u003cb\u003e\"createGroup\"\u003c/b\u003e\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73103\u003c/p\u003e\n\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "create new configuration",
        "operationId": "createGroupConfigurationAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateGroupConfigurationRequestV1"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupConfigurationResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73130\u003c/td\u003e\u003ctd\u003eglobal configuration already exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/admin/namespaces/{namespace}/configuration/initiate": {
      "post": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:GROUP:CONFIGURATION [CREATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to initiate configuration. This endpoint will automatically create default configuration and member roles with default permission\u003c/p\u003e\n\t\t\t\u003cp\u003eDefault Permission for admin role will cover these permission: \u003c/p\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003ePermission to invite user to group\u003c/li\u003e\n\t\t\t\t\u003cli\u003ePermission to accept or reject join request\u003c/li\u003e\n\t\t\t\t\u003cli\u003ePermission to kick group member\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003cp\u003eDefault max member value will be 50 and global rules will be empty\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73104\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "initiate configuration",
        "operationId": "initiateGroupConfigurationAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupConfigurationResponseV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73130\u003c/td\u003e\u003ctd\u003eglobal configuration already exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/admin/namespaces/{namespace}/configuration/{configurationCode}": {
      "get": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:GROUP:CONFIGURATION [READ]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to get existing configuration. This Configuration is used to be the main rule of the service. Each namespace will have its own configuration\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73101\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "get existing configuration",
        "operationId": "getGroupConfigurationAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group Configuration Code",
            "name": "configurationCode",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetGroupConfigurationResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73131\u003c/td\u003e\u003ctd\u003eglobal configuration not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:GROUP:CONFIGURATION [DELETE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to delete group configuration. This Configuration is used to be the main rule of the service. Each namespace will have its own configuration\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73101\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Delete group configuration",
        "operationId": "getGroupConfigurationV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group Configuration Code",
            "name": "configurationCode",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73131\u003c/td\u003e\u003ctd\u003eglobal configuration not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:GROUP:CONFIGURATION [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to update existing configuration. groupAdminRoleId and groupMemberRoleId won't be able to be updated. User can try to change the member role permission instead for each of those member role\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73102\u003c/p\u003e\n\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "update existing configuration",
        "operationId": "updateGroupConfigurationAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group Configuration Code",
            "name": "configurationCode",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateGroupConfigurationRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UpdateGroupConfigurationResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73131\u003c/td\u003e\u003ctd\u003eglobal configuration not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/admin/namespaces/{namespace}/configuration/{configurationCode}/rules/{allowedAction}": {
      "put": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:GROUP:CONFIGURATION [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to update existing global rule configuration based on the allowed action. It will replace the permission with the request\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73106\u003c/p\u003e\n\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "update existing configuration global rule",
        "operationId": "updateGroupConfigurationGlobalRuleAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group Configuration Code",
            "name": "configurationCode",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Allowed Action. The value should be any actions in the service",
            "name": "allowedAction",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateGroupConfigurationGlobalRulesRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UpdateGroupConfigurationResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73131\u003c/td\u003e\u003ctd\u003eglobal configuration not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:GROUP:CONFIGURATION [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to delete existing global rule configuration based on the allowed action. It will not give any error if the allowed action is not existed in the global rule\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73105\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "delete existing configuration global rule based on allowed action",
        "operationId": "deleteGroupConfigurationGlobalRuleAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group Configuration Code",
            "name": "configurationCode",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Allowed Action. The value should be any actions in the service",
            "name": "allowedAction",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UpdateGroupConfigurationResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73131\u003c/td\u003e\u003ctd\u003eglobal configuration not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/admin/namespaces/{namespace}/groups": {
      "get": {
        "description": "\u003cp\u003eRequired Permission: \"ADMIN:NAMESPACE:{namespace}:GROUP [READ]\" \u003c/p\u003e\n\t\t\t\u003cp\u003eGet list of groups. This endpoint will show any types of group\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73301\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group"
        ],
        "summary": "get list of groups",
        "operationId": "getGroupListAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "size of displayed data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The start position that points to query data",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query Group Name",
            "name": "groupName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query Group Region",
            "name": "groupRegion",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query Group Configuration Code",
            "name": "configurationCode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetGroupsListResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/admin/namespaces/{namespace}/groups/{groupId}": {
      "get": {
        "description": "\u003cp\u003eRequired Permission: \"ADMIN:NAMESPACE:{namespace}:GROUP [READ]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eGet single group information. This endpoint will show the group information by the groupId\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73306\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group"
        ],
        "summary": "get single group",
        "operationId": "getSingleGroupAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73333\u003c/td\u003e\u003ctd\u003egroup not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "\u003cp\u003eRequired Permission: \"ADMIN:NAMESPACE:{namespace}:GROUP:{groupId} [DELETE]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eDelete existing group. It will check whether the groupID is exist before doing the process to delete the group.\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73302\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group"
        ],
        "summary": "Delete existing group",
        "operationId": "deleteGroupAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73333\u003c/td\u003e\u003ctd\u003egroup not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/admin/namespaces/{namespace}/groups/{groupId}/members": {
      "get": {
        "description": "\u003cp\u003eRequired permission ADMIN:NAMESPACE:{namespace}:GROUP:MEMBER [READ] \u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to get list of group members.\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73410\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Member"
        ],
        "summary": "Get list of group members",
        "operationId": "getGroupMembersListAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "size of displayed data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The start position that points to query data",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort group members list by User ID with ascending as default order. Set it 'desc' for descending order",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetGroupMemberListResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73433\u003c/td\u003e\u003ctd\u003emember group not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/admin/namespaces/{namespace}/roles": {
      "get": {
        "description": "\u003cp\u003eRequired permission ADMIN:NAMESPACE:{namespace}:GROUP:ROLE [READ]\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to get list of member roles\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73201\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Roles"
        ],
        "summary": "get all list of member roles",
        "operationId": "getMemberRolesListAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "size of displayed data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The start position that points to query data",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetMemberRolesListResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eRequired permission ADMIN:NAMESPACE:{namespace}:GROUP:ROLE [CREATE]\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to create new member role\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73202\u003c/p\u003e\n\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Roles"
        ],
        "summary": "create new member role",
        "operationId": "createMemberRoleAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateMemberRoleRequestV1"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateMemberRoleResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/admin/namespaces/{namespace}/roles/{memberRoleId}": {
      "get": {
        "description": "\u003cp\u003eRequired permission ADMIN:NAMESPACE:{namespace}:GROUP:ROLE [READ]\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to get member role based on the role ID\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73203\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Roles"
        ],
        "summary": "get member role",
        "operationId": "getSingleMemberRoleAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "member Role ID",
            "name": "memberRoleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetMemberRoleResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73232\u003c/td\u003e\u003ctd\u003emember role not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "\u003cp\u003eRequired permission ADMIN:NAMESPACE:{namespace}:GROUP:ROLE [DELETE]\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to delete member role. Any member role can't be deleted if the specific role is applied to the configuration (admin and member role)\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73207\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Roles"
        ],
        "summary": "delete member role",
        "operationId": "deleteMemberRoleAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "member Role ID",
            "name": "memberRoleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73232\u003c/td\u003e\u003ctd\u003emember role not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "\u003cp\u003eRequired permission ADMIN:NAMESPACE:{namespace}:GROUP:ROLE [UPDATE]\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to get member role\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73204\u003c/p\u003e\n\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Roles"
        ],
        "summary": "update member role",
        "operationId": "updateMemberRoleAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "member Role ID",
            "name": "memberRoleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateMemberRoleRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UpdateMemberRoleResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73232\u003c/td\u003e\u003ctd\u003emember role not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/admin/namespaces/{namespace}/roles/{memberRoleId}/permissions": {
      "put": {
        "description": "\u003cp\u003eRequired permission ADMIN:NAMESPACE:{namespace}:GROUP:ROLE [UPDATE]\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to update member role permission. It will replace the existing permission based on the request from this endpoint\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73205\u003c/p\u003e\n\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Roles"
        ],
        "summary": "update member role permission",
        "operationId": "updateMemberRolePermissionAdminV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "member Role ID",
            "name": "memberRoleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateMemberRolePermissionsRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UpdateMemberRoleResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73232\u003c/td\u003e\u003ctd\u003emember role not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/groups": {
      "get": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eGet list of groups. This endpoint will only show OPEN and PUBLIC group type. This endpoint can search based on the group name by filling the \"groupName\" query parameter\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73303\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group"
        ],
        "summary": "get list of groups",
        "operationId": "getGroupListPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "size of displayed data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The start position that points to query data",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query Group Name",
            "name": "groupName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query Group Region",
            "name": "groupRegion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetGroupsListResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to create new group\u003c/p\u003e\n\t\t\t\u003cp\u003eThere are some fields that needs to be fulfilled\u003c/p\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003egroupDescription\u003c/b\u003e: the description of the group (optional)\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003egroupIcon\u003c/b\u003e: group icon URL link (optional)\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003egroupName\u003c/b\u003e: name of the group\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003egroupRegion\u003c/b\u003e: region of the group\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003egroupRules\u003c/b\u003e: rules for specific group. It consists of groupCustomRule that can be used to save custom rule, and groupPredefinedRules that has similar usage with configuration, but this rule only works in specific group\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eallowedAction\u003c/b\u003e: available action in group service. It consist of joinGroup and inviteGroup\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eruleAttribute\u003c/b\u003e: attribute of the player that needs to be checked\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eruleCriteria\u003c/b\u003e: criteria of the value. The value will be in enum of EQUAL, MINIMUM, MAXIMUM\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eruleValue\u003c/b\u003e: value that needs to be checked\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003ecustomAttributes\u003c/b\u003e: additional custom group attributes (optional)\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003cp\u003eAction Code: 73304\u003c/p\u003e\n\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group"
        ],
        "summary": "create new group",
        "operationId": "createNewGroupPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PublicCreateNewGroupRequestV1"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.GroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73342\u003c/td\u003e\u003ctd\u003euser already joined group\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/groups/{groupId}": {
      "get": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eGet single group information. This endpoint will show the group information by the groupId\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73306\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group"
        ],
        "summary": "get single group",
        "operationId": "getSingleGroupPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73333\u003c/td\u003e\u003ctd\u003egroup not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eRequired Member Role Permission: \"GROUP [UPDATE]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eUpdate existing group. This endpoint supports partial update. This endpoint will check the group ID of the user based on the access token and compare it with the group ID in path parameter. \n\t\t\tIt will also check the member role of the user based on the access token\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73307\u003c/p\u003e\n\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group"
        ],
        "summary": "update existing group",
        "operationId": "updateSingleGroupV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateGroupRequestV1"
            }
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73036\u003c/td\u003e\u003ctd\u003einsufficient member role permission\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73333\u003c/td\u003e\u003ctd\u003egroup not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eRequired Member Role Permission: \"GROUP [DELETE]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eDelete existing group. This endpoint will check the group ID of the user based on the access token\n\t\t\tand compare it with the group ID in path parameter. It will also check the member role of the user based on \n\t\t\tthe access token\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73305\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group"
        ],
        "summary": "Delete existing group",
        "operationId": "deleteGroupPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73036\u003c/td\u003e\u003ctd\u003einsufficient member role permission\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73333\u003c/td\u003e\u003ctd\u003egroup not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eRequired Member Role Permission: \"GROUP [UPDATE]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eUpdate existing group. This endpoint supports partial update. This endpoint will check the group ID of the user based on the access token and compare it with the group ID in path parameter. \n\t\t\tIt will also check the member role of the user based on the access token\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73307\u003c/p\u003e\n\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group"
        ],
        "summary": "update existing group",
        "operationId": "updateSingleGroupPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateGroupRequestV1"
            }
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73036\u003c/td\u003e\u003ctd\u003einsufficient member role permission\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73333\u003c/td\u003e\u003ctd\u003egroup not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/groups/{groupId}/attributes/custom": {
      "put": {
        "description": "\u003cp\u003eRequires valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eRequired Member Role Permission: \"GROUP [UPDATE]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint replaces current group custom attributes entirely.\n\t\t\tThis endpoint will check the group ID of the user based on the access token and compare it with the group ID in path parameter. \n\t\t\tIt will also check the member role of the user based on the access token\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73311\u003c/p\u003e\n\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group"
        ],
        "summary": "Update group custom attributes",
        "operationId": "updateGroupCustomAttributesPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateGroupCustomAttributesRequestV1"
            }
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73036\u003c/td\u003e\u003ctd\u003einsufficient member role permission\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73333\u003c/td\u003e\u003ctd\u003egroup not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/groups/{groupId}/invite/accept": {
      "post": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to accept group invitation.\u003c/p\u003e\n\t\t\t\u003cp\u003eAccept group invitation. If specific user is not invited in the specific group ID, it will show the the error to show if the user is not invited yet.\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint will also check if the user who access this endpoint is already joined to specific group\u003c/p\u003e\n\t\t\t\u003cp\u003eAccessing this endpoint will make all requests (invite / join request) will be deleted for the user who access this endpoint\u003c/p\u003e\n\t\t\t\u003cp\u003eExisting members will receive notification of newly accepted member.\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73401\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Member"
        ],
        "summary": "Accept Group Invitation",
        "operationId": "acceptGroupInvitationPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MemberRequestGroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73443\u003c/td\u003e\u003ctd\u003emember request not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73442\u003c/td\u003e\u003ctd\u003euser already joined in another group\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/groups/{groupId}/invite/reject": {
      "post": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to reject group invitation.\u003c/p\u003e\n\t\t\t\u003cp\u003eReject group invitation. If specific user is not invited in the specific group ID, it will show the the error to show if the user is not invited yet.\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73402\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Member"
        ],
        "summary": "Reject Group Invitation",
        "operationId": "rejectGroupInvitationPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MemberRequestGroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73443\u003c/td\u003e\u003ctd\u003emember request not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73442\u003c/td\u003e\u003ctd\u003euser already joined in another group\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/groups/{groupId}/join": {
      "post": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to join as group member\u003c/p\u003e\n\t\t\t\u003cp\u003eJoin to the group. This endpoint will check the the the type of the group based on the groupID.\u003c/p\u003e\n\t\t\t\u003cp\u003eAdditional Information:\u003c/p\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003eUser cannot join to the group with PRIVATE type\u003c/li\u003e\n\t\t\t\t\u003cli\u003eJoining PUBLIC group type will create join request and need approval from the privileged group member to accept the request to become the member\u003c/li\u003e\n\t\t\t\t\u003cli\u003eJoining OPEN group type will make this user become member of that group immediately\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003cp\u003eThis endpoint will return status field to give information whether the user is JOINED or REQUESTED to join to the specific group\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73403\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Member"
        ],
        "summary": "Join to group",
        "operationId": "JoinGroupV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.JoinGroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73442\u003c/td\u003e\u003ctd\u003euser already joined in another group\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/groups/{groupId}/join/cancel": {
      "post": {
        "description": "\u003cp\u003eRequires valid user authentication\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint allows user to cancel request to join specific group.\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73411\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Member"
        ],
        "summary": "Cancel request to join group",
        "operationId": "CancelGroupJoinRequestV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MemberRequestGroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73443\u003c/td\u003e\u003ctd\u003emember request not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/groups/{groupId}/join/request": {
      "get": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eRequired Member Role Permission: \"GROUP:JOIN [READ]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to Get Group Join Request List\u003c/p\u003e\n\t\t\t\u003cp\u003eGet Group Join Request List for specific group. Group members needs to have permission and also belong to the group to access this endpoint\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73501\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Member Request"
        ],
        "summary": "Get Group Join Request List",
        "operationId": "getGroupJoinRequestPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "size of displayed data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The start position that points to query data",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetMemberRequestsListResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73036\u003c/td\u003e\u003ctd\u003einsufficient member role permission\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/groups/{groupId}/members": {
      "get": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to get list of group members.\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73410\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Member"
        ],
        "summary": "Get list of group members",
        "operationId": "getGroupMembersListPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "size of displayed data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The start position that points to query data",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort group members list by User ID with ascending as default order. Set it 'desc' for descending order",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetGroupMemberListResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73433\u003c/td\u003e\u003ctd\u003emember group not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/groups/{groupId}/rules/custom": {
      "put": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eUpdate group custom rule. This endpoint will check the group ID of the user based on the access token \n\t\t\tand compare it with the group ID in path parameter. It will also check the member role of the user based \n\t\t\ton the access token\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73308\u003c/p\u003e\n\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group"
        ],
        "summary": "update group custom rule",
        "operationId": "updateGroupCustomRulePublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateGroupCustomRuleRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73036\u003c/td\u003e\u003ctd\u003einsufficient member role permission\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73333\u003c/td\u003e\u003ctd\u003egroup not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/groups/{groupId}/rules/defined/{allowedAction}": {
      "put": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eRequired Member Role Permission: \"GROUP [UPDATE]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eUpdate predefined group rule. This endpoint will check the group ID of the user based on the access token \n\t\t\tand compare it with the group ID in path parameter. It will also check the member role of the user based on \n\t\t\tthe access token\u003c/p\u003e\n\t\t\t\u003cp\u003eIf the rule action is not defined in the group, it wil be added immediately to the predefined group rule\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73310\u003c/p\u003e\n\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group"
        ],
        "summary": "update predefined group rule",
        "operationId": "updateGroupPredefinedRulePublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Allowed action, any available action in service",
            "name": "allowedAction",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateGroupPredefinedRuleRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73036\u003c/td\u003e\u003ctd\u003einsufficient member role permission\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73333\u003c/td\u003e\u003ctd\u003egroup not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eRequired Member Role Permission: \"GROUP [UPDATE]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eDelete group predefined rule based on the allowed action. This endpoint will check the group ID of the user based on the access token\n\t\t\tand compare it with the group ID in path parameter. It will also check the member role of the user based on \n\t\t\tthe access token\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73309\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group"
        ],
        "summary": "Delete group predefined rule",
        "operationId": "deleteGroupPredefinedRulePublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Allowed action, any available action in service",
            "name": "allowedAction",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73036\u003c/td\u003e\u003ctd\u003einsufficient member role permission\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73333\u003c/td\u003e\u003ctd\u003egroup not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/leave": {
      "post": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to leave from group.\u003c/p\u003e\n\t\t\t\u003cp\u003eleave from group. Admin is not allowed to leave the group. This endpoint will also give response if the user is not belong to any group.\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73404\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Member"
        ],
        "summary": "Leave group",
        "operationId": "leaveGroupPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.LeaveGroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73440\u003c/td\u003e\u003ctd\u003egroup admin cannot leave group\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73034\u003c/td\u003e\u003ctd\u003euser not belong to any group\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/roles": {
      "get": {
        "description": "\u003cp\u003eRequired Member Role Permission: \"GROUP:ROLE [READ]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to get list of member roles\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73201\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Roles"
        ],
        "summary": "get all list of member roles",
        "operationId": "getMemberRolesListPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "size of displayed data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The start position that points to query data",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetMemberRolesListResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/roles/{memberRoleId}/members": {
      "post": {
        "description": "Required Member Role Permission: \"GROUP:ROLE [UPDATE]\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to assign role to group member\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73204\u003c/p\u003e",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Roles"
        ],
        "summary": "Assign role to group member",
        "operationId": "updateMemberRolePublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "member Role ID",
            "name": "memberRoleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AssignRoleToMemberRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetUserGroupInformationResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73232\u003c/td\u003e\u003ctd\u003emember role not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required Member Role Permission: \"GROUP:ROLE [UPDATE]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to remove role from group member\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73204\u003c/p\u003e",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Roles"
        ],
        "summary": "Remove role from group member",
        "operationId": "deleteMemberRolePublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "member Role ID",
            "name": "memberRoleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.RemoveRoleFromMemberRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UpdateMemberRoleResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73232\u003c/td\u003e\u003ctd\u003emember role not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73444\u003c/td\u003e\u003ctd\u003emember must have role\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/users/me/invite/request": {
      "get": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to Get Group Invitation Request List\u003c/p\u003e\n\t\t\t\u003cp\u003eGet Group Invitation Request List for specific group. It will check any group invitation for this user\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73502\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Member Request"
        ],
        "summary": "Get Group Invitation Request List",
        "operationId": "getGroupInvitationRequestPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "size of displayed data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The start position that points to query data",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetMemberRequestsListResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/users/{userId}": {
      "get": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to get user group information.\u003c/p\u003e\n\t\t\t\u003cp\u003eGet user group information. If user is not belong to any group, it will return warning to give information about it\u003c/p\u003e\n\t\t\t\u003cp\u003eGroup Member Status:\u003c/p\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003eJOIN : status of user requested to join group \u003c/li\u003e\n\t\t\t\t\u003cli\u003eINVITE: status of user invited to a group \u003c/li\u003e\n\t\t\t\t\u003cli\u003eJOINED: status of user already joined to a group\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003cp\u003eAction Code: 73405\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Member"
        ],
        "summary": "Get User Group Information",
        "operationId": "getUserGroupInformationPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetUserGroupInformationResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73034\u003c/td\u003e\u003ctd\u003euser not belong to any group\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/users/{userId}/invite": {
      "post": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eRequired Member Role Permission: \"GROUP:INVITE [CREATE]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to invite specific user to the group.\u003c/p\u003e\n\t\t\t\u003cp\u003einvite specific user to the group. If specific user is already have the join request to the group, this endpoint will notify if this user already have join request that needs to be accepted / rejected\u003c/p\u003e\n\t\t\t\u003cp\u003eInvited user will receive notification through lobby.\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73406\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Member"
        ],
        "summary": "Invite user to group",
        "operationId": "inviteGroupPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UserInvitationResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73036\u003c/td\u003e\u003ctd\u003einsufficient member role permission\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73034\u003c/td\u003e\u003ctd\u003euser not belong to any group\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73442\u003c/td\u003e\u003ctd\u003euser already joined in another group\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73437\u003c/td\u003e\u003ctd\u003euser already invited\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73438\u003c/td\u003e\u003ctd\u003euser already requested to join\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/users/{userId}/join/accept": {
      "post": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eRequired Member Role Permission: \"GROUP:JOIN [CREATE]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to accept group join request.\u003c/p\u003e\n\t\t\t\u003cp\u003eAccept group join request. If specific user is not asked to join the specific group ID, it will show the the error to show if the user is not asked to join yet.\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint will also check if the specific user is already joined to specific group\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73407\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Member"
        ],
        "summary": "Accept Group Join Request",
        "operationId": "acceptGroupJoinRequestPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MemberRequestGroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73036\u003c/td\u003e\u003ctd\u003einsufficient member role permission\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73443\u003c/td\u003e\u003ctd\u003emember request not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73442\u003c/td\u003e\u003ctd\u003euser already joined in another group\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/users/{userId}/join/reject": {
      "post": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eRequired Member Role Permission: \"GROUP:JOIN [CREATE]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to reject group join request.\u003c/p\u003e\n\t\t\t\u003cp\u003eReject group join request. If specific user is not asked to join the specific group ID, it will show the the error to show if the user is not asked to join yet.\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint will also check if the specific user is already joined to specific group\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73408\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Member"
        ],
        "summary": "Reject Group Join Request",
        "operationId": "rejectGroupJoinRequestPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MemberRequestGroupResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73036\u003c/td\u003e\u003ctd\u003einsufficient member role permission\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73443\u003c/td\u003e\u003ctd\u003emember request not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73442\u003c/td\u003e\u003ctd\u003euser already joined in another group\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    },
    "/group/v1/public/namespaces/{namespace}/users/{userId}/kick": {
      "post": {
        "description": "\u003cp\u003eRequired valid user authentication \u003c/p\u003e\n\t\t\t\u003cp\u003eRequired Member Role Permission: \"GROUP:KICK [CREATE]\"\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint is used to kick group member.\u003c/p\u003e\n\t\t\t\u003cp\u003eKick group member. This endpoint will check the member and group information, and also the role permission of the the user who accesses this endpoint\u003c/p\u003e\n\t\t\t\u003cp\u003eAction Code: 73409\u003c/p\u003e\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Group Member"
        ],
        "summary": "Kick Group Member",
        "operationId": "kickGroupMemberPublicV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.KickGroupMemberResponseV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73036\u003c/td\u003e\u003ctd\u003einsufficient member role permission\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73433\u003c/td\u003e\u003ctd\u003emember group not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e73034\u003c/td\u003e\u003ctd\u003euser not belong to any group\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "models.AssignRoleToMemberRequestV1": {
      "required": [
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string"
        }
      }
    },
    "models.CreateGroupConfigurationRequestV1": {
      "required": [
        "groupMaxMember",
        "configurationCode",
        "name",
        "description",
        "groupAdminRoleId",
        "groupMemberRoleId",
        "globalRules"
      ],
      "properties": {
        "configurationCode": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "globalRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.Rule"
          }
        },
        "groupAdminRoleId": {
          "type": "string"
        },
        "groupMaxMember": {
          "type": "integer",
          "format": "int32"
        },
        "groupMemberRoleId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "models.CreateGroupConfigurationResponseV1": {
      "required": [
        "groupMaxMember",
        "configurationCode",
        "name",
        "description",
        "groupAdminRoleId",
        "groupMemberRoleId",
        "globalRules"
      ],
      "properties": {
        "configurationCode": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "globalRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.Rule"
          }
        },
        "groupAdminRoleId": {
          "type": "string"
        },
        "groupMaxMember": {
          "type": "integer",
          "format": "int32"
        },
        "groupMemberRoleId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "models.CreateMemberRoleRequestV1": {
      "required": [
        "memberRoleName",
        "memberRolePermissions"
      ],
      "properties": {
        "memberRoleName": {
          "type": "string"
        },
        "memberRolePermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.RolePermission"
          }
        }
      }
    },
    "models.CreateMemberRoleResponseV1": {
      "required": [
        "memberRoleId",
        "memberRoleName",
        "memberRolePermissions"
      ],
      "properties": {
        "memberRoleId": {
          "type": "string"
        },
        "memberRoleName": {
          "type": "string"
        },
        "memberRolePermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.RolePermission"
          }
        }
      }
    },
    "models.GetGroupConfigurationResponseV1": {
      "required": [
        "configurationCode",
        "namespace",
        "groupMaxMember",
        "name",
        "description",
        "groupAdminRoleId",
        "groupMemberRoleId",
        "globalRules"
      ],
      "properties": {
        "configurationCode": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "globalRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.Rule"
          }
        },
        "groupAdminRoleId": {
          "type": "string"
        },
        "groupMaxMember": {
          "type": "integer",
          "format": "int32"
        },
        "groupMemberRoleId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "models.GetGroupMemberListResponseV1": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.GetUserGroupInformationResponseV1"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.Pagination"
        }
      }
    },
    "models.GetGroupsListResponseV1": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.GroupResponseV1"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.Pagination"
        }
      }
    },
    "models.GetMemberRequestsListResponseV1": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.MemberRequestResponseV1"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.Pagination"
        }
      }
    },
    "models.GetMemberRoleResponseV1": {
      "required": [
        "memberRoleId",
        "memberRoleName",
        "memberRolePermissions"
      ],
      "properties": {
        "memberRoleId": {
          "type": "string"
        },
        "memberRoleName": {
          "type": "string"
        },
        "memberRolePermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.RolePermission"
          }
        }
      }
    },
    "models.GetMemberRolesListResponseV1": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.GetMemberRoleResponseV1"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.Pagination"
        }
      }
    },
    "models.GetUserGroupInformationResponseV1": {
      "required": [
        "userId",
        "groupId",
        "memberRoleId"
      ],
      "properties": {
        "groupId": {
          "type": "string"
        },
        "memberRoleId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.GroupMember": {
      "required": [
        "userId",
        "memberRoleId"
      ],
      "properties": {
        "memberRoleId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.GroupResponseV1": {
      "required": [
        "groupId",
        "configurationCode",
        "customAttributes",
        "groupName",
        "groupIcon",
        "groupType",
        "groupRegion",
        "groupRules",
        "groupMembers",
        "groupDescription",
        "groupMaxMember"
      ],
      "properties": {
        "configurationCode": {
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "groupDescription": {
          "type": "string"
        },
        "groupIcon": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "groupMaxMember": {
          "type": "integer",
          "format": "int32"
        },
        "groupMembers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.GroupMember"
          }
        },
        "groupName": {
          "type": "string"
        },
        "groupRegion": {
          "type": "string"
        },
        "groupRules": {
          "$ref": "#/definitions/models.GroupRule"
        },
        "groupType": {
          "type": "string"
        }
      }
    },
    "models.GroupRule": {
      "required": [
        "groupPredefinedRules",
        "groupCustomRule"
      ],
      "properties": {
        "groupCustomRule": {
          "$ref": "#/definitions/models.GroupRule.groupCustomRule"
        },
        "groupPredefinedRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.Rule"
          }
        }
      }
    },
    "models.GroupRule.groupCustomRule": {},
    "models.JoinGroupResponseV1": {
      "required": [
        "userId",
        "groupId",
        "status"
      ],
      "properties": {
        "groupId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.KickGroupMemberResponseV1": {
      "required": [
        "groupId",
        "kickedUserId"
      ],
      "properties": {
        "groupId": {
          "type": "string"
        },
        "kickedUserId": {
          "type": "string"
        }
      }
    },
    "models.LeaveGroupResponseV1": {
      "required": [
        "groupId",
        "userId"
      ],
      "properties": {
        "groupId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.ListConfigurationResponseV1": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.GetGroupConfigurationResponseV1"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.Pagination"
        }
      }
    },
    "models.MemberRequestGroupResponseV1": {
      "required": [
        "groupId",
        "userId"
      ],
      "properties": {
        "groupId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.MemberRequestResponseV1": {
      "required": [
        "userId",
        "groupId",
        "requestType"
      ],
      "properties": {
        "groupId": {
          "type": "string"
        },
        "requestType": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.Pagination": {
      "required": [
        "first",
        "last",
        "next",
        "previous"
      ],
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      }
    },
    "models.PublicCreateNewGroupRequestV1": {
      "required": [
        "configurationCode",
        "customAttributes",
        "groupName",
        "groupIcon",
        "groupType",
        "groupRegion",
        "groupDescription",
        "groupRules",
        "groupMaxMember"
      ],
      "properties": {
        "configurationCode": {
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "groupDescription": {
          "type": "string"
        },
        "groupIcon": {
          "type": "string"
        },
        "groupMaxMember": {
          "type": "integer",
          "format": "int32"
        },
        "groupName": {
          "type": "string"
        },
        "groupRegion": {
          "type": "string"
        },
        "groupRules": {
          "$ref": "#/definitions/models.GroupRule"
        },
        "groupType": {
          "type": "string"
        }
      }
    },
    "models.RemoveRoleFromMemberRequestV1": {
      "required": [
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string"
        }
      }
    },
    "models.RolePermission": {
      "required": [
        "resourceName",
        "action"
      ],
      "properties": {
        "action": {
          "type": "integer",
          "format": "int32"
        },
        "resourceName": {
          "type": "string"
        }
      }
    },
    "models.Rule": {
      "required": [
        "allowedAction",
        "ruleDetail"
      ],
      "properties": {
        "allowedAction": {
          "type": "string"
        },
        "ruleDetail": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.RuleInformation"
          }
        }
      }
    },
    "models.RuleInformation": {
      "required": [
        "ruleAttribute",
        "ruleValue",
        "ruleCriteria"
      ],
      "properties": {
        "ruleAttribute": {
          "type": "string"
        },
        "ruleCriteria": {
          "type": "string"
        },
        "ruleValue": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "models.UpdateGroupConfigurationGlobalRulesRequestV1": {
      "required": [
        "ruleDetail"
      ],
      "properties": {
        "ruleDetail": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.RuleInformation"
          }
        }
      }
    },
    "models.UpdateGroupConfigurationRequestV1": {
      "required": [
        "name",
        "description",
        "groupMaxMember"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "groupMaxMember": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "models.UpdateGroupConfigurationResponseV1": {
      "required": [
        "groupMaxMember",
        "configurationCode",
        "name",
        "description",
        "groupAdminRoleId",
        "groupMemberRoleId",
        "globalRules"
      ],
      "properties": {
        "configurationCode": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "globalRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.Rule"
          }
        },
        "groupAdminRoleId": {
          "type": "string"
        },
        "groupMaxMember": {
          "type": "integer",
          "format": "int32"
        },
        "groupMemberRoleId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "models.UpdateGroupCustomAttributesRequestV1": {
      "required": [
        "customAttributes"
      ],
      "properties": {
        "customAttributes": {
          "type": "object"
        }
      }
    },
    "models.UpdateGroupCustomRuleRequestV1": {
      "required": [
        "groupCustomRule"
      ],
      "properties": {
        "groupCustomRule": {
          "$ref": "#/definitions/models.UpdateGroupCustomRuleRequestV1.groupCustomRule"
        }
      }
    },
    "models.UpdateGroupCustomRuleRequestV1.groupCustomRule": {},
    "models.UpdateGroupPredefinedRuleRequestV1": {
      "required": [
        "ruleDetail"
      ],
      "properties": {
        "ruleDetail": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.RuleInformation"
          }
        }
      }
    },
    "models.UpdateGroupRequestV1": {
      "required": [
        "groupName",
        "groupIcon",
        "groupType",
        "groupRegion",
        "groupDescription",
        "customAttributes"
      ],
      "properties": {
        "customAttributes": {
          "$ref": "#/definitions/models.UpdateGroupRequestV1.customAttributes"
        },
        "groupDescription": {
          "type": "string"
        },
        "groupIcon": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "groupRegion": {
          "type": "string"
        },
        "groupType": {
          "type": "string"
        }
      }
    },
    "models.UpdateGroupRequestV1.customAttributes": {
      "type": "object"
    },
    "models.UpdateMemberRolePermissionsRequestV1": {
      "required": [
        "memberRolePermissions"
      ],
      "properties": {
        "memberRolePermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.RolePermission"
          }
        }
      }
    },
    "models.UpdateMemberRoleRequestV1": {
      "required": [
        "memberRoleName"
      ],
      "properties": {
        "memberRoleName": {
          "type": "string"
        }
      }
    },
    "models.UpdateMemberRoleResponseV1": {
      "required": [
        "memberRoleId",
        "memberRoleName",
        "memberRolePermissions"
      ],
      "properties": {
        "memberRoleId": {
          "type": "string"
        },
        "memberRoleName": {
          "type": "string"
        },
        "memberRolePermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.RolePermission"
          }
        }
      }
    },
    "models.UserInvitationResponseV1": {
      "required": [
        "groupId",
        "userId"
      ],
      "properties": {
        "groupId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "response.ErrorResponse": {
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "authorization": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "authorization": []
    }
  ]
}