// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImportStoreError import store error
//
// swagger:model ImportStoreError
type ImportStoreError struct {

	// errors
	Errors []*ImportErrorDetails `json:"errors"`

	// item info
	Item *ImportStoreItemInfo `json:"item,omitempty"`

	// type
	// Enum: [ITEM]
	Type string `json:"type,omitempty"`
}

// Validate validates this import store error
func (m *ImportStoreError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportStoreError) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ImportStoreError) validateItem(formats strfmt.Registry) error {

	if swag.IsZero(m.Item) { // not required
		return nil
	}

	if m.Item != nil {
		if err := m.Item.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("item")
			}
			return err
		}
	}

	return nil
}

var importStoreErrorTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ITEM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importStoreErrorTypeTypePropEnum = append(importStoreErrorTypeTypePropEnum, v)
	}
}

const (

	// ImportStoreErrorTypeITEM captures enum value "ITEM"
	ImportStoreErrorTypeITEM string = "ITEM"
)

// prop value enum
func (m *ImportStoreError) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, importStoreErrorTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImportStoreError) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImportStoreError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImportStoreError) UnmarshalBinary(b []byte) error {
	var res ImportStoreError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
