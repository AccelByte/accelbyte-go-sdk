// Code generated by go-swagger; DO NOT EDIT.

package admin_concurrent_record

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"reflect"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new admin concurrent record API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for admin concurrent record API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AdminPutGameRecordConcurrentHandlerV1(params *AdminPutGameRecordConcurrentHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*AdminPutGameRecordConcurrentHandlerV1NoContent, *AdminPutGameRecordConcurrentHandlerV1BadRequest, *AdminPutGameRecordConcurrentHandlerV1Unauthorized, *AdminPutGameRecordConcurrentHandlerV1PreconditionFailed, *AdminPutGameRecordConcurrentHandlerV1InternalServerError, error)
	AdminPutGameRecordConcurrentHandlerV1Short(params *AdminPutGameRecordConcurrentHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*AdminPutGameRecordConcurrentHandlerV1NoContent, error)
	AdminPutPlayerPublicRecordConcurrentHandlerV1(params *AdminPutPlayerPublicRecordConcurrentHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*AdminPutPlayerPublicRecordConcurrentHandlerV1NoContent, *AdminPutPlayerPublicRecordConcurrentHandlerV1BadRequest, *AdminPutPlayerPublicRecordConcurrentHandlerV1Unauthorized, *AdminPutPlayerPublicRecordConcurrentHandlerV1PreconditionFailed, *AdminPutPlayerPublicRecordConcurrentHandlerV1InternalServerError, error)
	AdminPutPlayerPublicRecordConcurrentHandlerV1Short(params *AdminPutPlayerPublicRecordConcurrentHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*AdminPutPlayerPublicRecordConcurrentHandlerV1NoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AdminPutGameRecordConcurrentHandlerV1 creates or replace game record

  &lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Permission&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [UPDATE]&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Scope&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;social&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;


&lt;h2&gt;Description&lt;/h2&gt;

This endpoints will create new game record or replace the existing game record.

&lt;b&gt;Replace behaviour:&lt;/b&gt;
The existing value will be replaced completely with the new value.

Example
- 	Existing JSON:
	&lt;pre&gt;{ &#34;data1&#34;: &#34;value&#34; }&lt;/pre&gt;
- 	New JSON:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;
-	Result:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;



&lt;h2&gt;Reserved Word&lt;/h2&gt;

Reserved Word List: &lt;b&gt;META&lt;/b&gt;

The reserved word cannot be used as a field in record value,
If still defining the field when creating or updating the record, it will be ignored.


&lt;h2&gt;Parameters Notes &lt;/h2&gt;
1. set_by (default: CLIENT, type: string)
	Indicate which party that could modify the game record.
	SERVER: record can be modified by server only.
	CLIENT: record can be modified by client and server.
2. updatedAt (required: true)
               Time format style: RFC3339
3. value
               Json
&lt;b&gt;Request Body Example:&lt;/b&gt;
&lt;pre&gt;
	{
		&#34;set_by&#34;: &#34;SERVER&#34;,
		&#34;value&#34;: {},
		&#34;updatedAt&#34;: &#34;2022-03-17T10:42:15.444Z&#34;
	}
&lt;/pre&gt;

&lt;h2&gt;Optimistic Concurrency Control&lt;/h2&gt;

This endpoint implement optimistic concurrency control to avoid race condition.
If the record has been updated since the client fetch it, the server will return HTTP status code 412 (precondition failed)
and client need to redo the operation (fetch data and do update).
Otherwise, the server will process the request.

*/
func (a *Client) AdminPutGameRecordConcurrentHandlerV1(params *AdminPutGameRecordConcurrentHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*AdminPutGameRecordConcurrentHandlerV1NoContent, *AdminPutGameRecordConcurrentHandlerV1BadRequest, *AdminPutGameRecordConcurrentHandlerV1Unauthorized, *AdminPutGameRecordConcurrentHandlerV1PreconditionFailed, *AdminPutGameRecordConcurrentHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminPutGameRecordConcurrentHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "adminPutGameRecordConcurrentHandlerV1",
		Method:             "PUT",
		PathPattern:        "/cloudsave/v1/admin/namespaces/{namespace}/concurrent/records/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminPutGameRecordConcurrentHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminPutGameRecordConcurrentHandlerV1NoContent:
		return v, nil, nil, nil, nil, nil

	case *AdminPutGameRecordConcurrentHandlerV1BadRequest:
		return nil, v, nil, nil, nil, nil

	case *AdminPutGameRecordConcurrentHandlerV1Unauthorized:
		return nil, nil, v, nil, nil, nil

	case *AdminPutGameRecordConcurrentHandlerV1PreconditionFailed:
		return nil, nil, nil, v, nil, nil

	case *AdminPutGameRecordConcurrentHandlerV1InternalServerError:
		return nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

func (a *Client) AdminPutGameRecordConcurrentHandlerV1Short(params *AdminPutGameRecordConcurrentHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*AdminPutGameRecordConcurrentHandlerV1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminPutGameRecordConcurrentHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "adminPutGameRecordConcurrentHandlerV1",
		Method:             "PUT",
		PathPattern:        "/cloudsave/v1/admin/namespaces/{namespace}/concurrent/records/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminPutGameRecordConcurrentHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *AdminPutGameRecordConcurrentHandlerV1NoContent:
		return v, nil
	case *AdminPutGameRecordConcurrentHandlerV1BadRequest:
		return nil, v
	case *AdminPutGameRecordConcurrentHandlerV1Unauthorized:
		return nil, v
	case *AdminPutGameRecordConcurrentHandlerV1PreconditionFailed:
		return nil, v
	case *AdminPutGameRecordConcurrentHandlerV1InternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  AdminPutPlayerPublicRecordConcurrentHandlerV1 creates or replace player public record

  &lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Permission&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [UPDATE]&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Scope&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;social&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;


&lt;h2&gt;Description&lt;/h2&gt;

This endpoints will create new player public record or replace the existing player public record.

&lt;b&gt;Replace behaviour:&lt;/b&gt;
The existing value will be replaced completely with the new value.

Example
- 	Existing JSON:
	&lt;pre&gt;{ &#34;data1&#34;: &#34;value&#34; }&lt;/pre&gt;
- 	New JSON:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;
-	Result:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;



&lt;h2&gt;Reserved Word&lt;/h2&gt;

Reserved Word List: &lt;b&gt;META&lt;/b&gt;

The reserved word cannot be used as a field in record value,
If still defining the field when creating or updating the record, it will be ignored.


&lt;h2&gt;Parameters Notes &lt;/h2&gt;
1. set_by (default: CLIENT, type: string)
	Indicate which party that could modify the game record.
	SERVER: record can be modified by server only.
	CLIENT: record can be modified by client and server.
2. updatedAt (required: true)
               Time format style: RFC3339
3. value
               Json
&lt;b&gt;Request Body Example:&lt;/b&gt;
&lt;pre&gt;
	{
		&#34;set_by&#34;: &#34;SERVER&#34;,
		&#34;value&#34;: {},
		&#34;updatedAt&#34;: &#34;2022-03-17T10:42:15.444Z&#34;
	}
&lt;/pre&gt;


&lt;h2&gt;Warning: Current Behaviour when Updating Private Record&lt;/h2&gt;

When updating existing &#34;Private Record&#34;, this endpoint will always &lt;b&gt;convert the &#34;Private Record&#34; into &#34;Public Record&#34;&lt;/b&gt;.
This behaviour might be deprecated sooner, &lt;b&gt;please don&#39;t rely with that behaviour&lt;/b&gt;.

&lt;h2&gt;Optimistic Concurrency Control&lt;/h2&gt;

This endpoint implement optimistic concurrency control to avoid race condition.
If the record has been updated since the client fetch it, the server will return HTTP status code 412 (precondition failed)
and client need to redo the operation (fetch data and do update).
Otherwise, the server will process the request.

*/
func (a *Client) AdminPutPlayerPublicRecordConcurrentHandlerV1(params *AdminPutPlayerPublicRecordConcurrentHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*AdminPutPlayerPublicRecordConcurrentHandlerV1NoContent, *AdminPutPlayerPublicRecordConcurrentHandlerV1BadRequest, *AdminPutPlayerPublicRecordConcurrentHandlerV1Unauthorized, *AdminPutPlayerPublicRecordConcurrentHandlerV1PreconditionFailed, *AdminPutPlayerPublicRecordConcurrentHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminPutPlayerPublicRecordConcurrentHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "adminPutPlayerPublicRecordConcurrentHandlerV1",
		Method:             "PUT",
		PathPattern:        "/cloudsave/v1/admin/namespaces/{namespace}/users/{userId}/concurrent/records/{key}/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminPutPlayerPublicRecordConcurrentHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminPutPlayerPublicRecordConcurrentHandlerV1NoContent:
		return v, nil, nil, nil, nil, nil

	case *AdminPutPlayerPublicRecordConcurrentHandlerV1BadRequest:
		return nil, v, nil, nil, nil, nil

	case *AdminPutPlayerPublicRecordConcurrentHandlerV1Unauthorized:
		return nil, nil, v, nil, nil, nil

	case *AdminPutPlayerPublicRecordConcurrentHandlerV1PreconditionFailed:
		return nil, nil, nil, v, nil, nil

	case *AdminPutPlayerPublicRecordConcurrentHandlerV1InternalServerError:
		return nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

func (a *Client) AdminPutPlayerPublicRecordConcurrentHandlerV1Short(params *AdminPutPlayerPublicRecordConcurrentHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*AdminPutPlayerPublicRecordConcurrentHandlerV1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminPutPlayerPublicRecordConcurrentHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "adminPutPlayerPublicRecordConcurrentHandlerV1",
		Method:             "PUT",
		PathPattern:        "/cloudsave/v1/admin/namespaces/{namespace}/users/{userId}/concurrent/records/{key}/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminPutPlayerPublicRecordConcurrentHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *AdminPutPlayerPublicRecordConcurrentHandlerV1NoContent:
		return v, nil
	case *AdminPutPlayerPublicRecordConcurrentHandlerV1BadRequest:
		return nil, v
	case *AdminPutPlayerPublicRecordConcurrentHandlerV1Unauthorized:
		return nil, v
	case *AdminPutPlayerPublicRecordConcurrentHandlerV1PreconditionFailed:
		return nil, v
	case *AdminPutPlayerPublicRecordConcurrentHandlerV1InternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
