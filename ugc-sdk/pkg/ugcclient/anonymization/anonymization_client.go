// Code generated by go-swagger; DO NOT EDIT.

package anonymization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"reflect"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new anonymization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for anonymization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AdminDeleteAllUserChannels(params *AdminDeleteAllUserChannelsParams, authInfo runtime.ClientAuthInfoWriter) (*AdminDeleteAllUserChannelsOK, *AdminDeleteAllUserChannelsUnauthorized, *AdminDeleteAllUserChannelsNotFound, *AdminDeleteAllUserChannelsInternalServerError, error)

	AdminDeleteAllUserContents(params *AdminDeleteAllUserContentsParams, authInfo runtime.ClientAuthInfoWriter) (*AdminDeleteAllUserContentsOK, *AdminDeleteAllUserContentsUnauthorized, *AdminDeleteAllUserContentsNotFound, *AdminDeleteAllUserContentsInternalServerError, error)

	AdminDeleteAllUserGroup(params *AdminDeleteAllUserGroupParams, authInfo runtime.ClientAuthInfoWriter) (*AdminDeleteAllUserGroupOK, *AdminDeleteAllUserGroupUnauthorized, *AdminDeleteAllUserGroupNotFound, *AdminDeleteAllUserGroupInternalServerError, error)

	AdminDeleteAllUserStates(params *AdminDeleteAllUserStatesParams, authInfo runtime.ClientAuthInfoWriter) (*AdminDeleteAllUserStatesOK, *AdminDeleteAllUserStatesBadRequest, *AdminDeleteAllUserStatesUnauthorized, *AdminDeleteAllUserStatesInternalServerError, error)

	DeleteAllUserChannel(params *DeleteAllUserChannelParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllUserChannelOK, *DeleteAllUserChannelUnauthorized, *DeleteAllUserChannelNotFound, *DeleteAllUserChannelInternalServerError, error)

	DeleteAllUserContents(params *DeleteAllUserContentsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllUserContentsOK, *DeleteAllUserContentsUnauthorized, *DeleteAllUserContentsNotFound, *DeleteAllUserContentsInternalServerError, error)

	DeleteAllUserGroup(params *DeleteAllUserGroupParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllUserGroupOK, *DeleteAllUserGroupUnauthorized, *DeleteAllUserGroupNotFound, *DeleteAllUserGroupInternalServerError, error)

	DeleteAllUserStates(params *DeleteAllUserStatesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllUserStatesOK, *DeleteAllUserStatesBadRequest, *DeleteAllUserStatesUnauthorized, *DeleteAllUserStatesInternalServerError, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AdminDeleteAllUserChannels deletes all user channel

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]</b>
*/
func (a *Client) AdminDeleteAllUserChannels(params *AdminDeleteAllUserChannelsParams, authInfo runtime.ClientAuthInfoWriter) (*AdminDeleteAllUserChannelsOK, *AdminDeleteAllUserChannelsUnauthorized, *AdminDeleteAllUserChannelsNotFound, *AdminDeleteAllUserChannelsInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminDeleteAllUserChannelsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminDeleteAllUserChannels",
		Method:             "DELETE",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminDeleteAllUserChannelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminDeleteAllUserChannelsOK:
		return v, nil, nil, nil, nil
	case *AdminDeleteAllUserChannelsUnauthorized:
		return nil, v, nil, nil, nil
	case *AdminDeleteAllUserChannelsNotFound:
		return nil, nil, v, nil, nil
	case *AdminDeleteAllUserChannelsInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  AdminDeleteAllUserContents deletes all user content

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]</b>.
*/
func (a *Client) AdminDeleteAllUserContents(params *AdminDeleteAllUserContentsParams, authInfo runtime.ClientAuthInfoWriter) (*AdminDeleteAllUserContentsOK, *AdminDeleteAllUserContentsUnauthorized, *AdminDeleteAllUserContentsNotFound, *AdminDeleteAllUserContentsInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminDeleteAllUserContentsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminDeleteAllUserContents",
		Method:             "DELETE",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/contents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminDeleteAllUserContentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminDeleteAllUserContentsOK:
		return v, nil, nil, nil, nil
	case *AdminDeleteAllUserContentsUnauthorized:
		return nil, v, nil, nil, nil
	case *AdminDeleteAllUserContentsNotFound:
		return nil, nil, v, nil, nil
	case *AdminDeleteAllUserContentsInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  AdminDeleteAllUserGroup deletes all user group

  Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]
*/
func (a *Client) AdminDeleteAllUserGroup(params *AdminDeleteAllUserGroupParams, authInfo runtime.ClientAuthInfoWriter) (*AdminDeleteAllUserGroupOK, *AdminDeleteAllUserGroupUnauthorized, *AdminDeleteAllUserGroupNotFound, *AdminDeleteAllUserGroupInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminDeleteAllUserGroupParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminDeleteAllUserGroup",
		Method:             "DELETE",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminDeleteAllUserGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminDeleteAllUserGroupOK:
		return v, nil, nil, nil, nil
	case *AdminDeleteAllUserGroupUnauthorized:
		return nil, v, nil, nil, nil
	case *AdminDeleteAllUserGroupNotFound:
		return nil, nil, v, nil, nil
	case *AdminDeleteAllUserGroupInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  AdminDeleteAllUserStates removes all user related state likes downloads followers following

  Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]
*/
func (a *Client) AdminDeleteAllUserStates(params *AdminDeleteAllUserStatesParams, authInfo runtime.ClientAuthInfoWriter) (*AdminDeleteAllUserStatesOK, *AdminDeleteAllUserStatesBadRequest, *AdminDeleteAllUserStatesUnauthorized, *AdminDeleteAllUserStatesInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminDeleteAllUserStatesParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminDeleteAllUserStates",
		Method:             "DELETE",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/states",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminDeleteAllUserStatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminDeleteAllUserStatesOK:
		return v, nil, nil, nil, nil
	case *AdminDeleteAllUserStatesBadRequest:
		return nil, v, nil, nil, nil
	case *AdminDeleteAllUserStatesUnauthorized:
		return nil, nil, v, nil, nil
	case *AdminDeleteAllUserStatesInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  DeleteAllUserChannel deletes all user channel

  Required permission <b>NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]</b>
*/
func (a *Client) DeleteAllUserChannel(params *DeleteAllUserChannelParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllUserChannelOK, *DeleteAllUserChannelUnauthorized, *DeleteAllUserChannelNotFound, *DeleteAllUserChannelInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllUserChannelParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAllUserChannel",
		Method:             "DELETE",
		PathPattern:        "/ugc/v1/public/namespaces/{namespace}/users/{userId}/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAllUserChannelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *DeleteAllUserChannelOK:
		return v, nil, nil, nil, nil
	case *DeleteAllUserChannelUnauthorized:
		return nil, v, nil, nil, nil
	case *DeleteAllUserChannelNotFound:
		return nil, nil, v, nil, nil
	case *DeleteAllUserChannelInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  DeleteAllUserContents deletes all user content

  Required permission <b>NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]</b>.
*/
func (a *Client) DeleteAllUserContents(params *DeleteAllUserContentsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllUserContentsOK, *DeleteAllUserContentsUnauthorized, *DeleteAllUserContentsNotFound, *DeleteAllUserContentsInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllUserContentsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAllUserContents",
		Method:             "DELETE",
		PathPattern:        "/ugc/v1/public/namespaces/{namespace}/users/{userId}/contents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAllUserContentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *DeleteAllUserContentsOK:
		return v, nil, nil, nil, nil
	case *DeleteAllUserContentsUnauthorized:
		return nil, v, nil, nil, nil
	case *DeleteAllUserContentsNotFound:
		return nil, nil, v, nil, nil
	case *DeleteAllUserContentsInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  DeleteAllUserGroup deletes all user group

  Required permission NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]
*/
func (a *Client) DeleteAllUserGroup(params *DeleteAllUserGroupParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllUserGroupOK, *DeleteAllUserGroupUnauthorized, *DeleteAllUserGroupNotFound, *DeleteAllUserGroupInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllUserGroupParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAllUserGroup",
		Method:             "DELETE",
		PathPattern:        "/ugc/v1/public/namespaces/{namespace}/users/{userId}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAllUserGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *DeleteAllUserGroupOK:
		return v, nil, nil, nil, nil
	case *DeleteAllUserGroupUnauthorized:
		return nil, v, nil, nil, nil
	case *DeleteAllUserGroupNotFound:
		return nil, nil, v, nil, nil
	case *DeleteAllUserGroupInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  DeleteAllUserStates removes all user related state likes downloads followers following

  Required permission NAMESPACE:{namespace}:USER:{userId}" [DELETE]
*/
func (a *Client) DeleteAllUserStates(params *DeleteAllUserStatesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllUserStatesOK, *DeleteAllUserStatesBadRequest, *DeleteAllUserStatesUnauthorized, *DeleteAllUserStatesInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllUserStatesParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAllUserStates",
		Method:             "DELETE",
		PathPattern:        "/ugc/v1/public/namespaces/{namespace}/users/{userId}/states",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAllUserStatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *DeleteAllUserStatesOK:
		return v, nil, nil, nil, nil
	case *DeleteAllUserStatesBadRequest:
		return nil, v, nil, nil, nil
	case *DeleteAllUserStatesUnauthorized:
		return nil, nil, v, nil, nil
	case *DeleteAllUserStatesInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
