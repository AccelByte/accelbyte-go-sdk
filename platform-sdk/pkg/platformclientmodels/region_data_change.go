// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegionDataChange region data change
//
// swagger:model RegionDataChange
type RegionDataChange struct {

	// item identities
	ItemIdentities []string `json:"itemIdentities"`

	// Item Identity Type
	// Required: true
	// Enum: [ITEM_ID ITEM_SKU]
	ItemIdentityType *string `json:"itemIdentityType"`

	// region data map, key is region, value is region data list (This map will override existing keys instead of entire map)
	RegionData map[string][]RegionDataItem `json:"regionData,omitempty"`
}

// Validate validates this region data change
func (m *RegionDataChange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItemIdentityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var regionDataChangeTypeItemIdentityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ITEM_ID","ITEM_SKU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		regionDataChangeTypeItemIdentityTypePropEnum = append(regionDataChangeTypeItemIdentityTypePropEnum, v)
	}
}

const (

	// RegionDataChangeItemIdentityTypeITEMID captures enum value "ITEM_ID"
	RegionDataChangeItemIdentityTypeITEMID string = "ITEM_ID"

	// RegionDataChangeItemIdentityTypeITEMSKU captures enum value "ITEM_SKU"
	RegionDataChangeItemIdentityTypeITEMSKU string = "ITEM_SKU"
)

// prop value enum
func (m *RegionDataChange) validateItemIdentityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, regionDataChangeTypeItemIdentityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegionDataChange) validateItemIdentityType(formats strfmt.Registry) error {

	if err := validate.Required("itemIdentityType", "body", m.ItemIdentityType); err != nil {
		return err
	}

	// value enum
	if err := m.validateItemIdentityTypeEnum("itemIdentityType", "body", *m.ItemIdentityType); err != nil {
		return err
	}

	return nil
}

func (m *RegionDataChange) validateRegionData(formats strfmt.Registry) error {

	if swag.IsZero(m.RegionData) { // not required
		return nil
	}

	for k := range m.RegionData {

		if err := validate.Required("regionData"+"."+k, "body", m.RegionData[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.RegionData[k]); i++ {

			if err := m.RegionData[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regionData" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegionDataChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegionDataChange) UnmarshalBinary(b []byte) error {
	var res RegionDataChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
