// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/sessionbrowser-sdk/pkg/sessionbrowserclientmodels"
)

// QuerySessionReader is a Reader for the QuerySession structure.
type QuerySessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QuerySessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQuerySessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQuerySessionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewQuerySessionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /sessionbrowser/namespaces/{namespace}/gamesession returns an error %d: %s", response.Code(), string(data))
	}
}

// NewQuerySessionOK creates a QuerySessionOK with default headers values
func NewQuerySessionOK() *QuerySessionOK {
	return &QuerySessionOK{}
}

/*QuerySessionOK handles this case with default header values.

  session get
*/
type QuerySessionOK struct {
	Payload *sessionbrowserclientmodels.ModelsSessionQueryResponse
}

func (o *QuerySessionOK) Error() string {
	return fmt.Sprintf("[GET /sessionbrowser/namespaces/{namespace}/gamesession][%d] querySessionOK  %+v", 200, o.Payload)
}

func (o *QuerySessionOK) GetPayload() *sessionbrowserclientmodels.ModelsSessionQueryResponse {
	return o.Payload
}

func (o *QuerySessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(sessionbrowserclientmodels.ModelsSessionQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQuerySessionBadRequest creates a QuerySessionBadRequest with default headers values
func NewQuerySessionBadRequest() *QuerySessionBadRequest {
	return &QuerySessionBadRequest{}
}

/*QuerySessionBadRequest handles this case with default header values.

  malformed request
*/
type QuerySessionBadRequest struct {
	Payload *sessionbrowserclientmodels.ResponseError
}

func (o *QuerySessionBadRequest) Error() string {
	return fmt.Sprintf("[GET /sessionbrowser/namespaces/{namespace}/gamesession][%d] querySessionBadRequest  %+v", 400, o.Payload)
}

func (o *QuerySessionBadRequest) GetPayload() *sessionbrowserclientmodels.ResponseError {
	return o.Payload
}

func (o *QuerySessionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(sessionbrowserclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQuerySessionInternalServerError creates a QuerySessionInternalServerError with default headers values
func NewQuerySessionInternalServerError() *QuerySessionInternalServerError {
	return &QuerySessionInternalServerError{}
}

/*QuerySessionInternalServerError handles this case with default header values.

  Internal Server Error
*/
type QuerySessionInternalServerError struct {
	Payload *sessionbrowserclientmodels.ResponseError
}

func (o *QuerySessionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sessionbrowser/namespaces/{namespace}/gamesession][%d] querySessionInternalServerError  %+v", 500, o.Payload)
}

func (o *QuerySessionInternalServerError) GetPayload() *sessionbrowserclientmodels.ResponseError {
	return o.Payload
}

func (o *QuerySessionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(sessionbrowserclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
