// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclientmodels"
)

// PublicListStoresReader is a Reader for the PublicListStores structure.
type PublicListStoresReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PublicListStoresReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPublicListStoresOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /platform/public/namespaces/{namespace}/stores returns an error %d: %s", response.Code(), string(data))
	}
}

// NewPublicListStoresOK creates a PublicListStoresOK with default headers values
func NewPublicListStoresOK() *PublicListStoresOK {
	return &PublicListStoresOK{}
}

/*PublicListStoresOK handles this case with default header values.

  successful operation
*/
type PublicListStoresOK struct {
	Payload []*platformclientmodels.StoreInfo
}

func (o *PublicListStoresOK) Error() string {
	return fmt.Sprintf("[GET /platform/public/namespaces/{namespace}/stores][%d] publicListStoresOK  %+v", 200, o.ToString())
}

func (o *PublicListStoresOK) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *PublicListStoresOK) GetPayload() []*platformclientmodels.StoreInfo {
	return o.Payload
}

func (o *PublicListStoresOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
