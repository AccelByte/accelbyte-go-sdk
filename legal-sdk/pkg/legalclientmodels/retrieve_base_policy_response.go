// Code generated by go-swagger; DO NOT EDIT.

package legalclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RetrieveBasePolicyResponse retrieve base policy response
//
// swagger:model RetrieveBasePolicyResponse
type RetrieveBasePolicyResponse struct {

	// affected client ids
	// Unique: true
	AffectedClientIds []string `json:"affectedClientIds"`

	// base policy name
	// Required: true
	BasePolicyName *string `json:"basePolicyName"`

	// created at
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// policies
	Policies []*PolicyObject `json:"policies"`

	// policy type Id
	// Read Only: true
	PolicyTypeID string `json:"policyTypeId,omitempty"`

	// policy type name
	// Read Only: true
	PolicyTypeName string `json:"policyTypeName,omitempty"`

	// tags
	// Unique: true
	Tags []string `json:"tags"`

	// updated at
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this retrieve base policy response
func (m *RetrieveBasePolicyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffectedClientIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBasePolicyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrieveBasePolicyResponse) validateAffectedClientIds(formats strfmt.Registry) error {

	if swag.IsZero(m.AffectedClientIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("affectedClientIds", "body", m.AffectedClientIds); err != nil {
		return err
	}

	return nil
}

func (m *RetrieveBasePolicyResponse) validateBasePolicyName(formats strfmt.Registry) error {

	if err := validate.Required("basePolicyName", "body", m.BasePolicyName); err != nil {
		return err
	}

	return nil
}

func (m *RetrieveBasePolicyResponse) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RetrieveBasePolicyResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RetrieveBasePolicyResponse) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *RetrieveBasePolicyResponse) validatePolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	for i := 0; i < len(m.Policies); i++ {
		if swag.IsZero(m.Policies[i]) { // not required
			continue
		}

		if m.Policies[i] != nil {
			if err := m.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RetrieveBasePolicyResponse) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := validate.UniqueItems("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

func (m *RetrieveBasePolicyResponse) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RetrieveBasePolicyResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetrieveBasePolicyResponse) UnmarshalBinary(b []byte) error {
	var res RetrieveBasePolicyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
