// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new server API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeregisterLocalServer(params *DeregisterLocalServerParams, authInfo runtime.ClientAuthInfoWriter) (*DeregisterLocalServerNoContent, error)

	GetServerSession(params *GetServerSessionParams, authInfo runtime.ClientAuthInfoWriter) (*GetServerSessionOK, error)

	RegisterLocalServer(params *RegisterLocalServerParams, authInfo runtime.ClientAuthInfoWriter) (*RegisterLocalServerOK, error)

	RegisterServer(params *RegisterServerParams, authInfo runtime.ClientAuthInfoWriter) (*RegisterServerOK, error)

	ShutdownServer(params *ShutdownServerParams, authInfo runtime.ClientAuthInfoWriter) (*ShutdownServerNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeregisterLocalServer deregisters local d s

  ```
Required permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]
Required scope: social

This endpoint is intended to be called by local dedicated server
to let DSM know that it is shutting down.

Calling this will remove the server records from DB.```
*/
func (a *Client) DeregisterLocalServer(params *DeregisterLocalServerParams, authInfo runtime.ClientAuthInfoWriter) (*DeregisterLocalServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeregisterLocalServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeregisterLocalServer",
		Method:             "POST",
		PathPattern:        "/dsmcontroller/namespaces/{namespace}/servers/local/deregister",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeregisterLocalServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeregisterLocalServerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeregisterLocalServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServerSession gets session ID

  ```
Required permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]
Required scope: social

This endpoint is intended to be called by dedicated server
to query its session ID.
DS should call this when it first receive player connection,
to see if it is actually claimed```
*/
func (a *Client) GetServerSession(params *GetServerSessionParams, authInfo runtime.ClientAuthInfoWriter) (*GetServerSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServerSession",
		Method:             "GET",
		PathPattern:        "/dsmcontroller/namespaces/{namespace}/servers/{podName}/session",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetServerSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RegisterLocalServer registers a local d s

  ```
Required permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]
Required scope: social

Use the alternative GET of the same endpoint to upgrade DS connection to DSM via websocket.

This endpoint is intended to be called by local dedicated server to let DSM know that it is ready for use.
Use local DS only for development purposes since DSM wouldn't be able to properly manage local DS in production.
This MUST be called by DS after it is ready to accept match data and incoming client connections.

Upon successfully calling this endpoint, the dedicated
server is listed under READY local servers.```
*/
func (a *Client) RegisterLocalServer(params *RegisterLocalServerParams, authInfo runtime.ClientAuthInfoWriter) (*RegisterLocalServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterLocalServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RegisterLocalServer",
		Method:             "POST",
		PathPattern:        "/dsmcontroller/namespaces/{namespace}/servers/local/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterLocalServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterLocalServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RegisterLocalServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RegisterServer registers a d s

  ```
Required permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]
Required scope: social

This endpoint is intended to be called by dedicated server to let DSM know that it is ready for use.
This MUST be called by DS after it is ready to accept match data and incoming client connections.

Upon successfully calling this endpoint, the dedicated
server is listed under READY servers.```
*/
func (a *Client) RegisterServer(params *RegisterServerParams, authInfo runtime.ClientAuthInfoWriter) (*RegisterServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RegisterServer",
		Method:             "POST",
		PathPattern:        "/dsmcontroller/namespaces/{namespace}/servers/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RegisterServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShutdownServer marks a d s is shutting down

  Required permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]

Required scope: social

This endpoint is intended to be called by dedicated server to let DSM know that it is shutting down. Calling this will remove the server and session records from DB.Set 'kill_me' in request to 'true' if the DS cannot shut itself down.
*/
func (a *Client) ShutdownServer(params *ShutdownServerParams, authInfo runtime.ClientAuthInfoWriter) (*ShutdownServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShutdownServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShutdownServer",
		Method:             "POST",
		PathPattern:        "/dsmcontroller/namespaces/{namespace}/servers/shutdown",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShutdownServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShutdownServerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShutdownServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
