// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package matchmaking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/matchmaking-sdk/pkg/matchmakingclientmodels"
)

// DeleteChannelHandlerReader is a Reader for the DeleteChannelHandler structure.
type DeleteChannelHandlerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteChannelHandlerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteChannelHandlerNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteChannelHandlerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteChannelHandlerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewDeleteChannelHandlerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested DELETE /matchmaking/namespaces/{namespace}/channels/{channel} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewDeleteChannelHandlerNoContent creates a DeleteChannelHandlerNoContent with default headers values
func NewDeleteChannelHandlerNoContent() *DeleteChannelHandlerNoContent {
	return &DeleteChannelHandlerNoContent{}
}

/*DeleteChannelHandlerNoContent handles this case with default header values.

  No Content
*/
type DeleteChannelHandlerNoContent struct {
}

func (o *DeleteChannelHandlerNoContent) Error() string {
	return fmt.Sprintf("[DELETE /matchmaking/namespaces/{namespace}/channels/{channel}][%d] deleteChannelHandlerNoContent ", 204)
}

func (o *DeleteChannelHandlerNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteChannelHandlerUnauthorized creates a DeleteChannelHandlerUnauthorized with default headers values
func NewDeleteChannelHandlerUnauthorized() *DeleteChannelHandlerUnauthorized {
	return &DeleteChannelHandlerUnauthorized{}
}

/*DeleteChannelHandlerUnauthorized handles this case with default header values.

  Unauthorized
*/
type DeleteChannelHandlerUnauthorized struct {
	Payload *matchmakingclientmodels.ResponseError
}

func (o *DeleteChannelHandlerUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /matchmaking/namespaces/{namespace}/channels/{channel}][%d] deleteChannelHandlerUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteChannelHandlerUnauthorized) GetPayload() *matchmakingclientmodels.ResponseError {
	return o.Payload
}

func (o *DeleteChannelHandlerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(matchmakingclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteChannelHandlerForbidden creates a DeleteChannelHandlerForbidden with default headers values
func NewDeleteChannelHandlerForbidden() *DeleteChannelHandlerForbidden {
	return &DeleteChannelHandlerForbidden{}
}

/*DeleteChannelHandlerForbidden handles this case with default header values.

  Forbidden
*/
type DeleteChannelHandlerForbidden struct {
	Payload *matchmakingclientmodels.ResponseError
}

func (o *DeleteChannelHandlerForbidden) Error() string {
	return fmt.Sprintf("[DELETE /matchmaking/namespaces/{namespace}/channels/{channel}][%d] deleteChannelHandlerForbidden  %+v", 403, o.Payload)
}

func (o *DeleteChannelHandlerForbidden) GetPayload() *matchmakingclientmodels.ResponseError {
	return o.Payload
}

func (o *DeleteChannelHandlerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(matchmakingclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteChannelHandlerInternalServerError creates a DeleteChannelHandlerInternalServerError with default headers values
func NewDeleteChannelHandlerInternalServerError() *DeleteChannelHandlerInternalServerError {
	return &DeleteChannelHandlerInternalServerError{}
}

/*DeleteChannelHandlerInternalServerError handles this case with default header values.

  Internal Server Error
*/
type DeleteChannelHandlerInternalServerError struct {
	Payload *matchmakingclientmodels.ResponseError
}

func (o *DeleteChannelHandlerInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /matchmaking/namespaces/{namespace}/channels/{channel}][%d] deleteChannelHandlerInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteChannelHandlerInternalServerError) GetPayload() *matchmakingclientmodels.ResponseError {
	return o.Payload
}

func (o *DeleteChannelHandlerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(matchmakingclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
