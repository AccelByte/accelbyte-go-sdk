// Code generated by go-swagger; DO NOT EDIT.

package namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/basic-sdk/pkg/basicclientmodels"
)

// ChangeNamespaceStatusReader is a Reader for the ChangeNamespaceStatus structure.
type ChangeNamespaceStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangeNamespaceStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChangeNamespaceStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewChangeNamespaceStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewChangeNamespaceStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewChangeNamespaceStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewChangeNamespaceStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewChangeNamespaceStatusConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PATCH /v1/admin/namespaces/{namespace}/status returns an error %d: %s", response.Code(), string(data))
	}
}

// NewChangeNamespaceStatusOK creates a ChangeNamespaceStatusOK with default headers values
func NewChangeNamespaceStatusOK() *ChangeNamespaceStatusOK {
	return &ChangeNamespaceStatusOK{}
}

/*ChangeNamespaceStatusOK handles this case with default header values.

  Successful operation
*/
type ChangeNamespaceStatusOK struct {
	Payload *basicclientmodels.NamespaceInfo
}

func (o *ChangeNamespaceStatusOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/admin/namespaces/{namespace}/status][%d] changeNamespaceStatusOK  %+v", 200, o.Payload)
}

func (o *ChangeNamespaceStatusOK) GetPayload() *basicclientmodels.NamespaceInfo {
	return o.Payload
}

func (o *ChangeNamespaceStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.NamespaceInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeNamespaceStatusBadRequest creates a ChangeNamespaceStatusBadRequest with default headers values
func NewChangeNamespaceStatusBadRequest() *ChangeNamespaceStatusBadRequest {
	return &ChangeNamespaceStatusBadRequest{}
}

/*ChangeNamespaceStatusBadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>
*/
type ChangeNamespaceStatusBadRequest struct {
	Payload *basicclientmodels.ValidationErrorEntity
}

func (o *ChangeNamespaceStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/admin/namespaces/{namespace}/status][%d] changeNamespaceStatusBadRequest  %+v", 400, o.Payload)
}

func (o *ChangeNamespaceStatusBadRequest) GetPayload() *basicclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *ChangeNamespaceStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeNamespaceStatusUnauthorized creates a ChangeNamespaceStatusUnauthorized with default headers values
func NewChangeNamespaceStatusUnauthorized() *ChangeNamespaceStatusUnauthorized {
	return &ChangeNamespaceStatusUnauthorized{}
}

/*ChangeNamespaceStatusUnauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>
*/
type ChangeNamespaceStatusUnauthorized struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *ChangeNamespaceStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/admin/namespaces/{namespace}/status][%d] changeNamespaceStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *ChangeNamespaceStatusUnauthorized) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *ChangeNamespaceStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeNamespaceStatusForbidden creates a ChangeNamespaceStatusForbidden with default headers values
func NewChangeNamespaceStatusForbidden() *ChangeNamespaceStatusForbidden {
	return &ChangeNamespaceStatusForbidden{}
}

/*ChangeNamespaceStatusForbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>
*/
type ChangeNamespaceStatusForbidden struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *ChangeNamespaceStatusForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/admin/namespaces/{namespace}/status][%d] changeNamespaceStatusForbidden  %+v", 403, o.Payload)
}

func (o *ChangeNamespaceStatusForbidden) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *ChangeNamespaceStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeNamespaceStatusNotFound creates a ChangeNamespaceStatusNotFound with default headers values
func NewChangeNamespaceStatusNotFound() *ChangeNamespaceStatusNotFound {
	return &ChangeNamespaceStatusNotFound{}
}

/*ChangeNamespaceStatusNotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11337</td><td>Unable to {action}: Namespace not found</td></tr></table>
*/
type ChangeNamespaceStatusNotFound struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *ChangeNamespaceStatusNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/admin/namespaces/{namespace}/status][%d] changeNamespaceStatusNotFound  %+v", 404, o.Payload)
}

func (o *ChangeNamespaceStatusNotFound) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *ChangeNamespaceStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeNamespaceStatusConflict creates a ChangeNamespaceStatusConflict with default headers values
func NewChangeNamespaceStatusConflict() *ChangeNamespaceStatusConflict {
	return &ChangeNamespaceStatusConflict{}
}

/*ChangeNamespaceStatusConflict handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>
*/
type ChangeNamespaceStatusConflict struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *ChangeNamespaceStatusConflict) Error() string {
	return fmt.Sprintf("[PATCH /v1/admin/namespaces/{namespace}/status][%d] changeNamespaceStatusConflict  %+v", 409, o.Payload)
}

func (o *ChangeNamespaceStatusConflict) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *ChangeNamespaceStatusConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
