// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItemRevocation item revocation
//
// swagger:model ItemRevocation
type ItemRevocation struct {

	// credit revocations
	CreditRevocations []*CreditRevocation `json:"creditRevocations"`

	// entitlement revocations
	EntitlementRevocations []*EntitlementRevocation `json:"entitlementRevocations"`

	// item Id
	ItemID string `json:"itemId,omitempty"`

	// item revocations
	ItemRevocations []*ItemRevocation `json:"itemRevocations"`

	// item sku
	ItemSku string `json:"itemSku,omitempty"`

	// item type
	// Enum: [APP BUNDLE CODE COINS EXTENSION INGAMEITEM LOOTBOX MEDIA OPTIONBOX SEASON SUBSCRIPTION]
	ItemType string `json:"itemType,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`

	// skipped
	Skipped bool `json:"skipped"`

	// status
	// Enum: [FAIL SUCCESS]
	Status string `json:"status,omitempty"`
}

// Validate validates this item revocation
func (m *ItemRevocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreditRevocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntitlementRevocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemRevocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemRevocation) validateCreditRevocations(formats strfmt.Registry) error {

	if swag.IsZero(m.CreditRevocations) { // not required
		return nil
	}

	for i := 0; i < len(m.CreditRevocations); i++ {
		if swag.IsZero(m.CreditRevocations[i]) { // not required
			continue
		}

		if m.CreditRevocations[i] != nil {
			if err := m.CreditRevocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("creditRevocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemRevocation) validateEntitlementRevocations(formats strfmt.Registry) error {

	if swag.IsZero(m.EntitlementRevocations) { // not required
		return nil
	}

	for i := 0; i < len(m.EntitlementRevocations); i++ {
		if swag.IsZero(m.EntitlementRevocations[i]) { // not required
			continue
		}

		if m.EntitlementRevocations[i] != nil {
			if err := m.EntitlementRevocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entitlementRevocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemRevocation) validateItemRevocations(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemRevocations) { // not required
		return nil
	}

	for i := 0; i < len(m.ItemRevocations); i++ {
		if swag.IsZero(m.ItemRevocations[i]) { // not required
			continue
		}

		if m.ItemRevocations[i] != nil {
			if err := m.ItemRevocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("itemRevocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var itemRevocationTypeItemTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["APP","BUNDLE","CODE","COINS","EXTENSION","INGAMEITEM","LOOTBOX","MEDIA","OPTIONBOX","SEASON","SUBSCRIPTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itemRevocationTypeItemTypePropEnum = append(itemRevocationTypeItemTypePropEnum, v)
	}
}

const (

	// ItemRevocationItemTypeAPP captures enum value "APP"
	ItemRevocationItemTypeAPP string = "APP"

	// ItemRevocationItemTypeBUNDLE captures enum value "BUNDLE"
	ItemRevocationItemTypeBUNDLE string = "BUNDLE"

	// ItemRevocationItemTypeCODE captures enum value "CODE"
	ItemRevocationItemTypeCODE string = "CODE"

	// ItemRevocationItemTypeCOINS captures enum value "COINS"
	ItemRevocationItemTypeCOINS string = "COINS"

	// ItemRevocationItemTypeEXTENSION captures enum value "EXTENSION"
	ItemRevocationItemTypeEXTENSION string = "EXTENSION"

	// ItemRevocationItemTypeINGAMEITEM captures enum value "INGAMEITEM"
	ItemRevocationItemTypeINGAMEITEM string = "INGAMEITEM"

	// ItemRevocationItemTypeLOOTBOX captures enum value "LOOTBOX"
	ItemRevocationItemTypeLOOTBOX string = "LOOTBOX"

	// ItemRevocationItemTypeMEDIA captures enum value "MEDIA"
	ItemRevocationItemTypeMEDIA string = "MEDIA"

	// ItemRevocationItemTypeOPTIONBOX captures enum value "OPTIONBOX"
	ItemRevocationItemTypeOPTIONBOX string = "OPTIONBOX"

	// ItemRevocationItemTypeSEASON captures enum value "SEASON"
	ItemRevocationItemTypeSEASON string = "SEASON"

	// ItemRevocationItemTypeSUBSCRIPTION captures enum value "SUBSCRIPTION"
	ItemRevocationItemTypeSUBSCRIPTION string = "SUBSCRIPTION"
)

// prop value enum
func (m *ItemRevocation) validateItemTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itemRevocationTypeItemTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItemRevocation) validateItemType(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemType) { // not required
		return nil
	}

	// value enum
	if err := m.validateItemTypeEnum("itemType", "body", m.ItemType); err != nil {
		return err
	}

	return nil
}

var itemRevocationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FAIL","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itemRevocationTypeStatusPropEnum = append(itemRevocationTypeStatusPropEnum, v)
	}
}

const (

	// ItemRevocationStatusFAIL captures enum value "FAIL"
	ItemRevocationStatusFAIL string = "FAIL"

	// ItemRevocationStatusSUCCESS captures enum value "SUCCESS"
	ItemRevocationStatusSUCCESS string = "SUCCESS"
)

// prop value enum
func (m *ItemRevocation) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itemRevocationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItemRevocation) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItemRevocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemRevocation) UnmarshalBinary(b []byte) error {
	var res ItemRevocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
