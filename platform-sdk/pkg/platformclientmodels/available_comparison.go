// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AvailableComparison available comparison object
//
// swagger:model AvailableComparison
type AvailableComparison struct {

	// available comparison
	// Enum: [excludes includes is isGreaterThan isGreaterThanOrEqual isLessThan isLessThanOrEqual isNot]
	Comparison string `json:"comparison,omitempty"`

	// comparison text
	Text string `json:"text,omitempty"`
}

// Validate validates this available comparison
func (m *AvailableComparison) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComparison(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var availableComparisonTypeComparisonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["excludes","includes","is","isGreaterThan","isGreaterThanOrEqual","isLessThan","isLessThanOrEqual","isNot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		availableComparisonTypeComparisonPropEnum = append(availableComparisonTypeComparisonPropEnum, v)
	}
}

const (

	// AvailableComparisonComparisonExcludes captures enum value "excludes"
	AvailableComparisonComparisonExcludes string = "excludes"

	// AvailableComparisonComparisonIncludes captures enum value "includes"
	AvailableComparisonComparisonIncludes string = "includes"

	// AvailableComparisonComparisonIs captures enum value "is"
	AvailableComparisonComparisonIs string = "is"

	// AvailableComparisonComparisonIsGreaterThan captures enum value "isGreaterThan"
	AvailableComparisonComparisonIsGreaterThan string = "isGreaterThan"

	// AvailableComparisonComparisonIsGreaterThanOrEqual captures enum value "isGreaterThanOrEqual"
	AvailableComparisonComparisonIsGreaterThanOrEqual string = "isGreaterThanOrEqual"

	// AvailableComparisonComparisonIsLessThan captures enum value "isLessThan"
	AvailableComparisonComparisonIsLessThan string = "isLessThan"

	// AvailableComparisonComparisonIsLessThanOrEqual captures enum value "isLessThanOrEqual"
	AvailableComparisonComparisonIsLessThanOrEqual string = "isLessThanOrEqual"

	// AvailableComparisonComparisonIsNot captures enum value "isNot"
	AvailableComparisonComparisonIsNot string = "isNot"
)

// prop value enum
func (m *AvailableComparison) validateComparisonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, availableComparisonTypeComparisonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AvailableComparison) validateComparison(formats strfmt.Registry) error {

	if swag.IsZero(m.Comparison) { // not required
		return nil
	}

	// value enum
	if err := m.validateComparisonEnum("comparison", "body", m.Comparison); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AvailableComparison) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AvailableComparison) UnmarshalBinary(b []byte) error {
	var res AvailableComparison
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
