// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_script

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"reflect"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new fulfillment script API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fulfillment script API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateFulfillmentScript(params *CreateFulfillmentScriptParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFulfillmentScriptCreated, *CreateFulfillmentScriptConflict, error)

	DeleteFulfillmentScript(params *DeleteFulfillmentScriptParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFulfillmentScriptNoContent, error)

	GetFulfillmentScript(params *GetFulfillmentScriptParams, authInfo runtime.ClientAuthInfoWriter) (*GetFulfillmentScriptOK, *GetFulfillmentScriptNotFound, error)

	ListFulfillmentScripts(params *ListFulfillmentScriptsParams, authInfo runtime.ClientAuthInfoWriter) (*ListFulfillmentScriptsOK, error)

	TestFulfillmentScriptEval(params *TestFulfillmentScriptEvalParams, authInfo runtime.ClientAuthInfoWriter) (*TestFulfillmentScriptEvalOK, error)

	UpdateFulfillmentScript(params *UpdateFulfillmentScriptParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFulfillmentScriptOK, *UpdateFulfillmentScriptBadRequest, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateFulfillmentScript creates fulfillment script

  Create fulfillment script.<br>Other detail info: <ul><li><i>Required permission</i>: resource="ADMIN:FULFILLMENT", action=1 (CREATE)</li></ul>Fulfillment scripts are used for adding custom fulfillment logic based on <b>ITEM_TYPE</b>: [MEDIA,INGAMEITEM] for now, and the custom scripts only cover grantDays.<br>Example for grantDays: <br><code>order && ((order.currency && order.currency.currencyCode) == 'LP' || order.isFree) ? 30 : -1</code><br>
*/
func (a *Client) CreateFulfillmentScript(params *CreateFulfillmentScriptParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFulfillmentScriptCreated, *CreateFulfillmentScriptConflict, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFulfillmentScriptParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFulfillmentScript",
		Method:             "POST",
		PathPattern:        "/admin/fulfillment/scripts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFulfillmentScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *CreateFulfillmentScriptCreated:
		return v, nil, nil
	case *CreateFulfillmentScriptConflict:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  DeleteFulfillmentScript deletes fulfillment script

  Delete fulfillment script.<br>Other detail info: <ul><li><i>Required permission</i>: resource="ADMIN:FULFILLMENT", action=8 (DELETE)</li></ul>
*/
func (a *Client) DeleteFulfillmentScript(params *DeleteFulfillmentScriptParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFulfillmentScriptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFulfillmentScriptParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFulfillmentScript",
		Method:             "DELETE",
		PathPattern:        "/admin/fulfillment/scripts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFulfillmentScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *DeleteFulfillmentScriptNoContent:
		return v, nil
	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  GetFulfillmentScript gets fulfillment script by id

  Get fulfillment script by id.<br>Other detail info: <ul><li><i>Required permission</i>: resource="ADMIN:FULFILLMENT", action=2 (READ)</li><li><i>Returns</i>: get fulfillment script</li></ul>
*/
func (a *Client) GetFulfillmentScript(params *GetFulfillmentScriptParams, authInfo runtime.ClientAuthInfoWriter) (*GetFulfillmentScriptOK, *GetFulfillmentScriptNotFound, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFulfillmentScriptParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFulfillmentScript",
		Method:             "GET",
		PathPattern:        "/admin/fulfillment/scripts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFulfillmentScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *GetFulfillmentScriptOK:
		return v, nil, nil
	case *GetFulfillmentScriptNotFound:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  ListFulfillmentScripts lists all fulfillment scripts

  List all fulfillment scripts.<br>Other detail info: <ul><li><i>Required permission</i>: resource="ADMIN:FULFILLMENT", action=2 (READ)</li></ul>
*/
func (a *Client) ListFulfillmentScripts(params *ListFulfillmentScriptsParams, authInfo runtime.ClientAuthInfoWriter) (*ListFulfillmentScriptsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFulfillmentScriptsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listFulfillmentScripts",
		Method:             "GET",
		PathPattern:        "/admin/fulfillment/scripts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListFulfillmentScriptsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *ListFulfillmentScriptsOK:
		return v, nil
	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  TestFulfillmentScriptEval tests eval fulfillment script

  <b>[TEST FACILITY ONLY]</b>Test eval fulfillment script.<br>Other detail info: <ul><li><i>Required permission</i>: resource="ADMIN:FULFILLMENT", action=2 (READ)</li></ul>
*/
func (a *Client) TestFulfillmentScriptEval(params *TestFulfillmentScriptEvalParams, authInfo runtime.ClientAuthInfoWriter) (*TestFulfillmentScriptEvalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestFulfillmentScriptEvalParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testFulfillmentScriptEval",
		Method:             "POST",
		PathPattern:        "/admin/fulfillment/scripts/tests/eval",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestFulfillmentScriptEvalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *TestFulfillmentScriptEvalOK:
		return v, nil
	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  UpdateFulfillmentScript updates fulfillment script

  Update fulfillment script.<br>Other detail info: <ul><li><i>Required permission</i>: resource="ADMIN:FULFILLMENT", action=4 (UPDATE)</li></ul>
*/
func (a *Client) UpdateFulfillmentScript(params *UpdateFulfillmentScriptParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFulfillmentScriptOK, *UpdateFulfillmentScriptBadRequest, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFulfillmentScriptParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateFulfillmentScript",
		Method:             "PATCH",
		PathPattern:        "/admin/fulfillment/scripts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFulfillmentScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *UpdateFulfillmentScriptOK:
		return v, nil, nil
	case *UpdateFulfillmentScriptBadRequest:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
