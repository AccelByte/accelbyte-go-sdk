// Code generated by go-swagger; DO NOT EDIT.

package friends

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"reflect"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new friends API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for friends API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddFriendsWithoutConfirmation(params *AddFriendsWithoutConfirmationParams, authInfo runtime.ClientAuthInfoWriter) (*AddFriendsWithoutConfirmationNoContent, *AddFriendsWithoutConfirmationBadRequest, *AddFriendsWithoutConfirmationUnauthorized, *AddFriendsWithoutConfirmationForbidden, *AddFriendsWithoutConfirmationInternalServerError, error)

	GetListOfFriends(params *GetListOfFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetListOfFriendsOK, *GetListOfFriendsBadRequest, *GetListOfFriendsUnauthorized, *GetListOfFriendsForbidden, *GetListOfFriendsInternalServerError, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddFriendsWithoutConfirmation adds friends without confirmation

  Required permission : <code>NAMESPACE:{namespace}:USER:{userId}:FRIENDS [CREATE]</code> with scope <code>social</code>
			<br>friends request in a namespace.
*/
func (a *Client) AddFriendsWithoutConfirmation(params *AddFriendsWithoutConfirmationParams, authInfo runtime.ClientAuthInfoWriter) (*AddFriendsWithoutConfirmationNoContent, *AddFriendsWithoutConfirmationBadRequest, *AddFriendsWithoutConfirmationUnauthorized, *AddFriendsWithoutConfirmationForbidden, *AddFriendsWithoutConfirmationInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFriendsWithoutConfirmationParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addFriendsWithoutConfirmation",
		Method:             "POST",
		PathPattern:        "/friends/namespaces/{namespace}/users/{userId}/add/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddFriendsWithoutConfirmationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AddFriendsWithoutConfirmationNoContent:
		return v, nil, nil, nil, nil, nil
	case *AddFriendsWithoutConfirmationBadRequest:
		return nil, v, nil, nil, nil, nil
	case *AddFriendsWithoutConfirmationUnauthorized:
		return nil, nil, v, nil, nil, nil
	case *AddFriendsWithoutConfirmationForbidden:
		return nil, nil, nil, v, nil, nil
	case *AddFriendsWithoutConfirmationInternalServerError:
		return nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  GetListOfFriends gets list of friends

  Required permission : <code>NAMESPACE:{namespace}:USER:{userId}:FRIENDS [READ]</code> with scope <code>social</code>
<br>get list of friends in a namespace.
*/
func (a *Client) GetListOfFriends(params *GetListOfFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetListOfFriendsOK, *GetListOfFriendsBadRequest, *GetListOfFriendsUnauthorized, *GetListOfFriendsForbidden, *GetListOfFriendsInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListOfFriendsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get list of friends",
		Method:             "GET",
		PathPattern:        "/lobby/v1/admin/friend/namespaces/{namespace}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetListOfFriendsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetListOfFriendsOK:
		return v, nil, nil, nil, nil, nil
	case *GetListOfFriendsBadRequest:
		return nil, v, nil, nil, nil, nil
	case *GetListOfFriendsUnauthorized:
		return nil, nil, v, nil, nil, nil
	case *GetListOfFriendsForbidden:
		return nil, nil, nil, v, nil, nil
	case *GetListOfFriendsInternalServerError:
		return nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
