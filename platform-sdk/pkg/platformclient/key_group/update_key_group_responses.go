// Code generated by go-swagger; DO NOT EDIT.

package key_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclientmodels"
)

// UpdateKeyGroupReader is a Reader for the UpdateKeyGroup structure.
type UpdateKeyGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateKeyGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateKeyGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdateKeyGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewUpdateKeyGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewUpdateKeyGroupUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PUT /admin/namespaces/{namespace}/keygroups/{keyGroupId} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewUpdateKeyGroupOK creates a UpdateKeyGroupOK with default headers values
func NewUpdateKeyGroupOK() *UpdateKeyGroupOK {
	return &UpdateKeyGroupOK{}
}

/*UpdateKeyGroupOK handles this case with default header values.

  successful operation
*/
type UpdateKeyGroupOK struct {
	Payload *platformclientmodels.KeyGroupInfo
}

func (o *UpdateKeyGroupOK) Error() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/keygroups/{keyGroupId}][%d] updateKeyGroupOK  %+v", 200, o.Payload)
}

func (o *UpdateKeyGroupOK) GetPayload() *platformclientmodels.KeyGroupInfo {
	return o.Payload
}

func (o *UpdateKeyGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.KeyGroupInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKeyGroupNotFound creates a UpdateKeyGroupNotFound with default headers values
func NewUpdateKeyGroupNotFound() *UpdateKeyGroupNotFound {
	return &UpdateKeyGroupNotFound{}
}

/*UpdateKeyGroupNotFound handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37241</td><td>Key group [{keyGroupId}] does not exist in namespace [{namespace}]</td></tr></table>
*/
type UpdateKeyGroupNotFound struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *UpdateKeyGroupNotFound) Error() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/keygroups/{keyGroupId}][%d] updateKeyGroupNotFound  %+v", 404, o.Payload)
}

func (o *UpdateKeyGroupNotFound) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *UpdateKeyGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKeyGroupConflict creates a UpdateKeyGroupConflict with default headers values
func NewUpdateKeyGroupConflict() *UpdateKeyGroupConflict {
	return &UpdateKeyGroupConflict{}
}

/*UpdateKeyGroupConflict handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37271</td><td>Key group [{name}] already exists in namespace [{namespace}]</td></tr></table>
*/
type UpdateKeyGroupConflict struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *UpdateKeyGroupConflict) Error() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/keygroups/{keyGroupId}][%d] updateKeyGroupConflict  %+v", 409, o.Payload)
}

func (o *UpdateKeyGroupConflict) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *UpdateKeyGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKeyGroupUnprocessableEntity creates a UpdateKeyGroupUnprocessableEntity with default headers values
func NewUpdateKeyGroupUnprocessableEntity() *UpdateKeyGroupUnprocessableEntity {
	return &UpdateKeyGroupUnprocessableEntity{}
}

/*UpdateKeyGroupUnprocessableEntity handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type UpdateKeyGroupUnprocessableEntity struct {
	Payload *platformclientmodels.ValidationErrorEntity
}

func (o *UpdateKeyGroupUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/keygroups/{keyGroupId}][%d] updateKeyGroupUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateKeyGroupUnprocessableEntity) GetPayload() *platformclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *UpdateKeyGroupUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
