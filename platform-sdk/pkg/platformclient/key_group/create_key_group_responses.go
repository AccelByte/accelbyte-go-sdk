// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package key_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclientmodels"
)

// CreateKeyGroupReader is a Reader for the CreateKeyGroup structure.
type CreateKeyGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateKeyGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateKeyGroupCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewCreateKeyGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewCreateKeyGroupUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /platform/admin/namespaces/{namespace}/keygroups returns an error %d: %s", response.Code(), string(data))
	}
}

// NewCreateKeyGroupCreated creates a CreateKeyGroupCreated with default headers values
func NewCreateKeyGroupCreated() *CreateKeyGroupCreated {
	return &CreateKeyGroupCreated{}
}

/*CreateKeyGroupCreated handles this case with default header values.

  successful operation
*/
type CreateKeyGroupCreated struct {
	Payload *platformclientmodels.KeyGroupInfo
}

func (o *CreateKeyGroupCreated) Error() string {
	return fmt.Sprintf("[POST /platform/admin/namespaces/{namespace}/keygroups][%d] createKeyGroupCreated  %+v", 201, o.ToString())
}

func (o *CreateKeyGroupCreated) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *CreateKeyGroupCreated) GetPayload() *platformclientmodels.KeyGroupInfo {
	return o.Payload
}

func (o *CreateKeyGroupCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.KeyGroupInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateKeyGroupConflict creates a CreateKeyGroupConflict with default headers values
func NewCreateKeyGroupConflict() *CreateKeyGroupConflict {
	return &CreateKeyGroupConflict{}
}

/*CreateKeyGroupConflict handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37271</td><td>Key group [{name}] already exists in namespace [{namespace}]</td></tr></table>
*/
type CreateKeyGroupConflict struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *CreateKeyGroupConflict) Error() string {
	return fmt.Sprintf("[POST /platform/admin/namespaces/{namespace}/keygroups][%d] createKeyGroupConflict  %+v", 409, o.ToString())
}

func (o *CreateKeyGroupConflict) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *CreateKeyGroupConflict) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *CreateKeyGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateKeyGroupUnprocessableEntity creates a CreateKeyGroupUnprocessableEntity with default headers values
func NewCreateKeyGroupUnprocessableEntity() *CreateKeyGroupUnprocessableEntity {
	return &CreateKeyGroupUnprocessableEntity{}
}

/*CreateKeyGroupUnprocessableEntity handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type CreateKeyGroupUnprocessableEntity struct {
	Payload *platformclientmodels.ValidationErrorEntity
}

func (o *CreateKeyGroupUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /platform/admin/namespaces/{namespace}/keygroups][%d] createKeyGroupUnprocessableEntity  %+v", 422, o.ToString())
}

func (o *CreateKeyGroupUnprocessableEntity) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *CreateKeyGroupUnprocessableEntity) GetPayload() *platformclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *CreateKeyGroupUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
