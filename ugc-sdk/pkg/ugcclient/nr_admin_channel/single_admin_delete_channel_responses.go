// Code generated by go-swagger; DO NOT EDIT.

package nr_admin_channel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/ugc-sdk/pkg/ugcclientmodels"
)

// SingleAdminDeleteChannelReader is a Reader for the SingleAdminDeleteChannel structure.
type SingleAdminDeleteChannelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SingleAdminDeleteChannelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSingleAdminDeleteChannelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSingleAdminDeleteChannelUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewSingleAdminDeleteChannelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewSingleAdminDeleteChannelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested DELETE /ugc/v1/admin/namespaces/{namespace}/channels/{channelId} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewSingleAdminDeleteChannelOK creates a SingleAdminDeleteChannelOK with default headers values
func NewSingleAdminDeleteChannelOK() *SingleAdminDeleteChannelOK {
	return &SingleAdminDeleteChannelOK{}
}

/*SingleAdminDeleteChannelOK handles this case with default header values.

  OK
*/
type SingleAdminDeleteChannelOK struct {
	Payload *ugcclientmodels.ModelsChannelResponse
}

func (o *SingleAdminDeleteChannelOK) Error() string {
	return fmt.Sprintf("[DELETE /ugc/v1/admin/namespaces/{namespace}/channels/{channelId}][%d] singleAdminDeleteChannelOK  %+v", 200, o.Payload)
}

func (o *SingleAdminDeleteChannelOK) GetPayload() *ugcclientmodels.ModelsChannelResponse {
	return o.Payload
}

func (o *SingleAdminDeleteChannelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ModelsChannelResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSingleAdminDeleteChannelUnauthorized creates a SingleAdminDeleteChannelUnauthorized with default headers values
func NewSingleAdminDeleteChannelUnauthorized() *SingleAdminDeleteChannelUnauthorized {
	return &SingleAdminDeleteChannelUnauthorized{}
}

/*SingleAdminDeleteChannelUnauthorized handles this case with default header values.

  Unauthorized
*/
type SingleAdminDeleteChannelUnauthorized struct {
	Payload *ugcclientmodels.ResponseError
}

func (o *SingleAdminDeleteChannelUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /ugc/v1/admin/namespaces/{namespace}/channels/{channelId}][%d] singleAdminDeleteChannelUnauthorized  %+v", 401, o.Payload)
}

func (o *SingleAdminDeleteChannelUnauthorized) GetPayload() *ugcclientmodels.ResponseError {
	return o.Payload
}

func (o *SingleAdminDeleteChannelUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSingleAdminDeleteChannelNotFound creates a SingleAdminDeleteChannelNotFound with default headers values
func NewSingleAdminDeleteChannelNotFound() *SingleAdminDeleteChannelNotFound {
	return &SingleAdminDeleteChannelNotFound{}
}

/*SingleAdminDeleteChannelNotFound handles this case with default header values.

  Not Found
*/
type SingleAdminDeleteChannelNotFound struct {
	Payload *ugcclientmodels.ResponseError
}

func (o *SingleAdminDeleteChannelNotFound) Error() string {
	return fmt.Sprintf("[DELETE /ugc/v1/admin/namespaces/{namespace}/channels/{channelId}][%d] singleAdminDeleteChannelNotFound  %+v", 404, o.Payload)
}

func (o *SingleAdminDeleteChannelNotFound) GetPayload() *ugcclientmodels.ResponseError {
	return o.Payload
}

func (o *SingleAdminDeleteChannelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSingleAdminDeleteChannelInternalServerError creates a SingleAdminDeleteChannelInternalServerError with default headers values
func NewSingleAdminDeleteChannelInternalServerError() *SingleAdminDeleteChannelInternalServerError {
	return &SingleAdminDeleteChannelInternalServerError{}
}

/*SingleAdminDeleteChannelInternalServerError handles this case with default header values.

  Internal Server Error
*/
type SingleAdminDeleteChannelInternalServerError struct {
	Payload *ugcclientmodels.ResponseError
}

func (o *SingleAdminDeleteChannelInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /ugc/v1/admin/namespaces/{namespace}/channels/{channelId}][%d] singleAdminDeleteChannelInternalServerError  %+v", 500, o.Payload)
}

func (o *SingleAdminDeleteChannelInternalServerError) GetPayload() *ugcclientmodels.ResponseError {
	return o.Payload
}

func (o *SingleAdminDeleteChannelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
