// Code generated by go-swagger; DO NOT EDIT.

package user_statistic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"reflect"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user statistic API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user statistic API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BulkCreateUserStatItems(params *BulkCreateUserStatItemsParams, authInfo runtime.ClientAuthInfoWriter) (*BulkCreateUserStatItemsOK, *BulkCreateUserStatItemsUnprocessableEntity, error)

	BulkFetchStatItems(params *BulkFetchStatItemsParams, authInfo runtime.ClientAuthInfoWriter) (*BulkFetchStatItemsOK, *BulkFetchStatItemsUnprocessableEntity, error)

	BulkFetchStatItems1(params *BulkFetchStatItems1Params, authInfo runtime.ClientAuthInfoWriter) (*BulkFetchStatItems1OK, *BulkFetchStatItems1UnprocessableEntity, error)

	BulkIncUserStatItem(params *BulkIncUserStatItemParams, authInfo runtime.ClientAuthInfoWriter) (*BulkIncUserStatItemOK, *BulkIncUserStatItemUnprocessableEntity, error)

	BulkIncUserStatItemValue(params *BulkIncUserStatItemValueParams, authInfo runtime.ClientAuthInfoWriter) (*BulkIncUserStatItemValueOK, *BulkIncUserStatItemValueUnprocessableEntity, error)

	BulkIncUserStatItemValue1(params *BulkIncUserStatItemValue1Params, authInfo runtime.ClientAuthInfoWriter) (*BulkIncUserStatItemValue1OK, *BulkIncUserStatItemValue1UnprocessableEntity, error)

	BulkIncUserStatItemValue2(params *BulkIncUserStatItemValue2Params, authInfo runtime.ClientAuthInfoWriter) (*BulkIncUserStatItemValue2OK, *BulkIncUserStatItemValue2UnprocessableEntity, error)

	BulkIncUserStatItem1(params *BulkIncUserStatItem1Params, authInfo runtime.ClientAuthInfoWriter) (*BulkIncUserStatItem1OK, *BulkIncUserStatItem1UnprocessableEntity, error)

	BulkResetUserStatItem(params *BulkResetUserStatItemParams, authInfo runtime.ClientAuthInfoWriter) (*BulkResetUserStatItemOK, *BulkResetUserStatItemUnprocessableEntity, error)

	BulkResetUserStatItem1(params *BulkResetUserStatItem1Params, authInfo runtime.ClientAuthInfoWriter) (*BulkResetUserStatItem1OK, *BulkResetUserStatItem1UnprocessableEntity, error)

	BulkResetUserStatItem2(params *BulkResetUserStatItem2Params, authInfo runtime.ClientAuthInfoWriter) (*BulkResetUserStatItem2OK, *BulkResetUserStatItem2UnprocessableEntity, error)

	BulkResetUserStatItem3(params *BulkResetUserStatItem3Params, authInfo runtime.ClientAuthInfoWriter) (*BulkResetUserStatItem3OK, *BulkResetUserStatItem3UnprocessableEntity, error)

	BulkUpdateUserStatItem(params *BulkUpdateUserStatItemParams, authInfo runtime.ClientAuthInfoWriter) (*BulkUpdateUserStatItemOK, *BulkUpdateUserStatItemUnprocessableEntity, error)

	BulkUpdateUserStatItemV2(params *BulkUpdateUserStatItemV2Params, authInfo runtime.ClientAuthInfoWriter) (*BulkUpdateUserStatItemV2OK, *BulkUpdateUserStatItemV2UnprocessableEntity, error)

	BulkUpdateUserStatItem1(params *BulkUpdateUserStatItem1Params, authInfo runtime.ClientAuthInfoWriter) (*BulkUpdateUserStatItem1OK, *BulkUpdateUserStatItem1UnprocessableEntity, error)

	BulkUpdateUserStatItem2(params *BulkUpdateUserStatItem2Params, authInfo runtime.ClientAuthInfoWriter) (*BulkUpdateUserStatItem2OK, *BulkUpdateUserStatItem2UnprocessableEntity, error)

	CreateUserStatItem(params *CreateUserStatItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserStatItemCreated, *CreateUserStatItemNotFound, *CreateUserStatItemConflict, error)

	DeleteUserStatItems(params *DeleteUserStatItemsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserStatItemsNoContent, *DeleteUserStatItemsUnauthorized, *DeleteUserStatItemsForbidden, *DeleteUserStatItemsNotFound, error)

	DeleteUserStatItems1(params *DeleteUserStatItems1Params, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserStatItems1NoContent, *DeleteUserStatItems1Unauthorized, *DeleteUserStatItems1Forbidden, *DeleteUserStatItems1NotFound, error)

	DeleteUserStatItems2(params *DeleteUserStatItems2Params, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserStatItems2NoContent, *DeleteUserStatItems2Unauthorized, *DeleteUserStatItems2Forbidden, *DeleteUserStatItems2NotFound, error)

	GetUserStatItems(params *GetUserStatItemsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserStatItemsOK, error)

	IncUserStatItemValue(params *IncUserStatItemValueParams, authInfo runtime.ClientAuthInfoWriter) (*IncUserStatItemValueOK, *IncUserStatItemValueBadRequest, *IncUserStatItemValueNotFound, *IncUserStatItemValueConflict, error)

	PublicBulkCreateUserStatItems(params *PublicBulkCreateUserStatItemsParams, authInfo runtime.ClientAuthInfoWriter) (*PublicBulkCreateUserStatItemsOK, *PublicBulkCreateUserStatItemsUnprocessableEntity, error)

	PublicBulkIncUserStatItem(params *PublicBulkIncUserStatItemParams, authInfo runtime.ClientAuthInfoWriter) (*PublicBulkIncUserStatItemOK, *PublicBulkIncUserStatItemUnprocessableEntity, error)

	PublicBulkIncUserStatItemValue(params *PublicBulkIncUserStatItemValueParams, authInfo runtime.ClientAuthInfoWriter) (*PublicBulkIncUserStatItemValueOK, *PublicBulkIncUserStatItemValueUnprocessableEntity, error)

	PublicBulkIncUserStatItem1(params *PublicBulkIncUserStatItem1Params, authInfo runtime.ClientAuthInfoWriter) (*PublicBulkIncUserStatItem1OK, *PublicBulkIncUserStatItem1UnprocessableEntity, error)

	PublicCreateUserStatItem(params *PublicCreateUserStatItemParams, authInfo runtime.ClientAuthInfoWriter) (*PublicCreateUserStatItemCreated, *PublicCreateUserStatItemNotFound, *PublicCreateUserStatItemConflict, error)

	PublicIncUserStatItem(params *PublicIncUserStatItemParams, authInfo runtime.ClientAuthInfoWriter) (*PublicIncUserStatItemOK, *PublicIncUserStatItemBadRequest, *PublicIncUserStatItemNotFound, *PublicIncUserStatItemConflict, error)

	PublicIncUserStatItemValue(params *PublicIncUserStatItemValueParams, authInfo runtime.ClientAuthInfoWriter) (*PublicIncUserStatItemValueOK, *PublicIncUserStatItemValueBadRequest, *PublicIncUserStatItemValueNotFound, *PublicIncUserStatItemValueConflict, error)

	PublicQueryUserStatItems(params *PublicQueryUserStatItemsParams, authInfo runtime.ClientAuthInfoWriter) (*PublicQueryUserStatItemsOK, error)

	ResetUserStatItemValue(params *ResetUserStatItemValueParams, authInfo runtime.ClientAuthInfoWriter) (*ResetUserStatItemValueOK, *ResetUserStatItemValueBadRequest, *ResetUserStatItemValueNotFound, error)

	ResetUserStatItemValue1(params *ResetUserStatItemValue1Params, authInfo runtime.ClientAuthInfoWriter) (*ResetUserStatItemValue1OK, *ResetUserStatItemValue1BadRequest, *ResetUserStatItemValue1NotFound, error)

	UpdateUserStatItemValue(params *UpdateUserStatItemValueParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserStatItemValueOK, *UpdateUserStatItemValueBadRequest, *UpdateUserStatItemValueNotFound, *UpdateUserStatItemValueConflict, *UpdateUserStatItemValueUnprocessableEntity, error)

	UpdateUserStatItemValue1(params *UpdateUserStatItemValue1Params, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserStatItemValue1OK, *UpdateUserStatItemValue1BadRequest, *UpdateUserStatItemValue1NotFound, *UpdateUserStatItemValue1Conflict, *UpdateUserStatItemValue1UnprocessableEntity, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BulkCreateUserStatItems bulks create user s stat items

  Bulk create user's statItems.<br>Other detail info:<ul><li><i>Required permission</i>: resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=1 (CREATE)</li><li><i>Returns</i>: bulk created result</li>
*/
func (a *Client) BulkCreateUserStatItems(params *BulkCreateUserStatItemsParams, authInfo runtime.ClientAuthInfoWriter) (*BulkCreateUserStatItemsOK, *BulkCreateUserStatItemsUnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCreateUserStatItemsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkCreateUserStatItems",
		Method:             "POST",
		PathPattern:        "/v1/admin/namespaces/{namespace}/users/{userId}/statitems/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkCreateUserStatItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkCreateUserStatItemsOK:
		return v, nil, nil
	case *BulkCreateUserStatItemsUnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkFetchStatItems bulks fetch statitems value

  Bulk fetch multiple user's statitem value for a given namespace and statCode.
Other detail info:
+ *Required permission*: resource="ADMIN:NAMESPACE:{namespace}:STATITEM", action=2 (READ)
+ *Returns*: list of user's statItem
*/
func (a *Client) BulkFetchStatItems(params *BulkFetchStatItemsParams, authInfo runtime.ClientAuthInfoWriter) (*BulkFetchStatItemsOK, *BulkFetchStatItemsUnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkFetchStatItemsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkFetchStatItems",
		Method:             "GET",
		PathPattern:        "/v1/admin/namespaces/{namespace}/statitems/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkFetchStatItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkFetchStatItemsOK:
		return v, nil, nil
	case *BulkFetchStatItemsUnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkFetchStatItems1 publics bulk fetch statitems value

  Public bulk fetch multiple user's statitem value for a given namespace and statCode.
Other detail info:
+ *Required permission*: resource="NAMESPACE:{namespace}:STATITEM", action=2 (READ)
+ *Returns*: list of user's statItem
*/
func (a *Client) BulkFetchStatItems1(params *BulkFetchStatItems1Params, authInfo runtime.ClientAuthInfoWriter) (*BulkFetchStatItems1OK, *BulkFetchStatItems1UnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkFetchStatItems1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkFetchStatItems_1",
		Method:             "GET",
		PathPattern:        "/v1/public/namespaces/{namespace}/statitems/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkFetchStatItems1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkFetchStatItems1OK:
		return v, nil, nil
	case *BulkFetchStatItems1UnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkIncUserStatItem bulks update multiple user s statitems value

  Bulk update multiple user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource="ADMIN:NAMESPACE:{namespace}:STATITEM", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li></ul>
*/
func (a *Client) BulkIncUserStatItem(params *BulkIncUserStatItemParams, authInfo runtime.ClientAuthInfoWriter) (*BulkIncUserStatItemOK, *BulkIncUserStatItemUnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkIncUserStatItemParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkIncUserStatItem",
		Method:             "PUT",
		PathPattern:        "/v1/admin/namespaces/{namespace}/statitems/value/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkIncUserStatItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkIncUserStatItemOK:
		return v, nil, nil
	case *BulkIncUserStatItemUnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkIncUserStatItemValue bulks update multiple user s statitems value

  Bulk update multiple user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource="ADMIN:NAMESPACE:{namespace}:STATITEM", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li></ul>
*/
func (a *Client) BulkIncUserStatItemValue(params *BulkIncUserStatItemValueParams, authInfo runtime.ClientAuthInfoWriter) (*BulkIncUserStatItemValueOK, *BulkIncUserStatItemValueUnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkIncUserStatItemValueParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkIncUserStatItemValue",
		Method:             "PATCH",
		PathPattern:        "/v1/admin/namespaces/{namespace}/statitems/value/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkIncUserStatItemValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkIncUserStatItemValueOK:
		return v, nil, nil
	case *BulkIncUserStatItemValueUnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkIncUserStatItemValue1 bulks update user s statitems value

  Bulk update user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li></ul>
*/
func (a *Client) BulkIncUserStatItemValue1(params *BulkIncUserStatItemValue1Params, authInfo runtime.ClientAuthInfoWriter) (*BulkIncUserStatItemValue1OK, *BulkIncUserStatItemValue1UnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkIncUserStatItemValue1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkIncUserStatItemValue_1",
		Method:             "PATCH",
		PathPattern:        "/v1/admin/namespaces/{namespace}/users/{userId}/statitems/value/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkIncUserStatItemValue1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkIncUserStatItemValue1OK:
		return v, nil, nil
	case *BulkIncUserStatItemValue1UnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkIncUserStatItemValue2 publics bulk update user s statitems value

  Public bulk update user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource="NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li>
*/
func (a *Client) BulkIncUserStatItemValue2(params *BulkIncUserStatItemValue2Params, authInfo runtime.ClientAuthInfoWriter) (*BulkIncUserStatItemValue2OK, *BulkIncUserStatItemValue2UnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkIncUserStatItemValue2Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkIncUserStatItemValue_2",
		Method:             "PATCH",
		PathPattern:        "/v1/public/namespaces/{namespace}/users/{userId}/statitems/value/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkIncUserStatItemValue2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkIncUserStatItemValue2OK:
		return v, nil, nil
	case *BulkIncUserStatItemValue2UnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkIncUserStatItem1 bulks update user s statitems value

  Bulk update user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li></ul>
*/
func (a *Client) BulkIncUserStatItem1(params *BulkIncUserStatItem1Params, authInfo runtime.ClientAuthInfoWriter) (*BulkIncUserStatItem1OK, *BulkIncUserStatItem1UnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkIncUserStatItem1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkIncUserStatItem_1",
		Method:             "PUT",
		PathPattern:        "/v1/admin/namespaces/{namespace}/users/{userId}/statitems/value/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkIncUserStatItem1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkIncUserStatItem1OK:
		return v, nil, nil
	case *BulkIncUserStatItem1UnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkResetUserStatItem bulks reset multiple user s statitems value

  Bulk reset multiple user's statitems value.
User's statitem value will be reset to the default value defined in the statistic configuration.

Other detail info:
+ *Required permission*: resource="ADMIN:NAMESPACE:{namespace}:STATITEM", action=4 (UPDATE)
+ *Returns*: bulk updated result
*/
func (a *Client) BulkResetUserStatItem(params *BulkResetUserStatItemParams, authInfo runtime.ClientAuthInfoWriter) (*BulkResetUserStatItemOK, *BulkResetUserStatItemUnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkResetUserStatItemParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkResetUserStatItem",
		Method:             "PUT",
		PathPattern:        "/v1/admin/namespaces/{namespace}/statitems/value/reset/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkResetUserStatItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkResetUserStatItemOK:
		return v, nil, nil
	case *BulkResetUserStatItemUnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkResetUserStatItem1 bulks reset user s statitems value

  Bulk reset user's statitems value for given namespace and user.
Other detail info:
+ *Required permission*: resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)
+ *Returns*: bulk updated result
*/
func (a *Client) BulkResetUserStatItem1(params *BulkResetUserStatItem1Params, authInfo runtime.ClientAuthInfoWriter) (*BulkResetUserStatItem1OK, *BulkResetUserStatItem1UnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkResetUserStatItem1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkResetUserStatItem_1",
		Method:             "PUT",
		PathPattern:        "/v1/admin/namespaces/{namespace}/users/{userId}/statitems/value/reset/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkResetUserStatItem1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkResetUserStatItem1OK:
		return v, nil, nil
	case *BulkResetUserStatItem1UnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkResetUserStatItem2 publics bulk reset multiple user s statitems value

  Bulk reset multiple user's statitems value.
User's statitem value will be reset to the default value defined in the statistic configuration.

Other detail info:
+ *Required permission*: resource="NAMESPACE:{namespace}:STATITEM", action=4 (UPDATE)
+ *Returns*: bulk updated result
*/
func (a *Client) BulkResetUserStatItem2(params *BulkResetUserStatItem2Params, authInfo runtime.ClientAuthInfoWriter) (*BulkResetUserStatItem2OK, *BulkResetUserStatItem2UnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkResetUserStatItem2Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkResetUserStatItem_2",
		Method:             "PUT",
		PathPattern:        "/v1/public/namespaces/{namespace}/statitems/value/reset/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkResetUserStatItem2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkResetUserStatItem2OK:
		return v, nil, nil
	case *BulkResetUserStatItem2UnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkResetUserStatItem3 publics bulk reset user s statitems value

  Public bulk reset user's statitems value for given namespace and user.
Other detail info:
+ *Required permission*: resource="NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)
+ *Returns*: bulk updated result
*/
func (a *Client) BulkResetUserStatItem3(params *BulkResetUserStatItem3Params, authInfo runtime.ClientAuthInfoWriter) (*BulkResetUserStatItem3OK, *BulkResetUserStatItem3UnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkResetUserStatItem3Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkResetUserStatItem_3",
		Method:             "PUT",
		PathPattern:        "/v1/public/namespaces/{namespace}/users/{userId}/statitems/value/reset/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkResetUserStatItem3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkResetUserStatItem3OK:
		return v, nil, nil
	case *BulkResetUserStatItem3UnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkUpdateUserStatItem bulks update user s statitems value

  Bulk update user's statitems value for given namespace and user with specific update strategy.
There are four supported update strategies:
+ *OVERRIDE*: update user statitem with the new value
+ *INCREMENT*: increment user statitem with the specified value
+ *MAX*: update user statitem with the specified value if it's larger than the existing value
+ *MIN*: update user statitem with the specified value if it's lower than the existing value

The *additionalKey* parameter will be suffixed to *userId* and is used to support multi level user's statitems, such as character's statitems.
If provided, user's statitems will be saved with key: *userId_additionalKey*

Other detail info:
+ *Required permission*: resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)
+ *Returns*: bulk updated result
*/
func (a *Client) BulkUpdateUserStatItem(params *BulkUpdateUserStatItemParams, authInfo runtime.ClientAuthInfoWriter) (*BulkUpdateUserStatItemOK, *BulkUpdateUserStatItemUnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkUpdateUserStatItemParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkUpdateUserStatItem",
		Method:             "PUT",
		PathPattern:        "/v2/admin/namespaces/{namespace}/users/{userId}/statitems/value/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkUpdateUserStatItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkUpdateUserStatItemOK:
		return v, nil, nil
	case *BulkUpdateUserStatItemUnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkUpdateUserStatItemV2 bulks update multiple user s statitems value

  Bulk update multiple user's statitems value with specific update strategy.
There are four supported update strategies:
+ *OVERRIDE*: update user statitem with the new value
+ *INCREMENT*: increment user statitem with the specified value
+ *MAX*: update user statitem with the specified value if it's larger than the existing value
+ *MIN*: update user statitem with the specified value if it's lower than the existing value

Other detail info:
+ *Required permission*: resource="ADMIN:NAMESPACE:{namespace}:STATITEM", action=4 (UPDATE)
+ *Returns*: bulk updated result
*/
func (a *Client) BulkUpdateUserStatItemV2(params *BulkUpdateUserStatItemV2Params, authInfo runtime.ClientAuthInfoWriter) (*BulkUpdateUserStatItemV2OK, *BulkUpdateUserStatItemV2UnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkUpdateUserStatItemV2Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkUpdateUserStatItemV2",
		Method:             "PUT",
		PathPattern:        "/v2/admin/namespaces/{namespace}/statitems/value/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkUpdateUserStatItemV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkUpdateUserStatItemV2OK:
		return v, nil, nil
	case *BulkUpdateUserStatItemV2UnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkUpdateUserStatItem1 publics bulk update multiple user s statitems value

  Public bulk update multiple user's statitems value with specific update strategy.
There are four supported update strategies:
+ *OVERRIDE*: update user statitem with the new value
+ *INCREMENT*: increment user statitem with the specified value
+ *MAX*: update user statitem with the specified value if it's larger than the existing value
+ *MIN*: update user statitem with the specified value if it's lower than the existing value

Other detail info:
+ *Required permission*: resource="NAMESPACE:{namespace}:STATITEM", action=4 (UPDATE)
+ *Returns*: bulk updated result
*/
func (a *Client) BulkUpdateUserStatItem1(params *BulkUpdateUserStatItem1Params, authInfo runtime.ClientAuthInfoWriter) (*BulkUpdateUserStatItem1OK, *BulkUpdateUserStatItem1UnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkUpdateUserStatItem1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkUpdateUserStatItem_1",
		Method:             "PUT",
		PathPattern:        "/v2/public/namespaces/{namespace}/statitems/value/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkUpdateUserStatItem1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkUpdateUserStatItem1OK:
		return v, nil, nil
	case *BulkUpdateUserStatItem1UnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkUpdateUserStatItem2 publics bulk update user s statitems value

  Public bulk update user's statitems value for given namespace and user with specific update strategy.
There are four supported update strategies:
+ *OVERRIDE*: update user statitem with the new value
+ *INCREMENT*: increment user statitem with the specified value
+ *MAX*: update user statitem with the specified value if it's larger than the existing value
+ *MIN*: update user statitem with the specified value if it's lower than the existing value

The *additionalKey* parameter will be suffixed to *userId* and is used to support multi level user's statitems, such as character's statitems.
If provided, user's statitems will be saved with key: *userId_additionalKey*

Other detail info:
+ *Required permission*: resource="NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)
+ *Returns*: bulk updated result
*/
func (a *Client) BulkUpdateUserStatItem2(params *BulkUpdateUserStatItem2Params, authInfo runtime.ClientAuthInfoWriter) (*BulkUpdateUserStatItem2OK, *BulkUpdateUserStatItem2UnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkUpdateUserStatItem2Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkUpdateUserStatItem_2",
		Method:             "PUT",
		PathPattern:        "/v2/public/namespaces/{namespace}/users/{userId}/statitems/value/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkUpdateUserStatItem2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *BulkUpdateUserStatItem2OK:
		return v, nil, nil
	case *BulkUpdateUserStatItem2UnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  CreateUserStatItem creates user s stat item

  Create statItem for a user.<br>Other detail info:<ul><li><i>Required permission</i>: resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=1 (CREATE)</li><li><i>Returns</i>: created user's statItem</li></ul>
*/
func (a *Client) CreateUserStatItem(params *CreateUserStatItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserStatItemCreated, *CreateUserStatItemNotFound, *CreateUserStatItemConflict, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserStatItemParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserStatItem",
		Method:             "POST",
		PathPattern:        "/v1/admin/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserStatItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}

	switch v := result.(type) {

	case *CreateUserStatItemCreated:
		return v, nil, nil, nil
	case *CreateUserStatItemNotFound:
		return nil, v, nil, nil
	case *CreateUserStatItemConflict:
		return nil, nil, v, nil
	default:
		return nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  DeleteUserStatItems deletes user s stat items

  This endpoint is for testing purpose. Use this endpoint for cleaning up after testing.<br>Delete user's statItems given stat code.<br>Other detail info:<ul><li><i>Required permission</i>: resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=8 (DELETE)</li><li><i>Returns</i>: no content</li></li>
*/
func (a *Client) DeleteUserStatItems(params *DeleteUserStatItemsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserStatItemsNoContent, *DeleteUserStatItemsUnauthorized, *DeleteUserStatItemsForbidden, *DeleteUserStatItemsNotFound, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserStatItemsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserStatItems",
		Method:             "DELETE",
		PathPattern:        "/v1/admin/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserStatItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *DeleteUserStatItemsNoContent:
		return v, nil, nil, nil, nil
	case *DeleteUserStatItemsUnauthorized:
		return nil, v, nil, nil, nil
	case *DeleteUserStatItemsForbidden:
		return nil, nil, v, nil, nil
	case *DeleteUserStatItemsNotFound:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  DeleteUserStatItems1 deletes user s stat items

  Delete user's statItems given stat code.<br>Other detail info:<ul><li><i>Required permission</i>: resource="NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=8 (DELETE)</li><li><i>Returns</i>: no content</li></li>
*/
func (a *Client) DeleteUserStatItems1(params *DeleteUserStatItems1Params, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserStatItems1NoContent, *DeleteUserStatItems1Unauthorized, *DeleteUserStatItems1Forbidden, *DeleteUserStatItems1NotFound, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserStatItems1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserStatItems_1",
		Method:             "DELETE",
		PathPattern:        "/v1/public/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserStatItems1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *DeleteUserStatItems1NoContent:
		return v, nil, nil, nil, nil
	case *DeleteUserStatItems1Unauthorized:
		return nil, v, nil, nil, nil
	case *DeleteUserStatItems1Forbidden:
		return nil, nil, v, nil, nil
	case *DeleteUserStatItems1NotFound:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  DeleteUserStatItems2 deletes user s stat items

  Delete user's stat items for given namespace, statCode, and user Id.
If query param *additionalKey* is provided, it will delete user stat items of specific key (i.e. characterName).
Otherwise, it will delete all stat items related to the user Id.
<br>Delete user's statItems given stat code.<br>Other detail info:<ul><li><i>Required permission</i>: resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=8 (DELETE)</li><li><i>Returns</i>: no content</li></li>
*/
func (a *Client) DeleteUserStatItems2(params *DeleteUserStatItems2Params, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserStatItems2NoContent, *DeleteUserStatItems2Unauthorized, *DeleteUserStatItems2Forbidden, *DeleteUserStatItems2NotFound, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserStatItems2Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserStatItems_2",
		Method:             "DELETE",
		PathPattern:        "/v2/admin/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserStatItems2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *DeleteUserStatItems2NoContent:
		return v, nil, nil, nil, nil
	case *DeleteUserStatItems2Unauthorized:
		return nil, v, nil, nil, nil
	case *DeleteUserStatItems2Forbidden:
		return nil, nil, v, nil, nil
	case *DeleteUserStatItems2NotFound:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  GetUserStatItems lists user s stat items

  List user's statItems.<br>Other detail info:<ul><li><i>Required permission</i>: resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=2 (READ)</li><li><i>Returns</i>: stat items</li></ul>
*/
func (a *Client) GetUserStatItems(params *GetUserStatItemsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserStatItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserStatItemsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserStatItems",
		Method:             "GET",
		PathPattern:        "/v1/admin/namespaces/{namespace}/users/{userId}/statitems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserStatItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *GetUserStatItemsOK:
		return v, nil
	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  IncUserStatItemValue updates user s statitem value

  Update user's statitem value.<br>Other detail info:<ul><li><i>Required permission</i>: resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)</li><li><i>Returns</i>: updated user's statItem</li></ul>
*/
func (a *Client) IncUserStatItemValue(params *IncUserStatItemValueParams, authInfo runtime.ClientAuthInfoWriter) (*IncUserStatItemValueOK, *IncUserStatItemValueBadRequest, *IncUserStatItemValueNotFound, *IncUserStatItemValueConflict, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIncUserStatItemValueParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "incUserStatItemValue",
		Method:             "PATCH",
		PathPattern:        "/v1/admin/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems/value",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IncUserStatItemValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *IncUserStatItemValueOK:
		return v, nil, nil, nil, nil
	case *IncUserStatItemValueBadRequest:
		return nil, v, nil, nil, nil
	case *IncUserStatItemValueNotFound:
		return nil, nil, v, nil, nil
	case *IncUserStatItemValueConflict:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PublicBulkCreateUserStatItems bulks create user s stat items

  Bulk create statItems.<br>Other detail info:<ul><li><i>Required permission</i>: resource="NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=1 (CREATE)</li><li><i>Returns</i>: bulk created result</li></ul>
*/
func (a *Client) PublicBulkCreateUserStatItems(params *PublicBulkCreateUserStatItemsParams, authInfo runtime.ClientAuthInfoWriter) (*PublicBulkCreateUserStatItemsOK, *PublicBulkCreateUserStatItemsUnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicBulkCreateUserStatItemsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "publicBulkCreateUserStatItems",
		Method:             "POST",
		PathPattern:        "/v1/public/namespaces/{namespace}/users/{userId}/statitems/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicBulkCreateUserStatItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *PublicBulkCreateUserStatItemsOK:
		return v, nil, nil
	case *PublicBulkCreateUserStatItemsUnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PublicBulkIncUserStatItem publics bulk update multiple user s statitems value

  Public bulk update multiple user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource="NAMESPACE:{namespace}:STATITEM", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li></ul>
*/
func (a *Client) PublicBulkIncUserStatItem(params *PublicBulkIncUserStatItemParams, authInfo runtime.ClientAuthInfoWriter) (*PublicBulkIncUserStatItemOK, *PublicBulkIncUserStatItemUnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicBulkIncUserStatItemParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "publicBulkIncUserStatItem",
		Method:             "PUT",
		PathPattern:        "/v1/public/namespaces/{namespace}/statitems/value/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicBulkIncUserStatItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *PublicBulkIncUserStatItemOK:
		return v, nil, nil
	case *PublicBulkIncUserStatItemUnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PublicBulkIncUserStatItemValue publics bulk update multiple user s statitems value

  Public bulk update multiple user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource="NAMESPACE:{namespace}:STATITEM", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li></ul>
*/
func (a *Client) PublicBulkIncUserStatItemValue(params *PublicBulkIncUserStatItemValueParams, authInfo runtime.ClientAuthInfoWriter) (*PublicBulkIncUserStatItemValueOK, *PublicBulkIncUserStatItemValueUnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicBulkIncUserStatItemValueParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "publicBulkIncUserStatItemValue",
		Method:             "PATCH",
		PathPattern:        "/v1/public/namespaces/{namespace}/statitems/value/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicBulkIncUserStatItemValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *PublicBulkIncUserStatItemValueOK:
		return v, nil, nil
	case *PublicBulkIncUserStatItemValueUnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PublicBulkIncUserStatItem1 publics bulk update user s statitems value

  Public bulk update user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource="NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li></ul>
*/
func (a *Client) PublicBulkIncUserStatItem1(params *PublicBulkIncUserStatItem1Params, authInfo runtime.ClientAuthInfoWriter) (*PublicBulkIncUserStatItem1OK, *PublicBulkIncUserStatItem1UnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicBulkIncUserStatItem1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "publicBulkIncUserStatItem_1",
		Method:             "PUT",
		PathPattern:        "/v1/public/namespaces/{namespace}/users/{userId}/statitems/value/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicBulkIncUserStatItem1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *PublicBulkIncUserStatItem1OK:
		return v, nil, nil
	case *PublicBulkIncUserStatItem1UnprocessableEntity:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PublicCreateUserStatItem creates user s stat item

  Create user's statItem.<br>Other detail info:<ul><li><i>Required permission</i>: resource="NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=1 (CREATE)</li><li><i>Returns</i>: created user's statItem</li></ul>
*/
func (a *Client) PublicCreateUserStatItem(params *PublicCreateUserStatItemParams, authInfo runtime.ClientAuthInfoWriter) (*PublicCreateUserStatItemCreated, *PublicCreateUserStatItemNotFound, *PublicCreateUserStatItemConflict, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicCreateUserStatItemParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "publicCreateUserStatItem",
		Method:             "POST",
		PathPattern:        "/v1/public/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicCreateUserStatItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}

	switch v := result.(type) {

	case *PublicCreateUserStatItemCreated:
		return v, nil, nil, nil
	case *PublicCreateUserStatItemNotFound:
		return nil, v, nil, nil
	case *PublicCreateUserStatItemConflict:
		return nil, nil, v, nil
	default:
		return nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PublicIncUserStatItem publics update user s statitem value

  Public update user's statitem value.<br>Other detail info:<ul><li><i>Required permission</i>: resource="NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)</li><li><i>Returns</i>: updated user's statItem</li></ul>
*/
func (a *Client) PublicIncUserStatItem(params *PublicIncUserStatItemParams, authInfo runtime.ClientAuthInfoWriter) (*PublicIncUserStatItemOK, *PublicIncUserStatItemBadRequest, *PublicIncUserStatItemNotFound, *PublicIncUserStatItemConflict, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicIncUserStatItemParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "publicIncUserStatItem",
		Method:             "PUT",
		PathPattern:        "/v1/public/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems/value",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicIncUserStatItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *PublicIncUserStatItemOK:
		return v, nil, nil, nil, nil
	case *PublicIncUserStatItemBadRequest:
		return nil, v, nil, nil, nil
	case *PublicIncUserStatItemNotFound:
		return nil, nil, v, nil, nil
	case *PublicIncUserStatItemConflict:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PublicIncUserStatItemValue publics update user s statitem value

  Public update user's statitem value.<br>Other detail info:<ul><li><i>Required permission</i>: resource="NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)</li><li><i>Returns</i>: updated user's statItem</li></ul>
*/
func (a *Client) PublicIncUserStatItemValue(params *PublicIncUserStatItemValueParams, authInfo runtime.ClientAuthInfoWriter) (*PublicIncUserStatItemValueOK, *PublicIncUserStatItemValueBadRequest, *PublicIncUserStatItemValueNotFound, *PublicIncUserStatItemValueConflict, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicIncUserStatItemValueParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "publicIncUserStatItemValue",
		Method:             "PATCH",
		PathPattern:        "/v1/public/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems/value",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicIncUserStatItemValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *PublicIncUserStatItemValueOK:
		return v, nil, nil, nil, nil
	case *PublicIncUserStatItemValueBadRequest:
		return nil, v, nil, nil, nil
	case *PublicIncUserStatItemValueNotFound:
		return nil, nil, v, nil, nil
	case *PublicIncUserStatItemValueConflict:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PublicQueryUserStatItems publics list user s stat items

  Public list all statItems by pagination.<br>Other detail info:<ul><li><i>Required permission</i>: resource="NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=2 (READ)</li><li><i>Returns</i>: stat items</li></ul>
*/
func (a *Client) PublicQueryUserStatItems(params *PublicQueryUserStatItemsParams, authInfo runtime.ClientAuthInfoWriter) (*PublicQueryUserStatItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicQueryUserStatItemsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "publicQueryUserStatItems",
		Method:             "GET",
		PathPattern:        "/v1/public/namespaces/{namespace}/users/{userId}/statitems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicQueryUserStatItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *PublicQueryUserStatItemsOK:
		return v, nil
	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  ResetUserStatItemValue resets user s statitem value

  Reset user's statitem value for a given namespace and user.
User's statitem value will be reset to the default value defined in the statistic configuration.

Other detail info:
+ *Required permission*: resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)
+ *Returns*: updated user's statItem
*/
func (a *Client) ResetUserStatItemValue(params *ResetUserStatItemValueParams, authInfo runtime.ClientAuthInfoWriter) (*ResetUserStatItemValueOK, *ResetUserStatItemValueBadRequest, *ResetUserStatItemValueNotFound, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetUserStatItemValueParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resetUserStatItemValue",
		Method:             "PUT",
		PathPattern:        "/v1/admin/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems/value/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResetUserStatItemValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}

	switch v := result.(type) {

	case *ResetUserStatItemValueOK:
		return v, nil, nil, nil
	case *ResetUserStatItemValueBadRequest:
		return nil, v, nil, nil
	case *ResetUserStatItemValueNotFound:
		return nil, nil, v, nil
	default:
		return nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  ResetUserStatItemValue1 publics reset user s statitem value

  Reset user's statitem value for a given namespace and user.
User's statitem value will be reset to the default value defined in the statistic configuration.

Other detail info:
+ *Required permission*: resource="NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)
+ *Returns*: updated user's statItem
*/
func (a *Client) ResetUserStatItemValue1(params *ResetUserStatItemValue1Params, authInfo runtime.ClientAuthInfoWriter) (*ResetUserStatItemValue1OK, *ResetUserStatItemValue1BadRequest, *ResetUserStatItemValue1NotFound, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetUserStatItemValue1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resetUserStatItemValue_1",
		Method:             "PUT",
		PathPattern:        "/v1/public/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems/value/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResetUserStatItemValue1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}

	switch v := result.(type) {

	case *ResetUserStatItemValue1OK:
		return v, nil, nil, nil
	case *ResetUserStatItemValue1BadRequest:
		return nil, v, nil, nil
	case *ResetUserStatItemValue1NotFound:
		return nil, nil, v, nil
	default:
		return nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  UpdateUserStatItemValue updates user s statitem value

  Update user's statitem value for a given namespace and user with a certain update strategy.
There are four supported update strategies:
+ *OVERRIDE*: update user statitem with the new value
+ *INCREMENT*: increment user statitem with the specified value
+ *MAX*: update user statitem with the specified value if it's larger than the existing value
+ *MIN*: update user statitem with the specified value if it's lower than the existing value

The *additionalKey* parameter will be suffixed to *userId* and is used to support multi level user's statitems, such as character's statitems.
If provided, user's statitems will be saved with key: *userId_additionalKey*

Other detail info:
+ *Required permission*: resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)
+ *Returns*: updated user's statItem
*/
func (a *Client) UpdateUserStatItemValue(params *UpdateUserStatItemValueParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserStatItemValueOK, *UpdateUserStatItemValueBadRequest, *UpdateUserStatItemValueNotFound, *UpdateUserStatItemValueConflict, *UpdateUserStatItemValueUnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserStatItemValueParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUserStatItemValue",
		Method:             "PUT",
		PathPattern:        "/v2/admin/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems/value",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserStatItemValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *UpdateUserStatItemValueOK:
		return v, nil, nil, nil, nil, nil
	case *UpdateUserStatItemValueBadRequest:
		return nil, v, nil, nil, nil, nil
	case *UpdateUserStatItemValueNotFound:
		return nil, nil, v, nil, nil, nil
	case *UpdateUserStatItemValueConflict:
		return nil, nil, nil, v, nil, nil
	case *UpdateUserStatItemValueUnprocessableEntity:
		return nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  UpdateUserStatItemValue1 publics update user s statitem value

  Public update user's statitem value for a given namespace and user with a certain update strategy.
There are four supported update strategies:
+ *OVERRIDE*: update user statitem with the new value
+ *INCREMENT*: increment user statitem with the specified value
+ *MAX*: update user statitem with the specified value if it's larger than the existing value
+ *MIN*: update user statitem with the specified value if it's lower than the existing value

The *additionalKey* parameter will be suffixed to *userId* and is used to support multi level user's statitems, such as character's statitems.
If provided, user's statitems will be saved with key: *userId_additionalKey*

Other detail info:
+ *Required permission*: resource="NAMESPACE:{namespace}:USER:{userId}:STATITEM", action=4 (UPDATE)
+ *Returns*: updated user's statItem
*/
func (a *Client) UpdateUserStatItemValue1(params *UpdateUserStatItemValue1Params, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserStatItemValue1OK, *UpdateUserStatItemValue1BadRequest, *UpdateUserStatItemValue1NotFound, *UpdateUserStatItemValue1Conflict, *UpdateUserStatItemValue1UnprocessableEntity, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserStatItemValue1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUserStatItemValue_1",
		Method:             "PUT",
		PathPattern:        "/v2/public/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems/value",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserStatItemValue1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *UpdateUserStatItemValue1OK:
		return v, nil, nil, nil, nil, nil
	case *UpdateUserStatItemValue1BadRequest:
		return nil, v, nil, nil, nil, nil
	case *UpdateUserStatItemValue1NotFound:
		return nil, nil, v, nil, nil, nil
	case *UpdateUserStatItemValue1Conflict:
		return nil, nil, nil, v, nil, nil
	case *UpdateUserStatItemValue1UnprocessableEntity:
		return nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
