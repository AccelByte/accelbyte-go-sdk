{
  "host": "demo.accelbyte.io",
  "info": {
    "description": "Justice DSM Controller Service",
    "title": "justice-dsm-controller-service",
    "version": "6.8.2"
  },
  "schemes": [
    "https"
  ],
  "externalDocs": {
    "description": "API Docs",
    "url": "https://stage.accelbyte.io/dsmcontroller/apidocs"
  },
  "securityDefinitions": {
    "authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "paths": {
    "/dsmcontroller/admin/configs": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint lists all of dedicated servers configs.",
        "operationId": "ListConfig",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "configs listed",
            "schema": {
              "$ref": "#/definitions/models.ListConfigResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List all configs",
        "tags": [
          "Config"
        ],
        "x-errorCodes": {}
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\nRequired scope: social\n\nThis endpoint adds/modifies config. When there are ready servers and\nthe server version is updated, those servers will be replaced with newer version.\n\nPort is where your game listens for incoming UDP connection, if empty it\u0026#39;ll be set to 15000\n\nCPU and Memory limit / request are formatted with Kubernetes format,\ne.g. CPU of 1000m is 1 core, and Memory of 512Mi is 512 MB.\n\nThe creation/claim/session/unreachable/heartbeat timeouts are all in seconds.\nCreation timeout is time limit for DS to startup until registers itself.\nClaim timeout is time limit for game session manager to claim its ready DS.\nSession timeout is time limit for match session before deleted.\nUnreachable timeout is time limit for DS in UNREACHABLE state before deleted.\nHeartbeat timeout is time limit for DS to give heartbeat before marked as UNREACHABLE.\n\nSample config:\n{\n\t\u0026#34;namespace\u0026#34;: \u0026#34;accelbyte\u0026#34;,\n\t\u0026#34;providers\u0026#34;: [\n\t\u0026#34;aws\u0026#34;\n\t],\n\t\u0026#34;port\u0026#34;: 7777,\n\t\u0026#34;protocol\u0026#34;: \u0026#34;udp\u0026#34;,\n\t\u0026#34;creation_timeout\u0026#34;: 120,\n\t\u0026#34;claim_timeout\u0026#34;: 60,\n\t\u0026#34;session_timeout\u0026#34;: 1800,\n\t\u0026#34;heartbeat_timeout\u0026#34;: 30,\n\t\u0026#34;unreachable_timeout\u0026#34;: 30,\n\t\u0026#34;image_version_mapping\u0026#34;: {\n\t\t\u0026#34;1.4.0\u0026#34;: \u0026#34;accelbyte/sample-ds-go:1.4.0\u0026#34;\n\t},\n\t\u0026#34;default_version\u0026#34;: \u0026#34;1.4.0\u0026#34;,\n\t\u0026#34;cpu_limit\u0026#34;: \u0026#34;100\u0026#34;,\n\t\u0026#34;mem_limit\u0026#34;: \u0026#34;64\u0026#34;,\n\t\u0026#34;params\u0026#34;: \u0026#34;\u0026#34;,\n\t\u0026#34;min_count\u0026#34;: 0,\n\t\u0026#34;max_count\u0026#34;: 0,\n\t\u0026#34;buffer_count\u0026#34;: 0,\n\t\u0026#34;configurations\u0026#34;: {\n\t\t\u0026#34;1player\u0026#34;: {\n\t\t\t\u0026#34;cpu_limit\u0026#34;: \u0026#34;100\u0026#34;,\n\t\t\t\u0026#34;mem_limit\u0026#34;: \u0026#34;64\u0026#34;,\n\t\t\t\u0026#34;params\u0026#34;: \u0026#34;-gamemode 1p\u0026#34;,\n\t\t},\n\t\t\u0026#34;50players\u0026#34;: {\n\t\t\t\u0026#34;cpu_limit\u0026#34;: \u0026#34;200\u0026#34;,\n\t\t\t\u0026#34;mem_limit\u0026#34;: \u0026#34;512\u0026#34;,\n\t\t\t\u0026#34;params\u0026#34;: \u0026#34;-gamemode 50p\u0026#34;,\n\t\t}\n\t},\n\t\u0026#34;deployments\u0026#34;: {\n\t\t\u0026#34;global-1p\u0026#34;: {\n\t\t\t\u0026#34;game_version\u0026#34;: \u0026#34;1.4.0\u0026#34;\u0026#34;,\n\t\t\t\u0026#34;regions\u0026#34;: [\u0026#34;us-west\u0026#34;, \u0026#34;ap-southeast\u0026#34;],\n\t\t\t\u0026#34;configuration\u0026#34;: \u0026#34;1player\u0026#34;,\n\t\t\t\u0026#34;min_count\u0026#34;: 0,\n\t\t\t\u0026#34;max_count\u0026#34;: 0,\n\t\t\t\u0026#34;buffer_count\u0026#34;: 2\n\t\t},\n\t\t\u0026#34;us-50p\u0026#34;: {\n\t\t\t\u0026#34;game_version\u0026#34;: \u0026#34;1.4.0\u0026#34;\u0026#34;,\n\t\t\t\u0026#34;regions\u0026#34;: [\u0026#34;us-west\u0026#34;],\n\t\t\t\u0026#34;configuration\u0026#34;: \u0026#34;50players\u0026#34;,\n\t\t\t\u0026#34;min_count\u0026#34;: 0,\n\t\t\t\u0026#34;max_count\u0026#34;: 0,\n\t\t\t\u0026#34;buffer_count\u0026#34;: 5\n\t\t},\n\t},\n}\n```",
        "operationId": "SaveConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.DSMConfigRecord"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "config added/updated"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Save config",
        "tags": [
          "Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/images": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\nRequired scope: social\n\nThis endpoint will create image.\n\nSample image:\n{\n\t\u0026#34;namespace\u0026#34;:\u0026#34;dewa\u0026#34;,\n\t\u0026#34;version\u0026#34;:\u0026#34;1.0.0\u0026#34;,\n\t\u0026#34;image\u0026#34;:\u0026#34;144436415367.dkr.ecr.us-west-2.amazonaws.com/dewa:1.0.0\u0026#34;,\n\t\u0026#34;persistent\u0026#34;:false\n}\n```",
        "operationId": "CreateImage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateImageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "image created"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "the image is not exist in the container registry",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "conflict. duplicate image version record",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create image",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\nRequired scope: social\n\nThis endpoint will update an image name and/or image persistent flag.\n\nSample image:\n{\n\t\u0026#34;namespace\u0026#34;:\u0026#34;dewa\u0026#34;,\n\t\u0026#34;version\u0026#34;:\u0026#34;1.0.0\u0026#34;,\n\t\u0026#34;image\u0026#34;:\u0026#34;144436415367.dkr.ecr.us-west-2.amazonaws.com/dewa:1.0.0\u0026#34;,\n\t\u0026#34;persistent\u0026#34;:false\n}\n```",
        "operationId": "UpdateImage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ImageRecordUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "image updated"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update image",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/images/patches": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\nRequired scope: social\n\nThis endpoint will create image patch.\n\nSample image:\n{\n\t\u0026#34;namespace\u0026#34;:\u0026#34;dewa\u0026#34;,\n\t\u0026#34;version\u0026#34;:\u0026#34;1.0.0\u0026#34;,\n\t\u0026#34;patchVersion\u0026#34;:\u0026#34;1.0.0-patch\u0026#34;,\n\t\u0026#34;image\u0026#34;:\u0026#34;144436415367.dkr.ecr.us-west-2.amazonaws.com/dewa:1.0.0-patch\u0026#34;,\n\t\u0026#34;persistent\u0026#34;:false\n}\n```",
        "operationId": "CreateImagePatch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateImagePatchRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "image patch created"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "conflict. duplicate image patch version record",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create image patch",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/instances/spec/lowest": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:*:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint returns the lowest instance spec, both cpu (in Mhz) and memory (in Mb).",
        "operationId": "GetLowestInstanceSpec",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Lowest Instance Spec",
            "schema": {
              "$ref": "#/definitions/models.InstanceSpec"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get lowest instance spec.",
        "tags": [
          "Pod Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespace/{namespace}/workers": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:WORKER:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint retrieves a worker configuration to control the worker in the DSMC.",
        "operationId": "getWorkerConfig",
        "parameters": [
          {
            "description": "the namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The worker configuration has been successfully retrieved.",
            "schema": {
              "$ref": "#/definitions/models.WorkerConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get worker configuration",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:WORKER:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint creates a worker configuration to control the worker in the DSMC.",
        "operationId": "createWorkerConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.WorkerConfigRequest"
            }
          },
          {
            "description": "the namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The worker configuration has been successfully created.",
            "schema": {
              "$ref": "#/definitions/models.WorkerConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create worker configuration",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:WORKER:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint updates a worker configuration to control the worker in the DSMC.",
        "operationId": "updateWorkerConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.WorkerConfigRequest"
            }
          },
          {
            "description": "the namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The worker configuration has been successfully updated."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update worker configuration",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\nRequired scope: social\n\nThis endpoint removes config. When there are ready servers,\nthose servers will be removed.\n```",
        "operationId": "DeleteConfig",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "config deleted"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete config",
        "tags": [
          "Config"
        ],
        "x-errorCodes": {}
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get a dedicated servers config in a namespace.",
        "operationId": "GetConfig",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "config retrieved",
            "schema": {
              "$ref": "#/definitions/models.DSMConfigRecord"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get config for a namespace",
        "tags": [
          "Config"
        ],
        "x-errorCodes": {}
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\nRequired scope: social\n\nThis endpoint modifies config. When there are ready servers and\nthe server version is updated, those servers will be replaced with newer version.\n\nPort is where your game listens for incoming UDP connection, if empty it\u0026#39;ll be set to 15000\n\nCPU and Memory limit / request are formatted with Kubernetes format,\ne.g. CPU of 1000m is 1 core, and Memory of 512Mi is 512 MB.\n\nThe creation/claim/session/unreachable/heartbeat timeouts are all in seconds.\nCreation timeout is time limit for DS to startup until registers itself.\nClaim timeout is time limit for game session manager to claim its ready DS.\nSession timeout is time limit for match session before deleted.\nUnreachable timeout is time limit for DS in UNREACHABLE state before deleted.\nHeartbeat timeout is time limit for DS to give heartbeat before marked as UNREACHABLE.\n\nSample config:\n{\n\t\u0026#34;namespace\u0026#34;: \u0026#34;accelbyte\u0026#34;,\n\t\u0026#34;providers\u0026#34;: [\n\t\u0026#34;aws\u0026#34;\n\t],\n\t\u0026#34;port\u0026#34;: 7777,\n\t\u0026#34;protocol\u0026#34;: \u0026#34;udp\u0026#34;,\n\t\u0026#34;creation_timeout\u0026#34;: 120,\n\t\u0026#34;claim_timeout\u0026#34;: 60,\n\t\u0026#34;session_timeout\u0026#34;: 1800,\n\t\u0026#34;heartbeat_timeout\u0026#34;: 30,\n\t\u0026#34;unreachable_timeout\u0026#34;: 30,\n}\n```",
        "operationId": "UpdateConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateDSMConfigRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "config updated",
            "schema": {
              "$ref": "#/definitions/models.DSMConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update config",
        "tags": [
          "Config"
        ],
        "x-errorCodes": {}
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\nRequired scope: social\n\nThis endpoint creates config.\n\nPort is where your game listens for incoming UDP connection, if empty it\u0026#39;ll be set to 15000\n\nCPU and Memory limit / request are formatted with Kubernetes format,\ne.g. CPU of 1000m is 1 core, and Memory of 512Mi is 512 MB.\n\nThe creation/claim/session/unreachable/heartbeat timeouts are all in seconds.\nCreation timeout is time limit for DS to startup until registers itself.\nClaim timeout is time limit for game session manager to claim its ready DS.\nSession timeout is time limit for match session before deleted.\nUnreachable timeout is time limit for DS in UNREACHABLE state before deleted.\nHeartbeat timeout is time limit for DS to give heartbeat before marked as UNREACHABLE.\n\nSample config:\n{\n\t\u0026#34;namespace\u0026#34;: \u0026#34;accelbyte\u0026#34;,\n\t\u0026#34;providers\u0026#34;: [\n\t\u0026#34;aws\u0026#34;\n\t],\n\t\u0026#34;port\u0026#34;: 7777,\n\t\u0026#34;protocol\u0026#34;: \u0026#34;udp\u0026#34;,\n\t\u0026#34;creation_timeout\u0026#34;: 120,\n\t\u0026#34;claim_timeout\u0026#34;: 60,\n\t\u0026#34;session_timeout\u0026#34;: 1800,\n\t\u0026#34;heartbeat_timeout\u0026#34;: 30,\n\t\u0026#34;unreachable_timeout\u0026#34;: 30,\n}\n```",
        "operationId": "CreateConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateDSMConfigRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "config created",
            "schema": {
              "$ref": "#/definitions/models.DSMConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create config",
        "tags": [
          "Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/cache": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint clears config cache in a namespace",
        "operationId": "ClearCache",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "ok"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Clear config cache",
        "tags": [
          "Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/deployments": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get a all deployments in a namespace\n\nParameter Offset and Count is Required",
        "operationId": "GetAllDeployment",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "how many items to return",
            "in": "query",
            "name": "count",
            "required": true,
            "type": "integer"
          },
          {
            "description": "offset from list to query from",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          },
          {
            "description": "name of the deployment",
            "in": "query",
            "name": "name",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.ListDeploymentResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get All Deployments",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/deployments/{deployment}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint delete a dedicated server deployment in a namespace",
        "operationId": "DeleteDeployment",
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "ok"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete Deployment",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get a dedicated server deployment in a namespace",
        "operationId": "GetDeployment",
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get Deployment",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint update a dedicated servers deployment in a namespace.",
        "operationId": "UpdateDeployment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateDeploymentRequest"
            }
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment updated",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "422": {
            "description": "invalid game version",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update deployment",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint create a dedicated servers deployment in a namespace.",
        "operationId": "CreateDeployment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateDeploymentRequest"
            }
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "deployment created",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "deployment already exists",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create deployment",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/deployments/{deployment}/overrides/regions/{region}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint delete a dedicated server deployment override in a namespace in a region for root deployment",
        "operationId": "DeleteRootRegionOverride",
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "region",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment region override deleted",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete Region Override",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint update a dedicated servers deployment override in a namespace in a region for root deployment.",
        "operationId": "UpdateRootRegionOverride",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateRegionOverrideRequest"
            }
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "region",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment region override updated",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update region override",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint creates a dedicated servers deployment override in a namespace in a region for root deployment.",
        "operationId": "CreateRootRegionOverride",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateRegionOverrideRequest"
            }
          },
          {
            "description": "deployment of the game",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "region",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "region override created",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "deployment already has region override",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create region override",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/deployments/{deployment}/overrides/version/{version}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint create a dedicated servers deployment override in a namespace.",
        "operationId": "CreateDeploymentOverride",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateDeploymentOverrideRequest"
            }
          },
          {
            "description": "deployment of the game",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "deployment override created",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "deployment override already exists",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create deployment override",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/deployments/{deployment}/overrides/versions/{version}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint delete a dedicated server deployment override in a namespace",
        "operationId": "DeleteDeploymentOverride",
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment override deleted",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete Deployment Override",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint update a dedicated servers deployment override in a namespace.",
        "operationId": "UpdateDeploymentOverride",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateDeploymentOverrideRequest"
            }
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment override updated",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update deployment override",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/deployments/{deployment}/overrides/versions/{version}/regions/{region}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint delete a dedicated server deployment override in a namespace in a region for deployment overrides",
        "operationId": "DeleteOverrideRegionOverride",
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "region",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment region override deleted",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment  not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete region override for deployment override",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint update a dedicated servers deployment override in a namespace in a region for deployment overrides.",
        "operationId": "UpdateOverrideRegionOverride",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateRegionOverrideRequest"
            }
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "region",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment region override updated",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update region override for deployment override",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint creates a dedicated servers deployment override in a namespace in a region for deployment overrides.",
        "operationId": "CreateOverrideRegionOverride",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateRegionOverrideRequest"
            }
          },
          {
            "description": "deployment of the game",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "region",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "region override created",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "deployment already has region override",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create region override for deployment override",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/deployments/{deployment}/versions/{version}/queues": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint deletes the deployment creating server count queue in a namespace in all registered region for the selected version",
        "operationId": "DeleteCreatingServerCountQueue",
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment creating server count queue deleted"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete creating server count deployment queue",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/pods": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get a all pod configs in a namespace\n\nParameter Offset and Count is Required",
        "operationId": "GetAllPodConfig",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "how many items to return",
            "in": "query",
            "name": "count",
            "required": true,
            "type": "integer"
          },
          {
            "description": "offset from list to query from",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.ListPodConfigResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get all pod configs",
        "tags": [
          "Pod Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/pods/{name}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint delete a dedicated server pod config in a namespace",
        "operationId": "DeletePodConfig",
        "parameters": [
          {
            "description": "pod name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "pod config deleted"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "pod config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "pod config in use",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete pod config",
        "tags": [
          "Pod Config"
        ],
        "x-errorCodes": {}
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get a dedicated server pod config in a namespace",
        "operationId": "GetPodConfig",
        "parameters": [
          {
            "description": "pod name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.PodConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "pod name not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get Pod Config",
        "tags": [
          "Pod Config"
        ],
        "x-errorCodes": {}
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint update a dedicated servers pod config in a namespace.",
        "operationId": "UpdatePodConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdatePodConfigRequest"
            }
          },
          {
            "description": "pod name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "pod config updated",
            "schema": {
              "$ref": "#/definitions/models.PodConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "pod config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "pod config with same name already exist",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update pod config",
        "tags": [
          "Pod Config"
        ],
        "x-errorCodes": {}
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint create a dedicated servers pod config in a namespace.",
        "operationId": "CreatePodConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreatePodConfigRequest"
            }
          },
          {
            "description": "pod name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "pod config created",
            "schema": {
              "$ref": "#/definitions/models.PodConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "pod config already exists",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create pod config",
        "tags": [
          "Pod Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/ports/{name}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint delete a dedicated server port config in a namespace",
        "operationId": "DeletePort",
        "parameters": [
          {
            "description": "port name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.DSMConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "port config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete port config",
        "tags": [
          "Config"
        ],
        "x-errorCodes": {}
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint update a dedicated servers port config in a namespace.",
        "operationId": "UpdatePort",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdatePortRequest"
            }
          },
          {
            "description": "port name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "pod config updated",
            "schema": {
              "$ref": "#/definitions/models.DSMConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "port config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update port config",
        "tags": [
          "Config"
        ],
        "x-errorCodes": {}
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint create a dedicated servers port config in a namespace.",
        "operationId": "AddPort",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreatePortRequest"
            }
          },
          {
            "description": "port name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "pod config created",
            "schema": {
              "$ref": "#/definitions/models.DSMConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "port config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "port config already exists",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create port config",
        "tags": [
          "Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/images": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social.\n\nThis endpoint will delete an image that specified in the request parameter.\n\nDefault image is cannot be deleted and will throw error 422 (Unprocessable entity).",
        "operationId": "DeleteImage",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "registry image URI that will be deleted",
            "in": "query",
            "name": "imageURI",
            "required": true,
            "type": "string"
          },
          {
            "description": "image version that will be deleted",
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "image deleted"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete an image",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint lists all of dedicated servers images.\n\nParameter Offset and Count is Required",
        "operationId": "ListImages",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "how many items to return",
            "in": "query",
            "name": "count",
            "required": true,
            "type": "integer"
          },
          {
            "description": "offset from list to query from",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          },
          {
            "description": "image name or image version. In UI this is from search text box",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "default": "createdAt",
            "description": "sort by a specific field",
            "enum": [
              "createdAt",
              "updatedAt",
              "version"
            ],
            "in": "query",
            "name": "sortBy",
            "type": "string"
          },
          {
            "default": "asc",
            "description": "sort direction",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "sortDirection",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "images listed",
            "schema": {
              "$ref": "#/definitions/models.ListImageResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List all DS images",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/images/limit": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get ds image limit for specific namespace",
        "operationId": "GetImageLimit",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.GetImageLimitResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "DS Image Limit",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/images/patches": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint will delete an image patch that specified in the request parameter",
        "operationId": "DeleteImagePatch",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "registry image patch URI that will be deleted",
            "in": "query",
            "name": "imageURI",
            "required": true,
            "type": "string"
          },
          {
            "description": "image version that will be deleted",
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "image patch version that will be deleted",
            "in": "query",
            "name": "versionPatch",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "image deleted"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete an image patch",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/images/versions/{version}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get specific version of dedicated servers images.",
        "operationId": "GetImageDetail",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "version of the image",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.GetImageDetailResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "image version not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "DS Image Detail",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/images/versions/{version}/patches": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get image patches by version.\n\nImage Size unit is byte.",
        "operationId": "GetImagePatches",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "version of the ds",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.ListImagePatchesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get All Image Patches by Version",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/images/versions/{version}/patches/{versionPatch}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get specific image patch version of dedicated servers version.",
        "operationId": "GetImagePatchDetail",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "version of the game",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "version of the image patch",
            "in": "path",
            "name": "versionPatch",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.GetImagePatchDetailResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "image version not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "DS Image patch Detail",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/manual/buffer/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\nRequired scope: social\n\nThis endpoint manually adds buffer for selected namespace and deployment\nx Job will contain y num of allocs.\n\nRegion can be filled with comma-separated values.\nuse * as region name to deploy to all region specified in the deployment\u0026#39;s region list\n\nif JobPriority set to 0, we will use 80 as default value for job priority\n\nOverrideVersion will be used as override version for the new allocations.\nIf OverrideVersion is empty, will use version in the deployment.\n```",
        "operationId": "AddBuffer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AddBufferRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "buffer requested",
            "schema": {
              "$ref": "#/definitions/models.AddBufferResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Manual Add Buffer",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/repository": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get a dedicated servers repository name in a namespace.",
        "operationId": "GetRepository",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "repository retrieved",
            "schema": {
              "$ref": "#/definitions/models.RepositoryRecord"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "repository not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get repository for a namespace",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/servers": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]\n\nRequired scope: social\n\nThis endpoint lists all of dedicated servers in a namespace managed by this service.\n\nParameter Offset and Count is Required",
        "operationId": "ListServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "how many items to return",
            "in": "query",
            "name": "count",
            "required": true,
            "type": "integer"
          },
          {
            "description": "offset from list to query from",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          },
          {
            "description": "region where DS server is located. if not specified it will list all servers.",
            "in": "query",
            "name": "region",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "servers listed",
            "schema": {
              "$ref": "#/definitions/models.ListServerResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List all managed servers in a region",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/servers/count": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]\n\nRequired scope: social\n\nThis endpoint counts all of dedicated servers in a namespace managed by this service.",
        "operationId": "CountServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "servers listed",
            "schema": {
              "$ref": "#/definitions/models.CountServerResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Count all managed servers",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/servers/count/detailed": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]\n\nRequired scope: social\n\nThis endpoint counts all of dedicated servers in a region managed by this service.",
        "operationId": "CountServerDetailed",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "region where DS server is located.",
            "in": "query",
            "name": "region",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "servers listed",
            "schema": {
              "$ref": "#/definitions/models.DetailedCountServerResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get detailed count of managed servers in a region",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/servers/local": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]\n\nRequired scope: social\n\nThis endpoint lists all of local dedicated servers in a namespace managed by this service.",
        "operationId": "ListLocalServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "servers listed",
            "schema": {
              "$ref": "#/definitions/models.ListServerResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List all managed local servers",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/servers/local/{name}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [DELETE]\n\nRequired scope: social\n\nThis endpoint deletes a specified local dedicated server from DB.\nNote that DSM has no ability to shutdown local DS.",
        "operationId": "DeleteLocalServer",
        "parameters": [
          {
            "description": "name of the DS",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "server deleted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete a local server",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/servers/{podName}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [DELETE]\n\nRequired scope: social\n\nThis endpoint deletes a specified dedicated server from DB and terminates the DS pod.",
        "operationId": "DeleteServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the DS pod",
            "in": "path",
            "name": "podName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "server deleted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete a server in a region",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]\n\nRequired scope: social\n\nThis endpoint queries a specified dedicated server from DB.",
        "operationId": "GetServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the DS pod",
            "in": "path",
            "name": "podName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "server queried",
            "schema": {
              "$ref": "#/definitions/models.ServerDetailsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Query a server in a region",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/sessions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SESSION [READ]\n\nRequired scope: social\n\nThis endpoint lists all of sessions in a namespace managed by this service.\n\nParameter Offset and Count is Required",
        "operationId": "ListSession",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "how many items to return",
            "in": "query",
            "name": "count",
            "required": true,
            "type": "integer"
          },
          {
            "description": "offset from list to query from",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          },
          {
            "description": "region where session is located. if not specified it will list all sessions.",
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "description": "append server info to session or not",
            "in": "query",
            "name": "withServer",
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "sessions listed",
            "schema": {
              "$ref": "#/definitions/models.ListSessionResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List all managed sessions in a region",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/sessions/count": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SESSION [READ]\n\nRequired scope: social\n\nThis endpoint count all of sessions in a namespace managed by this service.",
        "operationId": "CountSession",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "region where session is located. if not specified it will count all sessions.",
            "in": "query",
            "name": "region",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "sessions listed",
            "schema": {
              "$ref": "#/definitions/models.CountSessionResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Count all sessions",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/sessions/{sessionID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SESSION [DELETE]\n\nRequired scope: social\n\nThis endpoint deletes a specified session and its corresponding match result from DB.",
        "operationId": "DeleteSession",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "session to be deleted",
            "in": "path",
            "name": "sessionID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "session deleted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete a session in a region",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/workers/ghost": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [DELETE]\n\nRequired scope: social\n\nThis endpoint run ghost cleaner once.",
        "operationId": "RunGhostCleanerRequestHandler",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "worker ran"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Run Ghost Cleaner",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/workers/zombie": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [DELETE]\nRequired scope: social\n\nThis endpoint run zombie cleaner once\n\nuse * as region name to target all regions\n```",
        "operationId": "RunZombieCleanerRequestHandler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.DeleteZombieRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "worker ran"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Run Zombie Cleaner",
        "tags": [
          "Admin"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/repository": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\nRequired scope: social\n\nThis endpoint will create image repository.\n\nSample repository:\n{\n\t\u0026#34;namespace\u0026#34;:\u0026#34;testing\u0026#34;,\n\t\u0026#34;repository\u0026#34;:\u0026#34;ds-testing-924623\u0026#34;,\n}\n```",
        "operationId": "CreateRepository",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateRepositoryRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "repository created"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create repository",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/v1/namespaces/{namespace}/configs/export": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint export a dedicated servers config in a namespace.\n",
        "operationId": "exportConfigV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "config exported",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "unauthorized access",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "forbidden access",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "export DSM Controller configuration for a namespace",
        "tags": [
          "Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/admin/v1/namespaces/{namespace}/configs/import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint import a dedicated servers config in a namespace.\n\nIf there is an existing configuration, the configuration would be replaced.\n",
        "operationId": "importConfigV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "imported file",
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "config imported",
            "schema": {
              "$ref": "#/definitions/models.ImportResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "unauthorized access",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "forbidden access",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "import config for a namespace",
        "tags": [
          "Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/configs/deployments": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get a all deployments in a namespace\n\nParameter Offset and Count is Required",
        "operationId": "GetAllDeploymentClient",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "how many items to return",
            "in": "query",
            "name": "count",
            "required": true,
            "type": "integer"
          },
          {
            "description": "offset from list to query from",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          },
          {
            "description": "name of the deployment",
            "in": "query",
            "name": "name",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.ListDeploymentResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get All Deployments for client",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/configs/deployments/{deployment}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint delete a dedicated server deployment in a namespace",
        "operationId": "DeleteDeploymentClient",
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "ok"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete Deployment for client",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get a dedicated server deployment in a namespace",
        "operationId": "GetDeploymentClient",
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get Deployment for Client",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint create a dedicated servers deployment in a namespace.",
        "operationId": "CreateDeploymentClient",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateDeploymentRequest"
            }
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "deployment created",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "deployment already exists",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create deployment for client",
        "tags": [
          "Deployment Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/configs/pods": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get a all pod configs in a namespace\n\nParameter Offset and Count is Required",
        "operationId": "GetAllPodConfigClient",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "how many items to return",
            "in": "query",
            "name": "count",
            "required": true,
            "type": "integer"
          },
          {
            "description": "offset from list to query from",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.ListPodConfigResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get all pod configs for client",
        "tags": [
          "Pod Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/configs/pods/{name}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint delete a dedicated server pod config in a namespace",
        "operationId": "DeletePodConfigClient",
        "parameters": [
          {
            "description": "pod name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "pod config deleted"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "pod config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "pod config in use",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete pod config for client",
        "tags": [
          "Pod Config"
        ],
        "x-errorCodes": {}
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint create a dedicated servers pod config in a namespace.",
        "operationId": "CreatePodConfigClient",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreatePodConfigRequest"
            }
          },
          {
            "description": "pod name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "pod config created",
            "schema": {
              "$ref": "#/definitions/models.PodConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "pod config already exists",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create pod config for client",
        "tags": [
          "Pod Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/images": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint lists all of dedicated servers images.\n\nParameter Offset and Count is Required",
        "operationId": "ListImagesClient",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 50,
            "description": "how many items to return",
            "in": "query",
            "name": "count",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "offset from list to query from",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "image name or image version",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "default": "createdAt",
            "description": "sort by a specific field",
            "enum": [
              "createdAt",
              "updatedAt",
              "version"
            ],
            "in": "query",
            "name": "sortBy",
            "type": "string"
          },
          {
            "default": "asc",
            "description": "sort direction",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "sortDirection",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "images listed",
            "schema": {
              "$ref": "#/definitions/models.ListImageResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List all DS images for Client Credential authorization type",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/images/limit": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get DS image limit for specific namespace.This endpoint also give the non-persistent image which is used by any deployments",
        "operationId": "ImageLimitClient",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.GetImageLimitResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "DS Image Limit for Client",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/images/versions/{version}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get specific version of dedicated servers images.",
        "operationId": "ImageDetailClient",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "version of the image",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.GetImageDetailResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "image version not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "DS Image Detail Client",
        "tags": [
          "Image Config"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/servers": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:SERVER [READ]\n\nRequired scope: social\n\nThis endpoint lists all of dedicated servers in a namespace managed by this service.\n\nParameter Offset and Count is Required",
        "operationId": "ListServerClient",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "how many items to return",
            "in": "query",
            "name": "count",
            "required": true,
            "type": "integer"
          },
          {
            "description": "offset from list to query from",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          },
          {
            "description": "region where DS server is located. if not specified it will list all servers.",
            "in": "query",
            "name": "region",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "servers listed",
            "schema": {
              "$ref": "#/definitions/models.ListServerResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List all managed servers in a region for client",
        "tags": [
          "Server"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/servers/count/detailed": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]\n\nRequired scope: social\n\nThis endpoint counts all of dedicated servers in a region managed by this service.",
        "operationId": "CountServerDetailedClient",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "region where DS server is located.",
            "in": "query",
            "name": "region",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "servers listed",
            "schema": {
              "$ref": "#/definitions/models.DetailedCountServerResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get detailed count of managed servers in a region",
        "tags": [
          "Server"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/servers/heartbeat": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]\nRequired scope: social\n\nThis endpoint is intended to be called by dedicated server\nwhich already has claimed to extend its lifetime.\nDS should call this periodically after it claimed.\nThe timeframe between 2 heartbeat call should be smaller than\nthe session timout in the deployment configuration.\nIf the last heartbeat is longer than the session timout, the server.\nwill be considered as expired and will be terminated by DSMC.```",
        "operationId": "ServerHeartbeat",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.DSHeartbeatRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "heartbeat accepted"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Server Heartbeat",
        "tags": [
          "Server"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/servers/local/deregister": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]\nRequired scope: social\n\nThis endpoint is intended to be called by local dedicated server\nto let DSM know that it is shutting down.\n\nCalling this will remove the server records from DB.```",
        "operationId": "DeregisterLocalServer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.DeregisterLocalServerRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "server removed"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Deregister local DS",
        "tags": [
          "Server"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/servers/local/register": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]\nRequired scope: social\n\nUse the alternative GET of the same endpoint to upgrade DS connection to DSM via websocket.\n\nThis endpoint is intended to be called by local dedicated server to let DSM know that it is ready for use.\nUse local DS only for development purposes since DSM wouldn\u0026#39;t be able to properly manage local DS in production.\nThis MUST be called by DS after it is ready to accept match data and incoming client connections.\n\nUpon successfully calling this endpoint, the dedicated\nserver is listed under READY local servers.```",
        "operationId": "RegisterLocalServer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.RegisterLocalServerRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "server registered",
            "schema": {
              "$ref": "#/definitions/models.Server"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "server with same name already registered",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Register a local DS",
        "tags": [
          "Server"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/servers/register": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]\nRequired scope: social\n\nThis endpoint is intended to be called by dedicated server to let DSM know that it is ready for use.\nThis MUST be called by DS after it is ready to accept match data and incoming client connections.\n\nUpon successfully calling this endpoint, the dedicated\nserver is listed under READY servers.```",
        "operationId": "RegisterServer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.RegisterServerRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "server registered",
            "schema": {
              "$ref": "#/definitions/models.Server"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "allocation not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "server with same name already registered",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Register a DS",
        "tags": [
          "Server"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/servers/shutdown": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]\n\nRequired scope: social\n\nThis endpoint is intended to be called by dedicated server to let DSM know that it is shutting down. Calling this will remove the server and session records from DB.Set \u0026#39;kill_me\u0026#39; in request to \u0026#39;true\u0026#39; if the DS cannot shut itself down.",
        "operationId": "ShutdownServer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ShutdownServerRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "server removed"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Mark a DS is shutting down",
        "tags": [
          "Server"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/servers/{podName}/config/sessiontimeout": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: NAMESPACE:{namespace}:DSM:CONFIG [READ]\nRequired scope: social\n\nThis endpoint is intended to be called by dedicated server\nto get the session timeout that will be used for the DS.\nDS will use this session timeout to make sure it regularly make heartbeat\ncall to the DSMC, before the session timeout.```",
        "operationId": "GetServerSessionTimeout",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "DS name",
            "in": "path",
            "name": "podName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "session timout successfully retrieved",
            "schema": {
              "$ref": "#/definitions/models.ServerDeploymentConfigSessionTimeoutResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get the session timeout that will be used for the server",
        "tags": [
          "Server"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/servers/{podName}/session": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]\nRequired scope: social\n\nThis endpoint is intended to be called by dedicated server\nto query its session ID.\nDS should call this when it first receive player connection,\nto see if it is actually claimed```",
        "operationId": "GetServerSession",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "DS name",
            "in": "path",
            "name": "podName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "session found",
            "schema": {
              "$ref": "#/definitions/models.ServerSessionResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get Session ID",
        "tags": [
          "Server"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/sessions": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:SESSION [CREATE]\n\nRequired scope: social\n\nThis endpoint is intended to be called by game session manager (matchmaker, lobby, etc.) to get a dedicated server for a game session.\n\nIf a dedicated server is available, it will respond with a dedicated server details ready to be used.\n\nOtherwise it will trigger new dedicated server creation and respond with a server status CREATING. The game session manager then expected to wait and query the server readiness with GET /namespaces/{namespace}/sessions/{sessionID} endpoint until the serverstatus is READY\n\nSpecify pod_name with name of local DS in the request to create a session using the registered local DS",
        "operationId": "CreateSession",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateSessionRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "session created",
            "schema": {
              "$ref": "#/definitions/models.SessionResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "local server not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "session already exists",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "503": {
            "description": "server count is at max",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Register a new game session",
        "tags": [
          "Session"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/sessions/claim": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:SESSION [UPDATE]\n\nRequired scope: social\n\nThis endpoint is intended to be called by game session manager (matchmaker, lobby, etc.) to claim a dedicated server. The dedicated server cannot be claimed unless the status is READY",
        "operationId": "ClaimServer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ClaimSessionRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "DS claimed for session"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "session not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "DS is already claimed",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "425": {
            "description": "DS is not ready to be claimed",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "503": {
            "description": "DS is unreachable",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Claim a DS for a game session",
        "tags": [
          "Session"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/sessions/{sessionID}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:SESSION [READ]\n\nRequired scope: social\n\nThis endpoint is intended to be called by game session manager (matchmaker, lobby, etc.) to query the status of dedicated server that is created for the session.\n\nThe server is ready to use when the status is READY. At which point, the game session manager can claim the server using the GET /namespaces/{namespace}/sessions/{sessionID}/claim endpoint",
        "operationId": "GetSession",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "session ID",
            "in": "path",
            "name": "sessionID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "session queried",
            "schema": {
              "$ref": "#/definitions/models.SessionResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "session not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Query specified session",
        "tags": [
          "Session"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/namespaces/{namespace}/sessions/{sessionID}/cancel": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:SESSION [DELETE]\n\nRequired scope: social\n\nThis endpoint is intended to be called by game session manager (matchmaker, lobby, etc.) to cancel a temporary dedicated server. The dedicated server cannot be canceled unless the status is CREATING",
        "operationId": "CancelSession",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "session ID",
            "in": "path",
            "name": "sessionID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "DS creation successfully canceled"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "session not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "422": {
            "description": "session cannot be canceled",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Cancel session of a Temporary DS",
        "tags": [
          "Session"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/public/provider/default": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoints returns the default provider.",
        "operationId": "GetDefaultProvider",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Default provider got",
            "schema": {
              "$ref": "#/definitions/models.DefaultProvider"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get default provider",
        "tags": [
          "Public"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/public/providers": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoints returns list of supported providers. Armada is the default provider.",
        "operationId": "ListProviders",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Providers listed",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List all supported providers",
        "tags": [
          "Public"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/public/providers/regions/{region}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoint returns the providers by region.",
        "operationId": "ListProvidersByRegion",
        "parameters": [
          {
            "description": "region of the providers",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Default providers got",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List providers by region",
        "tags": [
          "Public"
        ],
        "x-errorCodes": {}
      }
    },
    "/dsmcontroller/v1/messages": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "get the list of messages.",
        "operationId": "publicGetMessages",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "messages returned",
            "schema": {
              "items": {
                "$ref": "#/definitions/log.AppMessageDeclaration"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "get service messages",
        "tags": [
          "Dsmc Operations"
        ],
        "x-errorCodes": {}
      }
    }
  },
  "definitions": {
    "log.AppMessageDeclaration": {
      "properties": {
        "Attributes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Code": {
          "type": "string"
        },
        "CodeName": {
          "type": "string"
        },
        "Section": {
          "type": "string"
        },
        "Service": {
          "type": "string"
        },
        "Text": {
          "type": "string"
        }
      },
      "required": [
        "Attributes",
        "Code",
        "CodeName",
        "Section",
        "Service",
        "Text"
      ]
    },
    "models.AddBufferRequest": {
      "properties": {
        "AllocCount": {
          "format": "int32",
          "type": "integer"
        },
        "DeploymentName": {
          "type": "string"
        },
        "JobCount": {
          "format": "int32",
          "type": "integer"
        },
        "JobPriority": {
          "format": "int32",
          "type": "integer"
        },
        "OverrideVersion": {
          "type": "string"
        },
        "Region": {
          "type": "string"
        }
      },
      "required": [
        "AllocCount",
        "DeploymentName",
        "JobCount",
        "JobPriority",
        "OverrideVersion",
        "Region"
      ]
    },
    "models.AddBufferResponse": {
      "properties": {
        "Message": {
          "type": "string"
        }
      },
      "required": [
        "Message"
      ]
    },
    "models.AllocationEvent": {
      "properties": {
        "description": {
          "type": "string"
        },
        "time_stamp": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "time_stamp",
        "type"
      ]
    },
    "models.ClaimSessionRequest": {
      "properties": {
        "game_mode": {
          "type": "string"
        },
        "matching_allies": {
          "items": {
            "$ref": "#/definitions/models.RequestMatchingAlly"
          },
          "type": "array"
        },
        "namespace": {
          "type": "string"
        },
        "notification_payload": {
          "$ref": "#/definitions/models.MatchResult.notification_payload"
        },
        "session_id": {
          "type": "string"
        }
      },
      "required": [
        "game_mode",
        "matching_allies",
        "namespace",
        "session_id"
      ]
    },
    "models.CountServerResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "count"
      ]
    },
    "models.CountSessionResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "count"
      ]
    },
    "models.CreateDSMConfigRequest": {
      "properties": {
        "claim_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "creation_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "default_version": {
          "type": "string",
          "x-nullable": false
        },
        "port": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "ports": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object",
          "x-nullable": false
        },
        "protocol": {
          "type": "string",
          "x-nullable": false
        },
        "providers": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": false
        },
        "session_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "unreachable_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        }
      },
      "required": [
        "claim_timeout",
        "creation_timeout",
        "default_version",
        "port",
        "ports",
        "protocol",
        "providers",
        "session_timeout",
        "unreachable_timeout"
      ]
    },
    "models.CreateDeploymentOverrideRequest": {
      "properties": {
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "configuration": {
          "type": "string"
        },
        "enable_region_overrides": {
          "type": "boolean",
          "x-omitempty": false
        },
        "extendable_session": {
          "type": "boolean",
          "x-omitempty": false
        },
        "game_version": {
          "type": "string"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "region_overrides": {
          "additionalProperties": {
            "$ref": "#/definitions/models.PodCountConfigOverride"
          },
          "type": "object"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "session_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "unlimited": {
          "type": "boolean",
          "x-omitempty": false
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "buffer_count",
        "buffer_percent",
        "configuration",
        "enable_region_overrides",
        "game_version",
        "max_count",
        "min_count",
        "unlimited",
        "use_buffer_percent"
      ]
    },
    "models.CreateDeploymentRequest": {
      "properties": {
        "allow_version_override": {
          "type": "boolean",
          "x-omitempty": false
        },
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "configuration": {
          "type": "string"
        },
        "enable_region_overrides": {
          "type": "boolean",
          "x-omitempty": false
        },
        "extendable_session": {
          "type": "boolean",
          "x-omitempty": false
        },
        "game_version": {
          "type": "string"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "overrides": {
          "additionalProperties": {
            "$ref": "#/definitions/models.DeploymentConfigOverride"
          },
          "type": "object"
        },
        "region_overrides": {
          "additionalProperties": {
            "$ref": "#/definitions/models.PodCountConfigOverride"
          },
          "type": "object"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "session_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "unlimited": {
          "type": "boolean",
          "x-omitempty": false
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "allow_version_override",
        "buffer_count",
        "buffer_percent",
        "configuration",
        "enable_region_overrides",
        "game_version",
        "max_count",
        "min_count",
        "unlimited",
        "use_buffer_percent"
      ]
    },
    "models.CreateImagePatchRequest": {
      "properties": {
        "artifactPath": {
          "type": "string"
        },
        "coreDumpEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "dockerPath": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "imageSize": {
          "format": "int64",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "patchVersion": {
          "type": "string"
        },
        "persistent": {
          "type": "boolean",
          "x-omitempty": false
        },
        "ulimitFileSize": {
          "format": "int32",
          "type": "integer"
        },
        "uploaderFlag": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "dockerPath",
        "image",
        "imageSize",
        "namespace",
        "patchVersion",
        "persistent",
        "uploaderFlag",
        "version"
      ]
    },
    "models.CreateImageRequest": {
      "properties": {
        "artifactPath": {
          "type": "string"
        },
        "coreDumpEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "dockerPath": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "imageSize": {
          "format": "int64",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "persistent": {
          "type": "boolean",
          "x-omitempty": false
        },
        "ulimitFileSize": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "dockerPath",
        "image",
        "imageSize",
        "namespace",
        "persistent",
        "version"
      ]
    },
    "models.CreatePodConfigRequest": {
      "properties": {
        "cpu_limit": {
          "format": "int32",
          "type": "integer"
        },
        "mem_limit": {
          "format": "int32",
          "type": "integer"
        },
        "params": {
          "type": "string"
        }
      },
      "required": [
        "cpu_limit",
        "mem_limit",
        "params"
      ]
    },
    "models.CreatePortRequest": {
      "properties": {
        "port": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "port"
      ]
    },
    "models.CreateRegionOverrideRequest": {
      "properties": {
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "unlimited": {
          "type": "boolean",
          "x-omitempty": false
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "buffer_count",
        "buffer_percent",
        "max_count",
        "min_count",
        "unlimited",
        "use_buffer_percent"
      ]
    },
    "models.CreateRepositoryRequest": {
      "properties": {
        "namespace": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "repository"
      ]
    },
    "models.CreateSessionRequest": {
      "properties": {
        "client_version": {
          "type": "string"
        },
        "configuration": {
          "type": "string"
        },
        "deployment": {
          "type": "string"
        },
        "game_mode": {
          "type": "string"
        },
        "matching_allies": {
          "items": {
            "$ref": "#/definitions/models.RequestMatchingAlly"
          },
          "type": "array"
        },
        "namespace": {
          "type": "string"
        },
        "notification_payload": {
          "$ref": "#/definitions/models.MatchResult.notification_payload"
        },
        "pod_name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "session_id": {
          "type": "string"
        }
      },
      "required": [
        "client_version",
        "configuration",
        "deployment",
        "game_mode",
        "matching_allies",
        "namespace",
        "pod_name",
        "region",
        "session_id"
      ]
    },
    "models.DSHeartbeatRequest": {
      "properties": {
        "podName": {
          "type": "string"
        }
      },
      "required": [
        "podName"
      ]
    },
    "models.DSMConfigRecord": {
      "properties": {
        "claim_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "creation_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "default_version": {
          "type": "string",
          "x-nullable": false
        },
        "modifiedBy": {
          "type": "string"
        },
        "namespace": {
          "type": "string",
          "x-nullable": false
        },
        "port": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "ports": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object",
          "x-nullable": false
        },
        "protocol": {
          "type": "string",
          "x-nullable": false
        },
        "providers": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": false
        },
        "session_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "unreachable_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "claim_timeout",
        "createdAt",
        "creation_timeout",
        "default_version",
        "modifiedBy",
        "namespace",
        "port",
        "protocol",
        "providers",
        "session_timeout",
        "unreachable_timeout",
        "updatedAt"
      ]
    },
    "models.DefaultProvider": {
      "properties": {
        "provider_name": {
          "type": "string"
        }
      },
      "required": [
        "provider_name"
      ]
    },
    "models.DeleteZombieRequest": {
      "properties": {
        "JobCount": {
          "format": "int32",
          "type": "integer"
        },
        "Region": {
          "type": "string"
        },
        "TimeoutSecond": {
          "format": "int32",
          "type": "integer"
        },
        "ZombieCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "JobCount",
        "Region",
        "TimeoutSecond",
        "ZombieCount"
      ]
    },
    "models.DeploymentConfigOverride": {
      "properties": {
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "configuration": {
          "type": "string"
        },
        "enable_region_overrides": {
          "type": "boolean",
          "x-omitempty": false
        },
        "extendable_session": {
          "type": "boolean",
          "x-omitempty": false
        },
        "game_version": {
          "type": "string"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "region_overrides": {
          "additionalProperties": {
            "$ref": "#/definitions/models.PodCountConfigOverride"
          },
          "type": "object"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "session_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "unlimited": {
          "type": "boolean",
          "x-omitempty": false
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "buffer_count",
        "buffer_percent",
        "configuration",
        "enable_region_overrides",
        "game_version",
        "max_count",
        "min_count",
        "name",
        "unlimited",
        "use_buffer_percent"
      ]
    },
    "models.DeploymentWithOverride": {
      "properties": {
        "allow_version_override": {
          "type": "boolean",
          "x-omitempty": false
        },
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "configuration": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "enable_region_overrides": {
          "type": "boolean",
          "x-omitempty": false
        },
        "extendable_session": {
          "type": "boolean",
          "x-omitempty": false
        },
        "game_version": {
          "type": "string"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "modifiedBy": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "overrides": {
          "additionalProperties": {
            "$ref": "#/definitions/models.DeploymentConfigOverride"
          },
          "type": "object"
        },
        "region_overrides": {
          "additionalProperties": {
            "$ref": "#/definitions/models.PodCountConfigOverride"
          },
          "type": "object"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "session_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "unlimited": {
          "type": "boolean",
          "x-omitempty": false
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "allow_version_override",
        "buffer_count",
        "buffer_percent",
        "configuration",
        "createdAt",
        "enable_region_overrides",
        "game_version",
        "max_count",
        "min_count",
        "modifiedBy",
        "name",
        "namespace",
        "unlimited",
        "updatedAt",
        "use_buffer_percent"
      ]
    },
    "models.DeregisterLocalServerRequest": {
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "models.DetailedCountServerResponse": {
      "properties": {
        "busy_count": {
          "format": "int32",
          "type": "integer"
        },
        "creating_count": {
          "format": "int32",
          "type": "integer"
        },
        "ready_count": {
          "format": "int32",
          "type": "integer"
        },
        "unreachable_count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "busy_count",
        "creating_count",
        "ready_count",
        "unreachable_count"
      ]
    },
    "models.GetImageDetailResponse": {
      "properties": {
        "data": {
          "$ref": "#/definitions/models.ImageRecordResponse"
        }
      },
      "required": [
        "data"
      ]
    },
    "models.GetImageLimitResponse": {
      "properties": {
        "data": {
          "$ref": "#/definitions/models.GetImageLimitResponseData"
        }
      },
      "required": [
        "data"
      ]
    },
    "models.GetImageLimitResponseData": {
      "properties": {
        "image_count": {
          "format": "int32",
          "type": "integer"
        },
        "image_limit": {
          "format": "int32",
          "type": "integer"
        },
        "non_persistent_image_number": {
          "format": "int32",
          "type": "integer"
        },
        "non_persistent_image_used_in_deployment_number": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "image_count",
        "image_limit",
        "non_persistent_image_number",
        "non_persistent_image_used_in_deployment_number"
      ]
    },
    "models.GetImagePatchDetailResponse": {
      "properties": {
        "data": {
          "$ref": "#/definitions/models.PatchImageRecord"
        }
      },
      "required": [
        "data"
      ]
    },
    "models.ImageRecordResponse": {
      "properties": {
        "artifactPath": {
          "type": "string"
        },
        "coreDumpEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "deployments": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dockerPath": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "imageReplications": {
          "items": {
            "$ref": "#/definitions/models.ImageReplication"
          },
          "type": "array"
        },
        "imageReplicationsMap": {
          "additionalProperties": {
            "$ref": "#/definitions/models.ImageReplication"
          },
          "type": "object"
        },
        "imageSize": {
          "format": "int64",
          "type": "integer"
        },
        "modifiedBy": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "persistent": {
          "type": "boolean",
          "x-omitempty": false
        },
        "ulimitFileSize": {
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "dockerPath",
        "image",
        "imageSize",
        "modifiedBy",
        "namespace",
        "persistent",
        "updatedAt",
        "version"
      ]
    },
    "models.ImageRecordUpdate": {
      "properties": {
        "artifactPath": {
          "type": "string"
        },
        "coreDumpEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "image": {
          "type": "string"
        },
        "imageReplicationsMap": {
          "additionalProperties": {
            "$ref": "#/definitions/models.ImageReplication"
          },
          "type": "object"
        },
        "namespace": {
          "type": "string"
        },
        "patchVersion": {
          "type": "string"
        },
        "persistent": {
          "type": "boolean",
          "x-omitempty": false
        },
        "ulimitFileSize": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "image",
        "namespace",
        "patchVersion",
        "persistent",
        "ulimitFileSize",
        "version"
      ]
    },
    "models.ImageReplication": {
      "properties": {
        "failure_code": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      },
      "required": [
        "failure_code",
        "region",
        "status",
        "uri"
      ]
    },
    "models.ImportResponse": {
      "properties": {
        "affected": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "failed": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "affected"
      ]
    },
    "models.InstanceSpec": {
      "properties": {
        "cpu": {
          "format": "int64",
          "type": "integer"
        },
        "mem": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "cpu",
        "mem"
      ]
    },
    "models.ListConfigResponse": {
      "properties": {
        "configs": {
          "items": {
            "$ref": "#/definitions/models.DSMConfigRecord"
          },
          "type": "array"
        }
      },
      "required": [
        "configs"
      ]
    },
    "models.ListDeploymentResponse": {
      "properties": {
        "deployments": {
          "items": {
            "$ref": "#/definitions/models.DeploymentWithOverride"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      },
      "required": [
        "deployments",
        "paging"
      ]
    },
    "models.ListImagePatchesResponse": {
      "properties": {
        "images": {
          "items": {
            "$ref": "#/definitions/models.PatchImageRecordResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "images"
      ]
    },
    "models.ListImageResponse": {
      "properties": {
        "images": {
          "items": {
            "$ref": "#/definitions/models.ImageRecordResponse"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      },
      "required": [
        "images",
        "paging"
      ]
    },
    "models.ListPodConfigResponse": {
      "properties": {
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        },
        "pod_configs": {
          "items": {
            "$ref": "#/definitions/models.PodConfigRecord"
          },
          "type": "array"
        }
      },
      "required": [
        "paging",
        "pod_configs"
      ]
    },
    "models.ListServerResponse": {
      "properties": {
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        },
        "servers": {
          "items": {
            "$ref": "#/definitions/models.ServerDetailsResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "paging"
      ]
    },
    "models.ListSessionResponse": {
      "properties": {
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        },
        "sessions": {
          "items": {
            "$ref": "#/definitions/models.Session"
          },
          "type": "array"
        }
      },
      "required": [
        "paging",
        "sessions"
      ]
    },
    "models.MatchResult.notification_payload": {},
    "models.PagingCursor": {
      "properties": {
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      },
      "required": [
        "next",
        "previous"
      ]
    },
    "models.PatchImageRecord": {
      "properties": {
        "artifactPath": {
          "type": "string"
        },
        "coreDumpEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "dockerPath": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "imageReplications": {
          "items": {
            "$ref": "#/definitions/models.ImageReplication"
          },
          "type": "array"
        },
        "imageReplicationsMap": {
          "additionalProperties": {
            "$ref": "#/definitions/models.ImageReplication"
          },
          "type": "object"
        },
        "imageSize": {
          "format": "int64",
          "type": "integer"
        },
        "modifiedBy": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "patchVersion": {
          "type": "string"
        },
        "persistent": {
          "type": "boolean",
          "x-omitempty": false
        },
        "ulimitFileSize": {
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "uploaderFlag": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "dockerPath",
        "image",
        "imageSize",
        "modifiedBy",
        "namespace",
        "patchVersion",
        "persistent",
        "updatedAt",
        "uploaderFlag",
        "version"
      ]
    },
    "models.PatchImageRecordResponse": {
      "properties": {
        "artifactPath": {
          "type": "string"
        },
        "coreDumpEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "dockerPath": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "imageReplications": {
          "items": {
            "$ref": "#/definitions/models.ImageReplication"
          },
          "type": "array"
        },
        "imageReplicationsMap": {
          "additionalProperties": {
            "$ref": "#/definitions/models.ImageReplication"
          },
          "type": "object"
        },
        "imageSize": {
          "format": "int64",
          "type": "integer"
        },
        "modifiedBy": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "patchVersion": {
          "type": "string"
        },
        "persistent": {
          "type": "boolean",
          "x-omitempty": false
        },
        "ulimitFileSize": {
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "uploaderFlag": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "dockerPath",
        "image",
        "imageSize",
        "modifiedBy",
        "namespace",
        "patchVersion",
        "persistent",
        "updatedAt",
        "uploaderFlag",
        "version"
      ]
    },
    "models.PodConfigRecord": {
      "properties": {
        "cpu_limit": {
          "format": "int32",
          "type": "integer"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "mem_limit": {
          "format": "int32",
          "type": "integer"
        },
        "modifiedBy": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "params": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "cpu_limit",
        "createdAt",
        "mem_limit",
        "modifiedBy",
        "name",
        "namespace",
        "params",
        "updatedAt"
      ]
    },
    "models.PodCountConfigOverride": {
      "properties": {
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "unlimited": {
          "type": "boolean",
          "x-omitempty": false
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "buffer_count",
        "buffer_percent",
        "max_count",
        "min_count",
        "name",
        "unlimited",
        "use_buffer_percent"
      ]
    },
    "models.RegisterLocalServerRequest": {
      "properties": {
        "custom_attribute": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "custom_attribute",
        "ip",
        "name",
        "port"
      ]
    },
    "models.RegisterServerRequest": {
      "properties": {
        "custom_attribute": {
          "type": "string"
        },
        "pod_name": {
          "type": "string"
        }
      },
      "required": [
        "custom_attribute",
        "pod_name"
      ]
    },
    "models.RepositoryRecord": {
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "modifiedBy": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "createdAt",
        "modifiedBy",
        "namespace",
        "repository",
        "updatedAt"
      ]
    },
    "models.RequestMatchMember": {
      "properties": {
        "user_id": {
          "type": "string"
        }
      },
      "required": [
        "user_id"
      ]
    },
    "models.RequestMatchParty": {
      "properties": {
        "party_attributes": {
          "type": "object"
        },
        "party_id": {
          "type": "string"
        },
        "party_members": {
          "items": {
            "$ref": "#/definitions/models.RequestMatchMember"
          },
          "type": "array"
        }
      },
      "required": [
        "party_attributes",
        "party_id",
        "party_members"
      ]
    },
    "models.RequestMatchingAlly": {
      "properties": {
        "matching_parties": {
          "items": {
            "$ref": "#/definitions/models.RequestMatchParty"
          },
          "type": "array"
        }
      },
      "required": [
        "matching_parties"
      ]
    },
    "models.Server": {
      "properties": {
        "allocation_events": {
          "items": {
            "$ref": "#/definitions/models.AllocationEvent"
          },
          "type": "array"
        },
        "allocation_id": {
          "type": "string"
        },
        "alternate_ips": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "artifact_path": {
          "type": "string"
        },
        "cpu_limit": {
          "format": "int32",
          "type": "integer"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "custom_attribute": {
          "type": "string"
        },
        "deployment": {
          "type": "string"
        },
        "deployment_override": {
          "type": "string"
        },
        "game_version": {
          "type": "string"
        },
        "image_version": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "is_core_dump_enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "is_override_game_version": {
          "type": "boolean",
          "x-omitempty": false
        },
        "is_override_region": {
          "type": "boolean",
          "x-omitempty": false
        },
        "job_id": {
          "type": "string"
        },
        "last_update": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "mem_limit": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "params": {
          "type": "string"
        },
        "pod_name": {
          "type": "string"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        },
        "ports": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object"
        },
        "protocol": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "session_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "status_history": {
          "items": {
            "$ref": "#/definitions/models.StatusHistory"
          },
          "type": "array"
        },
        "termination_reason": {
          "type": "string"
        },
        "ulimit_file_size": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "allocation_id",
        "artifact_path",
        "cpu_limit",
        "created_at",
        "deployment",
        "game_version",
        "image_version",
        "ip",
        "is_override_game_version",
        "is_override_region",
        "job_id",
        "last_update",
        "mem_limit",
        "namespace",
        "params",
        "pod_name",
        "port",
        "protocol",
        "provider",
        "region",
        "session_id",
        "status",
        "termination_reason",
        "ulimit_file_size"
      ]
    },
    "models.ServerDeploymentConfigSessionTimeoutResponse": {
      "properties": {
        "session_timeout": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "session_timeout"
      ]
    },
    "models.ServerDetailsResponse": {
      "properties": {
        "allocation_events": {
          "items": {
            "$ref": "#/definitions/models.AllocationEvent"
          },
          "type": "array"
        },
        "allocation_id": {
          "type": "string"
        },
        "alternate_ips": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "artifact_path": {
          "type": "string"
        },
        "cpu_limit": {
          "format": "int32",
          "type": "integer"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "custom_attribute": {
          "type": "string"
        },
        "deployment": {
          "type": "string"
        },
        "deployment_override": {
          "type": "string"
        },
        "game_version": {
          "type": "string"
        },
        "image_version": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "is_core_dump_enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "is_override_game_version": {
          "type": "boolean",
          "x-omitempty": false
        },
        "is_override_region": {
          "type": "boolean",
          "x-omitempty": false
        },
        "job_id": {
          "type": "string"
        },
        "last_update": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "mem_limit": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "params": {
          "type": "string"
        },
        "pod_name": {
          "type": "string"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        },
        "ports": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object"
        },
        "protocol": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "session_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "status_history": {
          "items": {
            "$ref": "#/definitions/models.StatusHistory"
          },
          "type": "array"
        },
        "termination_reason": {
          "type": "string"
        },
        "ulimit_file_size": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "allocation_id",
        "cpu_limit",
        "created_at",
        "deployment",
        "game_version",
        "image_version",
        "ip",
        "is_override_game_version",
        "is_override_region",
        "job_id",
        "last_update",
        "mem_limit",
        "namespace",
        "params",
        "pod_name",
        "port",
        "protocol",
        "provider",
        "region",
        "session_id",
        "status",
        "termination_reason"
      ]
    },
    "models.ServerSessionResponse": {
      "properties": {
        "session_id": {
          "type": "string"
        }
      },
      "required": [
        "session_id"
      ]
    },
    "models.Session": {
      "properties": {
        "Server": {
          "$ref": "#/definitions/models.Server"
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      },
      "required": [
        "Server",
        "id",
        "namespace",
        "provider",
        "region"
      ]
    },
    "models.SessionResponse": {
      "properties": {
        "session": {
          "$ref": "#/definitions/models.Session"
        }
      },
      "required": [
        "session"
      ]
    },
    "models.ShutdownServerRequest": {
      "properties": {
        "kill_me": {
          "type": "boolean",
          "x-omitempty": false
        },
        "pod_name": {
          "type": "string"
        }
      },
      "required": [
        "kill_me",
        "pod_name"
      ]
    },
    "models.StatusHistory": {
      "properties": {
        "status": {
          "type": "string"
        },
        "time_stamp": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "status",
        "time_stamp"
      ]
    },
    "models.UpdateDSMConfigRequest": {
      "properties": {
        "claim_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "creation_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "default_version": {
          "type": "string"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "type": "string"
        },
        "providers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "session_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "unreachable_timeout": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "claim_timeout",
        "creation_timeout",
        "default_version",
        "port",
        "protocol",
        "providers",
        "session_timeout",
        "unreachable_timeout"
      ]
    },
    "models.UpdateDeploymentOverrideRequest": {
      "properties": {
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "configuration": {
          "type": "string"
        },
        "enable_region_overrides": {
          "type": "boolean",
          "x-omitempty": false
        },
        "game_version": {
          "type": "string"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "session_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "unlimited": {
          "type": "boolean",
          "x-omitempty": false
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "buffer_count",
        "buffer_percent",
        "configuration",
        "enable_region_overrides",
        "game_version",
        "max_count",
        "min_count",
        "regions",
        "session_timeout",
        "unlimited",
        "use_buffer_percent"
      ]
    },
    "models.UpdateDeploymentRequest": {
      "properties": {
        "allow_version_override": {
          "type": "boolean",
          "x-omitempty": false
        },
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "configuration": {
          "type": "string"
        },
        "enable_region_overrides": {
          "type": "boolean",
          "x-omitempty": false
        },
        "extendable_session": {
          "type": "boolean",
          "x-omitempty": false
        },
        "game_version": {
          "type": "string"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "session_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "unlimited": {
          "type": "boolean",
          "x-omitempty": false
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "allow_version_override",
        "buffer_count",
        "buffer_percent",
        "configuration",
        "enable_region_overrides",
        "game_version",
        "max_count",
        "min_count",
        "regions",
        "session_timeout",
        "unlimited",
        "use_buffer_percent"
      ]
    },
    "models.UpdatePodConfigRequest": {
      "properties": {
        "cpu_limit": {
          "format": "int32",
          "type": "integer"
        },
        "mem_limit": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "params": {
          "type": "string"
        }
      },
      "required": [
        "cpu_limit",
        "mem_limit",
        "name",
        "params"
      ]
    },
    "models.UpdatePortRequest": {
      "properties": {
        "name": {
          "type": "string"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "port"
      ]
    },
    "models.UpdateRegionOverrideRequest": {
      "properties": {
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "unlimited": {
          "type": "boolean",
          "x-omitempty": false
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "buffer_count",
        "buffer_percent",
        "max_count",
        "min_count",
        "unlimited",
        "use_buffer_percent"
      ]
    },
    "models.WorkerConfig": {
      "properties": {
        "AutoDeletion": {
          "type": "boolean",
          "x-omitempty": false
        },
        "CreatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "CreatedBy": {
          "type": "string"
        },
        "GhostWorker": {
          "type": "boolean",
          "x-omitempty": false
        },
        "ManualBufferOverride": {
          "type": "boolean",
          "x-omitempty": false
        },
        "ModifiedBy": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "UpdatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "ZombieWorker": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "AutoDeletion",
        "CreatedAt",
        "CreatedBy",
        "GhostWorker",
        "ManualBufferOverride",
        "ModifiedBy",
        "Namespace",
        "UpdatedAt",
        "ZombieWorker"
      ]
    },
    "models.WorkerConfigRequest": {
      "properties": {
        "auto_deletion": {
          "type": "boolean",
          "x-omitempty": false
        },
        "ghost_worker": {
          "type": "boolean",
          "x-omitempty": false
        },
        "manual_buffer_override": {
          "type": "boolean",
          "x-omitempty": false
        },
        "zombie_worker": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "auto_deletion",
        "ghost_worker",
        "manual_buffer_override",
        "zombie_worker"
      ]
    },
    "response.Error": {
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "required": [
        "errorCode",
        "errorMessage"
      ]
    }
  },
  "x-docs": {
    "alias": "dsmcontroller",
    "host": "https://stage.accelbyte.io",
    "path": "/dsmcontroller/apidocs/api.json"
  },
  "x-messages": [
    {
      "Attributes": [
        "message"
      ],
      "Code": "20000",
      "CodeName": "InternalServerError",
      "Section": "general",
      "Service": "general",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "action",
        "details",
        "reason",
        "userID"
      ],
      "Code": "20000",
      "CodeName": "InternalServerErrorV1",
      "Section": "general",
      "Service": "general",
      "Text": "unable to {{action}}: {{reason}}, userID: {{userID}}, details: {{details}}"
    },
    {
      "Attributes": [],
      "Code": "20001",
      "CodeName": "UnauthorizedAccess",
      "Section": "general",
      "Service": "general",
      "Text": "unauthorized access"
    },
    {
      "Attributes": [
        "action",
        "details",
        "reason",
        "userID"
      ],
      "Code": "20002",
      "CodeName": "ValidationError",
      "Section": "general",
      "Service": "general",
      "Text": "unable to {{action}}: {{reason}}, userID: {{userID}}, details: {{details}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "20002",
      "CodeName": "ValidationErrorV1",
      "Section": "general",
      "Service": "general",
      "Text": "{{message}}"
    },
    {
      "Attributes": [],
      "Code": "20003",
      "CodeName": "ForbiddenAccess",
      "Section": "general",
      "Service": "general",
      "Text": ""
    },
    {
      "Attributes": [],
      "Code": "20007",
      "CodeName": "TooManyRequests",
      "Section": "general",
      "Service": "general",
      "Text": ""
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "20008",
      "CodeName": "UserNotFound",
      "Section": "general",
      "Service": "general",
      "Text": "{{message}}"
    },
    {
      "Attributes": [],
      "Code": "20013",
      "CodeName": "InsufficientPermissions",
      "Section": "general",
      "Service": "general",
      "Text": ""
    },
    {
      "Attributes": [
        "action",
        "details",
        "reason",
        "userID"
      ],
      "Code": "20019",
      "CodeName": "UnableToParseRequestBody",
      "Section": "general",
      "Service": "general",
      "Text": "unable to {{action}}: {{reason}}, userID: {{userID}}, details: {{details}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "20021",
      "CodeName": "InvalidPaginationParameters",
      "Section": "general",
      "Service": "general",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "20022",
      "CodeName": "TokenIsNotUserToken",
      "Section": "general",
      "Service": "general",
      "Text": "{{message}}"
    },
    {
      "Attributes": [],
      "Code": "720101",
      "CodeName": "ListConfigSuccess",
      "Section": "config",
      "Service": "dsmc",
      "Text": "config listed"
    },
    {
      "Attributes": [],
      "Code": "720113",
      "CodeName": "GetConfigSuccess",
      "Section": "config",
      "Service": "dsmc",
      "Text": "config retrieved"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720114",
      "CodeName": "GetConfigNotFound",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to get config for namespace {{namespace}}: not found"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720115",
      "CodeName": "SaveConfigSuccess",
      "Section": "config",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "details",
        "error"
      ],
      "Code": "720116",
      "CodeName": "SaveConfigMalformedRequest",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to save/update config {{details}} {{error}}"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720117",
      "CodeName": "ImportConfigUnableToParseForm",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to import config for {{namespace}}: unable to parse form"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720118",
      "CodeName": "ImportConfigUnableToReadFile",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to import config for {{namespace}}: unable to read file"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720119",
      "CodeName": "ImportConfigUnableToUnmarshalConfig",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to import config for {{namespace}}: unable to unmarshal request"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720120",
      "CodeName": "ImportConfigSuccess",
      "Section": "config",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720126",
      "CodeName": "UpdateConfigSuccess",
      "Section": "config",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720127",
      "CodeName": "UpdateConfigMalformedRequest",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to update config for {{namespace}}: malformed request"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720128",
      "CodeName": "UpdateConfigUnableToQueryExisting",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to update config for {{namespace}}: unable to query existing config to DB"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720129",
      "CodeName": "UpdateConfigNoExistingConfig",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to update config for {{namespace}}: config does not exist"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720130",
      "CodeName": "UpdateConfigInvalidConfig",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to update config for {{namespace}}: invalid config"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720131",
      "CodeName": "UpdateConfigInternalError",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to update config for {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720133",
      "CodeName": "CreateConfigConflict",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to create config for namespace {{namespace}}: a config has already been created."
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720134",
      "CodeName": "CreateConfigMalformedRequest",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to create config for namespace {{namespace}}: malformed request."
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720135",
      "CodeName": "CreateConfigInvalidRequest",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to create config for namespace {{namespace}}: invalid request."
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720136",
      "CodeName": "CreateConfigInternalError",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to create config for namespace {{namespace}}: unable to save config."
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720137",
      "CodeName": "CreateConfigSuccess",
      "Section": "config",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [],
      "Code": "720138",
      "CodeName": "ListConfigInternalError",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to list config: DB error"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720139",
      "CodeName": "GetConfigInternalError",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to get config for namespace {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720140",
      "CodeName": "DeleteConfigSuccess",
      "Section": "config",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720141",
      "CodeName": "DeleteConfigNotFound",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to delete config for namespace {{namespace}}: config not found"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720142",
      "CodeName": "DeleteConfigInternalError",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to delete config for namespace {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720143",
      "CodeName": "CreateConfigPortSuccess",
      "Section": "config",
      "Service": "dsmc",
      "Text": "config port {{name}} for {{namespace}} created"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720144",
      "CodeName": "CreateConfigPortMalformedRequest",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to create config port {{name}} for {{namespace}}: malformed request"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720145",
      "CodeName": "CreateConfigPortUnableToQueryExisting",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to create config port {{name}} for {{namespace}}: unable to query existing config to DB"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720146",
      "CodeName": "CreateConfigPortNoExistingConfig",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to create config port {{name}} for {{namespace}}: config does not exist"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720147",
      "CodeName": "CreateConfigPortInvalidConfig",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to create config port {{name}} for {{namespace}}: invalid config"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720148",
      "CodeName": "CreateConfigPortConflict",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to create config port {{name}} for {{namespace}}: port is already used"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720149",
      "CodeName": "CreateConfigPortInternalError",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to create config port {{name}} for {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720150",
      "CodeName": "UpdateConfigPortSuccess",
      "Section": "config",
      "Service": "dsmc",
      "Text": "config port {{name}} for {{namespace}} updated"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720151",
      "CodeName": "UpdateConfigPortMalformedRequest",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to update config port {{name}} for {{namespace}}: malformed request"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720152",
      "CodeName": "UpdateConfigPortUnableToQueryExisting",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to update config port {{name}} for {{namespace}}: unable to query existing config to DB"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720153",
      "CodeName": "UpdateConfigPortNoExistingConfig",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to update config port {{name}} for {{namespace}}: config does not exist"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720154",
      "CodeName": "UpdateConfigPortInvalidConfig",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to update config port {{name}} for {{namespace}}: invalid config"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720155",
      "CodeName": "UpdateConfigPortConflict",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to update config port {{name}} for {{namespace}}: port is already used"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720156",
      "CodeName": "UpdateConfigPortNotFound",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to update config port {{name}} for {{namespace}}: port not found"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720157",
      "CodeName": "UpdateConfigPortInternalError",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to update config port {{name}} for {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720158",
      "CodeName": "DeleteConfigPortSuccess",
      "Section": "config",
      "Service": "dsmc",
      "Text": "config port {{name}} for {{namespace}} deleted"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720159",
      "CodeName": "DeleteConfigPortUnableToQueryExisting",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to delete config port {{name}} for {{namespace}}: unable to query existing config to DB"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720160",
      "CodeName": "DeleteConfigPortNoExistingConfig",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to delete config port {{name}} for {{namespace}}: config does not exist"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720161",
      "CodeName": "DeleteConfigPortNotFound",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to delete config port {{name}} for {{namespace}}: port not found"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720162",
      "CodeName": "DeleteConfigPortInternalError",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to delete config port {{name}} for {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720163",
      "CodeName": "DeleteConfigUnableToQueryExisting",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to delete config for namespace {{namespace}}: unable to query existing config to DB"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720164",
      "CodeName": "ExportConfigSuccess",
      "Section": "config",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720165",
      "CodeName": "ExportConfigUnableToQueryExisting",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to export config for {{namespace}}: unable to query existing config to DB"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720166",
      "CodeName": "ExportConfigNotFound",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to export config for {{namespace}}: config does not exist"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720167",
      "CodeName": "ExportConfigInternalError",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to export config for {{namespace}}: write error"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720168",
      "CodeName": "ExportConfigQueryPodConfigError",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to export config for {{namespace}}: unable to query pod configs"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720169",
      "CodeName": "ExportConfigQueryImageError",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to export config for {{namespace}}: unable to query images"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720170",
      "CodeName": "ExportConfigQueryDeploymentError",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to export config for {{namespace}}: unable to query deployments"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720171",
      "CodeName": "ImportConfigInvalidRequest",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to import config for {{namespace}}: invalid request"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720172",
      "CodeName": "ImportConfigCreateConfigError",
      "Section": "config",
      "Service": "dsmc",
      "Text": "unable to import config for {{namespace}}: unable to write config to DB"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720173",
      "CodeName": "ClearCacheSuccess",
      "Section": "config",
      "Service": "dsmc",
      "Text": "config cache for {{namespace}} cleared"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720201",
      "CodeName": "RegisterServerSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "details",
        "error"
      ],
      "Code": "720202",
      "CodeName": "RegisterServerMalformedRequest",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to register server: {{details}} {{error}}"
    },
    {
      "Attributes": [
        "error"
      ],
      "Code": "720203",
      "CodeName": "RegisterServerNotFound",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to register server: {{error}}"
    },
    {
      "Attributes": [
        "details",
        "error"
      ],
      "Code": "720204",
      "CodeName": "RegisterServerNomadError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to register server: {{details}} {{error}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720205",
      "CodeName": "ShutdownServerSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "details",
        "error"
      ],
      "Code": "720206",
      "CodeName": "ShutdownServerMalformedRequest",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to shutdown server: {{details}} {{error}}"
    },
    {
      "Attributes": [],
      "Code": "720207",
      "CodeName": "ShutdownServerNotFound",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to shutdown server: Not Found"
    },
    {
      "Attributes": [
        "details",
        "error"
      ],
      "Code": "720208",
      "CodeName": "ShutdownServerK8sError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to shutdown server: {{details}} {{error}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720209",
      "CodeName": "RegisterLocalServerSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "error"
      ],
      "Code": "720210",
      "CodeName": "RegisterLocalServerMalformedRequest",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to register local server: {{error}}"
    },
    {
      "Attributes": [],
      "Code": "720211",
      "CodeName": "RegisterLocalServerInternalError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to register local server: DB error"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720212",
      "CodeName": "DeregisterLocalServerSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "error"
      ],
      "Code": "720213",
      "CodeName": "DeregisterLocalServerMalformedRequest",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to deregister local server: {{error}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720214",
      "CodeName": "HeartbeatServerSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "details",
        "error"
      ],
      "Code": "720215",
      "CodeName": "HeartbeatServerNotFound",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to receive server heartbeat: {{details}} {{error}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720216",
      "CodeName": "ClaimServerSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "details",
        "sessionID"
      ],
      "Code": "720217",
      "CodeName": "ClaimServerNotFound",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to claim server for sessionID: {{sessionID}}: {{details}}"
    },
    {
      "Attributes": [
        "details"
      ],
      "Code": "720218",
      "CodeName": "ClaimServerMalformedRequest",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to claim server: {{details}}"
    },
    {
      "Attributes": [
        "details",
        "sessionID"
      ],
      "Code": "720219",
      "CodeName": "ClaimServerNotReady",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to claim server for sessionID: {{sessionID}}: {{details}} "
    },
    {
      "Attributes": [
        "details",
        "sessionID"
      ],
      "Code": "720220",
      "CodeName": "ClaimServerConsumeError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to claim server for sessionID: {{sessionID}}: {{details}}"
    },
    {
      "Attributes": [
        "details",
        "sessionID"
      ],
      "Code": "720221",
      "CodeName": "ClaimServerUnreachable",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to claim server for sessionID: {{sessionID}}: {{details}}"
    },
    {
      "Attributes": [
        "details",
        "sessionID"
      ],
      "Code": "720222",
      "CodeName": "ClaimServerAlreadyClaimed",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to claim server for sessionID: {{sessionID}}: {{details}} "
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720223",
      "CodeName": "ListServerSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "details",
        "error"
      ],
      "Code": "720224",
      "CodeName": "ListServerMalformedRequest",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to list server: {{details}} {{error}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720225",
      "CodeName": "ListLocalServerSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720226",
      "CodeName": "GetServerSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "details",
        "error"
      ],
      "Code": "720227",
      "CodeName": "GetServerNotFound",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to query server: {{details}} {{error}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720228",
      "CodeName": "DeleteServerSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720229",
      "CodeName": "DeleteLocalServerSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [],
      "Code": "720234",
      "CodeName": "RegisterLocalServerConfigNotFound",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to register local server: config not found"
    },
    {
      "Attributes": [
        "details"
      ],
      "Code": "720235",
      "CodeName": "RegisterServerInternalServerError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to register server: DB error {{details}}"
    },
    {
      "Attributes": [],
      "Code": "720236",
      "CodeName": "ShutdownServerInternalServerError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to shutdown server:  "
    },
    {
      "Attributes": [],
      "Code": "720237",
      "CodeName": "DeregisterLocalServerInternalServerError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to deregister local server: DB error "
    },
    {
      "Attributes": [
        "details",
        "sessionID"
      ],
      "Code": "720238",
      "CodeName": "ClaimServerInternalServerError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to claim server for session sessionID: {{sessionID}}: {{details}} "
    },
    {
      "Attributes": [
        "details",
        "namespace",
        "region"
      ],
      "Code": "720239",
      "CodeName": "ListServerInternalServerError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to list server for {{namespace}} {{region}}: DB error {{details}}"
    },
    {
      "Attributes": [
        "details",
        "namespace"
      ],
      "Code": "720240",
      "CodeName": "CountServerInternalServerError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to count server for {{namespace}}: DB error {{details}}"
    },
    {
      "Attributes": [
        "details",
        "namespace"
      ],
      "Code": "720241",
      "CodeName": "CountServerDetailedInternalServerError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to count server detail for {{namespace}}: DB error {{details}}"
    },
    {
      "Attributes": [
        "details",
        "namespace"
      ],
      "Code": "720242",
      "CodeName": "ListLocalServerInternalServerError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to list local server for {{namespace}}: DB error {{details}}"
    },
    {
      "Attributes": [
        "details",
        "pod"
      ],
      "Code": "720243",
      "CodeName": "GetServerInternalServerError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to get server for {{pod}}: DB error {{details}}"
    },
    {
      "Attributes": [
        "details",
        "server"
      ],
      "Code": "720244",
      "CodeName": "DeleteLocalServerInternalServerError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to delete local server {{server}}: DB error {{details}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720245",
      "CodeName": "ServerHeartbeatSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "details"
      ],
      "Code": "720246",
      "CodeName": "ServerHeartbeatBadRequest",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to process server heartbeat : {{details}}"
    },
    {
      "Attributes": [
        "details",
        "namespace",
        "podName"
      ],
      "Code": "720247",
      "CodeName": "ServerHeartbeatInternalServerError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to process server heartbeat for namespace {{namespace}} with podName {{podName}}: DB error {{details}}"
    },
    {
      "Attributes": [
        "namespace",
        "podName"
      ],
      "Code": "720248",
      "CodeName": "ServerHeartbeatNotFound",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to process server heartbeat for namespace {{namespace}} with podName {{podName}}: server not found in DB"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720249",
      "CodeName": "GetServerSessionTimeoutSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "details"
      ],
      "Code": "720250",
      "CodeName": "GetServerSessionTimeoutBadRequest",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to query server\u0026#39;s session timeout : {{details}}"
    },
    {
      "Attributes": [
        "details",
        "podName"
      ],
      "Code": "720251",
      "CodeName": "GetServerSessionTimeoutInternalServerError",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to query server\u0026#39;s session timeout for podName {{podName}}: DB error {{details}}"
    },
    {
      "Attributes": [
        "podName"
      ],
      "Code": "720252",
      "CodeName": "GetServerSessionTimeoutNotFound",
      "Section": "server",
      "Service": "dsmc",
      "Text": "unable to query server\u0026#39;s session timeout for podName {{podName}}: server not found in DB"
    },
    {
      "Attributes": [],
      "Code": "720253",
      "CodeName": "ZombieCleanerSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "zombie cleaner successfully triggered"
    },
    {
      "Attributes": [],
      "Code": "720254",
      "CodeName": "GhostCleanerSuccess",
      "Section": "server",
      "Service": "dsmc",
      "Text": "ghost cleaner successfully triggered"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720301",
      "CodeName": "GetSessionSuccess",
      "Section": "session",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "details",
        "sessionID"
      ],
      "Code": "720302",
      "CodeName": "GetSessionNotFound",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to query session sessionID {{sessionID}}: not found {{details}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720303",
      "CodeName": "CreateSessionSuccess",
      "Section": "session",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "details",
        "namespace"
      ],
      "Code": "720304",
      "CodeName": "CreateSessionMalformedRequest",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to create session in {{namespace}}: {{details}}"
    },
    {
      "Attributes": [
        "details",
        "namespace"
      ],
      "Code": "720305",
      "CodeName": "CreateSessionConsumeError",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to create session in {{namespace}}: {{details}}"
    },
    {
      "Attributes": [
        "details",
        "namespace"
      ],
      "Code": "720306",
      "CodeName": "CreateSessionConfigNotFoundError",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to create session in {{namespace}}: {{details}} "
    },
    {
      "Attributes": [
        "details",
        "namespace",
        "sessionID"
      ],
      "Code": "720307",
      "CodeName": "CreateSessionSessionExists",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to create session in {{namespace}} sessionID {{sessionID}}: {{details}}"
    },
    {
      "Attributes": [
        "details",
        "namespace"
      ],
      "Code": "720308",
      "CodeName": "CreateSessionLocalServerNotFound",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to create session in {{namespace}}: {{details}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720309",
      "CodeName": "ListSessionSuccess",
      "Section": "session",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720310",
      "CodeName": "DeleteSessionSuccess",
      "Section": "session",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "details"
      ],
      "Code": "720311",
      "CodeName": "GetServerSessionInternalServerError",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to get server session: DB error {{details}}"
    },
    {
      "Attributes": [],
      "Code": "720312",
      "CodeName": "GetServerSessionNotFound",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to get server session: not found"
    },
    {
      "Attributes": [
        "details",
        "namespace"
      ],
      "Code": "720313",
      "CodeName": "CreateSessionInternalServerError",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to create session in {{namespace}}: {{details}}"
    },
    {
      "Attributes": [
        "details",
        "sessionID"
      ],
      "Code": "720314",
      "CodeName": "GetSessionInternalServerError",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to query session sessionID {{sessionID}}: DB error {{details}}"
    },
    {
      "Attributes": [
        "details",
        "namespace"
      ],
      "Code": "720315",
      "CodeName": "ListSessionInternalServerError",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to list session in {{namespace}}: DB error {{details}}"
    },
    {
      "Attributes": [
        "details",
        "namespace"
      ],
      "Code": "720316",
      "CodeName": "CountSessionInternalServerError",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to count session in {{namespace}}: DB error {{details}}"
    },
    {
      "Attributes": [
        "sessionID"
      ],
      "Code": "720317",
      "CodeName": "DeleteSessionInternalServerError",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to delete session sessionID {{sessionID}}: DB error "
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720318",
      "CodeName": "GetServerSessionSuccess",
      "Section": "session",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720319",
      "CodeName": "CancelSessionSuccess",
      "Section": "session",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "sessionID"
      ],
      "Code": "720320",
      "CodeName": "CancelSessionInternalServerError",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to cancel session sessionID {{sessionID}}: DB error "
    },
    {
      "Attributes": [
        "sessionID",
        "status"
      ],
      "Code": "720321",
      "CodeName": "CancelSessionUnprocessableEntity",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to cancel session session {{sessionID}}: server status is {{status}}"
    },
    {
      "Attributes": [
        "details",
        "namespace"
      ],
      "Code": "720322",
      "CodeName": "CreateSessionBadRequest",
      "Section": "session",
      "Service": "dsmc",
      "Text": "unable to create session in {{namespace}}: {{details}}"
    },
    {
      "Attributes": [],
      "Code": "720401",
      "CodeName": "ListProviderSuccess",
      "Section": "provider",
      "Service": "dsmc",
      "Text": "successfully retrieves list of providers"
    },
    {
      "Attributes": [],
      "Code": "720402",
      "CodeName": "GetDefaultProviderSuccess",
      "Section": "provider",
      "Service": "dsmc",
      "Text": "successfully get default provider"
    },
    {
      "Attributes": [],
      "Code": "720403",
      "CodeName": "ListProviderInternalServerError",
      "Section": "provider",
      "Service": "dsmc",
      "Text": "unable to get list of supported providers from storage: DB error"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720501",
      "CodeName": "CreateDeploymentSuccess",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "deployment {{name}} for namespace {{namespace}} created"
    },
    {
      "Attributes": [
        "details",
        "name",
        "namespace"
      ],
      "Code": "720502",
      "CodeName": "CreateDeploymentMalformedRequest",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create config deployment {{name}} for namespace {{namespace}}: malformed request: {{details}}"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720503",
      "CodeName": "CreateDeploymentInternalServerError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create config deployment {{name}} for namespace {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720504",
      "CodeName": "GetDeploymentSuccess",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "deployment {{name}} for namespace {{namespace}} queried"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720505",
      "CodeName": "GetDeploymentNotFound",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to get config deployment {{name}} for namespace {{namespace}}: Not found"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720506",
      "CodeName": "GetDeploymentInternalServerError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to get config deployment {{name}} for namespace {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720507",
      "CodeName": "DeleteDeploymentSuccess",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "deployment {{name}} for namespace {{namespace}} deleted"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720508",
      "CodeName": "DeleteDeploymentNotFound",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to delete config deployment {{name}} for namespace {{namespace}}: Not found"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720509",
      "CodeName": "DeleteDeploymentInternalServerError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to delete config deployment {{name}} for namespace {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace"
      ],
      "Code": "720510",
      "CodeName": "UpdateDeploymentMalformedRequest",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to update config deployment: {{deployment}} for {{namespace}}: malformed request {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace"
      ],
      "Code": "720511",
      "CodeName": "UpdateDeploymentInternalServerError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to update config deployment: {{deployment}} for {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "deployment",
        "namespace"
      ],
      "Code": "720512",
      "CodeName": "UpdateDeploymentNotFound",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to update config deployment: {{deployment}} for {{namespace}}: Deployment not Found"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "version"
      ],
      "Code": "720513",
      "CodeName": "CreateDeploymentOverrideSuccess",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "deployment {{deployment}} override {{version}} for namespace {{namespace}} created"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "version"
      ],
      "Code": "720514",
      "CodeName": "CreateDeploymentOverrideMalformedRequest",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create config deployment {{deployment}} override {{version}} for namespace {{namespace}}: malformed request: {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "version"
      ],
      "Code": "720515",
      "CodeName": "CreateDeploymentOverrideInternalServerError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create config deployment {{deployment}} override {{version}} for namespace {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "version"
      ],
      "Code": "720516",
      "CodeName": "UpdateDeploymentOverrideMalformedRequest",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to update config deployment {{deployment}} override {{version}} for {{namespace}}: malformed request {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "version"
      ],
      "Code": "720517",
      "CodeName": "UpdateDeploymentOverrideSuccess",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "deployment {{deployment}} override {{version}} for namespace {{namespace}} updated"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "version"
      ],
      "Code": "720518",
      "CodeName": "UpdateDeploymentOverrideInternalServerError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to update config deployment {{deployment}} override {{version}} for {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "version"
      ],
      "Code": "720519",
      "CodeName": "UpdateDeploymentOverrideNotFound",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to update config deployment {{deployment}} override {{version}} for {{namespace}}: not found: {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "version"
      ],
      "Code": "720520",
      "CodeName": "DeleteDeploymentOverrideSuccess",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "deployment {{deployment}} override {{version}} for {{namespace}} deleted"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "version"
      ],
      "Code": "720521",
      "CodeName": "DeleteDeploymentOverrideMalformedRequest",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to delete config deployment {{deployment}} override {{version}} for {{namespace}}: malformed request {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "version"
      ],
      "Code": "720522",
      "CodeName": "DeleteDeploymentOverrideInternalServerError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to delete config deployment {{deployment}} override {{version}} for {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "version"
      ],
      "Code": "720523",
      "CodeName": "DeleteDeploymentOverrideNotFound",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to delete config deployment {{deployment}} override {{version}} for {{namespace}}: not found: {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "region"
      ],
      "Code": "720524",
      "CodeName": "CreateRegionOverrideSuccess",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "deployment {{deployment}} region {{region}} override for {{namespace}} created"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "region"
      ],
      "Code": "720525",
      "CodeName": "CreateRegionOverrideMalformedRequest",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create deployment {{deployment}} region {{region}} override for {{namespace}}: malformed request: {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "region"
      ],
      "Code": "720526",
      "CodeName": "CreateRegionOverrideInternalServerError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create deployment {{deployment}} region {{region}} override for {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "region"
      ],
      "Code": "720527",
      "CodeName": "UpdateRegionOverrideSuccess",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "deployment {{deployment}} region {{region}} override for {{namespace}} updated"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "region"
      ],
      "Code": "720528",
      "CodeName": "UpdateRegionOverrideMalformedRequest",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to update deployment {{deployment}} region {{region}} override for {{namespace}}: malformed request {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "region"
      ],
      "Code": "720529",
      "CodeName": "UpdateRegionOverrideInternalServerError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to update deployment {{deployment}} region {{region}} override for {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "region"
      ],
      "Code": "720530",
      "CodeName": "UpdateRegionOverrideNotFound",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to update deployment {{deployment}} region {{region}} override for {{namespace}}: Not Found {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "region"
      ],
      "Code": "720531",
      "CodeName": "DeleteRegionOverrideSuccess",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "deployment {{deployment}} region {{region}} override for {{namespace}} deleted"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "region"
      ],
      "Code": "720532",
      "CodeName": "DeleteRegionOverrideMalformedRequest",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to delete deployment {{deployment}} region {{region}} override for {{namespace}}: malformed request {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "region"
      ],
      "Code": "720533",
      "CodeName": "DeleteRegionOverrideInternalServerError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to delete deployment {{deployment}} region {{region}} override for {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "region"
      ],
      "Code": "720534",
      "CodeName": "DeleteRegionOverrideNotFound",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to delete deployment {{deployment}} region {{region}} override for {{namespace}}: Not Found {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace"
      ],
      "Code": "720535",
      "CodeName": "UpdateDeploymentQueryExistingError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to update config deployment: {{deployment}} for {{namespace}}: unable tp query existing deployment"
    },
    {
      "Attributes": [
        "deployment",
        "namespace"
      ],
      "Code": "720536",
      "CodeName": "UpdateDeploymentSuccess",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "deployment {{deployment}} for {{namespace}} updated"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "version"
      ],
      "Code": "720537",
      "CodeName": "CreateDeploymentOverrideQueryError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create config deployment {{deployment}} override {{version}} for namespace {{namespace}}: unable to query {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "version"
      ],
      "Code": "720538",
      "CodeName": "CreateDeploymentOverrideNotFound",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create config deployment {{deployment}} override {{version}} for namespace {{namespace}}: deployment not found"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "version"
      ],
      "Code": "720539",
      "CodeName": "UpdateDeploymentOverrideQueryError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to update config deployment {{deployment}} override {{version}} for {{namespace}}: unable to query deployment"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "version"
      ],
      "Code": "720540",
      "CodeName": "CreateDeploymentOverrideConflict",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create config deployment {{deployment}} override {{version}} for namespace {{namespace}}: deployment override already exists: {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "region"
      ],
      "Code": "720541",
      "CodeName": "CreateRegionOverrideNotFound",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create deployment {{deployment}} region {{region}} override for {{namespace}}: not found: {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "region"
      ],
      "Code": "720542",
      "CodeName": "CreateRegionOverrideConflict",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create deployment {{deployment}} region {{region}} override for {{namespace}}: already exists: {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "region"
      ],
      "Code": "720543",
      "CodeName": "CreateRegionOverrideQueryError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create deployment {{deployment}} region {{region}} override for {{namespace}}: unable to query deployment"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "region"
      ],
      "Code": "720544",
      "CodeName": "UpdateRegionOverrideQueryError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to update deployment {{deployment}} region {{region}} override for {{namespace}}: unable to query deployment"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "region"
      ],
      "Code": "720545",
      "CodeName": "DeleteRegionOverrideQueryError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to delete deployment {{deployment}} region {{region}} override for {{namespace}}: unable to query deployment"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720546",
      "CodeName": "CreateDeploymentConflict",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create config deployment {{name}} for namespace {{namespace}}: deployment already exists"
    },
    {
      "Attributes": [
        "detail",
        "name",
        "namespace"
      ],
      "Code": "720547",
      "CodeName": "CreateDeploymentQueryError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create config deployment {{name}} for namespace {{namespace}}: unable to query {{detail}}"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720548",
      "CodeName": "GetAllDeploymentSuccess",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "all deployment for namespace {{namespace}} queried"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720549",
      "CodeName": "GetAllDeploymentInternalServerError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to get all deployments for namespace {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "details",
        "namespace"
      ],
      "Code": "720550",
      "CodeName": "GetAllDeploymentMalformedRequest",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to get all deployments for namespace {{namespace}}: malformed request: {{details}}"
    },
    {
      "Attributes": [
        "details",
        "name",
        "namespace"
      ],
      "Code": "720551",
      "CodeName": "DeleteDeploymentInvalidRequest",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to delete config deployment {{name}} for namespace {{namespace}}: {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "region"
      ],
      "Code": "720552",
      "CodeName": "CreateRegionOverrideNotAllowed",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to create deployment {{deployment}} region {{region}} override for {{namespace}}: enable region overrides set to false in deployment configuration"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace"
      ],
      "Code": "720553",
      "CodeName": "UpdateDeploymentUnprocessableEntity",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to update config deployment: {{deployment}} for {{namespace}}: data conflicts {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "version"
      ],
      "Code": "720561",
      "CodeName": "DeleteCreatingServerCountQueueSuccess",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "deployment {{deployment}} version {{version}} for namespace {{namespace}} creating server count queue deleted"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "version"
      ],
      "Code": "720562",
      "CodeName": "DeleteCreatingServerCountQueueMalformedRequest",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to delete creating server count queue in deployment {{deployment}} version {{version}} for namespace {{namespace}}: malformed request {{details}}"
    },
    {
      "Attributes": [
        "deployment",
        "namespace",
        "version"
      ],
      "Code": "720563",
      "CodeName": "DeleteCreatingServerCountQueueInternalServerError",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to delete creating server count queue in deployment {{deployment}} version {{version}} for namespace {{namespace}}: internal server error"
    },
    {
      "Attributes": [
        "deployment",
        "details",
        "namespace",
        "version"
      ],
      "Code": "720564",
      "CodeName": "DeleteCreatingServerCountQueueNotFound",
      "Section": "deployment",
      "Service": "dsmc",
      "Text": "unable to delete creating server count queue in deployment {{deployment}} version {{version}} for namespace {{namespace}}: not found {{details}}"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720601",
      "CodeName": "CreatePodConfigSuccess",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "pod config {{name}} for namespace {{namespace}} created"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720602",
      "CodeName": "CreatePodConfigMalformedRequest",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to create pod config {{name}} for namespace {{namespace}}: malformed request"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720603",
      "CodeName": "CreatePodConfigInternalServerError",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to create pod config {{name}} for namespace {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720604",
      "CodeName": "GetPodConfigSuccess",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "pod config {{name}} for namespace {{namespace}} queried"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720605",
      "CodeName": "GetPodConfigNotFound",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to get pod config {{name}} for namespace {{namespace}}: Not found"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720606",
      "CodeName": "GetPodConfigInternalServerError",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to get pod config {{name}} for namespace {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720607",
      "CodeName": "DeletePodConfigSuccess",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "pod config {{name}} for namespace {{namespace}} deleted"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720608",
      "CodeName": "DeletePodConfigNotFound",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to delete pod config {{name}} for namespace {{namespace}}: Not found"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720609",
      "CodeName": "DeletePodConfigInternalServerError",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to delete pod config {{name}} for namespace {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720610",
      "CodeName": "UpdatePodConfigMalformedRequest",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to update pod config {{name}} for {{namespace}}: malformed request"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720611",
      "CodeName": "UpdatePodConfigInternalServerError",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to update pod config {{name}} for {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720612",
      "CodeName": "UpdatePodConfigNotFound",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to update pod config {{name}} for {{namespace}}: pod config not found"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720613",
      "CodeName": "GetAllPodConfigSuccess",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "all pod config in {{namespace}} queried"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720614",
      "CodeName": "GetAllPodConfigInternalServerError",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to get all pod configs for namespace {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720615",
      "CodeName": "CreatePodConfigQueryError",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to create pod config {{name}} for namespace {{namespace}}: unable to query pod config"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720616",
      "CodeName": "CreatePodConfigConflict",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to create pod config {{name}} for namespace {{namespace}}: pod config already exists"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720617",
      "CodeName": "UpdatePodConfigQueryError",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to update pod config {{name}} for {{namespace}}: unable to query pod config"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720618",
      "CodeName": "UpdatePodConfigSuccess",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "pod config {{name}} for {{namespace}} updated"
    },
    {
      "Attributes": [
        "details",
        "name",
        "namespace"
      ],
      "Code": "720619",
      "CodeName": "DeletePodConfigQueryError",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to delete pod config {{name}} for namespace {{namespace}}: unable to query {{details}}"
    },
    {
      "Attributes": [
        "details",
        "namespace"
      ],
      "Code": "720620",
      "CodeName": "GetAllPodConfigMalformedRequest",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to get all pod configs for namespace {{namespace}}: malformed request: {{details}}"
    },
    {
      "Attributes": [
        "details",
        "name",
        "namespace"
      ],
      "Code": "720621",
      "CodeName": "DeletePodConfigInUse",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to delete pod config {{name}} for namespace {{namespace}}: pod config in use by: {{details}}"
    },
    {
      "Attributes": [
        "details",
        "name",
        "namespace"
      ],
      "Code": "720622",
      "CodeName": "DeletePodConfigInvalidRequest",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to delete pod config {{name}} for namespace {{namespace}}: {{details}}"
    },
    {
      "Attributes": [
        "name",
        "namespace"
      ],
      "Code": "720623",
      "CodeName": "UpdatePodConfigConflict",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to update pod config {{name}} for {{namespace}}: pod config with same name already exist"
    },
    {
      "Attributes": [
        "details",
        "name",
        "namespace"
      ],
      "Code": "720624",
      "CodeName": "UpdatePodConfigNameInUse",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to rename pod config {{name}} for namespace {{namespace}}: pod config in use by: {{details}}"
    },
    {
      "Attributes": [],
      "Code": "720625",
      "CodeName": "GetLowestInstanceSpecSuccess",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "Lowest instance spec retrieved successfully"
    },
    {
      "Attributes": [],
      "Code": "720626",
      "CodeName": "GetLowestInstanceSpecInternalServerError",
      "Section": "podconfig",
      "Service": "dsmc",
      "Text": "unable to get lowest instance spec: internal server error"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720701",
      "CodeName": "DeleteImageSuccess",
      "Section": "image",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "details",
        "namespace",
        "version"
      ],
      "Code": "720702",
      "CodeName": "DeleteImageMalformedRequest",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to delete image version {{version}} for {{namespace}}: {{details}}"
    },
    {
      "Attributes": [
        "details",
        "namespace",
        "version"
      ],
      "Code": "720703",
      "CodeName": "DeleteImageInternalServerError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to delete image version {{version}} for {{namespace}}: {{details}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720704",
      "CodeName": "ListImageSuccess",
      "Section": "image",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720705",
      "CodeName": "GetImageDetailSuccess",
      "Section": "image",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720706",
      "CodeName": "GetImageDetailNotFound",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to query image version {{version}} for {{namespace}}: image not found"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720707",
      "CodeName": "CreateImageSuccess",
      "Section": "image",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720708",
      "CodeName": "CreateImageMalformedRequest",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create image for {{namespace}}: malformed request"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720709",
      "CodeName": "CreateImageConflict",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create image {{version}} for {{namespace}}: image version is conflict"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720710",
      "CodeName": "UpdateImageSuccess",
      "Section": "image",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720711",
      "CodeName": "UpdateImageMalformedRequest",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to update image {{version}} for {{namespace}}: malformed request"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720712",
      "CodeName": "UpdateImageNotFound",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to update image {{version}} for {{namespace}}: version not found"
    },
    {
      "Attributes": [
        "details",
        "namespace",
        "version"
      ],
      "Code": "720713",
      "CodeName": "DeleteImageInUse",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to delete image version {{version}} for {{namespace}}: image in use by: {{details}}"
    },
    {
      "Attributes": [
        "details",
        "error"
      ],
      "Code": "720721",
      "CodeName": "ImportImageUnableToParseForm",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to import images: {{details}} {{error}}"
    },
    {
      "Attributes": [
        "details",
        "error"
      ],
      "Code": "720722",
      "CodeName": "ImportImageUnableToReadFile",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to import images: {{details}} {{error}}"
    },
    {
      "Attributes": [
        "details",
        "error"
      ],
      "Code": "720723",
      "CodeName": "ImportImageUnableToUnmarshalImage",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to import images: {{details}} {{error}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720724",
      "CodeName": "ImportImageSuccess",
      "Section": "image",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "details",
        "error"
      ],
      "Code": "720725",
      "CodeName": "ImportImageMalformedRequest",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to import images: {{details}} {{error}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720732",
      "CodeName": "GetImageLimitSuccess",
      "Section": "image",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "error"
      ],
      "Code": "720733",
      "CodeName": "GetImageLimitMalformedRequest",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to get image limit: malformed request. {{error}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720740",
      "CodeName": "CreateImagePatchSuccees",
      "Section": "image",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720741",
      "CodeName": "CreateImagePatchMalformedRequest",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create image patch, {{version}} for {{namespace}}: malformed request"
    },
    {
      "Attributes": [
        "namespace",
        "patchVersion",
        "version"
      ],
      "Code": "720742",
      "CodeName": "CreateImagePatchConflict",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create image patch, {{version}} patch {{patchVersion}} for {{namespace}}: image patch version is conflict"
    },
    {
      "Attributes": [
        "namespace",
        "patchVersion",
        "version"
      ],
      "Code": "720743",
      "CodeName": "CreateImagePatchInvalidRequest",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create image patch, {{version}} patch {{patchVersion}} for {{namespace}}: invalid request"
    },
    {
      "Attributes": [
        "error",
        "namespace",
        "patchVersion",
        "version"
      ],
      "Code": "720744",
      "CodeName": "CreateImagePatchQueryExistingError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create image patch, {{version}} patch {{patchVersion}} for {{namespace}}: error on querying existing patch images {{error}}"
    },
    {
      "Attributes": [
        "namespace",
        "patchVersion",
        "version"
      ],
      "Code": "720745",
      "CodeName": "CreateImagePatchInternalError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create image patch, {{version}} patch {{patchVersion}} for {{namespace}}: storing to DB error"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720749",
      "CodeName": "GetImagePatchesInternalError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to get image patches, {{version}} for {{namespace}}: query to DB error"
    },
    {
      "Attributes": [],
      "Code": "720750",
      "CodeName": "GetImagePatchesSuccess",
      "Section": "image",
      "Service": "dsmc",
      "Text": "{message}"
    },
    {
      "Attributes": [
        "namespace",
        "patchVersion",
        "version"
      ],
      "Code": "720751",
      "CodeName": "DeleteImagePatchInternalError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to delete image patch, {{version}} patch {{patchVersion}} for {{namespace}}: query to DB error"
    },
    {
      "Attributes": [
        "namespace",
        "patchVersion",
        "version"
      ],
      "Code": "720752",
      "CodeName": "DeleteImagePatchMalformedRequest",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to delete image patch, {{version}} patch {{patchVersion}} for {{namespace}}: malformed request"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720753",
      "CodeName": "DeleteImagePatchSuccess",
      "Section": "image",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "namespace",
        "patchVersion",
        "version"
      ],
      "Code": "720754",
      "CodeName": "GetImagePatchInternalError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to query image patch, {{version}} patch {{patchVersion}} for {{namespace}}: query to DB error"
    },
    {
      "Attributes": [
        "namespace",
        "patchVersion",
        "version"
      ],
      "Code": "720755",
      "CodeName": "GetImagePatchNotFound",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to query image patch, {{version}} patch {{patchVersion}} for {{namespace}}: not found"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720756",
      "CodeName": "GetImagePatchSuccess",
      "Section": "image",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "message"
      ],
      "Code": "720757",
      "CodeName": "CreateRepositorySuccess",
      "Section": "image",
      "Service": "dsmc",
      "Text": "{{message}}"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720758",
      "CodeName": "CreateRepositoryMalformedRequest",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create repository for {{namespace}}: malformed request"
    },
    {
      "Attributes": [
        "namespace",
        "repository"
      ],
      "Code": "720759",
      "CodeName": "CreateRepositoryConflict",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create repository {{repository}} for {{namespace}}: repository version is conflict"
    },
    {
      "Attributes": [
        "namespace",
        "repository"
      ],
      "Code": "720760",
      "CodeName": "CreateRepositoryInvalidRequest",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create repository {{repository}} for {{namespace}}: invalid request"
    },
    {
      "Attributes": [
        "namespace",
        "repository"
      ],
      "Code": "720761",
      "CodeName": "CreateRepositoryQueryExistingError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create repository {{repository}} for {{namespace}}: error on querying existing repositories"
    },
    {
      "Attributes": [
        "namespace",
        "repository"
      ],
      "Code": "720762",
      "CodeName": "CreateRepositoryRemoveOlderError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create repository {{repository}} for {{namespace}}: image count reached max, error on removing old image"
    },
    {
      "Attributes": [
        "namespace",
        "repository"
      ],
      "Code": "720763",
      "CodeName": "CreateRepositoryInternalError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create repository {{repository}} for {{namespace}}: storing to DB error"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720764",
      "CodeName": "GetRepositoryInternalError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to get repository for {{namespace}}: malformed request"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720765",
      "CodeName": "GetRepositoryNotFound",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to get repository for {{namespace}}: not found"
    },
    {
      "Attributes": [],
      "Code": "720766",
      "CodeName": "GetRepositorySuccess",
      "Section": "image",
      "Service": "dsmc",
      "Text": "repository retrieved"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720773",
      "CodeName": "CreateImageInvalidRequest",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create image {{version}} for {{namespace}}: invalid request"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720774",
      "CodeName": "CreateImageQueryExistingError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create image {{version}} for {{namespace}}: error on querying existing images"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720775",
      "CodeName": "CreateImageRemoveOlderError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create image {{version}} for {{namespace}}: image count reached max, error on removing old image"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720776",
      "CodeName": "CreateImageInternalError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create image {{version}} for {{namespace}}: storing to DB error"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720777",
      "CodeName": "UpdateImageInvalidRequest",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to update image {{version}} for {{namespace}}: invalid request"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720778",
      "CodeName": "UpdateImageQueryExistingError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to update image {{version}} for {{namespace}}: error on querying existing version"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720779",
      "CodeName": "UpdateImageInternalError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to update image {{version}} for {{namespace}}: error on updating record in DB"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720780",
      "CodeName": "UpdateImageInsertPatchInternalError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to update image {{version}} for {{namespace}}: error on updating record in DB"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720781",
      "CodeName": "CreateImageNotExistInContainerRegistryError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create image {{version}} for {{namespace}}: the image is not exist in docker registry"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720782",
      "CodeName": "CreateImageCheckingImageInContainerRegistryError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to create image {{version}} for {{namespace}}: error on checking image in container registry"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720784",
      "CodeName": "ListImageInternalServerError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to list images for {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "namespace",
        "version"
      ],
      "Code": "720785",
      "CodeName": "GetImageDetailInternalServerError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to query image version {{version}} for {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720787",
      "CodeName": "ExportImageInternalServerError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to export image for {{namespace}}: DB error"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720788",
      "CodeName": "ExportImageUnableWriteResponse",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to export image for {{namespace}}: failed write response"
    },
    {
      "Attributes": [],
      "Code": "720789",
      "CodeName": "ImportImageInternalServerError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to import image: DB error"
    },
    {
      "Attributes": [],
      "Code": "720790",
      "CodeName": "GetImageLimitInternalServerError",
      "Section": "image",
      "Service": "dsmc",
      "Text": "unable to get image limit: DB error"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720801",
      "CodeName": "CreateWorkerConfigurationSuccess",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "worker configuration for the {{namespace}} namespace has been successfully created"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720802",
      "CodeName": "CreateWorkerConfigurationConflict",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "unable to create a worker configuration for the {{namespace}} namespace: worker configuration already exists"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720803",
      "CodeName": "CreateWorkerConfigurationInvalidRequest",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "unable to create a worker configuration for the {{namespace}}: invalid request"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720804",
      "CodeName": "CreateWorkerConfigurationInternalServerError",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "unable to create a worker configuration for the {{namespace}}: internal server error"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720805",
      "CodeName": "UpdateWorkerConfigurationSuccess",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "worker configuration for the {{namespace}} namespace has been successfully updated"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720806",
      "CodeName": "UpdateWorkerConfigurationInvalidRequest",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "unable to update a worker configuration for the {{namespace}}: invalid request"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720807",
      "CodeName": "UpdateWorkerConfigurationInternalServerError",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "unable to update a worker configuration for the {{namespace}}: internal server error"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720808",
      "CodeName": "UpdateWorkerConfigurationNotFound",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "unable to update a worker configuration for the {{namespace}}: configuration not found"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720809",
      "CodeName": "GetWorkerConfigurationSuccess",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "worker configuration for the {{namespace}} namespace has been successfully updated"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720810",
      "CodeName": "GetWorkerConfigurationInvalidRequest",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "unable to find a worker configuration for the {{namespace}}: invalid request"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720811",
      "CodeName": "GetWorkerConfigurationInternalServerError",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "unable to find a worker configuration for the {{namespace}}: internal server error"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720812",
      "CodeName": "GetWorkerConfigurationNotFound",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "unable to find a worker configuration for the {{namespace}}"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720813",
      "CodeName": "DeleteWorkerConfigurationSuccess",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "worker configuration for the {{namespace}} namespace has been successfully deleted"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720814",
      "CodeName": "DeleteWorkerConfigurationInternalServerError",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "unable to delete a worker configuration for the {{namespace}}: internal server error"
    },
    {
      "Attributes": [
        "namespace"
      ],
      "Code": "720815",
      "CodeName": "DeleteWorkerConfigurationNotFound",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "unable to delete a worker configuration for the {{namespace}}: configuration not found"
    },
    {
      "Attributes": [
        "details",
        "image",
        "namespace"
      ],
      "Code": "720816",
      "CodeName": "CreateSessionImageNotFoundError",
      "Section": "worker",
      "Service": "dsmc",
      "Text": "unable to create session in {{namespace}} image {{image}} not found: {{details}}"
    }
  ],
  "x-version": {
    "buildDate": "2024-06-18T04:29:18+00:00",
    "gitHash": "be7a558436877e1c6ce17c8e095cc74ff03a2e5e",
    "name": "justice-dedicated-server-manager-controller-service",
    "revisionID": "6.8.2",
    "version": "6.8.2",
    "version-roles-seeding": "1.0.26"
  }
}