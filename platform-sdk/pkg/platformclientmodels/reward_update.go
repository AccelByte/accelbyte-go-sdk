// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RewardUpdate reward update
//
// swagger:model RewardUpdate
type RewardUpdate struct {

	// Description
	Description string `json:"description,omitempty"`

	// event topic to listen to
	// Required: true
	EventTopic *string `json:"eventTopic"`

	// Max awarded
	MaxAwarded int32 `json:"maxAwarded,omitempty"`

	// Max awarded per user
	MaxAwardedPerUser int32 `json:"maxAwardedPerUser,omitempty"`

	//  The path to get namespace from event payload, if not present, will use default value "$.[0].namespace"
	NamespaceExpression string `json:"namespaceExpression,omitempty"`

	// rewardCode
	// Required: true
	RewardCode *string `json:"rewardCode"`

	// list of reward condition
	RewardConditions []*RewardCondition `json:"rewardConditions"`

	// The path to get userId from event payload, if not present, will use default value "$.[0].userId"
	UserIDExpression string `json:"userIdExpression,omitempty"`
}

// Validate validates this reward update
func (m *RewardUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventTopic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewardCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewardConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RewardUpdate) validateEventTopic(formats strfmt.Registry) error {

	if err := validate.Required("eventTopic", "body", m.EventTopic); err != nil {
		return err
	}

	return nil
}

func (m *RewardUpdate) validateRewardCode(formats strfmt.Registry) error {

	if err := validate.Required("rewardCode", "body", m.RewardCode); err != nil {
		return err
	}

	return nil
}

func (m *RewardUpdate) validateRewardConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.RewardConditions) { // not required
		return nil
	}

	for i := 0; i < len(m.RewardConditions); i++ {
		if swag.IsZero(m.RewardConditions[i]) { // not required
			continue
		}

		if m.RewardConditions[i] != nil {
			if err := m.RewardConditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rewardConditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RewardUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RewardUpdate) UnmarshalBinary(b []byte) error {
	var res RewardUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
