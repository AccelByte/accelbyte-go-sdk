// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_script

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclientmodels"
)

// GetFulfillmentScriptReader is a Reader for the GetFulfillmentScript structure.
type GetFulfillmentScriptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFulfillmentScriptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFulfillmentScriptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetFulfillmentScriptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /admin/fulfillment/scripts/{id} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewGetFulfillmentScriptOK creates a GetFulfillmentScriptOK with default headers values
func NewGetFulfillmentScriptOK() *GetFulfillmentScriptOK {
	return &GetFulfillmentScriptOK{}
}

/*GetFulfillmentScriptOK handles this case with default header values.

  successful operation
*/
type GetFulfillmentScriptOK struct {
	Payload *platformclientmodels.FulfillmentScriptInfo
}

func (o *GetFulfillmentScriptOK) Error() string {
	return fmt.Sprintf("[GET /admin/fulfillment/scripts/{id}][%d] getFulfillmentScriptOK  %+v", 200, o.Payload)
}

func (o *GetFulfillmentScriptOK) GetPayload() *platformclientmodels.FulfillmentScriptInfo {
	return o.Payload
}

func (o *GetFulfillmentScriptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.FulfillmentScriptInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFulfillmentScriptNotFound creates a GetFulfillmentScriptNotFound with default headers values
func NewGetFulfillmentScriptNotFound() *GetFulfillmentScriptNotFound {
	return &GetFulfillmentScriptNotFound{}
}

/*GetFulfillmentScriptNotFound handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>38141</td><td>Fulfillment script does not exist</td></tr></table>
*/
type GetFulfillmentScriptNotFound struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *GetFulfillmentScriptNotFound) Error() string {
	return fmt.Sprintf("[GET /admin/fulfillment/scripts/{id}][%d] getFulfillmentScriptNotFound  %+v", 404, o.Payload)
}

func (o *GetFulfillmentScriptNotFound) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *GetFulfillmentScriptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
