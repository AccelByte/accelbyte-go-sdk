{
  "swagger": "2.0",
  "info": {
    "description": "Justice IAM Service",
    "title": "justice-iam-service",
    "contact": {
      "name": "Engineering Team at AccelByte",
      "url": "https://accelbyte.io",
      "email": "engineering@accelbyte.io"
    },
    "version": "4.1.0"
  },
  "paths": {
    "/iam/bans": {
      "get": {
        "description": "<p>Required permission 'BAN:ADMIN [READ]' or 'ADMIN:BAN [READ]'</p>\n\t\t\t<p>Required Permission 'BAN:ADMIN [READ]' is going to be <strong>DEPRECATED</strong> for security purpose.\n\t\t\tIt is going to be deprecated on <strong>31 JANUARY 2019</strong>, please use permission 'ADMIN:BAN [READ]' instead.</p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Bans"
        ],
        "summary": "Get list of ban types",
        "operationId": "GetBansType",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.Bans"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/iam/bans/reasons": {
      "get": {
        "description": "<p>Required permission 'BAN:ADMIN [READ]' or 'ADMIN:BAN [READ]'</p>\n\t\t\t<p>Required Permission 'BAN:ADMIN [READ]' is going to be <strong>DEPRECATED</strong> for security purpose.\n\t\t\tIt is going to be deprecated on <strong>31 JANUARY 2019</strong>, please use permission 'ADMIN:BAN [READ]' instead.</p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Bans"
        ],
        "summary": "Get list of ban reasons",
        "operationId": "GetListBanReason",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.BanReasons"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/iam/clients": {
      "get": {
        "description": "<h2>The endpoint is going to be deprecated at <strong>10 August, 2018</strong>. Please use this instead: namespaces/{namespace}/clients</h2>\n<p>Required permission 'CLIENT [READ]'</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Get All Clients",
        "operationId": "GetClients",
        "deprecated": true,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/clientmodel.ClientResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "description": "<h2>The endpoint is going to be deprecated at <strong>16 August, 2018</strong>. Please use this instead: namespaces/{namespace}/clients</h2>\n<p>Required permission 'CLIENT:ADMIN [CREATE]'</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Create Client",
        "operationId": "CreateClient",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreationResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Client exists"
          }
        }
      }
    },
    "/iam/clients/{clientId}": {
      "get": {
        "description": "Required permission 'CLIENT [READ]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Get Client",
        "operationId": "GetClient",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "put": {
        "description": "Required permission 'CLIENT:ADMIN [UPDATE]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Update Client",
        "operationId": "UpdateClient",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "<h2>The endpoint is going to be deprecated at <strong>16 August, 2018</strong>. Please use this instead: namespaces/{namespace}/clients/{clientId}</h2>\n<p>Required permission 'CLIENT:ADMIN [DELETE]'</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Delete Client",
        "operationId": "DeleteClient",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/clients/{clientId}/clientpermissions": {
      "post": {
        "description": "Required permission 'CLIENT:ADMIN [UPDATE]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Update Client Permissions",
        "operationId": "UpdateClientPermission",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.ClientPermissions"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/clients/{clientId}/clientpermissions/{resource}/{action}": {
      "post": {
        "description": "Required permission 'CLIENT:ADMIN [UPDATE]'",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Add Client Permission",
        "operationId": "AddClientPermission",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "Required permission 'CLIENT:ADMIN [UPDATE]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Delete Client Permission",
        "operationId": "DeleteClientPermission",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/clients/{clientId}/secret": {
      "put": {
        "description": "Required permission 'CLIENT:ADMIN [UPDATE]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Update Client Secret",
        "operationId": "UpdateClientSecret",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientUpdateSecretRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/clients": {
      "get": {
        "description": "Required permission 'NAMESPACE:{namespace}:CLIENT [READ]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Get clients by namespace",
        "operationId": "GetClientsbyNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/clientmodel.ClientResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "description": "<h2>The endpoint is going to be deprecated. Please use this instead: /v3/admin/namespaces/{namespace}/clients</h2>Required permission 'ADMIN:NAMESPACE:{namespace}:CLIENT [CREATE]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Create Client",
        "operationId": "CreateClientByNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreationResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Client exists"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/clients/{clientId}": {
      "delete": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:CLIENT:{clientId} [DELETE]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Delete Client",
        "operationId": "DeleteClientByNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users": {
      "post": {
        "description": "<p>Required permission 'NAMESPACE:{namespace}:USER [CREATE]'.</p>\n<p>Available Authentication Types:</p>\n<ol>\n<li><strong>EMAILPASSWD</strong>: an authentication type used for new user registration through email.</li>\n<li><strong>PHONEPASSWD</strong>: an authentication type used for new user registration through phone number.</li>\n</ol>\n<p>Country use ISO3166-1 alpha-2 two letter, e.g. US.</p>\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Create User",
        "operationId": "CreateUser",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserCreateResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/model.UserCreateResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/model.UserCreateResponse"
            }
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/admin": {
      "get": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:USER [READ]'</p>\n\t\t\t<p>This endpoint search admin users which have the roleId</p>\n\t\t\t<p>Notes : this endpoint only accept admin role. Admin Role is role which have admin status and members.\n\t\t\tUse endpoint [GET] /roles/{roleId}/admin to check the role status</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get Admin Users By RoleId",
        "operationId": "GetAdminUsersByRoleID",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role ID",
            "name": "roleId",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetAdminUsersResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20021</td><td>invalid pagination parameter</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>10157</td><td>specified role is not admin role</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/byLoginId": {
      "get": {
        "description": "Required permission 'NAMESPACE:{namespace}:USER [READ]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User By Login Id",
        "operationId": "GetUserByLoginID",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Login id",
            "name": "loginId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUserResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/byPlatformUserID": {
      "get": {
        "description": "Required permission 'NAMESPACE:{namespace}:USER [READ]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User By Platform User ID",
        "operationId": "GetUserByPlatformUserID",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformID",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform User ID",
            "name": "platformUserID",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUserResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/forgotPassword": {
      "post": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:PASSWORD:USER [UPDATE]' or valid basic auth header<p><strong>Special note for publisher-game scenario:</strong> Game Client should provide game namespace path parameter and Publisher Client should provide publisher namespace path parameter. </p><p>The password reset code will be sent to the publisher account's email address. </p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Request Password Reset Code",
        "operationId": "ForgotPassword",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/listByLoginIds": {
      "get": {
        "description": "Required permission 'NAMESPACE:{namespace}:USER [READ]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get a List of Users By Their Login Id",
        "operationId": "GetUsersByLoginIds",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "List of LoginIDs. Separated by comma.",
            "name": "loginIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUsersResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/resetPassword": {
      "post": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:PASSWORD:USER [UPDATE]' or valid basic auth header",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Reset User Password",
        "operationId": "ResetPassword",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Data not found"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/search": {
      "get": {
        "description": "<h2>The endpoint is deprecated. Please use this instead: iam/v3/admin/namespaces/{namespace}/users/search</h2>\n<p>Search all users that match the query on these fields: all login IDs (email address, phone number, and platform user id),\nuserID, display name, and on the specified namespace. If the query is not defined, then it searches all users on the specified namespace.\nRequired permission 'ADMIN:NAMESPACE:{namespace}:USER:* [READ]'</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Search users",
        "operationId": "SearchUser",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "search query string (optional)",
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.SearchUsersResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}": {
      "get": {
        "description": "Required permission 'NAMESPACE:{namespace}:USER:{userId} [READ]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User By User Id",
        "operationId": "GetUserByUserID",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      },
      "put": {
        "description": "<p>Required permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'</p><br><p>This Endpoint support update user based on given data. <b>Single request can update single field or multi fields.</b></p> <p>Supported field {Country, DisplayName, LanguageTag}</p><p>Country use ISO3166-1 alpha-2 two letter, e.g. US.</p><br><b>Several case of updating email address</b><ul><li>User want to update email address of which have been verified, NewEmailAddress response field will be filled with new email address.</li><li>User want to update email address of which have not been verified, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with new email address. </li><li>User want to update email address of which have been verified and updated before, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with verified email before. NewEmailAddress response field will be filled with newest email address. </li>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "<ul><li>Country (Optional) <br> use ISO3166-1 alpha-2 two letter, e.g. US.</li><li>DisplayName (Optional) string </li><li>LanguageTag (Optional) use Language e.g. en / en-US </li></ul>",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10131</td><td>invalid date of birth</td></tr><tr><td>10155</td><td>country is not defined</td></tr><tr><td>10154</td><td>country not found</td></tr><tr><td>10130</td><td>user under age</td></tr><tr><td>10132</td><td>invalid email address</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      },
      "delete": {
        "description": "Required permission 'NAMESPACE:{namespace}:USER:{userId} [DELETE]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/ban": {
      "post": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [CREATE]'.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Ban a single user",
        "operationId": "BanUser",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BanCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10158</td><td>ban not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "description": "Required permissions 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [READ]'.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get user's bans history",
        "operationId": "GetUserBanHistory",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.UserBanResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/bans/{banId}/disable": {
      "put": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [UPDATE]'.<br><br><b>Notes for using IAM in publisher - game studio scenarios</b><br><p>The endpoint allows:</p> <ul><li>The admin user in publisher namespace disables user’s ban in publisher namespace.</li><li>The admin user in game namespace disables user’s ban in game namespace.</li><li>The admin user in publisher namespace disables user’s ban in publisher namespace.</li></ul><p>Other scenarios are not supported and will return 403: Forbidden.</p>",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Disable ban for a single user.",
        "operationId": "DisableUserBan",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ban ID",
            "name": "banId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10145</td><td>disallow game access publisher user's ban</td></tr></table>"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10158</td><td>ban not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/bans/{banId}/enable": {
      "put": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [UPDATE]'.",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Enable ban for a single user",
        "operationId": "EnableUserBan",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ban ID",
            "name": "banId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10145</td><td>disallow game access publisher user's ban</td></tr></table>"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10158</td><td>ban not found</td></tr><tr><td>10144</td><td>user has no bans</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/crosslink": {
      "post": {
        "description": "<h2>The endpoint is going to be deprecated at 9 July, 2018. Please use this instead: /users/{userId}/platforms/{platformId}/link</h2>\n<p>Required permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'.</p>\n<p>\n\tAccess token from original namespace is needed as authorization header. Access token from designated account needed as form parameter to verify the ownership of that account.\n\tWhen platformID (device platfom ID) is specified, platform login method for that specific platform ID is removed.\n\tThis means to protect account from second hand device usage.\n</p>",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Links existing account with another account in different namespace. ",
        "operationId": "ListCrossNamespaceAccountLink",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token of the targeted account",
            "name": "linkingToken",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Current platform ID",
            "name": "platformId",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/disable": {
      "put": {
        "description": "<h2>The endpoint is going to be deprecated. Please use this instead: iam/v2/admin/namespaces/{namespace}/users/{userId}/disable</h2>\n+\t\t\t\t<p>Required permissions 'ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]'<p>\n\t\t<p>For <strong>Deletion Account</strong> purpose fill the reason with:</p>\n\t\t<ul>\n\t\t<li><strong>DeactivateAccount</strong> : if your deletion request comes from user</li>\n\t\t<li><strong>AdminDeactivateAccount</strong> : if your deletion request comes from admin</li>\n\t\t</ul>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Disable a user",
        "operationId": "DisableUser",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.DisableUserRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/enable": {
      "put": {
        "description": "<h2>The endpoint is going to be deprecated. Please use this instead: iam/v2/admin/namespaces/{namespace}/users/{userId}/enable</h2>\n\t\t\t\t<p>Required permissions 'ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]'<p>",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Enable a user",
        "operationId": "EnableUser",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/information": {
      "get": {
        "description": "Required permissions 'NAMESPACE:{namespace}:INFORMATION:USER:{userId} [READ]'.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get user's information",
        "operationId": "GetUserInformation",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserInformation"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "Required permissions 'ADMIN:NAMESPACE:{namespace}:INFORMATION:USER:{userId} [DELETE]'.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Delete user's information",
        "operationId": "DeleteUserInformation",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/logins/histories": {
      "get": {
        "description": "Required permission 'NAMESPACE:{namespace}:HISTORY:LOGIN:USER:{userId} [READ]'<p>Notes for this endpoint: </p> <ul><li>This endpoint retrieve the first page of the data if `after` and `before` parameters is empty.</li><li>The maximum value of the limit is 100 and the minimum value of the limit is 1.</li><li>This endpoint retrieve the next page of the data if we provide `after` parameters with valid Unix timestamp.</li><li>This endpoint retrieve the previous page of the data if we provide `before` parameter with valid data Unix timestamp.</li><ul>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User's Login Histories",
        "operationId": "GetUserLoginHistories",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "The cursor that points to query data for the previous page (In Unix timestamp formats, e.g:1545114248).",
            "name": "before",
            "in": "query"
          },
          {
            "type": "number",
            "description": "The cursor that points to query data for the next page (In Unix timestamp formats, e.g:1545114248)",
            "name": "after",
            "in": "query"
          },
          {
            "type": "number",
            "description": "The number of data retrieved in a page",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.LoginHistoriesResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/password": {
      "put": {
        "description": "<h2>The endpoint is going to be deprecated. Admin user please use this instead: iam/v2/admin/namespaces/{namespace}/users/{userId}/password</h2>\n+\t\t\t\t<p>Required permission 'NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]'<p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update User Password",
        "operationId": "UpdatePassword",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserPasswordUpdateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>10142</td><td>new password cannot be same with original</td></tr><tr><td>10143</td><td>password not match</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/permissions": {
      "post": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [UPDATE]'</p>\n\t\t\t<p>This endpoint will REPLACE user's permissions with the ones defined in body</p>\n\t\t\t<p>Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.</p>\n\t\t\t<p>Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.</p>\n\t\t\t<p>In ranged schedule, first element will be start date, and second one will be end date</p>\n\t\t\t<p>If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive</p>\n\t\t\t<p>Syntax reference</p>\n\t\t\t<p>Fields:</p>\n\t\t\t<ol>\n\t\t\t<li>Seconds: 0-59 * / , -</li>\n\t\t\t<li>Minutes: 0-59 * / , -</li>\n\t\t\t<li>Hours: 0-23 * / , -</li>\n\t\t\t<li>Day of month: 1-31 * / , - L W</li>\n\t\t\t<li>Month: 1-12 JAN-DEC * / , -</li>\n\t\t\t<li>Day of week: 0-6 SUN-SAT * / , - L #</li>\n\t\t\t<li>Year: 1970-2099 * / , -</li>\n\t\t\t</ol>\n\t\t\t<p>Special characters:</p>\n\t\t\t<ol>\n\t\t\t<li>*: all values in the fields, e.g. * in seconds fields indicates every second</li>\n\t\t\t<li>/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter</li>\n\t\t\t<li>,: separate items of a list, e.g. MON,WED,FRI in day of week</li>\n\t\t\t<li>-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive</li>\n\t\t\t<li>L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.</li>\n\t\t\t<li>W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"</li>\n\t\t\t<li>#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.</li>\n\t\t\t</ol>\n\t\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Save User Permissions",
        "operationId": "SaveUserPermission",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.Permissions"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}": {
      "post": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [UPDATE]'</p>\n\t\t\t<p>This endpoint will update existing permission (bitwise OR the action) if found one with same resource, otherwise it will append a new permission</p>\n\t\t\t<p>Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.</p>\n\t\t\t<p>Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.</p>\n\t\t\t<p>In ranged schedule, first element will be start date, and second one will be end date</p>\n\t\t\t<p>If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive</p>\n\t\t\t<p>Syntax reference</p>\n\t\t\t<p>Fields:</p>\n\t\t\t<ol>\n\t\t\t<li>Seconds: 0-59 * / , -</li>\n\t\t\t<li>Minutes: 0-59 * / , -</li>\n\t\t\t<li>Hours: 0-23 * / , -</li>\n\t\t\t<li>Day of month: 1-31 * / , - L W</li>\n\t\t\t<li>Month: 1-12 JAN-DEC * / , -</li>\n\t\t\t<li>Day of week: 0-6 SUN-SAT * / , - L #</li>\n\t\t\t<li>Year: 1970-2099 * / , -</li>\n\t\t\t</ol>\n\t\t\t<p>Special characters:</p>\n\t\t\t<ol>\n\t\t\t<li>*: all values in the fields, e.g. * in seconds fields indicates every second</li>\n\t\t\t<li>/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter</li>\n\t\t\t<li>,: separate items of a list, e.g. MON,WED,FRI in day of week</li>\n\t\t\t<li>-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive</li>\n\t\t\t<li>L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.</li>\n\t\t\t<li>W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"</li>\n\t\t\t<li>#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.</li>\n\t\t\t</ol>\n\t\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Add User Permission",
        "operationId": "AddUserPermission",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action (1..15)",
            "name": "action",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdatePermissionScheduleRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [DELETE]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Delete User Permission",
        "operationId": "DeleteUserPermission",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action (1..15)",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/platforms": {
      "get": {
        "description": "\n<p>Required permission 'NAMESPACE:{namespace}:USER:{userId} [READ]'.</p>\n<h2>Justice Platform Account</h2>\n<p>The permission ’ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId}’ [READ] is required in order to read the UserID who linked with the user.</p>\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get platform accounts linked to the user",
        "operationId": "GetUserPlatformAccounts",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountcommon.UserLinkedPlatform"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/platforms/justice/{targetNamespace}": {
      "get": {
        "description": "<p>This endpoint requires the client access token as the bearer token. Required permission 'ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [READ]'</p>\n\t\t\t<p>This endpoint will support publisher access to game and game access to publisher</p>\n\t\t\t<p>If targetNamespace filled with publisher namespace then this endpoint will return its game user id and game namespace</p>\n\t\t\t<p>If targetNamespace filled with game namespace then this endpoint will return its publisher user id and publisher namespace</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get user mapping",
        "operationId": "GetUserMapping",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Target namespace",
            "name": "targetNamespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserMapping"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "post": {
        "description": "<p>This endpoint requires the client access token as the bearer token. Required permission 'ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [UPDATE]'</p>\n<p><strong>It is going to be removed on November 26th, 2018</strong></p>\n<p>The endpoint returns user Justice platform account linked with the given user. If the user Justice platform account doesn't exist in the designated namespace, the endpoint is going to <strong>create and return the new Justice platform account.</strong>\nThe newly user Justice platform account is going to be forced to perform token grant through the given user and can't perform password update</p>\n<h3>Read Justice Platform Account UserID</h3>\n<p>In order to read the Justice platform account UserID, it is required to have the permission: <strong>NAMESPACE:{namespace}:JUSTICE:USER:{userId} [READ]</strong>, otherwise the UserID is going to be censored and replaced with “Redacted” text.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get the Justice linked accounts on the designated namespace",
        "operationId": "GetUserJusticePlatformAccount",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The namespace where the user Justice platform account lives",
            "name": "targetNamespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserJusticePlatformAccountResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/platforms/{platformId}/link": {
      "post": {
        "description": "<p>Required permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'.</p>\n\t\t\t<p><br><b>Prerequisite:</b> Platform client configuration need to be added to database for specific platformId. Namespace service URL need to be specified (refer to required environment variables).\n<h2>Supported platforms:</h2>\n\t\t\t<ul>\n\t\t\t\t<li><strong>steam</strong>: The ticket’s value is the authentication code returned by Steam.</li>\n\t\t\t\t<li><strong>steamopenid</strong>: Steam's user authentication method using OpenID 2.0. The ticket's value is URL generated by Steam on web authentication</li>\n\t\t\t\t<li><strong>facebook</strong>: The ticket’s value is the authorization code returned by Facebook OAuth</li>\n\t\t\t\t<li><strong>google</strong>: The ticket’s value is the authorization code returned by Google OAuth</li>\n\t\t\t\t<li><strong>oculus</strong>: The ticket’s value is a string composed of Oculus's user ID and the nonce separated by a colon (:).</li>\n\t\t\t\t<li><strong>twitch</strong>: The ticket’s value is the authorization code returned by Twitch OAuth.</li>\n\t\t\t\t<li><strong>android</strong>: The ticket's value is the Android’s device ID</li>\n\t\t\t\t<li><strong>ios</strong>: The ticket's value is the iOS’s device ID.</li>\n\t\t\t\t<li><strong>device</strong>: Every device that does’nt run Android and iOS is categorized as a device platform. The ticket's value is the device’s ID.</li>\n\t\t\t\t<li><strong>discord</strong>: The ticket’s value is the authorization code returned by Discord OAuth.</li>\n\t\t\t</ul>",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Link user's account with platform",
        "operationId": "PlatformLink",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ticket from platform",
            "name": "ticket",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10163</td><td>platform is already linked with the user account</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/platforms/{platformId}/unlink": {
      "post": {
        "description": "<p>Required permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'.</p>\n<h2>Supported platforms:</h2>\n\t\t\t<ul>\n\t\t\t\t<li><strong>steam</strong></li>\n\t\t\t\t<li><strong>steamopenid</strong></li>\n\t\t\t\t<li><strong>facebook</strong></li>\n\t\t\t\t<li><strong>google</strong></li>\n\t\t\t\t<li><strong>oculus</strong></li>\n\t\t\t\t<li><strong>twitch</strong></li>\n\t\t\t\t<li><strong>android</strong></li>\n\t\t\t\t<li><strong>ios</strong></li>\n\t\t\t\t<li><strong>device</strong></li>\n\t\t\t\t<li><strong>justice</strong>: A user might have several 'justice’ platform on different namespaces. That’s why the platform_namespace need to be specified when the platform ID is ‘justice’. The platform_namespace is the designated user’s namespace.</li>\n\t\t\t</ul>\n\t\t\t<p>Unlink user's account with platform. 'justice' platform might have multiple accounts from different namespaces linked. platform_namespace need to be specified when the platform ID is 'justice'.\n\t\t\t<br>Unlinking justice platform will enable password token grant and password update. </p>",
        "consumes": [
          "application/x-www-form-urlencoded",
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Unlink user's account with platform",
        "operationId": "PlatformUnlink",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Namespace of the platform account to be unlinked",
            "name": "platform_namespace",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/publisher": {
      "get": {
        "description": "<p>Required permissions 'NAMESPACE:{namespace}:PUBLISHER:USER:{userId} [GET].</p>\n\t<p><strong>Restriction:</strong>\n\t\tPath Parameter <strong>namespace</strong> can be provided only with game namespace</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get Publisher User",
        "operationId": "GetPublisherUser",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetPublisherUserResponse"
            }
          },
          "400": {
            "description": "Error Code: 7239 - Error Message: wrong namespace: required game namespace",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/roles": {
      "post": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Save User Roles",
        "operationId": "SaveUserRoles",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/roles/{roleId}": {
      "post": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]'",
        "consumes": [
          "application/json",
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Add User Role",
        "operationId": "AddUserRole",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10159</td><td>operator is not a role manager</td></tr></table>"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10156</td><td>role not found</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10160</td><td>user already has the role</td></tr><tr><td>10161</td><td>user already the role member</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      },
      "delete": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [DELETE]'",
        "consumes": [
          "application/json",
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Delete User Role",
        "operationId": "DeleteUserRole",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10159</td><td>operator is not a role manager</td></tr></table>"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10156</td><td>role not found</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/upgradeHeadlessAccount": {
      "post": {
        "description": "Required permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Upgrade user account to full account (with email)",
        "operationId": "upgradeHeadlessAccount",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/upgradeHeadlessAccountWithVerificationCode": {
      "post": {
        "description": "Required permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\n<p>The endpoint upgrades a headless account by linking the headless account with the email address and the password. By upgrading the headless account into a full account, the user could use the email address and password for using Justice IAM.\nThe endpoint is a shortcut for upgrading a headless account and verifying the email address in one call. In order to get a verification code for the endpoint, please check the send verification code endpoint.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Upgrade headless account and automatically verified the email address if it is succeeded",
        "operationId": "UpgradeHeadlessAccountWithVerificationCode",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountWithVerificationCodeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/verification": {
      "post": {
        "description": "<p>Required permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'</p>\n\t\t\tRedeems a verification code sent to a user to verify the user's contact address is correct\n\t\t\t<p>Available ContactType : <b>email<b/> or <b>phone<b/> </p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Redeem verification code sent to user",
        "operationId": "UserVerification",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserVerificationRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10152</td><td>verification code not found</td></tr><tr><td>10137</td><td>code is expired</td></tr><tr><td>10136</td><td>code is either been used or not valid anymore</td></tr><tr><td>10138</td><td>code not match</td></tr><tr><td>10149</td><td>verification contact type doesn't match</td></tr><tr><td>10148</td><td>verification code context doesn't match the required context</td></tr><tr><td>10162</td><td>invalid verification</td></tr></table>"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/verificationcode": {
      "post": {
        "description": "Required permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\n\t\t\t<p>The verification code is sent to either the phone number or email address. It depends on the LoginID's value.</p>\n\t\t\t<p>Available contexts for use : </p>\n\t\t\t<ol>\n\t\t\t<li><strong>UserAccountRegistration</strong><p>a context type used for verifying email address in user account registration. It returns 409 if the email address already verified. <strong><em>It is the default context if the Context field is empty</em></strong></p></li>\n\t\t\t<li><strong>UpdateEmailAddress</strong><p>a context type used for verify user before updating email address.(Without email address verified checking)</p></li>\n\t\t\t<li><strong>upgradeHeadlessAccount</strong><p>The context is intended to be used whenever the email address wanted to be automatically verified on upgrading a headless account.  If this context used, IAM rejects the request if the loginId field's value is already used by others by returning HTTP Status Code 409.</p></li>\n\t\t\t</ol>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Send verification code to user",
        "operationId": "SendVerificationCode",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10146</td><td>userID not match</td></tr></table>"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10171</td><td>email address not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>"
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10140</td><td>user verified</td></tr><tr><td>10133</td><td>email already used</td></tr></table>"
          },
          "429": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20007</td><td>too many requests</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/oauth/authorize": {
      "post": {
        "description": "The endpoint supports two response types:<br/>\n\t<p><strong>1. Response Type == \"code\":</strong></p>\n\t<p>The endpoint returns an authorization code that will be used by the IAM client to exchange for an access token. It supports two different headers, the basic and the bearer header. Each behaves differently.</p>\n<ul>\n<li>\n\t<p><strong>The basic header</strong></p>\n\t<p>The basic header’s value is the base64 of the client ID and client secret. It is used by the developer whenever the developer authorizes a user on a same namespace.</p>\n</li>\n<li>\n\t<p><strong>The bearer header</strong></p>\n\t<p>The bearer header’s value is an access token. It is used by the developer whenever the developer authorizes a user on a different namespace. The endpoint validates user’s entitlement on the designated namespace for making sure the user is authorized for a designated namespace.</p>\n</li>\n</ul>\n<p>Following are the responses returned by the endpoint:</p>\n<ul>\n<li><p><strong>Authorize success</strong>: redirects to the given URL with the following information: ?code={authorization code}&state={state}</p></li>\n<li><p><strong>Authorize failure</strong>: redirects to the given URL with the following information:?error=access_denied&error_description=...</p></li>\n</ul>\n\t <p><strong>2. Response Type == \"token\":</strong></p>\n<ul>\n<li>\n\t<p><strong>Authorize success</strong>: redirects to the given URL with the following information:</p>\n\t<p>#access_token={accesstoken}&expires_in={expiration duration in seconds}&token_type=Bearer</p>\n</li>\n<li>\n\t<p><strong>Authorize failure</strong>: redirects to the given URL with the following information:</p>\n\t<p>?error=access_denied&error_description=...</p>\n</li>\n</ul>\n",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth"
        ],
        "summary": "OAuth2 authorize API",
        "operationId": "Authorization",
        "parameters": [
          {
            "type": "string",
            "description": "User Name",
            "name": "login",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Password",
            "name": "password",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Client id",
            "name": "client_id",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Redirect URI. The URI has to match one of the URIs set in client.",
            "name": "redirect_uri",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Scope. The scope of request by roleId. Accept multiple roleIds separated by whitespace.",
            "name": "scope",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "State. Random value for preventing cross-site request forgery used by client.",
            "name": "state",
            "in": "formData"
          },
          {
            "enum": [
              "code",
              "token"
            ],
            "type": "string",
            "default": "code",
            "description": "Response Type. Allowed values ['code', 'token'].",
            "name": "response_type",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "Found"
          }
        }
      }
    },
    "/iam/oauth/jwks": {
      "get": {
        "description": "<p>This endpoint serves public keys for verifying JWT access tokens generated by this service.</p>\n\t\t\t<p>When a client application wants to verify a JWT token, it needs to get the 'kid' value found in the JWT token header and use it\n\t\t\tto look up the corresponding public key from a set returned by this endpoint. The client application can then use that public key to verify the JWT.</p>\n\t\t\t<p>A client application might cache the keys so it doesn't need to do request every time it needs to verify a JWT token. If a client application\n\t\t\tcaches the keys and a key with the same 'kid' cannot be found in the cache, it should then try to refresh the keys by making a request to this\n\t\t\tendpoint again.</p>\n\t\t\t<p>Please refer to the RFC for more information about JWK (JSON Web Key): https://tools.ietf.org/html/rfc7517</p>",
        "consumes": [
          ""
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth"
        ],
        "summary": "JSON Web Key Set for verifying JWT",
        "operationId": "GetJWKS",
        "responses": {
          "200": {
            "description": "JWKS returned",
            "schema": {
              "$ref": "#/definitions/oauthcommon.JWKSet"
            }
          }
        }
      }
    },
    "/iam/oauth/namespaces/{namespace}/platforms/{platformId}/token": {
      "post": {
        "description": "<h2>The endpoint is going to be deprecated at 2 July, 2018. Please use this instead: oauth/platforms/{platformId}/token</h2>\n\t\t\t<p>\n\t\t\t\tThis endpoint requires all requests to have Authorization header set with Basic access authentication\n\t\t\t\tconstructed from client id and client secret. For publisher-game namespace schema : Specify only either platform_token or device_id. Device token grant\n\t\t\t\tshould be requested along with device_id parameter against game namespace. Another 3rd party platform token grant should be requested\n\t\t\t\talong with platform_token parameter against publisher namespace.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tSupported platforms:\n\t\t\t</p>\n\t\t\t<ol><li><strong>steamopenid</strong>: Steam's user authentication method using OpenID 2.0. The expected value of the platform token is the URL generated by Steam on web authentication</li></ol>\n\t\t\t<p>The JWT contains user's active bans with its expiry date. List of ban types can be obtained from /iam/bans.</p>",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth"
        ],
        "summary": "OAuth2 access token generation specific to platform",
        "operationId": "PlatformTokenRequestHandler",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Requested namespace for token grant",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID to login with",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Token from platform auth",
            "name": "platform_token",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Device/hardware identifier",
            "name": "device_id",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Access Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponse"
            }
          },
          "400": {
            "description": "General request error",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/oauth/namespaces/{namespace}/users/{userId}/revoke": {
      "post": {
        "description": "<p>This endpoint requires all requests to have authorization header set with bearer token.</p>\n\t\t\t<p>Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'</p>\n\t\t\t<p>The endpoint revokes all access tokens and refresh tokens a user has prior the revocation time. It is a convenient feature for the developer (or admin) who wanted to revokes all user's access tokens and refresh tokens generated before some period of time.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth"
        ],
        "summary": "Revokes user's tokens'",
        "operationId": "RevokeUser",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User to be revoked",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User revoked"
          },
          "401": {
            "description": "Invalid basic auth header"
          }
        }
      }
    },
    "/iam/oauth/platforms/{platformId}/token": {
      "post": {
        "description": "<p>Platform token grant specifically used for performing token grant using platform, e.g. Steam, Justice, etc. The endpoint automatically create an account if the account associated with the platform is not exists yet.\n\t\t\tThis endpoint requires all requests to have Authorization header set with Basic access authentication\n\t\t\tconstructed from client id and client secret. For publisher-game namespace schema : Specify only either platform_token or device_id. Device token grant\n\t\t\tshould be requested along with device_id parameter against game namespace. Another 3rd party platform token grant should be requested\n\t\t\talong with platform_token parameter against publisher namespace.</p>\n\t\t\t<h2>Supported platforms:</h2>\n\t\t\t<ul>\n\t\t\t\t<li><strong>steam</strong>: The platform_token’s value is the authentication code returned by Steam.</li>\n\t\t\t\t<li><strong>steamopenid</strong>: Steam's user authentication method using OpenID 2.0. The platform_token's value is URL generated by Steam on web authentication</li>\n\t\t\t\t<li><strong>facebook</strong>: The platform_token’s value is the authorization code returned by Facebook OAuth</li>\n\t\t\t\t<li><strong>google</strong>: The platform_token’s value is the authorization code returned by Google OAuth</li>\n\t\t\t\t<li><strong>oculus</strong>: The platform_token’s value is a string composed of Oculus's user ID and the nonce separated by a colon (:).</li>\n\t\t\t\t<li><strong>twitch</strong>: The platform_token’s value is the authorization code returned by Twitch OAuth.</li>\n\t\t\t\t<li><strong>discord</strong>: The platform_token’s value is the authorization code returned by Discord OAuth</li>\n\t\t\t\t<li><strong>android</strong>: The device_id is the Android’s device ID</li>\n\t\t\t\t<li><strong>ios</strong>: The device_id is the iOS’s device ID.</li>\n\t\t\t\t<li><strong>device</strong>: Every device that does’nt run Android and iOS is categorized as a device. The device_id is the device’s ID.</li>\n\t\t\t\t<li><strong>justice</strong>: The platform_token’s value is the designated user’s access token.</li>\n\t\t\t</ul>\n<h2>Access Token Content</h2>\n<p>Following is the access token’s content:</p>\n<ul>\n<li>\n\t<p><strong>namespace</strong>. It is the namespace the token was generated from.</p>\n</li>\n<li>\n\t<p><strong>display_name</strong>. The display name of the sub. It is empty if the token is generated from the client credential</p>\n</li>\n<li>\n\t<p><strong>roles</strong>. The sub’s roles. It is empty if the token is generated from the client credential</p>\n</li>\n<li>\n\t<p><strong>namespace_roles</strong>. The sub’s roles scoped to namespace. Improvement from roles, which make the role scoped to specific namespace instead of global to publisher namespace</p>\n</li>\n<li>\n\t<p><strong>permissions</strong>. The sub or aud’ permissions</p>\n</li>\n<li>\n\t<p><strong>bans</strong>. The sub’s list of bans. It is used by the IAM client for validating the token.</p>\n</li>\n<li>\n\t<p><strong>jflgs</strong>. It stands for Justice Flags. It is a special flag used for storing additional status information regarding the sub. It is implemented as a bit mask. Following explains what each bit represents:</p>\n<ul>\n\t<li><p>1: Email Address Verified</p></li>\n\t<li><p>2: Phone Number Verified</p></li>\n\t<li><p>4: Anonymous</p></li>\n</ul>\n</li>\n<li>\n\t<p><strong>aud</strong>. The aud is the client ID.</p>\n</li>\n<li>\n\t<p><strong>iat</strong>. The time the token issues at. It is in Epoch time format</p>\n</li>\n<li>\n\t<p><strong>exp</strong>. The time the token expires. It is in Epoch time format</p>\n</li>\n<li>\n\t<p><strong>sub</strong>. The UserID. The sub is omitted if the token is generated from client credential</p>\n</li>\n<h2>Bans</h2>\n<p>The JWT contains user's active bans with its expiry date. List of ban types can be obtained from /bans.</p>\n<h2>Track Login History</h2>\n<p>This endpoint will track login history to detect suspicious login activity, please provide \"device_id\" (alphanumeric) in request header parameter otherwise we will set to \"unknown\".</p>\n<p>Align with General Data Protection Regulation in Europe, user login history will be kept within 28 days by default\"</p>",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth"
        ],
        "summary": "OAuth2 access token generation specific to platform",
        "operationId": "PlatformTokenGrant",
        "parameters": [
          {
            "type": "string",
            "description": "Platform ID to login with",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Token from platform auth",
            "name": "platform_token",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Device/hardware identifier",
            "name": "device_id",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Delegated namespace token grant",
            "name": "namespace",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "DeviceID (Used on grant type 'password' to track login history) ex. 90252d14544846d79f367148e3f9a3d9",
            "name": "Device-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponse"
            }
          },
          "400": {
            "description": "General request error",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/oauth/revocationlist": {
      "get": {
        "description": "<p>This endpoint will return a list of revoked users and revoked tokens. List of revoked tokens in bloom filter format. This endpoint requires all requests to have Authorization header set with Basic access authentication constructed from client id and client secret.</p>\n\t\t\t<p>The bloom filter uses MurmurHash3 algorithm for hashing the values</p>",
        "consumes": [
          ""
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth"
        ],
        "summary": "OAuth2 revocation list API",
        "operationId": "GetRevocationList",
        "responses": {
          "200": {
            "description": "revocation list returned",
            "schema": {
              "$ref": "#/definitions/oauthapi.RevocationList"
            }
          },
          "401": {
            "description": "Invalid basic auth header"
          }
        }
      }
    },
    "/iam/oauth/revoke/token": {
      "post": {
        "description": "<h1>Deprecated at August 30, 2019. Please use the /v3/oauth/revoke endpoint instead</h1>\n\t\t\t\t\t <p>Revokes a token.</p>\n\t\t\t\t\t <p>This endpoint requires all requests to have Authorization header set with Basic access authentication constructed from client id and client secret or Bearer access authentication with valid access token.</p>",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth"
        ],
        "summary": "OAuth2 token revocation API",
        "operationId": "RevokeToken",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Token to be revoked",
            "name": "token",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Token revoked or does not exist"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid basic auth header"
          }
        }
      }
    },
    "/iam/oauth/revoke/user": {
      "post": {
        "description": "<h2>The endpoint is going to be deprecated at 21 August, 2018. Please use this instead: oauth/namespaces/{namespace}/users/{userId}/revoke</h2>\n\t\t\t<p>This endpoint revokes a user. </p>\n\t\t\t<p>This endpoint requires all requests to have Authorization header set with Bearer access authentication with valid access token.</p>\n\t\t\t<p>Required permission 'NAMESPACE:{namespace}:USER:{userID}:ADMIN [UPDATE]'</p>\n\t\t\t<p>When other clients know that the userID has been revoked and the token is issued before the revocation, forcing a new token will contain banned permissions. </p>",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth"
        ],
        "summary": "OAuth2 user revocation API",
        "operationId": "RevokeAUser",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "User to be revoked",
            "name": "userID",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User revoked or does not exist"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid basic auth header"
          }
        }
      }
    },
    "/iam/oauth/token": {
      "post": {
        "description": "<p>This endpoint requires all requests to have <code>Authorization</code> header set with <code>Basic</code> access authentication\n\t\t\tconstructed from client id and client secret.</p>\n\t\t\t<p>This endpoint supports different <strong>grant types</strong>:</p><ol>\n\t \t\t<li>Grant Type == <code>client_credentials</code>:<br />\n\t \t\t&nbsp;&nbsp;&nbsp; This endpoint will check the client credentials provided through Authorization header.</li>\n\t \t\t<li>Grant Type == <code>password</code>:<br />\n\t \t\t&nbsp;&nbsp;&nbsp; The grant type to use for authenticating a user, whether it's by email / username and password combination\n\t\t\tor through platform.</li>\n\t \t\t<li>Grant Type == <code>refresh_token</code>:<br />\n\t \t\t&nbsp;&nbsp;&nbsp; Used to get a new access token for a valid refresh token.</li>\n\t \t\t<li>Grant Type == <code>authorization_code<code>:<br />\n\t \t\t&nbsp;&nbsp;&nbsp; It generates the user token by given the authorization\n\t \t\tcode which generated in \"/authorize\" API response. It should also pass\n\t \t\tin the redirect_uri, which should be the same as generating the\n\t \t\tauthorization code request.</li></ol>\n\t \t\t<p>For platform authentication, use grant type <code>password</code>.\n\t \t\tThe <code>username</code> field would be in form of\n\t \t\t<code>platform:&lt;platform type&gt;</code>, for example\n\t \t\t<code>platform:steam</code> for Steam. For the <code>password</code>\n\t \t\tfield, set it to the authentication/authorization ticket or token obtainable through the\n\t \t\trespective platform SDK after authenticated the user to the platform. Supported platforms:</p><ul>\n\t\t\t<li><strong>steam</strong> - use <code>platform:steam</code> as the username and use the authentication ticket obtained\n\t\t\tfrom Steam through the Steam SDK as the password.</li>\n\t\t\t<li><strong>ps4</strong> - use <code>platform:ps4</code> as the username and use the authorization code\n\t\t\tobtained from the PlayStation Network through a player PS4 unit as the password.</li>\n\t\t\t<li><strong>live</strong> - use <code>platform:live</code> as the username and use token obtained from \n\t\t\tXbox Secure Token Service (XSTS) as the password.</li>\n\t\t\t<li><strong>oculus</strong> - use <code>platform:oculus</code> as the username and use the <code>user_id:nonce</code>\n\t\t\tas password obtained from Oculus through the Oculus SDK.</li></ul></p>\n\t\t\t<p>The access token and refresh token are in form of JWT token.\n\t \t\tAn access token JWT contains data which structure is similar to the\n\t \t\tResponse Class below, but without OAuth-related data. To verify a token, use the public keys\n\t\t\tobtained from the <code>/jwks</code> endpoint below.</p>\n<h2>Access Token Content</h2>\n<p>Following is the access token’s content:</p>\n<ul>\n<li>\n\t<p><strong>namespace</strong>. It is the namespace the token was generated from.</p>\n</li>\n<li>\n\t<p><strong>display_name</strong>. The display name of the sub. It is empty if the token is generated from the client credential</p>\n</li>\n<li>\n\t<p><strong>roles</strong>. The sub’s roles. It is empty if the token is generated from the client credential</p>\n</li>\n<li>\n\t<p><strong>namespace_roles</strong>. The sub’s roles scoped to namespace. Improvement from roles, which make the role scoped to specific namespace instead of global to publisher namespace</p>\n</li>\n<li>\n\t<p><strong>permissions</strong>. The sub or aud’ permissions</p>\n</li>\n<li>\n\t<p><strong>bans</strong>. The sub’s list of bans. It is used by the IAM client for validating the token.</p>\n</li>\n<li>\n\t<p><strong>jflgs</strong>. It stands for Justice Flags. It is a special flag used for storing additional status information regarding the sub. It is implemented as a bit mask. Following explains what each bit represents:</p>\n<ul>\n\t<li><p>1: Email Address Verified</p></li>\n\t<li><p>2: Phone Number Verified</p></li>\n\t<li><p>4: Anonymous</p></li>\n</ul>\n</li>\n<li>\n\t<p><strong>aud</strong>. The aud is the client ID.</p>\n</li>\n<li>\n\t<p><strong>iat</strong>. The time the token issues at. It is in Epoch time format</p>\n</li>\n<li>\n\t<p><strong>exp</strong>. The time the token expires. It is in Epoch time format</p>\n</li>\n<li>\n\t<p><strong>sub</strong>. The UserID. The sub is omitted if the token is generated from client credential</p>\n</li>\n</ul>\n<h2>Bans</h2>\n<p>The JWT contains user's active bans with its expiry date. List of ban types can be obtained from /bans.</p>\n<h2>Track Login History</h2>\n<p>This endpoint will track login history to detect suspicious login activity, please provide \"device_id\" (alphanumeric) in request header parameter otherwise we will set to \"unknown\".</p>\n<p>Align with General Data Protection Regulation in Europe, user login history will be kept within 28 days by default\"</p>",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth"
        ],
        "summary": "OAuth2 access token generation endpoint",
        "operationId": "TokenGrant",
        "parameters": [
          {
            "enum": [
              "password",
              "refresh_token",
              "authorization_code",
              "client_credentials"
            ],
            "type": "string",
            "default": "client_credentials",
            "description": "Grant Type",
            "name": "grant_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "User Name (used with grant type 'password'",
            "name": "username",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Password (used with grant type 'password'",
            "name": "password",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Refresh Token (used with grant type 'refresh_token'",
            "name": "refresh_token",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Code (used with grant type 'authorization_code'",
            "name": "code",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Redirect URI (used with grant type 'authorization_code'",
            "name": "redirect_uri",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Delegated namespace (used with grant type 'password' to do token grant on other namespace)",
            "name": "namespace",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "Extend expiration date of refresh token. Only available for grant type 'password'",
            "name": "extend_exp",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "DeviceID (Used on grant type 'password' to track login history) ex. 90252d14544846d79f367148e3f9a3d9",
            "name": "Device-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponse"
            }
          },
          "400": {
            "description": "General request error",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/oauth/verify": {
      "post": {
        "description": "This endpoint requires all requests to have Authorization header set with Basic access authentication constructed from client id and client secret.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth"
        ],
        "summary": "OAuth2 token verification API",
        "operationId": "VerifyToken",
        "parameters": [
          {
            "type": "string",
            "description": "Token to be verified",
            "name": "token",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Access Token verified",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponse"
            }
          },
          "400": {
            "description": "Access Token not exist or expired"
          }
        }
      }
    },
    "/iam/roles": {
      "get": {
        "description": "Required permission 'ROLE [READ]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Roles",
        "operationId": "GetRoles",
        "parameters": [
          {
            "type": "string",
            "description": "- true if the expected result should only returns records with wildcard = true\n- false if the expected result should only returns records with wildcard = false\n- empty (omitted) if the expected result should returns records with no wildcard filter at all\n",
            "name": "isWildcard",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.RoleResponseWithManagers"
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "description": "<p>Required permission 'ROLE:ADMIN [CREATE]' or 'ADMIN:ROLE [CREATE]' </p>\n\t\t\t<p>Required Permission 'ROLE:ADMIN [CREATE]' is going to be <strong>DEPRECATED</strong> for security purpose.\n\t\t\tIt is going to be deprecated on <strong>31 JANUARY 2019</strong>, please use permission 'ADMIN:ROLE [CREATE]' instead.</p>\n\t\t\t<p>Role can only be assigned to other users by the role's manager.</p>\n\t\t\t<p>If role is an administrator role (i.e. AdminRole == true), it will list out the role's members.</p>\n\t\t\t<p>Administrator role can be created only when at least 1 manager is specified.</p>\n\t\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Create Role",
        "operationId": "CreateRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/accountcommon.Role"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/iam/roles/{roleId}": {
      "get": {
        "description": "Required permission 'ROLE [READ]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Role",
        "operationId": "GetRole",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "put": {
        "description": "<p>Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>Required Permission 'ROLE:ADMIN [UPDATE]' is going to be <strong>DEPRECATED</strong> for security purpose.\n\t\t\tIt is going to be deprecated on <strong>31 JANUARY 2019</strong>, please use permission 'ADMIN:ROLE [UPDATE]' instead.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Update Role",
        "operationId": "UpdateRole",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "Required permission 'ROLE:ADMIN [DELETE]' or 'ADMIN:ROLE [DELETE]'\n\t\t\t<p>Required Permission 'ROLE:ADMIN [DELETE]' is going to be <strong>DEPRECATED</strong> for security purpose.\n\t\t\tIt is going to be deprecated on <strong>31 JANUARY 2019</strong>, please use permission 'ADMIN:ROLE [DELETE]' instead.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Delete Role",
        "operationId": "DeleteRole",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/roles/{roleId}/admin": {
      "get": {
        "description": "<p>Required permission 'ROLE [READ]'</p>\n\t\t\t<p>Admin roles has its members listed in the role.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Role Admin Status",
        "operationId": "GetRoleAdminStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleAdminStatusResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "post": {
        "description": "<p>Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>Required Permission 'ROLE:ADMIN [UPDATE]' is going to be <strong>DEPRECATED</strong> for security purpose.\n\t\t\tIt is going to be deprecated on <strong>31 JANUARY 2019</strong>, please use permission 'ADMIN:ROLE [UPDATE]' instead.</p>\n\t\t\t<p>Admin roles has its members listed in the role.</p>\n\t\t\t<p>Role can be set as admin role only when it has at least 1 manager.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Set Role as Admin Role",
        "operationId": "SetRoleAsAdmin",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "<p>Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>Required Permission 'ROLE:ADMIN [UPDATE]' is going to be <strong>DEPRECATED</strong> for security purpose.\n\t\t\tIt is going to be deprecated on <strong>31 JANUARY 2019</strong>, please use permission 'ADMIN:ROLE [UPDATE]' instead.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Remove Role Admin Status",
        "operationId": "RemoveRoleAdmin",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/roles/{roleId}/managers": {
      "get": {
        "description": "<p>Required permission 'ROLE [READ]'</p>\n\t\t\t<p>Role can only be assigned to other users by the role's manager.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Role Managers",
        "operationId": "GetRoleManagers",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleManagersResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "post": {
        "description": "<p>Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>Required Permission 'ROLE:ADMIN [UPDATE]' is going to be <strong>DEPRECATED</strong> for security purpose.\n\t\t\tIt is going to be deprecated on <strong>31 JANUARY 2019</strong>, please use permission 'ADMIN:ROLE [UPDATE]' instead.</p>\n\t\t\t<p>Role can only be assigned to other users by the role's manager.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Add Role Managers",
        "operationId": "AddRoleManagers",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleManagersRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "<p>Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>Required Permission 'ROLE:ADMIN [UPDATE]' is going to be <strong>DEPRECATED</strong> for security purpose.\n\t\t\tIt is going to be deprecated on <strong>31 JANUARY 2019</strong>, please use permission 'ADMIN:ROLE [UPDATE]' instead.</p>\n\t\t\t<p>Role can only be assigned to other users by the role's manager.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Remove Role Managers",
        "operationId": "RemoveRoleManagers",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleManagersRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/roles/{roleId}/members": {
      "get": {
        "description": "<p>Required permission 'ROLE [READ]'</p>\n\t\t\t<p>Admin roles has its members listed in the role.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Role Members",
        "operationId": "GetRoleMembers",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleMembersResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "post": {
        "description": "<p>Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>Required Permission 'ROLE:ADMIN [UPDATE]' is going to be <strong>DEPRECATED</strong> for security purpose.\n\t\t\tIt is going to be deprecated on <strong>31 JANUARY 2019</strong>, please use permission 'ADMIN:ROLE [UPDATE]' instead.</p>\n\t\t\t<p>Admin roles has its members listed in the role.</p>\n\t\t\t<p>Role can only be assigned to other users by the role's manager.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Add Role Members",
        "operationId": "AddRoleMembers",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleMembersRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "<p>Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>Required Permission 'ROLE:ADMIN [UPDATE]' is going to be <strong>DEPRECATED</strong> for security purpose.\n\t\t\tIt is going to be deprecated on <strong>31 JANUARY 2019</strong>, please use permission 'ADMIN:ROLE [UPDATE]' instead.</p>\n\t\t\t<p>Admin roles has its members listed in the role.</p>\n\t\t\t<p>Role can only be assigned to other users by the role's manager.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Remove Role Members",
        "operationId": "RemoveRoleMembers",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleMembersRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/roles/{roleId}/permissions": {
      "post": {
        "description": "<p>Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>Required Permission 'ROLE:ADMIN [UPDATE]' is going to be <strong>DEPRECATED</strong> for security purpose.\n\t\t\tIt is going to be deprecated on <strong>31 JANUARY 2019</strong>, please use permission 'ADMIN:ROLE [UPDATE]' instead.</p>\n\t\t\t<p>This endpoint will REPLACE role's permissions with the ones defined in body</p>\n\t\t\t<p>Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.</p>\n\t\t\t<p>Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.</p>\n\t\t\t<p>In ranged schedule, first element will be start date, and second one will be end date</p>\n\t\t\t<p>If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive</p>\n\t\t\t<p>Syntax reference</p>\n\t\t\t<p>Fields:</p>\n\t\t\t<ol>\n\t\t\t<li>Seconds: 0-59 * / , -</li>\n\t\t\t<li>Minutes: 0-59 * / , -</li>\n\t\t\t<li>Hours: 0-23 * / , -</li>\n\t\t\t<li>Day of month: 1-31 * / , - L W</li>\n\t\t\t<li>Month: 1-12 JAN-DEC * / , -</li>\n\t\t\t<li>Day of week: 0-6 SUN-SAT * / , - L #</li>\n\t\t\t<li>Year: 1970-2099 * / , -</li>\n\t\t\t</ol>\n\t\t\t<p>Special characters:</p>\n\t\t\t<ol>\n\t\t\t<li>*: all values in the fields, e.g. * in seconds fields indicates every second</li>\n\t\t\t<li>/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter</li>\n\t\t\t<li>,: separate items of a list, e.g. MON,WED,FRI in day of week</li>\n\t\t\t<li>-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive</li>\n\t\t\t<li>L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.</li>\n\t\t\t<li>W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"</li>\n\t\t\t<li>#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.</li>\n\t\t\t</ol>\n\t\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Update Role Permissions",
        "operationId": "UpdateRolePermissions",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.Permissions"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/roles/{roleId}/permissions/{resource}/{action}": {
      "post": {
        "description": "<p>Required permission 'ROLE:ADMIN [UPDATE]' Or 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>Required Permission 'ROLE:ADMIN [UPDATE]' is going to be <strong>DEPRECATED</strong> for security purpose.\n\t\t\tIt is going to be deprecated on <strong>31 JANUARY 2019</strong>, please use permission 'ADMIN:ROLE [UPDATE]' instead.</p>\n\t\t\t<p>This endpoint will update existing permission (bitwise OR the action) if found one with same resource, otherwise it will append a new permission</p>\n\t\t\t<p>Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.</p>\n\t\t\t<p>Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.</p>\n\t\t\t<p>In ranged schedule, first element will be start date, and second one will be end date</p>\n\t\t\t<p>If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive</p>\n\t\t\t<p>Syntax reference</p>\n\t\t\t<p>Fields:</p>\n\t\t\t<ol>\n\t\t\t<li>Seconds: 0-59 * / , -</li>\n\t\t\t<li>Minutes: 0-59 * / , -</li>\n\t\t\t<li>Hours: 0-23 * / , -</li>\n\t\t\t<li>Day of month: 1-31 * / , - L W</li>\n\t\t\t<li>Month: 1-12 JAN-DEC * / , -</li>\n\t\t\t<li>Day of week: 0-6 SUN-SAT * / , - L #</li>\n\t\t\t<li>Year: 1970-2099 * / , -</li>\n\t\t\t</ol>\n\t\t\t<p>Special characters:</p>\n\t\t\t<ol>\n\t\t\t<li>*: all values in the fields, e.g. * in seconds fields indicates every second</li>\n\t\t\t<li>/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter</li>\n\t\t\t<li>,: separate items of a list, e.g. MON,WED,FRI in day of week</li>\n\t\t\t<li>-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive</li>\n\t\t\t<li>L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.</li>\n\t\t\t<li>W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"</li>\n\t\t\t<li>#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.</li>\n\t\t\t</ol>\n\t\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Add Role Permission",
        "operationId": "AddRolePermission",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action",
            "name": "action",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdatePermissionScheduleRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]'\n\t\t\t<p>Required Permission 'ROLE:ADMIN [UPDATE]' is going to be <strong>DEPRECATED</strong> for security purpose.\n\t\t\tIt is going to be deprecated on <strong>31 JANUARY 2019</strong>, please use permission 'ADMIN:ROLE [UPDATE]' instead.</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Delete Role Permission",
        "operationId": "DeleteRolePermission",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/agerestrictions": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]'",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get age restriction status",
        "operationId": "AdminGetAgeRestrictionStatusV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "patch": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]'",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update age restriction config value",
        "operationId": "AdminUpdateAgeRestrictionConfigV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/countries/agerestrictions": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]'",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get List Country age restriction",
        "operationId": "GetListCountryAgeRestriction",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountcommon.CountryAgeRestriction"
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/countries/{countryCode}": {
      "patch": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]'",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update country's age restriction",
        "operationId": "UpdateCountryAgeRestriction",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Country Code ",
            "name": "countryCode",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CountryAgeRestrictionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.Country"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:USER [READ]'.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Search Users",
        "operationId": "AdminSearchUsersV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "platform ID",
            "name": "platformId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "role ID",
            "name": "roleId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "login ID",
            "name": "loginId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "platform user ID",
            "name": "platformUserId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "display name",
            "name": "displayName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "the number of data retieved in a page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to ID of last item in for the previous page",
            "name": "before",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to ID of first item in for the next page",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.SearchUsersByPlatformIDResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]'",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User By User Id",
        "operationId": "AdminGetUserByUserIdV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      },
      "patch": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'</p><br><p>This Endpoint support update user based on given data. <b>Single request can update single field or multi fields.</b></p> <p>Supported field {Country, DisplayName, LanguageTag}</p><p>Country use ISO3166-1 alpha-2 two letter, e.g. US.</p><br><b>Several case of updating email address</b><ul><li>User want to update email address of which have been verified, NewEmailAddress response field will be filled with new email address.</li><li>User want to update email address of which have not been verified, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with new email address. </li><li>User want to update email address of which have been verified and updated before, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with verified email before. NewEmailAddress response field will be filled with newest email address. </li>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "operationId": "AdminUpdateUserV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10131</td><td>invalid date of birth</td></tr><tr><td>10155</td><td>country is not defined</td></tr><tr><td>10154</td><td>country not found</td></tr><tr><td>10130</td><td>user under age</td></tr><tr><td>10132</td><td>invalid email address</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/ban": {
      "post": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [CREATE]'.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Ban a single user",
        "operationId": "AdminBanUserV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BanCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10158</td><td>ban not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [READ]'.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get user's bans",
        "operationId": "AdminGetUserBanV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Filter ban to only returns the active one",
            "name": "activeOnly",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.UserBanResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/disable": {
      "put": {
        "description": "Required permissions 'ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]'\n\t\t<p>For <strong>Deletion Account</strong> purpose fill the reason with:</p>\n\t\t<ul>\n\t\t<li><strong>DeactivateAccount</strong> : if your deletion request comes from user</li>\n\t\t<li><strong>AdminDeactivateAccount</strong> : if your deletion request comes from admin</li>\n\t\t</ul>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Disable a user",
        "operationId": "AdminDisableUserV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.DisableUserRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/enable": {
      "put": {
        "description": "Required permissions 'ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]'",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Enable a user",
        "operationId": "AdminEnableUserV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/password": {
      "put": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]'",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update User Password",
        "operationId": "AdminResetPasswordV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserPasswordUpdateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>10142</td><td>new password cannot be same with original</td></tr><tr><td>10143</td><td>password not match</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}/link": {
      "delete": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]'.</p>\n<h2>Supported platforms:</h2>\n\t\t\t<ul>\n\t\t\t\t<li><strong>steam</strong></li>\n\t\t\t\t<li><strong>steamopenid</strong></li>\n\t\t\t\t<li><strong>facebook</strong></li>\n\t\t\t\t<li><strong>google</strong></li>\n\t\t\t\t<li><strong>oculus</strong></li>\n\t\t\t\t<li><strong>twitch</strong></li>\n\t\t\t\t<li><strong>android</strong></li>\n\t\t\t\t<li><strong>ios</strong></li>\n\t\t\t\t<li><strong>device</strong></li>\n\t\t\t\t<li><strong>discord</strong></li>\n\t\t\t</ul>\n\t\t\t<p>Delete link of user's account with platform. 'justice' platform might have multiple accounts from different namespaces linked. platform_namespace need to be specified when the platform ID is 'justice'.\n\t\t\t<br>Delete link of justice platform will enable password token grant and password update. </p>",
        "consumes": [
          "application/x-www-form-urlencoded",
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Delete the link of user's account with platform",
        "operationId": "AdminDeletePlatformLinkV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Namespace of the platform account to be deleted",
            "name": "platform_namespace",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/roles": {
      "put": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]'",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update User Roles, will replace all the existing roles",
        "operationId": "AdminPutUserRolesV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "post": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]'",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Save User Roles",
        "operationId": "AdminCreateUserRolesV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users": {
      "post": {
        "description": "\n<p>Available Authentication Types:</p>\n<ol>\n<li><strong>EMAILPASSWD</strong>: an authentication type used for new user registration through email.</li>\n</ol>\n<p>Country use ISO3166-1 alpha-2 two letter, e.g. US.</p>\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Create User",
        "operationId": "PublicCreateUserV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserCreateResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/forgotPassword": {
      "post": {
        "description": "<p><strong>Special note for publisher-game scenario:</strong> Game Client should provide game namespace path parameter and Publisher Client should provide publisher namespace path parameter. </p><p>The password reset code will be sent to the publisher account's email address. </p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Request Password Reset Code",
        "operationId": "PublicForgotPasswordV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "429": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20007</td><td>too many requests</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/resetPassword": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Reset User Password",
        "operationId": "PublicResetPasswordV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10142</td><td>new password cannot be same with original</td></tr></table>"
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10137</td><td>code is expired</td></tr><tr><td>10136</td><td>code is either been used or not valid anymore</td></tr><tr><td>10138</td><td>code not match</td></tr><tr><td>10152</td><td>verification code not found</td></tr></table>"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User By User ID",
        "operationId": "PublicGetUserByUserIDV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      },
      "patch": {
        "description": "<br><p>This Endpoint support update user based on given data. <b>Single request can update single field or multi fields.</b></p> This endpoint require valid user access token to accessed. <p>Supported field {Country, DisplayName, LanguageTag}</p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "operationId": "PublicUpdateUserV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.UserResponse"
              }
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10131</td><td>invalid date of birth</td></tr><tr><td>10155</td><td>country is not defined</td></tr><tr><td>10154</td><td>country not found</td></tr><tr><td>10130</td><td>user under age</td></tr><tr><td>10132</td><td>invalid email address</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get user's bans",
        "operationId": "PublicGetUserBan",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Filter ban to only returns the active one",
            "name": "activeOnly",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.UserBanResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}/password": {
      "put": {
        "description": "This endpoint need a valid user access token",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update User Password",
        "operationId": "PublicUpdatePasswordV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserPasswordUpdateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>10142</td><td>new password cannot be same with original</td></tr><tr><td>10143</td><td>password not match</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}/platforms/justice": {
      "get": {
        "description": "This endpoint gets list justice platform account by providing publisher namespace and publisher userID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User Justice Platform Accounts",
        "operationId": "GetListJusticePlatformAccounts",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": " Publisher User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.GetUserMapping"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}/platforms/{platformId}/link": {
      "post": {
        "description": "<p><br><b>Prerequisite:</b> \n\t\tPlatform client configuration need to be added to database for specific platformId. Namespace service URL need to be specified (refer to required environment variables).\n\t\t\t<h2>Supported platforms:</h2>\n\t\t\t<ul>\n\t\t\t\t<li><strong>steam</strong>: The ticket’s value is the authentication code returned by Steam.</li>\n\t\t\t\t<li><strong>steamopenid</strong>: Steam's user authentication method using OpenID 2.0. The ticket's value is URL generated by Steam on web authentication</li>\n\t\t\t\t<li><strong>facebook</strong>: The ticket’s value is the authorization code returned by Facebook OAuth</li>\n\t\t\t\t<li><strong>google</strong>: The ticket’s value is the authorization code returned by Google OAuth</li>\n\t\t\t\t<li><strong>oculus</strong>: The ticket’s value is a string composed of Oculus's user ID and the nonce separated by a colon (:).</li>\n\t\t\t\t<li><strong>twitch</strong>: The ticket’s value is the authorization code returned by Twitch OAuth.</li>\n\t\t\t\t<li><strong>android</strong>: The ticket's value is the Android’s device ID</li>\n\t\t\t\t<li><strong>ios</strong>: The ticket's value is the iOS’s device ID.</li>\n\t\t\t\t<li><strong>device</strong>: Every device that doesn't run Android and iOS is categorized as a device platform. The ticket's value is the device’s ID.</li>\n\t\t\t\t<li><strong>discord</strong>: The ticket’s value is the authorization code returned by Discord OAuth.</li>\n\t\t\t</ul>",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Link user's account with platform",
        "operationId": "PublicPlatformLinkV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ticket from platform",
            "name": "ticket",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10163</td><td>platform is already linked with the user account</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      },
      "delete": {
        "description": "<h2>Supported platforms:</h2>\n\t\t\t<ul>\n\t\t\t\t<li><strong>steam</strong></li>\n\t\t\t\t<li><strong>steamopenid</strong></li>\n\t\t\t\t<li><strong>facebook</strong></li>\n\t\t\t\t<li><strong>google</strong></li>\n\t\t\t\t<li><strong>oculus</strong></li>\n\t\t\t\t<li><strong>twitch</strong></li>\n\t\t\t\t<li><strong>android</strong></li>\n\t\t\t\t<li><strong>ios</strong></li>\n\t\t\t\t<li><strong>device</strong></li>\n\t\t\t\t<li><strong>discord</strong></li>\n\t\t\t</ul>\n\t\t\t<p>Delete link of user's account with platform. 'justice' platform might have multiple accounts from different namespaces linked. platform_namespace need to be specified when the platform ID is 'justice'.\n\t\t\t<br>Delete link of justice platform will enable password token grant and password update. </p>",
        "consumes": [
          "application/x-www-form-urlencoded",
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Delete the link of user's account with platform",
        "operationId": "PublicDeletePlatformLinkV2",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Namespace of the platform account to be deleted",
            "name": "platform_namespace",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v3/admin/bans": {
      "get": {
        "description": "Required permission 'ADMIN:BAN [READ]' <br>Ban type is the code\n\t\t\tavailable for ban assignment. It is applicable globally for any namespace.  <br>action code : 10201",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Bans"
        ],
        "summary": "Get list of ban types",
        "operationId": "AdminGetBansTypeV3",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.BansV3"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/bans/reasons": {
      "get": {
        "description": "<p>Required permission 'ADMIN:BAN [READ]'</p>\nBan reasons is the code available to justify ban assignment. It is applicable globally for any namespace.\n<p>action code : 10202</p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Bans"
        ],
        "summary": "Get list of ban reasons",
        "operationId": "AdminGetListBanReasonV3",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.BanReasonsV3"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/admins": {
      "get": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:USER [READ] permission.\n\nList all users that has admin role (role that has admin_role attribute set to true). \n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "List User Admins",
        "operationId": "ListAdminsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "The maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page. Composite values consist of created_at and id, the value is base64 encoded",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page. Composite values consist of created_at and id, the value is base64 encoded",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.GetUsersResponseWithPaginationV3"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20003</td><td>forbidden access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/agerestrictions": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]'<br>action code: 10138",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get age restriction status",
        "operationId": "AdminGetAgeRestrictionStatusV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10169</td><td>age restriction not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]' <br> action code: 10122",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update age restriction config value",
        "operationId": "AdminUpdateAgeRestrictionConfigV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/agerestrictions/countries": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]<br>action code : 10139",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get List Country age restriction",
        "operationId": "AdminGetListCountryAgeRestrictionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.CountryV3Response"
              }
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/agerestrictions/countries/{countryCode}": {
      "patch": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]'<br>action code: 10123",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update country's age restriction",
        "operationId": "AdminUpdateCountryAgeRestrictionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Country Code ",
            "name": "countryCode",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CountryAgeRestrictionV3Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.CountryV3Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10154</td><td>country not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/bans/users": {
      "get": {
        "description": "Required permission 'ADMIN:BAN [READ]' <br>Ban type is the code\n\t\t\tavailable for ban assignment. It is applicable globally for any namespace.  <br>action code : 10201",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Bans"
        ],
        "summary": "Get list of user filtered by ban types",
        "operationId": "AdminGetBannedUsersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Filter ban based on the ban status. If you set this, only active ban returned",
            "name": "activeOnly",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter ban based on the ban type. You can see list of ban from GET /iam/v3/admin/bans",
            "name": "banType",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Pagination configuration of from what point the record will be selected, should be in positive number. Default is 0",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Pagination configuration for how much data need to be retrieved in on request, should be in positive number. Default is 20",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserBanV3Response"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/model.GetUserBanV3Response"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/model.GetUserBanV3Response"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/bantypes": {
      "get": {
        "description": "Required permission 'ADMIN:BAN [READ]' <br>Ban type is the code\n\t\t\tavailable for ban assignment. It is applicable globally for any namespace.  <br>action code : 10201",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Bans"
        ],
        "summary": "Get list of ban types",
        "operationId": "AdminGetBansTypeWithNamespaceV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.BansV3"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/clients": {
      "get": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:CLIENT [READ]'</p>\n<p>action code: 10308</p>\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Get clients by namespace",
        "operationId": "AdminGetClientsByNamespaceV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientsV3Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Add a new OAuth 2.0 client. Protected by the permission: ADMIN:NAMESPACE:{namespace}:CLIENT [CREATE]<br>\n\t\tA new client automatically granted with these scopes: commerce, account, analytics, publishing, social.<br>\n\t\taction code: 10301<br>\n\t\t<p><strong>Fields Description:</strong>\n\t\t<ul>\n\t\t<li><strong>clientId</strong> : The client ID. e.g f815e5c44f364993961be3b3f26a7bf4</li>\n\t\t<li><strong>clientName</strong> : The client name. e.g E-commerce</li>\n\t\t<li><strong>secret</strong> : The client's secret. It's empty if the client's type is a public client. Otherwise, the client secret is required</li>\n\t\t<li><strong>namespace</strong> : The namespace where the client lives. e.g sample-game</li>\n\t\t<li><strong>redirectUri</strong> : Contains the redirect URI used in OAuth callback. e.g https://example.net/platform</li>\n\t\t<li><strong>oauthClientType</strong> : The OAuth 2.0 client type. The client type determines whether the authorization needs Proof Of Key Exchange or not. \n\t\t\t\t\tA public client type doesn't have a client secret and should use PKCE flow. \n\t\t\t\t\tA confidential client type has a client secret and don't use PKCE flow\n\t\t\t<ul>Supported oAuthClientType :\n\t\t\t\t<li><strong>Public</strong></li>\n\t\t\t\t<li><strong>Confidential</strong></li></ul></li>\n\t\t<li><strong>audiences</strong> : List of target client IDs who is intended to receive the token. e.g [\"eaaa65618fe24293b00a61454182b435\", \"40073ee9bc3446d3a051a71b48509a5d\"]</li>\n\t\t<li><strong>baseUri</strong> : A base URI of the application. It is used for making sure the token is intended to be used by the client. e.g https://example.net/platform</li>\n\t\t<li><strong>clientPermissions</strong> : Contains the client's permissions</li>\n\t\t</ul>\n\t\t</p>\n\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Create Client",
        "operationId": "AdminCreateClientV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreationV3Request"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientV3Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10364</td><td>client exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/clients/{clientId}": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:CLIENT [READ]'<br>action code: 10309",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Get clients by namespace and client id",
        "operationId": "AdminGetClientsbyNamespacebyIDV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientV3Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10365</td><td>client not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:CLIENT [DELETE]'<br>action code : 10310",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Delete Client",
        "operationId": "AdminDeleteClientV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID, should follow UUID version 4 without hyphen",
            "name": "clientId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10365</td><td>client not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Updates an OAuth 2.0 client. Protected by the permission: ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE].\n\t\t\t\tSpecify only the fields you want to update in the request payload, e.g. {\"ClientName\":\"E-commerce\", \"BaseUri\":\"https://example.net\"}\n\t\t<br> action code: 10302<br>\n\t\t<p><strong>Fields Description:</strong>\n\t\t<ul>\n\t\t<li><strong>clientName</strong> : The client name. It should not be empty if the field exists in the body. e.g E-commerce</li>\n\t\t<li><strong>namespace</strong> : The namespace where the client lives. e.g sample-game</li>\n\t\t<li><strong>redirectUri</strong> : Contains the redirect URI used in OAuth callback. It should not be empty if the field exists in the body.  e.g https://example.net/platform</li>\n\t\t<li><strong>audiences</strong> : List of target client IDs who is intended to receive the token. e.g [\"eaaa65618fe24293b00a61454182b435\", \"40073ee9bc3446d3a051a71b48509a5d\"]</li>\n\t\t<li><strong>baseUri</strong> : A base URI of the application. It is used in the audience checking for making sure the token is used by the right resource server. Required if the application type is a server. e.g https://example.net/platform</li>\n\t\t<li><strong>clientPermissions</strong> : Contains the client's permissions</li>\n\t\t</ul>\n\t\t</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Update Client",
        "operationId": "AdminUpdateClientV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID, should follow UUID version 4 without hyphen",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientUpdateV3Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientV3Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10365</td><td>client not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions": {
      "put": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]'</p>\n<p>action code: 10307</p>\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Update Client Permissions",
        "operationId": "AdminUpdateClientPermissionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID, should follow UUID version 4 without hypen",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.ClientPermissionsV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10365</td><td>client not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:CLIENT' [UPDATE]'</p>\n<p>action code: 10303</p>\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Add Client Permissions",
        "operationId": "AdminAddClientPermissionsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID, should follow UUID version 4 without hypen",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.ClientPermissionsV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10365</td><td>client not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions/{resource}/{action}": {
      "delete": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]'<br>action code : 10304",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clients"
        ],
        "summary": "Delete Client Permission",
        "operationId": "AdminDeleteClientPermissionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID, should follow UUID version 4 without hyphen",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action, value must be in range 1-15",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10365</td><td>client not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/all/clients": {
      "get": {
        "description": "This is the API to Get All Active 3rd Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:*:CLIENT [READ] resource",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Third Party Credential"
        ],
        "summary": "Get All Third Party Platform Credential",
        "operationId": "RetrieveAllThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "All Active Third Party Credential Retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Third Party Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/all/clients/active": {
      "get": {
        "description": "This is the API to Get All Active 3rd Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:*:CLIENT [READ] resource",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Third Party Credential"
        ],
        "summary": "Get All Active Third Party Platform Active Credential",
        "operationId": "RetrieveAllActiveThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "All Active Third Party Credential Retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Third Party Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/sso": {
      "get": {
        "description": "This is the API to Get All Active SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:*:SSO [READ] resource",
        "produces": [
          "application/json"
        ],
        "tags": [
          "SSO Credential"
        ],
        "summary": "Get All SSO Platform Credential",
        "operationId": "RetrieveAllSSOLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100), default 100",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Offset, default 0",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "All Active SSO Credential Retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.SSOPlatformCredentialResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "SSO Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/clients": {
      "get": {
        "description": "This is the API to Get 3rd Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [READ] resource",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Third Party Credential"
        ],
        "summary": "Retrieve Third Party Platform Credential",
        "operationId": "RetrieveThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Third Party Credential Found",
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Third Party Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "This is the API to Add 3rd Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [CREATE] resource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Third Party Credential"
        ],
        "summary": "Add Third Party Platform Credential",
        "operationId": "AddThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Third Party Credential Created",
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "This is the API to Delete 3rd Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [DELETE] resource",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Third Party Credential"
        ],
        "summary": "Delete Third Party Platform Credential",
        "operationId": "DeleteThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Delete Process Successful"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Third Party Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "This is the API to Delete 3rd Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [UPDATE] resource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Third Party Credential"
        ],
        "summary": "Update Third Party Platform Credential",
        "operationId": "UpdateThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Third Party Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/sso": {
      "get": {
        "description": "This is the API to Get SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [READ] resource",
        "produces": [
          "application/json"
        ],
        "tags": [
          "SSO Credential"
        ],
        "summary": "Retrieve SSO Platform Credential",
        "operationId": "RetrieveSSOLoginPlatformCredential",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "SSO Credential Found",
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "SSO Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "This is the API to Add SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [CREATE] resource.<h2>Supported platforms:</h2><ul>\n\t\t\t<li><strong>discourse</strong></li>the ssoUrl of the discourse is the discourse forum url. example: https://forum.example.com\n\t\t\t<li><strong>azure with SAML</strong></li><b>appId</b> is an application identifier in IdP, in azure it's called EntityID\n\t\t\t<b>acsUrl</b> is an endpoint on the service provider where the identity provider will redirect to with its authentication response. example: /iam/v3/sso/saml/azuresaml/authenticate \n\t\t\t<b>federationMetadataUrl</b> is an endpoint on the Identity Provider(IdP) to get IdP federation metadata for service provider to build trust relationship\n\t\t\t</ul>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "SSO Credential"
        ],
        "summary": "Add SSO Platform Credential",
        "operationId": "AddSSOLoginPlatformCredential",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "SSO Credential Created",
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "This is the API to Delete SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [DELETE] resource",
        "produces": [
          "application/json"
        ],
        "tags": [
          "SSO Credential"
        ],
        "summary": "Delete SSO Platform Credential",
        "operationId": "DeleteSSOLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Delete Process Successful"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "SSO Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "This is the API to Delete SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [UPDATE] resource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "SSO Credential"
        ],
        "summary": "Update SSO Platform Credential",
        "operationId": "UpdateSSOPlatformCredential",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "SSO Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/roles/{roleId}/users": {
      "get": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:USER [READ]'</p>\n\t\t\t<p>This endpoint search admin users which have the roleId</p>\n\t\t\t<p>Notes : this endpoint only accept admin role. Admin Role is role which have admin status and members.\n\t\t\tUse endpoint [GET] /roles/{roleId}/admin to check the role status</p>\n\t\t\t<br>action code : 10140",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get Admin Users By RoleId",
        "operationId": "GetAdminUsersByRoleIdV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "The maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUsersResponseWithPaginationV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>10157</td><td>specified role is not admin role</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10156</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users": {
      "get": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:USER [READ]'</p>\n\t\t\t<p>This endpoint search user who owns the given email address</p>\n\t\t\t<br>action code : 10132",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User By Email Address",
        "operationId": "AdminGetUserByEmailAddressV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Email Address, should follow OWASP email format",
            "name": "emailAddress",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/invite": {
      "post": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:USER:INVITE [CREATE]\n\nUse this endpoint to invite admin user and assign role to them. The role must be scoped to namespace.\nSubstitute the namespace in path parameter to desired role's namespace'. An admin user can only\nassign role to namespaces that the admin user has the required permission.\n\nThe invited admin will also assigned with \"User\" role by default.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Invite User Admin",
        "operationId": "AdminInviteUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.InviteAdminRequestV3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.InviteAdminResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10154</td><td>country not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10183</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/platforms/justice": {
      "get": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:USER [READ] permission.\n\nReturns list of users ID and namespace with their Justice platform account, under a namespace. If user\ndoesn't have Justice platform account, the linkedPlatforms will be empty array.'\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Admin List Users V3",
        "operationId": "AdminListUsersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "number of returned data, default 100",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "number of offset, default 0",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/accountcommon.ListUsersWithPlatformAccountsResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20003</td><td>forbidden access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/search": {
      "get": {
        "description": "<p>Required permission ADMIN:NAMESPACE:{namespace}:USER [READ]</p>\n  <p>Endpoint behavior :\n  <ul><li>by default this endpoint searches all users on the specified namespace</li>\n  <li>if query parameter is defined, endpoint will search users whose email address, display name, or username partially  match with the query</li>\n  <li>if startDate and endDate parameters is defined, endpoint will search users which created on the certain date range</li>\n  <li>if query, startDate and endDate parameters are defined, endpoint will search users whose email address and display name match and created on the certain date range</li>\n  <li>if startDate parameter is defined, endpoint will search users that created start from the defined date</li>\n  <li>if endDate parameter is defined, endpoint will search users that created until the defined date</li>\n  </ul></p>\n<br>action code : 10133",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Search User",
        "operationId": "AdminSearchUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query, can be either email address or display name",
            "name": "query",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100), default 100",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Offset, default 0",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start Date, format YYYY-MM-DD",
            "name": "startDate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End Date, format YYYY-MM-DD",
            "name": "endDate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search by given attribute, possible values are emailAddress, displayName, and username",
            "name": "by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.SearchUsersResponseWithPaginationV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/search/bulk": {
      "post": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:USER [READ]'</p>\n\t\t\t<p>This endpoint search user by the list of email addresses</p>\n\t\t\t<br>action code : 10132",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get Bulk User By Email Address",
        "operationId": "AdminGetBulkUserByEmailAddressV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ListEmailAddressRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ListUserResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Admin Get User By User Id",
        "operationId": "AdminGetUserByUserIdV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'</p>\n<br><p>This Endpoint support update user based on given data. <b>Single request can update single field or multi fields.</b></p> \n<p>Supported field {country, displayName, emailAddress, languageTag, dateOfBirth}</p>\n<p>Country use ISO3166-1 alpha-2 two letter, e.g. US.</p>\n<p>Date of Birth format : YYYY-MM-DD, e.g. 2019-04-29.</p>\n<br><b>Several case of updating email address</b>\n<ul><li>User want to update email address of which have been verified, NewEmailAddress response field will be filled with new email address.</li>\n<li>User want to update email address of which have not been verified, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with new email address. </li>\n<li>User want to update email address of which have been verified and updated before, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with verified email before. NewEmailAddress response field will be filled with newest email address. </li>\n<p>action code : 10103 </p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "operationId": "AdminUpdateUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10154</td><td>country not found</td></tr><tr><td>10130</td><td>user under age</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [READ]'</p>\n<p>This endpoint retrieve the first page of the data if after and before parameters is empty</p>\n<p>action code : 10126</p>\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get user's bans",
        "operationId": "AdminGetUserBanV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Filter ban based on the ban status. If you set this, only active ban returned",
            "name": "activeOnly",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The number of data returned in one query. The maximum value of the limit is 100 and the minimum value of the limit is 1. If you set this into -1, then it returns all data. Default: -1. <em>Doesn't work yet</em>.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter ban based on the date creation. If you set this, only user bans created before the date returned. The date is in ISO-8601. Example value: 2019-05-18T07:17:45Z. <em>Doesn't work yet</em>",
            "name": "before",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter ban based on the date creation. If you set this, only user bans created after the date returned. The date is in ISO-8601. Example value: 2019-05-18T07:17:45Z. <em>Doesn't work yet</em>",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserBanV3Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [CREATE]'.</p>\n<p>Bans a user with specific type of ban. Ban types and reason can be queried. </p>\n<p>action code : 10141 </p>\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Ban a single user",
        "operationId": "AdminBanUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BanCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>10158</td><td>ban not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans/{banId}": {
      "patch": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId}\n[UPDATE] <br>Set ban status for a single user for a specific ban. Retrieve\nuser ban and choose the ban ID. Set the form parameter to true/false to enable\nor disable the ban. <br>action code : 10142'\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Enable or disable ban for a single user",
        "operationId": "AdminUpdateUserBanV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ban ID, should follow UUID version 4 without hyphen",
            "name": "banId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BanUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10145</td><td>disallow game access publisher user's ban</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>10158</td><td>ban not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/code/request": {
      "post": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\n<p>The verification code is sent to email address.</p>\n<p>Available contexts for use : </p>\n<ol>\n\t<li><strong>UserAccountRegistration</strong>\n\t\t<p>a context type used for verifying email address in user account registration. It returns 409 if the email address already verified. \n\t\t<strong><em>It is the default context if the Context field is empty</em></strong></p>\n\t</li>\n\t<li><strong>UpdateEmailAddress</strong>\n\t\t<p>a context type used for verify user before updating email address.(Without email address verified checking)</p>\n\t</li>\n\t<li><strong>upgradeHeadlessAccount</strong>\n\t\t<p>The context is intended to be used whenever the email address wanted to be automatically verified on upgrading a headless account.  \n\t\t\tIf this context used, IAM rejects the request if the email address is already used by others by returning HTTP Status Code 409.</p>\n\t</li>\n</ol>\n<p>action code: 10116</p>\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Send verification code to user",
        "operationId": "AdminSendVerificationCodeV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10146</td><td>userID not match</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10171</td><td>email address not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10140</td><td>user verified</td></tr><tr><td>10133</td><td>email already used</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20007</td><td>too many requests</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/code/verify": {
      "post": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'</p>\n\t\t\tRedeems a verification code sent to a user to verify the user's contact address is correct\n\t\t\t<p>Available ContactType : <b>email<b/> or <b>phone<b/> </p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Verify account by validating verification code",
        "operationId": "AdminVerifyAccountV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserVerificationRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10152</td><td>verification code not found</td></tr><tr><td>10137</td><td>code is expired</td></tr><tr><td>10136</td><td>code is either been used or not valid anymore</td></tr><tr><td>10138</td><td>code not match</td></tr><tr><td>10149</td><td>verification contact type doesn't match</td></tr><tr><td>10148</td><td>verification code context doesn't match the required context</td></tr><tr><td>10162</td><td>invalid verification</td></tr></table>"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/codes": {
      "get": {
        "description": "[WARNING] This endpoint is only for testing purpose. <br>This endpoint get active user verification\n\t\tcode. There are 3 scenario of getting verification codes : after account registration, after reset password \n\t\trequest, and after headless account upgrade. All of them will be returned on this endpoint. Required permission\n \t\t'ADMIN:NAMESPACE:{namespace}:USER:{userId}:CODE' [READ] <br>action code: 10146",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get verification code sent to user",
        "operationId": "getUserVerificationCode",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.VerificationCodeResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/deletion/status": {
      "get": {
        "description": "Required permissions 'ADMIN:NAMESPACE:{namespace}:DELETIONSTATUS:USER:{userId} [READ]' <br>action code : 10145",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User Deletion Status",
        "operationId": "AdminGetUserDeletionStatusV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserDeletionStatusResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Required permissions 'ADMIN:NAMESPACE:{namespace}:DELETIONSTATUS:USER:{userId} [UPDATE]' <br>action code : 10144",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update User Deletion Status",
        "operationId": "AdminUpdateUserDeletionStatusV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdateUserDeletionStatusRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/headless/code/verify": {
      "post": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\n        \t<p>The endpoint upgrades a headless account by linking the headless account with the email address and the password.\n\t\t\t\tBy upgrading the headless account into a full account, the user could use the email address and password for using Justice IAM. </p>\n        \t<p>The endpoint is a shortcut for upgrading a headless account and verifying the email address in one call. \n\t\t\t\tIn order to get a verification code for the endpoint, please check the send verification code endpoint. </p>\n        \t<p>This endpoint also have an ability to update user data (if the user data field is specified) right after the upgrade account process is done.<br/>\n\t\t\t\tSupported user data fields :\n\t\t\t\t<ul>\n\t\t\t\t\t<li>displayName</li>\n\t\t\t\t\t<li>dateOfBirth : format YYYY-MM-DD, e.g. 2019-04-29</li>\n\t\t\t\t\t<li>country : format ISO3166-1 alpha-2 two letter, e.g. US</li>\n\t\t\t\t</ul>\n\t\t\t<br>action code : 10124</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Upgrade headless account with verification code",
        "operationId": "AdminUpgradeHeadlessAccountV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountWithVerificationCodeRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10155</td><td>country is not defined</td></tr><tr><td>10130</td><td>user under age</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr><tr><td>10152</td><td>verification code not found</td></tr><tr><td>10137</td><td>code is expired</td></tr><tr><td>10136</td><td>code is either been used or not valid anymore</td></tr><tr><td>10138</td><td>code not match</td></tr><tr><td>10149</td><td>verification contact type doesn't match</td></tr><tr><td>10148</td><td>verification code context doesn't match the required context</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>10154</td><td>country not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10153</td><td>user exist</td></tr><tr><td>10170</td><td>account is already a full account</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/information": {
      "delete": {
        "description": "Required permissions 'ADMIN:NAMESPACE:{namespace}:INFORMATION:USER:{userId} [DELETE]'.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Delete user's information",
        "operationId": "AdminDeleteUserInformationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/logins/histories": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:HISTORY:LOGIN:USER:{userId} [READ]'<p>Notes for this endpoint: </p> <ul><li>This endpoint retrieve the first page of the data if `after` and `before` parameters is empty.</li><li>The maximum value of the limit is 100 and the minimum value of the limit is 1.</li><li>This endpoint retrieve the next page of the data if we provide `after` parameters with valid Unix timestamp.</li><li>This endpoint retrieve the previous page of the data if we provide `before` parameter with valid data Unix timestamp.</li><ul>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User's Login Histories",
        "operationId": "AdminGetUserLoginHistoriesV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "The cursor that points to query data for the previous page (In Unix timestamp formats, e.g:1545114248).",
            "name": "before",
            "in": "query"
          },
          {
            "type": "number",
            "description": "The cursor that points to query data for the next page (In Unix timestamp formats, e.g:1545114248)",
            "name": "after",
            "in": "query"
          },
          {
            "type": "number",
            "description": "The number of data retrieved in a page",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.LoginHistoriesResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/permissions": {
      "put": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [UPDATE]'</p>\n\t\t\t<p>This endpoint will REPLACE user's permissions with the ones defined in body</p>\n\t\t\t<p>Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.</p>\n\t\t\t<p>Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.</p>\n\t\t\t<p>In ranged schedule, first element will be start date, and second one will be end date</p>\n\t\t\t<p>If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive</p>\n\t\t\t<p>Syntax reference</p>\n\t\t\t<p>Fields:</p>\n\t\t\t<ol>\n\t\t\t<li>Seconds: 0-59 * / , -</li>\n\t\t\t<li>Minutes: 0-59 * / , -</li>\n\t\t\t<li>Hours: 0-23 * / , -</li>\n\t\t\t<li>Day of month: 1-31 * / , - L W</li>\n\t\t\t<li>Month: 1-12 JAN-DEC * / , -</li>\n\t\t\t<li>Day of week: 0-6 SUN-SAT * / , - L #</li>\n\t\t\t<li>Year: 1970-2099 * / , -</li>\n\t\t\t</ol>\n\t\t\t<p>Special characters:</p>\n\t\t\t<ol>\n\t\t\t<li>*: all values in the fields, e.g. * in seconds fields indicates every second</li>\n\t\t\t<li>/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter</li>\n\t\t\t<li>,: separate items of a list, e.g. MON,WED,FRI in day of week</li>\n\t\t\t<li>-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive</li>\n\t\t\t<li>L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.</li>\n\t\t\t<li>W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"</li>\n\t\t\t<li>#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.</li>\n\t\t\t</ol>\n\t\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update User Permissions",
        "operationId": "AdminUpdateUserPermissionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.Permissions"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "post": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [CREATE]'</p>\n\t\t\t<p>This endpoint will APPEND user's permissions with the ones defined in body</p>\n\t\t\t<p>Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.</p>\n\t\t\t<p>Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.</p>\n\t\t\t<p>In ranged schedule, first element will be start date, and second one will be end date</p>\n\t\t\t<p>If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive</p>\n\t\t\t<p>Syntax reference</p>\n\t\t\t<p>Fields:</p>\n\t\t\t<ol>\n\t\t\t<li>Seconds: 0-59 * / , -</li>\n\t\t\t<li>Minutes: 0-59 * / , -</li>\n\t\t\t<li>Hours: 0-23 * / , -</li>\n\t\t\t<li>Day of month: 1-31 * / , - L W</li>\n\t\t\t<li>Month: 1-12 JAN-DEC * / , -</li>\n\t\t\t<li>Day of week: 0-6 SUN-SAT * / , - L #</li>\n\t\t\t<li>Year: 1970-2099 * / , -</li>\n\t\t\t</ol>\n\t\t\t<p>Special characters:</p>\n\t\t\t<ol>\n\t\t\t<li>*: all values in the fields, e.g. * in seconds fields indicates every second</li>\n\t\t\t<li>/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter</li>\n\t\t\t<li>,: separate items of a list, e.g. MON,WED,FRI in day of week</li>\n\t\t\t<li>-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive</li>\n\t\t\t<li>L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.</li>\n\t\t\t<li>W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"</li>\n\t\t\t<li>#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.</li>\n\t\t\t</ol>\n\t\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Add User Permissions",
        "operationId": "AdminAddUserPermissionsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.Permissions"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [DELETE]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Delete User Permission",
        "operationId": "AdminDeleteUserPermissionBulkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.PermissionDeleteRequest"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}": {
      "delete": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [DELETE]'",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Delete User Permission",
        "operationId": "AdminDeleteUserPermissionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action (1..15)",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms": {
      "get": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]'.</p>\n\t\t\t<h2>Justice Platform Account</h2>\n\t\t\t<p>The permission ’ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId}’ [READ] \n\t\t\t\tis required in order to read the UserID who linked with the user.</p>\n\t\t\t<br>Gets platform accounts that are already linked with user account\n        \t<br>action code : 10128",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get platform accounts linked to the user",
        "operationId": "AdminGetUserPlatformAccountsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.UserLinkedPlatformsResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/justice/{targetNamespace}": {
      "post": {
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:USER:{userId} [CREATE]\n\nCreate Justice User from Publisher User information. It will check first if Justice User on target namespace already exist.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Create Justice User from Publisher User",
        "operationId": "AdminCreateJusticeUser",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Target namespace",
            "name": "targetNamespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.CreateJusticeUserResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/link": {
      "post": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'</p>\nForce linking platform account to user User Account. This endpoint intended for admin to forcefully link account to user.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Link a Platform User Account to User Account",
        "operationId": "AdminLinkPlatformAccount",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.LinkPlatformAccountRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}": {
      "delete": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]'.\n\t\t\t<h2>Supported platforms:</h2>\n\t\t\t<ul>\n\t\t\t\t<li><strong>steam</strong></li>\n\t\t\t\t<li><strong>steamopenid</strong></li>\n\t\t\t\t<li><strong>facebook</strong></li>\n\t\t\t\t<li><strong>google</strong></li>\n\t\t\t\t<li><strong>oculus</strong></li>\n\t\t\t\t<li><strong>twitch</strong></li>\n\t\t\t\t<li><strong>android</strong></li>\n\t\t\t\t<li><strong>ios</strong></li>\n\t\t\t\t<li><strong>device</strong></li>\n\t\t\t\t<li><strong>discord</strong></li>\n\t\t\t</ul>\n\t\t\t<p>Unlink user's account from a specific platform. 'justice' platform might have multiple accounts from different namespaces linked.\n\t\t\t<br><i>platformNamespace</i> need to be specified when the platform ID is 'justice'.\n\t\t\t<br>\n\t\t\t<br>Unlink user's account from justice platform will enable password token grant and password update.\n\t\t\t<br>\n\t\t\t<br>If you want to unlink user's account in a game namespace, you have to specify <i>platformNamespace</i> to that game namespace.\n\t\t\t<br>\n\t\t\t<br>action code : 10121 </p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Unlink user's account from specific platform",
        "operationId": "AdminPlatformUnlinkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UnlinkUserPlatformRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}/link": {
      "post": {
        "description": "<p>Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'.</p>\n\t\t\t<p><br><b>Prerequisite:</b> Platform client configuration need to be added to database for specific platformId. Namespace service URL need to be specified (refer to required environment variables).\n<h2>Supported platforms:</h2>\n\t\t\t<ul>\n\t\t\t\t<li><strong>steam</strong>: The ticket’s value is the authentication code returned by Steam.</li>\n\t\t\t\t<li><strong>steamopenid</strong>: Steam's user authentication method using OpenID 2.0. The ticket's value is URL generated by Steam on web authentication</li>\n\t\t\t\t<li><strong>facebook</strong>: The ticket’s value is the authorization code returned by Facebook OAuth</li>\n\t\t\t\t<li><strong>google</strong>: The ticket’s value is the authorization code returned by Google OAuth</li>\n\t\t\t\t<li><strong>oculus</strong>: The ticket’s value is a string composed of Oculus's user ID and the nonce separated by a colon (:).</li>\n\t\t\t\t<li><strong>twitch</strong>: The ticket’s value is the authorization code returned by Twitch OAuth.</li>\n\t\t\t\t<li><strong>android</strong>: The ticket's value is the Android’s device ID</li>\n\t\t\t\t<li><strong>ios</strong>: The ticket's value is the iOS’s device ID.</li>\n\t\t\t\t<li><strong>device</strong>: Every device that does’nt run Android and iOS is categorized as a device platform. The ticket's value is the device’s ID.</li>\n\t\t\t\t<li><strong>discord</strong>: The ticket’s value is the authorization code returned by Discord OAuth.</li>\n\t\t\t</ul>",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Link user's account with platform",
        "operationId": "AdminPlatformLinkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ticket from platform",
            "name": "ticket",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10163</td><td>platform is already linked with the user account</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/roles": {
      "delete": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [DELETE]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Delete User Roles",
        "operationId": "AdminDeleteUserRolesV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "patch": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE] permission.\n\nUser's roles will be updated with given roles (replacing current user's role). Request body need to specify allowed namespace for given role to support new role restriction.\nSkipped the check whether the user performing the request is a role manager / assigner since there is a plan to discard the role manager / assigner.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Admin Save User Role V3",
        "operationId": "AdminSaveUserRoleV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Array of Role ID to be assigned with allowed namespace",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.NamespaceRoleRequest"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20003</td><td>forbidden access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10183</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/roles/{roleId}": {
      "post": {
        "description": "<p>This endpoint adds role to user. Required permission ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]</p>\n<p>action code: 10109</p>\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Add User Role",
        "operationId": "AdminAddUserRoleV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr><tr><td>10159</td><td>operator is not a role manager</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10156</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10160</td><td>user already has the role</td></tr><tr><td>10161</td><td>user already the role member</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "<p>This endpoint removes role from user. Required permission ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [DELETE]</p>\n<p>action code: 10110</p>\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Delete User Role",
        "operationId": "AdminDeleteUserRoleV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr><tr><td>10159</td><td>operator is not a role manager</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10156</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/status": {
      "patch": {
        "description": "Required permissions 'ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]'\n\t\t<p>This endpoint disable or enable user account. Set the enable status on the request body to true to enable user account or set to false to disable it. </p>\n\t\t<p>Disable user for <strong>Account Disable </strong> purpose fill the reason with:</p>\n\t\t<ul>\n\t\t<li><strong>AdminDeactivateAccount</strong> : if your disable account request comes from admin</li>\n\t\t</ul>\n\t\t<p>Enable user ignore field 'reason' in the request body. </p>\n\t\t<br>action code : 10143",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update user status",
        "operationId": "AdminUpdateUserStatusV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdateUserStatusRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/verify": {
      "put": {
        "description": "<p>This endpoint force verify user. Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]</p>\n<p>action code: 10118</p>\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Verify user without verification code",
        "operationId": "AdminVerifyUserWithoutVerificationCodeV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10140</td><td>user verified</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/roles": {
      "get": {
        "description": "Required permission 'ADMIN:ROLE [READ]'<br> <p>action code: 10414</p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Roles",
        "operationId": "AdminGetRolesV3",
        "parameters": [
          {
            "type": "boolean",
            "description": "- true if the expected result should only returns records with wildcard = true\n            - false if the expected result should only returns records with wildcard = false\n            - empty (omitted) if the expected result should returns records with no wildcard filter at all",
            "name": "isWildcard",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponseWithManagersAndPaginationV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Required permission 'ADMIN:ROLE [CREATE]' <br>action code: 10401",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Create Role",
        "operationId": "AdminCreateRoleV3",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleCreateV3Request"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/accountcommon.RoleV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10466</td><td>invalid role members</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/roles/{roleId}": {
      "get": {
        "description": "Required permission 'ADMIN:ROLE [READ]'<br> <p>action code: 10419</p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Role",
        "operationId": "AdminGetRoleV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission ''ADMIN:ROLE [DELETE]'' <br>action code: 10403",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Delete Role",
        "operationId": "AdminDeleteRoleV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "description": "Required permission 'ADMIN:ROLE [UPDATE]' <br>action code: 10402",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Update Role",
        "operationId": "AdminUpdateRoleV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/roles/{roleId}/admin": {
      "get": {
        "description": "<p>Required permission 'ADMIN:ROLE [READ]'</p>\n\t\t\t<p>Admin roles has its members listed in the role.</p>\n\t\t\t<p>action code: 10420</p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Role Admin Status",
        "operationId": "AdminGetRoleAdminStatusV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role id, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleAdminStatusResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "<p>Required permission 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>Admin roles has its members listed in the role.</p>\n\t\t\t<p>Role can be set as admin role only when it has at least 1 manager.</p>\n\t\t\t<br>action code: 10412",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Set Role as Admin Role",
        "operationId": "AdminUpdateAdminRoleStatusV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr><tr><td>10467</td><td>role has no manager</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "<p>Required permission 'ADMIN:ROLE [UPDATE]'</p> code: 10413",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Remove Role Admin Status",
        "operationId": "AdminRemoveRoleAdminV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/iam/v3/admin/roles/{roleId}/managers": {
      "get": {
        "description": "<p>Required permission 'ADMIN:ROLE [READ]'</p>\n\t\t\t<p>Role can only be assigned to other users by the role's manager.</p><br/>\n\t\t\taction code: 10415",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Role Managers",
        "operationId": "AdminGetRoleManagersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleManagersResponsesV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "<p>Role can only be assigned to other users by the role's manager.</p>\n\t\t\t<br><p>Required permission 'ADMIN:ROLE [UPDATE]'</p><br>action code: 10408",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Add Role Managers",
        "operationId": "AdminAddRoleManagersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleManagersRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10468</td><td>role manager exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "<p>Required permission 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>Role can only be assigned to other users by the role's manager.</p> <br> action code: 10409",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Remove Role Managers",
        "operationId": "AdminRemoveRoleManagersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleManagersRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/roles/{roleId}/members": {
      "get": {
        "description": "<p>Required permission 'ADMIN:ROLE [READ]'</p>\n<p>Admin roles has its members listed in the role.</p>\n<p>action code: 10416</p>\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Role Members",
        "operationId": "AdminGetRoleMembersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleMembersResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "<p>Required permission 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>Admin roles has its members listed in the role.</p>\n\t\t\t<p>Role can only be assigned to other users by the role's manager.</p> <br>action code: 10410</br>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Add Role Members",
        "operationId": "AdminAddRoleMembersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleMembersRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10457</td><td>specified role is not admin role</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr><tr><td>10459</td><td>operator is not a role manager</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10469</td><td>role member exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "<p>Required permission 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>Admin roles has its members listed in the role.</p>\n\t\t\t<p>Role can only be assigned to other users by the role's manager.</p> <br> action code: 10411",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Remove Role Members",
        "operationId": "AdminRemoveRoleMembersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleMembersRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10457</td><td>specified role is not admin role</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr><tr><td>10459</td><td>operator is not a role manager</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/roles/{roleId}/permissions": {
      "put": {
        "description": "<p>Required permission 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>This endpoint will REPLACE role's permissions with the ones defined in body</p>\n\t\t\t<br>action code: 10405<br>\n\t\t\t<p>Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.</p>\n\t\t\t<p>Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.</p>\n\t\t\t<p>In ranged schedule, first element will be start date, and second one will be end date</p>\n\t\t\t<p>If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive</p>\n\t\t\t<p>Syntax reference</p>\n\t\t\t<p>Fields:</p>\n\t\t\t<ol>\n\t\t\t<li>Seconds: 0-59 * / , -</li>\n\t\t\t<li>Minutes: 0-59 * / , -</li>\n\t\t\t<li>Hours: 0-23 * / , -</li>\n\t\t\t<li>Day of month: 1-31 * / , - L W</li>\n\t\t\t<li>Month: 1-12 JAN-DEC * / , -</li>\n\t\t\t<li>Day of week: 0-6 SUN-SAT * / , - L #</li>\n\t\t\t<li>Year: 1970-2099 * / , -</li>\n\t\t\t</ol>\n\t\t\t<p>Special characters:</p>\n\t\t\t<ol>\n\t\t\t<li>*: all values in the fields, e.g. * in seconds fields indicates every second</li>\n\t\t\t<li>/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter</li>\n\t\t\t<li>,: separate items of a list, e.g. MON,WED,FRI in day of week</li>\n\t\t\t<li>-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive</li>\n\t\t\t<li>L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.</li>\n\t\t\t<li>W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"</li>\n\t\t\t<li>#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.</li>\n\t\t\t</ol>\n\t\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Update Role Permissions",
        "operationId": "AdminUpdateRolePermissionsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.PermissionsV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "<p>Required permission 'ADMIN:ROLE [UPDATE]'</p>\n\t\t\t<p>This endpoint will ATTACH permission(s) into the role</p>\n\t\t\t<br>action code: 10404<br>\n\t\t\t<p>Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.</p>\n\t\t\t<p>Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.</p>\n\t\t\t<p>In ranged schedule, first element will be start date, and second one will be end date</p>\n\t\t\t<p>If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive</p>\n\t\t\t<p>Syntax reference</p>\n\t\t\t<p>Fields:</p>\n\t\t\t<ol>\n\t\t\t<li>Seconds: 0-59 * / , -</li>\n\t\t\t<li>Minutes: 0-59 * / , -</li>\n\t\t\t<li>Hours: 0-23 * / , -</li>\n\t\t\t<li>Day of month: 1-31 * / , - L W</li>\n\t\t\t<li>Month: 1-12 JAN-DEC * / , -</li>\n\t\t\t<li>Day of week: 0-6 SUN-SAT * / , - L #</li>\n\t\t\t<li>Year: 1970-2099 * / , -</li>\n\t\t\t</ol>\n\t\t\t<p>Special characters:</p>\n\t\t\t<ol>\n\t\t\t<li>*: all values in the fields, e.g. * in seconds fields indicates every second</li>\n\t\t\t<li>/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter</li>\n\t\t\t<li>,: separate items of a list, e.g. MON,WED,FRI in day of week</li>\n\t\t\t<li>-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive</li>\n\t\t\t<li>L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.</li>\n\t\t\t<li>W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"</li>\n\t\t\t<li>#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.</li>\n\t\t\t</ol>\n\t\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Add Role Permissions",
        "operationId": "AdminAddRolePermissionsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.PermissionsV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission 'ADMIN:ROLE [UPDATE]'",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Delete Role",
        "operationId": "AdminDeleteRolePermissionsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/admin/roles/{roleId}/permissions/{resource}/{action}": {
      "delete": {
        "description": "Required permission 'ADMIN:ROLE [UPDATE]' <br>action code: 10406<br>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Delete Role Permission",
        "operationId": "AdminDeleteRolePermissionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action, value must be in range 1-15",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/iam/v3/admin/users/me": {
      "get": {
        "description": "<p>Require valid user authorization<br>Get my user data<br>action code : 10147 </p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get My User",
        "operationId": "AdminGetMyUserV3",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/authenticate": {
      "post": {
        "description": "<p>This endpoint is being used to authenticate a user account. \n\t\t\t\t\tIt validates user's email / username and password. Deactivated or login-banned users are unable to login\n\t\t\t\t\tRedirect URI and Client ID must be specified as a pair and only used to redirect to the specified\n\t\t\t\t\tredirect URI in case the requestId is no longer valid.</p>\n\t\t\t\t\t<br>action code: 10801",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth2.0 - Extension"
        ],
        "summary": "Authentication API",
        "operationId": "UserAuthenticationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Account username",
            "name": "user_name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Account password",
            "name": "password",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Request ID",
            "name": "request_id",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Redirect URI",
            "name": "redirect_uri",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Client ID",
            "name": "client_id",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "Extend expiration date of refresh token",
            "name": "extend_exp",
            "in": "formData"
          }
        ],
        "responses": {
          "302": {
            "description": "Found. Redirect successful requests to consent page with \"list of consent\" in query params.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/iam/v3/location/country": {
      "get": {
        "description": "<p>This endpoint get country location based on the request.</p>",
        "consumes": [
          ""
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth2.0 - Extension"
        ],
        "summary": "Get Country Location",
        "operationId": "GetCountryLocationV3",
        "responses": {
          "200": {
            "description": "Country Location info returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.CountryLocationResponse"
            }
          }
        }
      }
    },
    "/iam/v3/logout": {
      "post": {
        "description": "<p>This endpoint is used to remove <b>access_token</b> cookie and <b>refresh_token</b> cookie.</p>",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth2.0 - Extension"
        ],
        "summary": "Logout",
        "operationId": "Logout",
        "responses": {
          "204": {
            "description": "Logout successfully"
          }
        }
      }
    },
    "/iam/v3/oauth/admin/namespaces/{namespace}/users/{userId}/revoke": {
      "post": {
        "description": "<p>This endpoint revokes all access tokens and refresh tokens a user has prior the revocation time.</p>\n\t\t\t<p>This endpoint requires authorized requests header with valid access token.</p>\n\t\t\t<p>Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'</p>\n\t\t\t<p>It is a convenient feature for the developer (or admin) who wanted to revokes all user's access tokens and refresh tokens generated before some period of time.</p>\n\t\t\t<p>action code : 10707</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth2.0"
        ],
        "summary": "Revokes user's tokens'",
        "operationId": "RevokeUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User to be revoked",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user revoked"
          },
          "400": {
            "description": "invalid input",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Token is not exist, expired, or invalid",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "403": {
            "description": "insufficient permission",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/authorize": {
      "get": {
        "description": "Initializes OAuth2.0 authorization code flow<br/>\n<p>The endpoint stores authorization request and redirects to login page with the authorization request id.\n\tThe user can then do the authentication on the login page. \n\tThe user will be redirected back to the requesting client with authorization code if successfully authenticated. \n</p>\n<p>Only authorization code flow supported by this endpoint, implicit flow is not supported.</p>\n<ul>\n\t<li><p><strong>Authorize success</strong>: \n\t\tredirects to login page with the following information: ?request_id={authorization_request_id}</p>\n\t</li>\n\t<li><p><strong>Authorize failure</strong>: \n\t\tredirects to the given redirect uri with the following information:\n\t\t?error={error_code}&error_description={error description}</p>\n\t</li>\n</ul>\n\t<p>Following are the error code based on the specification:</p>\n<ul>\n\t<li><p>invalid_request: The request is missing a required parameter, \n\t\tincludes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.</p>\n\t</li>\n\t<li><p>server_error: \n\t\tThe authorization server encountered an unexpected condition that prevented it from fulfilling the request.</p>\n\t</li>\n\t<li><p>unauthorized_client: The client is not authorized to request a token using this method.</p></li>\n\t<li><p>access_denied: The resource owner or authorization server denied the request.</p></li>\n\t<li><p>invalid_scope: The requested scope is invalid, unknown, or malformed.</p></li>\n\t<li><p>unsupported_response_type: The authorization server does not support obtaining a token using this method.</p></li>\n\t<li><p>temporarily_unavailable: The authorization server is currently unable to handle the request \n\t\tdue to a temporary overloading or maintenance of the server.</p>\n\t</li>\n</ul>\n\t<p>Please refer to the RFC for more information about authorization code flow: https://tools.ietf.org/html/rfc6749#section-4.1</p><br>\n\taction code: 10701\n\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth2.0"
        ],
        "summary": "OAuth2 authorize API",
        "operationId": "AuthorizeV3",
        "parameters": [
          {
            "enum": [
              "code"
            ],
            "type": "string",
            "default": "code",
            "description": "Supported response type : 'code'",
            "name": "response_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Registered client ID",
            "name": "client_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Redirect URI registered for requesting client. Required if client registered with multiple redirect URI. Registered redirect uri will be assigned if left empty.",
            "name": "redirect_uri",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Random value for preventing cross-site request forgery used by client.",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "default": "commerce account social publishing analytics",
            "description": "Defines the requested access request scope. Can be multiple values delimited by whitespace.",
            "name": "scope",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Value generated by transforming code verifier using code challenge method. Mandatory for public client.",
            "name": "code_challenge",
            "in": "query"
          },
          {
            "enum": [
              "plain",
              "S256"
            ],
            "type": "string",
            "default": "plain",
            "description": "Method that is used to transform code verifier to code challenge",
            "name": "code_challenge_method",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Custom query to tell authorization web which page to present to user",
            "name": "target_auth_page",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": "Found. Redirected to login page with either request_id or error.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/iam/v3/oauth/introspect": {
      "post": {
        "description": "<p>This endpoint returns information about an access token intended to be used by resource servers or other internal servers.</p>\n\t\t\t\t\t <p>This endpoint requires authorized requests header with valid basic or bearer token.</p>\n\t\t\t\t\t <p>action code : 10705</p>",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth2.0"
        ],
        "summary": "OAuth2 token introspection API",
        "operationId": "TokenIntrospectionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Access Token / Refresh Token",
            "name": "token",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenIntrospectResponse"
            }
          },
          "400": {
            "description": "invalid input",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "invalid bearer or basic authorization header",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/jwks": {
      "get": {
        "description": "<p>This endpoint serves public keys for verifying JWT access tokens generated by this service.</p>\n\t\t\t<p>When a client application wants to verify a JWT token, it needs to get the 'kid' value found in the JWT token header and use it\n\t\t\tto look up the corresponding public key from a set returned by this endpoint. The client application can then use that public key to verify the JWT.</p>\n\t\t\t<p>A client application might cache the keys so it doesn't need to do request every time it needs to verify a JWT token. If a client application\n\t\t\tcaches the keys and a key with the same 'kid' cannot be found in the cache, it should then try to refresh the keys by making a request to this\n\t\t\tendpoint again.</p>\n\t\t\t<p>Please refer to the RFC for more information about JWK (JSON Web Key): https://tools.ietf.org/html/rfc7517</p>\n\t\t\t<br>action code : 10709",
        "consumes": [
          ""
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth2.0"
        ],
        "summary": "JSON Web Key Set for verifying JWT",
        "operationId": "GetJWKSV3",
        "responses": {
          "200": {
            "description": "JWKS returned",
            "schema": {
              "$ref": "#/definitions/oauthcommon.JWKSet"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/namespaces/{namespace}/users/{userId}/platforms/{platformId}/platformToken": {
      "get": {
        "description": "Retrieve User Third Party Platform Token<br/>\n<p>\nThis endpoint used for retrieving third party platform token for user that login using third party.\nPassing platform group name or it's member will return same access token that can be used across the platform members. \n</p>\n<p>The third party platform and platform group covered for this is:</p>\n<ul>\t\t\t\t\n\t<li>(psn) ps4web</li>\n\t<li>(psn) ps4</li>\n\t<li>(psn) ps5</li>\n\t<li>epicgames</li>\n\t<li>twitch</li>\n</ul>",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth2.0"
        ],
        "summary": "Retrieve User Third Party Platform Token",
        "operationId": "RetrieveUserThirdPartyPlatformTokenV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "UserId",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenThirdPartyResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized access",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "404": {
            "description": "Platform Token Not Found",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/platforms/{platformId}/authorize": {
      "get": {
        "description": "'Generate url to request auth code from third party platform <br>\n               <h2>Supported platforms:</h2><ul>\n               <li><strong>steamopenid</strong></li>This endpoint redirects to steam login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating user steam.\n               <li><strong>xblweb</strong></li>This endpoint redirects to xbox login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating xbox user.\n               <li><strong>ps4web</strong></li>This endpoint redirects to psn login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating psn user.\n               <li><strong>epicgames</strong></li>This endpoint redirects to Epicgames OAuth login page. then redirect to platform\n               authenticate endpoint after successfully authenticating an Epicgames credential\n               <li><strong>twitch</strong></li>This endpoint redirects to twitch login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating twitch user.\n               </ul> action code : 10702'",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth2.0"
        ],
        "summary": "Generate url to request auth code from third party platform.",
        "operationId": "AuthCodeRequestV3",
        "parameters": [
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Request ID retrieved from authorize endpoint ([GET] iam/v3/oauth/authorize)",
            "name": "request_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID",
            "name": "client_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Redirect URI",
            "name": "redirect_uri",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": "Found. Redirect to client’s redirect URI with either code or error on the query parameter"
          }
        }
      }
    },
    "/iam/v3/oauth/platforms/{platformId}/token": {
      "post": {
        "description": "<p>Platform token grant specifically used for performing token grant using platform, e.g. Steam, Justice, etc. The endpoint automatically create an account if the account associated with the platform is not exists yet.\n\t\t\tThis endpoint requires all requests to have Authorization header set with Basic access authentication\n\t\t\tconstructed from client id and client secret. For publisher-game namespace schema : Specify only either platform_token or device_id. Device token grant\n\t\t\tshould be requested along with device_id parameter against game namespace. Another 3rd party platform token grant should be requested\n\t\t\talong with platform_token parameter against publisher namespace.</p>\n\t\t\t<h2>Supported platforms:</h2>\n\t\t\t<ul>\n\t\t\t\t<li><strong>steam</strong>: The platform_token’s value is the authentication code returned by Steam.</li>\n\t\t\t\t<li><strong>steamopenid</strong>: Steam's user authentication method using OpenID 2.0. The platform_token's value is URL generated by Steam on web authentication</li>\n\t\t\t\t<li><strong>facebook</strong>: The platform_token’s value is the authorization code returned by Facebook OAuth</li>\n\t\t\t\t<li><strong>google</strong>: The platform_token’s value is the authorization code returned by Google OAuth</li>\n\t\t\t\t<li><strong>oculus</strong>: The platform_token’s value is a string composed of Oculus's user ID and the nonce separated by a colon (:).</li>\n\t\t\t\t<li><strong>twitch</strong>: The platform_token’s value is the authorization code returned by Twitch OAuth.</li>\n\t\t\t\t<li><strong>discord</strong>: The platform_token’s value is the authorization code returned by Discord OAuth</li>\n\t\t\t\t<li><strong>android</strong>: The device_id is the Android’s device ID</li>\n\t\t\t\t<li><strong>ios</strong>: The device_id is the iOS’s device ID.</li>\n\t\t\t\t<li><strong>device</strong>: Every device that does’nt run Android and iOS is categorized as a device. The device_id is the device’s ID.</li>\n\t\t\t\t<li><strong>justice</strong>: The platform_token’s value is the designated user’s access token.</li>\n\t\t\t\t<li><strong>epicgames</strong>: The platform_token’s value is an access-token obtained from Epicgames EOS Account Service.</li>\n                <li><strong>stadia</strong>: The platform_token's value is a JWT Token, which can be obtained after calling the Stadia SDK's function.</li>\n\t\t\t\t<li><strong>ps4</strong>: The platform_token’s value is the authorization code returned by Sony OAuth.</li>\n\t\t\t\t<li><strong>ps5</strong>: The platform_token’s value is the authorization code returned by Sony OAuth.</li>\n\t\t\t\t<li><strong>nintendo</strong>: The platform_token’s value is the authorization code(id_token) returned by Nintendo OAuth.</li>\n\t\t\t</ul>\n\t\t\t<h2>Account Group</h2>\n\t\t\t<p>Several platforms are grouped under account groups. The accounts on these platforms have the same platform user id. \n\t\t\tLogin using one of these platform will returns the same IAM user. </p>\n\t\t\t<p>Following is the current registered account grouping: </p>\n\t\t\t<ul>\n\t\t\t<li> (psn) ps4web </li>\n\t\t\t<li> (psn) ps4 </li>\n\t\t\t<li> (psn) ps5 </li>\n\t\t\t</ul>\n\t\t\t<h2>Access Token Content</h2>\n\t\t\t<p>Following is the access token’s content:</p>\n\t\t\t<ul>\n\t\t\t<li>\n\t\t\t\t<p><strong>namespace</strong>. It is the namespace the token was generated from.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>display_name</strong>. The display name of the sub. It is empty if the token is generated from the client credential</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>roles</strong>. The sub’s roles. It is empty if the token is generated from the client credential</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>namespace_roles</strong>. The sub’s roles scoped to namespace. Improvement from roles, which make the role scoped to specific namespace instead of global to publisher namespace</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>permissions</strong>. The sub or aud’ permissions</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>bans</strong>. The sub’s list of bans. It is used by the IAM client for validating the token.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>jflgs</strong>. It stands for Justice Flags. It is a special flag used for storing additional status information regarding the sub. It is implemented as a bit mask. Following explains what each bit represents:</p>\n\t\t\t<ul>\n\t\t\t\t<li><p>1: Email Address Verified</p></li>\n\t\t\t\t<li><p>2: Phone Number Verified</p></li>\n\t\t\t\t<li><p>4: Anonymous</p></li>\n\t\t\t\t<li><p>8: Suspicious Login</p></li>\n\t\t\t</ul>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>aud</strong>. The aud is the client ID.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>iat</strong>. The time the token issues at. It is in Epoch time format</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>exp</strong>. The time the token expires. It is in Epoch time format</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>sub</strong>. The UserID. The sub is omitted if the token is generated from client credential</p>\n\t\t\t</li>\n\t\t\t<h2>Bans</h2>\n\t\t\t<p>The JWT contains user's active bans with its expiry date. List of ban types can be obtained from /bans.</p>\n\t\t\t<br>action code : 10704",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth2.0"
        ],
        "summary": "OAuth2 access token generation specific to platform",
        "operationId": "PlatformTokenGrantV3",
        "parameters": [
          {
            "type": "string",
            "description": "Platform ID to login with",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Token from platform auth",
            "name": "platform_token",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Client ID, only accept UUID version 4 without hyphen",
            "name": "client_id",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Device/hardware identifier",
            "name": "device_id",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponse"
            }
          },
          "400": {
            "description": "General request error",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/revocationlist": {
      "get": {
        "description": "<p>This endpoint will return a list of revoked users and revoked tokens. List of revoked tokens in bloom filter format.</p>\n\t\t\t\t\t <p>This endpoint requires authorized requests header with valid access token.</p>\n\t\t\t\t\t <p>The bloom filter uses MurmurHash3 algorithm for hashing the values</p>\n\t\t\t\t\t <p>action code : 10708</p>",
        "consumes": [
          ""
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth2.0"
        ],
        "summary": "OAuth2 revocation list API",
        "operationId": "GetRevocationListV3",
        "responses": {
          "200": {
            "description": "Revocation list returned",
            "schema": {
              "$ref": "#/definitions/oauthapi.RevocationList"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/revoke": {
      "post": {
        "description": "<p>This endpoint revokes a token.</p>\n\t\t\t\t\t <p>This endpoint requires authorized requests header with valid access token.</p><br>action code: 10706",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth2.0"
        ],
        "summary": "OAuth2 token revocation API",
        "operationId": "TokenRevocationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Access token / Refresh token",
            "name": "token",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Token revoked or does not exist"
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid basic auth header",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/token": {
      "post": {
        "description": "<p>This endpoint supports grant type:</p><ol>\n\t \t\t<li>Grant Type == <code>authorization_code</code>:<br />\n\t\t\t\t&nbsp;&nbsp;&nbsp; It generates the user token by given the authorization\n\t\t\t\tcode which generated in \"/v3/oauth/auth\" API response. It should also pass\n\t\t\t\tin the redirect_uri, which should be the same as generating the\n\t\t\t\tauthorization code request.\n\t\t\t</li>\n\t\t\t<li>Grant Type == <code>refresh_token</code>:<br />\n\t \t\t\t&nbsp;&nbsp;&nbsp; Used to get a new access token for a valid refresh token.\n\t\t\t</li>\n\t\t\t<li>Grant Type == <code>client_credentials</code>:<br />\n\t \t\t\t&nbsp;&nbsp;&nbsp; It generates a token by checking the client credentials provided through Authorization header.\n\t\t\t</li></ol>\n\t\t\t<h2>Access Token Content</h2>\n\t\t\t<p>Following is the access token’s content:</p>\n\t\t\t<ul>\n\t\t\t<li>\n\t\t\t\t<p><strong>namespace</strong>. It is the namespace the token was generated from.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>display_name</strong>. The display name of the sub. It is empty if the token is generated from the client credential</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>roles</strong>. The sub’s roles. It is empty if the token is generated from the client credential</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>namespace_roles</strong>. The sub’s roles scoped to namespace. Improvement from roles, which make the role scoped to specific namespace instead of global to publisher namespace</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>permissions</strong>. The sub or aud’ permissions</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>bans</strong>. The sub’s list of bans. It is used by the IAM client for validating the token.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>jflgs</strong>. It stands for Justice Flags. It is a special flag used for storing additional status information regarding the sub. It is implemented as a bit mask. Following explains what each bit represents:</p>\n\t\t\t<ul>\n\t\t\t\t<li><p>1: Email Address Verified</p></li>\n\t\t\t\t<li><p>2: Phone Number Verified</p></li>\n\t\t\t\t<li><p>4: Anonymous</p></li>\n\t\t\t\t<li><p>8: Suspicious Login</p></li>\n\t\t\t</ul>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>aud</strong>. The aud is the targeted resource server.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>iat</strong>. The time the token issues at. It is in Epoch time format</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>exp</strong>. The time the token expires. It is in Epoch time format</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<p><strong>client_id</strong>. The UserID. The sub is omitted if the token is generated from client credential</p>\n\t\t\t</li>\t\n\t\t\t<li>\n\t\t\t\t<p><strong>scope</strong>. The scope of the access request, expressed as a list of space-delimited, case-sensitive strings</p>\n\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<h2>Bans</h2>\n\t\t\t<p>The JWT contains user's active bans with its expiry date. List of ban types can be obtained from /bans.</p>\n\t\t\t<h2>Track Login History</h2>\n\t\t\t<p>This endpoint will track login history to detect suspicious login activity, please provide \"device_id\" (alphanumeric) in request header parameter otherwise we will set to \"unknown\".</p>\n\t\t\t<p>Align with General Data Protection Regulation in Europe, user login history will be kept within 28 days by default\"</p>\n\t\t\t<p>action code: 10703",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth2.0"
        ],
        "summary": "OAuth2 access token generation endpoint",
        "operationId": "TokenGrantV3",
        "parameters": [
          {
            "enum": [
              "authorization_code",
              "client_credentials",
              "refresh_token"
            ],
            "type": "string",
            "default": "authorization_code",
            "description": "Grant Type",
            "name": "grant_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The authorization code received from the authorization server (used with grant type 'authorization_code')",
            "name": "code",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Code verifier received from the authorization server",
            "name": "code_verifier",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "client_id (used with grant type 'authorization_code')",
            "name": "client_id",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Redirect URI (used with grant type 'authorization_code')",
            "name": "redirect_uri",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Refresh Token (used with grant type 'refresh_token'). This field is optional if the request header provides the \"refresh_token\" cookie",
            "name": "refresh_token",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "DeviceID (Used on grant type 'password' to track login history) ex. 90252d14544846d79f367148e3f9a3d9",
            "name": "device_id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponseV3"
            }
          },
          "400": {
            "description": "InvalidRequest",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized access",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/platforms/{platformId}/authenticate": {
      "get": {
        "description": "This endpoint authenticates user platform. It validates user to its\n          respective platforms. Deactivated or login-banned users are unable to login. <br>\n          <h2>Supported platforms:</h2><ul>\n          <li><strong>steamopenid</strong></li>Steam login page will redirects to this endpoint after login success\n          as previously defined on openID request parameter <code>openid.return_to</code> when request login to steam\n          https://openid.net/specs/openid-authentication-2_0.html#anchor27\n          <li><strong>ps4web</strong></li>PS4 login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter <code>redirect_uri</code> \n\t\t  https://ps4.siedev.net/resources/documents/WebAPI/1/Auth_WebAPI-Reference/0002.html#0GetAccessTokenUsingAuthorizationCode\n          <li><strong>xblweb</strong></li>XBL login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter <code>redirect_uri</code> \n          <li><strong>epicgames</strong></li>Epicgames login page will redirects to this endpoint after login success\n          or an error occurred. If error, it redirects to the login page.\n          <li><strong>twitch</strong></li>Twitch login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter <code>redirect_uri</code>\n          </ul> action code : 10709",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "OAuth2.0 - Extension"
        ],
        "summary": "Platform Authentication API",
        "operationId": "PlatformAuthenticationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "State that contains request ID retrieved from authorize endpoint ([GET] iam/v3/oauth/authorize)",
            "name": "state",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.ns",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.mode",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.op_endpoint",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.claimed_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.identity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.return_to",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.response_nonce",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.assoc_handle",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.signed",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.sig",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The authorization code from 3rd party OAuth server",
            "name": "code",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The error message from 3rd party OAuth server",
            "name": "error",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": "Found. Redirect to clients redirection URL with either code or error on the query parameter"
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/platforms/clients/active": {
      "get": {
        "description": "This is the Public API to Get All Active 3rd Platform Credential.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Third Party Credential"
        ],
        "summary": "Get All Active Third Party Platform Active Credential for Public Usage",
        "operationId": "RetrieveAllActiveThirdPartyLoginPlatformCredentialPublicV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "All Active Third Party Credential Retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.PublicThirdPartyPlatformInfo"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Third Party Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/platforms/{platformId}/users": {
      "post": {
        "description": "List User ID By Platform User ID\nThis endpoint intended to list game user ID from the given namespace\nThis endpoint return list of user ID by given platform ID and list of platform user ID \n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "List User ID By Platform User ID",
        "operationId": "PublicListUserIDByPlatformUserIDsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.PlatformUserIDRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.UserPlatforms"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/platforms/{platformId}/users/{platformUserId}": {
      "get": {
        "description": "Get User By Platform User ID\n\t\t\nThis endpoint return user information by given platform ID and platform user ID \n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User By Platform User ID",
        "operationId": "PublicGetUserByPlatformUserIDV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform User ID",
            "name": "platformUserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/requests/{requestId}/async/status": {
      "get": {
        "description": "This endpoint is used to get linking status.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get Linking Progress Status",
        "operationId": "PublicGetAsyncStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Request ID of the link status",
            "name": "requestId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.LinkRequest"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users": {
      "get": {
        "description": "<p>Requires valid user access token</p>\n\t\t\t<p>This endpoint search all users on the specified namespace that match the query on these fields: email address, display name, and username.\n\t\t\tIf the query is not defined, then it searches all users on the specified namespace.</p>\n\t\t\t<br>action code : 10132",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Search User",
        "operationId": "PublicSearchUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query, can be either email address, display name, or username",
            "name": "query",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search by given attribute, possible values are emailAddress, displayName, and username",
            "name": "by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUserInformationResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "\n<p>Available Authentication Types:</p>\n<ol>\n<li><strong>EMAILPASSWD</strong>: an authentication type used for new user registration through email.</li>\n</ol>\n<p>Country use ISO3166-1 alpha-2 two letter, e.g. US.</p>\n<p>Date of Birth format : YYYY-MM-DD, e.g. 2019-04-29.</p>\n<p>This endpoint support accepting agreements for the created user. Supply the accepted agreements in acceptedPolicies attribute.</p>\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Create User",
        "operationId": "PublicCreateUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateRequestV3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserCreateResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>10130</td><td>user under age</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10154</td><td>country not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/forgot": {
      "post": {
        "description": "<p><strong>Special note for publisher-game scenario:</strong> \nGame Client should provide game namespace path parameter and Publisher \nClient should provide publisher namespace path parameter. </p>\n<p>The password reset code will be sent to the publisher account's email address. </p>\n<p>action code : 10104 </p>\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Request Password Reset Code",
        "operationId": "PublicForgotPasswordV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ForgotPasswordRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20007</td><td>too many requests</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/invite/{invitationId}": {
      "get": {
        "description": "Endpoint to validate user admin invitation. When not found, it could also means the invitation has expired.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User Admin Invitation",
        "operationId": "GetAdminInvitationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Invitation ID, should follow UUID version 4 without hyphen",
            "name": "invitationId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.AdminInvitationV3"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10180</td><td>admin invitation not found or expired</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "This endpoint create user from saved roles when creating invitation and submitted data.\nUser will be able to login after completing submitting the data through this endpoint.\nAvailable Authentication Types:\n\n\tEMAILPASSWD: an authentication type used for new user registration through email.\n\nCountry use ISO3166-1 alpha-2 two letter, e.g. US.\n\nDate of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Create User Admin From Invitation",
        "operationId": "CreateUserFromInvitationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateFromInvitationRequestV3"
            }
          },
          {
            "type": "string",
            "description": "Invitation ID, should follow UUID version 4 without hyphen",
            "name": "invitationId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserCreateResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>10130</td><td>user under age</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10180</td><td>admin invitation not found or expired</td></tr><tr><td>10154</td><td>country not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me": {
      "put": {
        "description": "<p>Requires valid user access token </p>\n<br><p>This Endpoint support update user based on given data. <b>Single request can update single field or multi fields.</b></p> \n<p>Supported field {country, displayName, languageTag, dateOfBirth}</p>\n<p>Country use ISO3166-1 alpha-2 two letter, e.g. US.</p>\n<p>Date of Birth format : YYYY-MM-DD, e.g. 2019-04-29.</p>\n<br><b>Several case of updating email address</b>\n<ul><li>User want to update email address of which have been verified, newEmailAddress response field will be filled with new email address.</li>\n<li>User want to update email address of which have not been verified, { oldEmailAddress, emailAddress} response field will be filled with new email address. </li>\n<li>User want to update email address of which have been verified and updated before, { oldEmailAddress, emailAddress} response field will be filled with verified email before. newEmailAddress response field will be filled with newest email address. </li>\n<br><b>Important notes:</b>\n<br><p>This endpoint provides support for client that doesn't have PATCH support, i.e. UE4 before v4.23 released.\n<br>If the client support PATCH method, use [PATCH] /iam/v3/public/namespaces/{namespace}/users/me instead</p><br>\n<p>action code : 10103 </p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "operationId": "PublicUpdateUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.UserResponseV3"
              }
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10154</td><td>country not found</td></tr><tr><td>10130</td><td>user under age</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "description": "<p>Requires valid user access token </p>\n<br><p>This Endpoint support update user based on given data. <b>Single request can update single field or multi fields.</b></p> \n<p>Supported field {country, displayName, languageTag, dateOfBirth}</p>\n<p>Country use ISO3166-1 alpha-2 two letter, e.g. US.</p>\n<p>Date of Birth format : YYYY-MM-DD, e.g. 2019-04-29.</p>\n<br><b>Several case of updating email address</b>\n<ul><li>User want to update email address of which have been verified, newEmailAddress response field will be filled with new email address.</li>\n<li>User want to update email address of which have not been verified, { oldEmailAddress, emailAddress} response field will be filled with new email address. </li>\n<li>User want to update email address of which have been verified and updated before, { oldEmailAddress, emailAddress} response field will be filled with verified email before. newEmailAddress response field will be filled with newest email address. </li>\n<p>action code : 10103 </p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "operationId": "UpdateUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.UserResponseV3"
              }
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10154</td><td>country not found</td></tr><tr><td>10130</td><td>user under age</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/code/request": {
      "post": {
        "description": "Required valid user authorization\n<p>The verification code is sent to email address</p>\n<p>Available contexts for use : </p>\n<ol>\n\t<li>\n\t\t<strong>UserAccountRegistration</strong>\n\t\t<p>a context type used for verifying email address in user account registration. It returns 409 if the email address already verified. \n\t\t<strong><em>It is the default context if the Context field is empty</em></strong></p>\n\t</li>\n\t<li>\n\t\t<strong>UpdateEmailAddress</strong>\n\t\t<p>a context type used for verify user before updating email address.(Without email address verified checking)</p>\n\t</li>\n\t<li><strong>upgradeHeadlessAccount</strong>\n\t\t<p>The context is intended to be used whenever the email address wanted to be automatically verified on upgrading a headless account.  \n\t\tIf this context used, IAM rejects the request if the email address is already used by others by returning HTTP Status Code 409.</p>\n\t</li>\n</ol>\n<p>action code: 10116</p>\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Send verification code to user",
        "operationId": "PublicSendVerificationCodeV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10171</td><td>email address not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10140</td><td>user verified</td></tr><tr><td>10133</td><td>email already used</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20007</td><td>too many requests</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/code/verify": {
      "post": {
        "description": "<p>Required valid user authorization</p>\n<p>Redeems a verification code sent to a user to verify the user's contact address is correct</p>\n<p>Available ContactType : <b>email</b></p>\n<p>action code: 10107</p>\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Redeem verification code sent to user",
        "operationId": "PublicUserVerificationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserVerificationRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10152</td><td>verification code not found</td></tr><tr><td>10137</td><td>code is expired</td></tr><tr><td>10136</td><td>code is either been used or not valid anymore</td></tr><tr><td>10138</td><td>code not match</td></tr><tr><td>10149</td><td>verification contact type doesn't match</td></tr><tr><td>10148</td><td>verification code context doesn't match the required context</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10141</td><td>email verified</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/headless/code/verify": {
      "post": {
        "description": "Require valid user access token.\n        \t<p>The endpoint upgrades a headless account by linking the headless account with the email address and the password. \n\t\t\tBy upgrading the headless account into a full account, the user could use the email address and password for using Justice IAM. </p>\n        \t<p>The endpoint is a shortcut for upgrading a headless account and verifying the email address in one call. \n\t\t\tIn order to get a verification code for the endpoint, please check the send verification code endpoint.</p>\n        \t<p>This endpoint also have an ability to update user data (if the user data field is specified) right after the upgrade account process is done.<br/>\n\t\t\t\tSupported user data fields :\n\t\t\t\t<ul>\n\t\t\t\t\t<li>displayName</li>\n\t\t\t\t\t<li>dateOfBirth : format YYYY-MM-DD, e.g. 2019-04-29</li>\n\t\t\t\t\t<li>country : format ISO3166-1 alpha-2 two letter, e.g. US</li>\n\t\t\t\t</ul>\n        \t<br>action code : 10124</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Upgrade headless account and automatically verified the email address if it is succeeded",
        "operationId": "PublicUpgradeHeadlessAccountV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountWithVerificationCodeRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10155</td><td>country is not defined</td></tr><tr><td>10130</td><td>user under age</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10152</td><td>verification code not found</td></tr><tr><td>10137</td><td>code is expired</td></tr><tr><td>10136</td><td>code is either been used or not valid anymore</td></tr><tr><td>10138</td><td>code not match</td></tr><tr><td>10149</td><td>verification contact type doesn't match</td></tr><tr><td>10148</td><td>verification code context doesn't match the required context</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>10154</td><td>country not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10153</td><td>user exist</td></tr><tr><td>10170</td><td>account is already a full account</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/headless/verify": {
      "post": {
        "description": "<p>Require valid user authorization<br>action code : 10124 </p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Upgrade user account to full account (with email)",
        "operationId": "PublicVerifyHeadlessAccountV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountV3Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10153</td><td>user exist</td></tr><tr><td>10170</td><td>account is already a full account</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/password": {
      "put": {
        "description": "Required valid user authorization. <br> action code: 10107",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update User Password",
        "operationId": "PublicUpdatePasswordV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserPasswordUpdateV3Request"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>10142</td><td>new password cannot be same with original</td></tr><tr><td>10143</td><td>password not match</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/justice/{targetNamespace}": {
      "post": {
        "description": "Create Justice User from Publisher User information. It will check first if Justice User on target namespace already exist.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Create Justice User from Publisher User",
        "operationId": "PublicCreateJusticeUser",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Target namespace",
            "name": "targetNamespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.CreateJusticeUserResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}": {
      "post": {
        "description": "Required valid user authorization.\n\t\t<p><br><b>Prerequisite:</b> \n\t\tPlatform client configuration need to be added to database for specific platformId. Namespace service URL need to be specified (refer to required environment variables).\n\t\t\t<h2>Supported platforms:</h2>\n\t\t\t<ul>\n\t\t\t\t<li><strong>steam</strong>: The ticket’s value is the authentication code returned by Steam.</li>\n\t\t\t\t<li><strong>steamopenid</strong>: Steam's user authentication method using OpenID 2.0. The ticket's value is URL generated by Steam on web authentication</li>\n\t\t\t\t<li><strong>facebook</strong>: The ticket’s value is the authorization code returned by Facebook OAuth</li>\n\t\t\t\t<li><strong>google</strong>: The ticket’s value is the authorization code returned by Google OAuth</li>\n\t\t\t\t<li><strong>oculus</strong>: The ticket’s value is a string composed of Oculus's user ID and the nonce separated by a colon (:).</li>\n\t\t\t\t<li><strong>twitch</strong>: The ticket’s value is the authorization code returned by Twitch OAuth.</li>\n\t\t\t\t<li><strong>android</strong>: The ticket's value is the Android’s device ID</li>\n\t\t\t\t<li><strong>ios</strong>: The ticket's value is the iOS’s device ID.</li>\n\t\t\t\t<li><strong>device</strong>: Every device that doesn't run Android and iOS is categorized as a device platform. The ticket's value is the device’s ID.</li>\n\t\t\t\t<li><strong>discord</strong>: The ticket’s value is the authorization code returned by Discord OAuth.</li>\n\t\t\t\t<li><strong>ps4web</strong>: The ticket’s value is the authorization code returned by PSN OAuth.</li>\n\t\t\t\t<li><strong>xblweb</strong>: The ticket’s value is the authorization code returned by XBox Live OAuth.</li>\n\t\t\t</ul>\n\t\t<br>action code : 10144",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Link user's account with platform",
        "operationId": "PublicPlatformLinkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ticket from platform, not contain whitespace",
            "name": "ticket",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "[Special case for ps4web and xblweb platform] The same redirectUri as when the client request authorization code. The redirectUri when client request auth code need to be exactly same with redirectUri when IAM requesting exchange token to the Platform (ps4web, xblweb)",
            "name": "redirectUri",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10174</td><td>platform client not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10163</td><td>platform is already linked with the user account</td></tr><tr><td>10172</td><td>platform user is already linked with the account</td></tr><tr><td>10173</td><td>platform is already linked with another user account</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "Required valid user authorization.\n\t\t\t<h2>Supported platforms:</h2>\n\t\t\t<ul>\n\t\t\t\t<li><strong>steam</strong></li>\n\t\t\t\t<li><strong>steamopenid</strong></li>\n\t\t\t\t<li><strong>facebook</strong></li>\n\t\t\t\t<li><strong>google</strong></li>\n\t\t\t\t<li><strong>oculus</strong></li>\n\t\t\t\t<li><strong>twitch</strong></li>\n\t\t\t\t<li><strong>android</strong></li>\n\t\t\t\t<li><strong>ios</strong></li>\n\t\t\t\t<li><strong>device</strong></li>\n\t\t\t\t<li><strong>discord</strong></li>\n\t\t\t</ul>\n\t\t\t<p>Unlink user's account from a specific platform. 'justice' platform might have multiple accounts from different namespaces linked.\n\t\t\t<br><i>platformNamespace</i> need to be specified when the platform ID is 'justice'.\n\t\t\t<br>\n\t\t\t<br>Unlink user's account from justice platform will enable password token grant and password update.\n\t\t\t<br>\n\t\t\t<br>If you want to unlink user's account in a game namespace, you have to specify <i>platformNamespace</i> to that game namespace.\n\t\t\t<br>\n\t\t\t<br>action code : 10121 </p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Unlink user's account from specific platform",
        "operationId": "PublicPlatformUnlinkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UnlinkUserPlatformRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/web/link": {
      "get": {
        "description": "This endpoint is used to generate third party login page which will redirected to establish endpoint.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Create Public Web Linking",
        "operationId": "PublicWebLinkPlatform",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Redirect URI",
            "name": "redirectUri",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Platform Id to be linked",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.WebLinkingResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10365</td><td>client not found</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/web/link/establish": {
      "get": {
        "description": "This endpoint is used by third party to redirect the code for the purpose of linking the account third party to IAM account.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Establish Link Progress ",
        "operationId": "PublicWebLinkPlatformEstablish",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform Id to be linked",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "state from third party redirect",
            "name": "state",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "Handle Redirect from third party"
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/reset": {
      "post": {
        "description": "<p>action code: 10105</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Reset User Password",
        "operationId": "ResetPasswordV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ResetPasswordRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10142</td><td>new password cannot be same with original</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10137</td><td>code is expired</td></tr><tr><td>10136</td><td>code is either been used or not valid anymore</td></tr><tr><td>10138</td><td>code not match</td></tr><tr><td>10152</td><td>verification code not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}": {
      "get": {
        "description": "<p>This endpoint retrieve user attributes. action code: 10129</p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User By User ID",
        "operationId": "PublicGetUserByUserIdV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUserResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "description": "Required valid user authorization.\n\t\t<p>Notes:</p>\n\t\t<ul>\n\t\t\t<li>This endpoint retrieve the first page of the data if after and before parameters is empty</li>\n\t\t\t<li><strong>The pagination is not working yet</strong></li>\n\t\t</ul>\n\t\t",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get user's bans",
        "operationId": "PublicGetUserBanHistoryV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Filter ban based on the ban status. If you set this, only active ban returned",
            "name": "activeOnly",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The number of data returned in one query. The maximum value of the limit is 100 and the minimum value of the limit is 1. If you set this into -1, then it returns all data. Default: -1. <em>Doesn't work yet</em>.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter ban based on the date creation. If you set this, only user bans created before the date returned. The date is in ISO-8601. Example value: 2019-05-18T07:17:45Z. <em>Doesn't work yet</em>",
            "name": "before",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter ban based on the date creation. If you set this, only user bans created after the date returned. The date is in ISO-8601. Example value: 2019-05-18T07:17:45Z. <em>Doesn't work yet</em>",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserBanV3Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/logins/histories": {
      "get": {
        "description": "Required valid user authorization.<p>Notes for this endpoint: </p> <ul><li>This endpoint retrieve the first page of the data if `after` and `before` parameters is empty.</li><li>The maximum value of the limit is 100 and the minimum value of the limit is 1.</li><li>This endpoint retrieve the next page of the data if we provide `after` parameters with valid Unix timestamp.</li><li>This endpoint retrieve the previous page of the data if we provide `before` parameter with valid data Unix timestamp.</li><ul>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User's Login Histories",
        "operationId": "PublicGetUserLoginHistoriesV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "The cursor that points to query data for the previous page (In Unix timestamp formats, e.g:1545114248).",
            "name": "before",
            "in": "query"
          },
          {
            "type": "number",
            "description": "The cursor that points to query data for the next page (In Unix timestamp formats, e.g:1545114248)",
            "name": "after",
            "in": "query"
          },
          {
            "type": "number",
            "description": "The number of data retrieved in a page",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.LoginHistoriesResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/platforms": {
      "get": {
        "description": "<p>This endpoint retrieves platform accounts linked to user. Required valid user authorization.\n\t\t\t\t\t<br>action code: 10128 </p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get platform accounts linked to the user",
        "operationId": "PublicGetUserPlatformAccountsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.UserLinkedPlatformsResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/platforms/link": {
      "post": {
        "description": "Update Platform Account relation to current User Account.\nNote: Game progression data (statistics, reward, etc) associated with previous User Account will not be \ntransferred. If the data is tight to game user ID, the user will have the game progression data.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Link a Platform User Account to User Account",
        "operationId": "PublicLinkPlatformAccount",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Current user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.LinkPlatformAccountRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/validate": {
      "post": {
        "description": "This endpoint is used to validate the user password. Required valid user authorization and valid user ID.\n\t\t<p>Notes:</p>\n\t\t<ul>\n\t\t\t<li>This endpoint validate the user password by specifying the userId and password</li>\n\t\t</ul>\n\t\t",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Validate user password by user ID and password",
        "operationId": "PublicValidateUserByUserIDAndPasswordV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User password",
            "name": "password",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10143</td><td>password not match</td></tr><tr><td>20002</td><td>validation error</td></tr></table>"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>"
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    },
    "/iam/v3/public/roles": {
      "get": {
        "description": " <br>This endpoint is used to get all non-admin role.  <br> <p>action code: 10418</p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Roles",
        "operationId": "PublicGetRolesV3",
        "parameters": [
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "- true if the expected result should only returns records with wildcard = true\n            - false if the expected result should only returns records with wildcard = false\n            - empty (omitted) if the expected result should returns records with no wildcard filter at all\n",
            "name": "isWildcard",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleNamesResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/roles/{roleId}": {
      "get": {
        "description": " <br>This endpoint is used to get non-admin role based on specify roleId.  <br>action code : 10417",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Public Role",
        "operationId": "PublicGetRoleV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/users/me": {
      "get": {
        "description": "<p>Require valid user authorization<br>Get my user data<br>action code : 10147 </p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get My User",
        "operationId": "PublicGetMyUserV3",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/sso/saml/platforms/{platformId}/authenticate": {
      "post": {
        "description": "This endpoint authenticates user platform for SAML protocol. It validates user to its\n          respective platforms. Deactivated or login-banned users are unable to login. <br>\n          <h2>Supported platforms:</h2><ul>\n          <li><strong>azure</strong></li>Microsoft login page will redirects to this endpoint after login success\n          as previously defined on authentication request SAML\n          </ul>",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "SSO SAML 2.0"
        ],
        "summary": "SAML platform Authentication API",
        "operationId": "platformAuthenticateSAMLV3Handler",
        "parameters": [
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "State that contains request ID retrieved from authorize endpoint ([GET] iam/v3/oauth/authorize)",
            "name": "state",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The authorization code from 3rd party OAuth server",
            "name": "code",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The error message from Identity Provider (IdP)",
            "name": "error",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": "Found. Redirect to clients redirection URL with either code or error on the query parameter"
          }
        }
      }
    },
    "/iam/v3/sso/{platformId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "SSO"
        ],
        "summary": "Login to SSO client with provided platformId",
        "operationId": "LoginSSOClient",
        "parameters": [
          {
            "type": "string",
            "description": "SSO Client ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Key value payload received from SSO client, if any, and must be escaped",
            "name": "payload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/iam/v3/sso/{platformId}/logout": {
      "post": {
        "description": "Logout user's session on platform that logged in using SSO.\n\nSupported platforms:\n- discourse\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "SSO"
        ],
        "summary": "Logout",
        "operationId": "LogoutSSOClient",
        "parameters": [
          {
            "type": "string",
            "description": "SSO Client ID",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/users/{userId}": {
      "put": {
        "description": "<p>This endpoint requires ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE] permission</p>\n<br><p>This Endpoint support update user based on given data. <b>Single request can update single field or multi fields.</b></p> \n<p>Supported field {country, displayName, languageTag, dateOfBirth}</p>\n<p>Country use ISO3166-1 alpha-2 two letter, e.g. US.</p>\n<p>Date of Birth format : YYYY-MM-DD, e.g. 2019-04-29.</p>\n<br><b>Several case of updating email address</b>\n<p>action code : 10103 </p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users V4"
        ],
        "summary": "Update User",
        "operationId": "AdminUpdateUserV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10154</td><td>country not found</td></tr><tr><td>10130</td><td>user under age</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/users/{userId}/email": {
      "put": {
        "description": "<p>Required permission <pre>'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'</pre></p>\n\n<br><p>This is the endpoint for an admin to update a user email address.\nThis endpoint need a valid user token from an admin to verify its identity (email) before updating a user.</p>\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users V4"
        ],
        "summary": "Update a User Email Address",
        "operationId": "AdminUpdateUserEmailAddressV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.EmailUpdateRequestV4"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/users/{userId}/roles": {
      "get": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [READ] permission.\n\nList roles assigned to a user\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users V4"
        ],
        "summary": "Admin List User's Roles V4",
        "operationId": "AdminListUserRolesV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.ListUserRolesV4Response"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20003</td><td>forbidden access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [UPDATE] permission.\n\nUser's roles will be replaced with roles from request body.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users V4"
        ],
        "summary": "Admin Update User's Role V4",
        "operationId": "AdminUpdateUserRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Object of Role ID to be assigned with allowed namespaces",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AddUserRoleV4Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.ListUserRolesV4Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20003</td><td>forbidden access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10183</td><td>unprocessable entity</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [UPDATE] permission.\n\nNew role will be appended to user's current roles. Request body need to specify allowed namespace for given role to support new role restriction.\nSkipped the check whether the user performing the request is a role manager / assigner since there is a plan to discard the role manager / assigner.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users V4"
        ],
        "summary": "Admin Add User's Role V4",
        "operationId": "AdminAddUserRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Object of Role ID to be assigned with allowed namespaces",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AddUserRoleV4Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.ListUserRolesV4Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20003</td><td>forbidden access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10183</td><td>unprocessable entity</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [Delete] permission.\n\nRemove a role from user's roles.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users V4"
        ],
        "summary": "Admin Remove User Role v4",
        "operationId": "AdminRemoveUserRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Object of Role ID with allowed namespaces to be removed",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RemoveUserRoleV4Request"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20003</td><td>forbidden access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10183</td><td>unprocessable entity</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/roles": {
      "get": {
        "description": "Required permission ADMIN:ROLE [READ]\n\naction code: 10414",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Roles",
        "operationId": "AdminGetRolesV4",
        "parameters": [
          {
            "type": "boolean",
            "description": "- true if the expected result should only returns records with wildcard = true\n            - false if the expected result should only returns records with wildcard = false\n            - empty (omitted) if the expected result should returns records with no wildcard filter at all",
            "name": "isWildcard",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "- true if the expected result should only returns records with adminRole = true\n            - false if the expected result should only returns records with adminRole = false\n            - empty (omitted) if the expected result should returns records with no wildcard filter at all",
            "name": "adminRole",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ListRoleV4Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Required permission: ADMIN:ROLE [CREATE]\n\nCreate role request body:\n- roleName: specify role name, alphanumeric, cannot have special character (required)\n- adminRole: specify if role is for admin user (default false)\n- isWildcard: specify if role can be assigned to wildcard (*) namespace (default false)\n\naction code: 10401",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Create Role",
        "operationId": "AdminCreateRoleV4",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleV4Request"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10466</td><td>invalid role members</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/roles/{roleId}": {
      "get": {
        "description": "Required permission ADMIN:ROLE [READ]\n\naction code: 10419",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Role",
        "operationId": "AdminGetRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission ADMIN:ROLE [DELETE]\n\nRemoves role ID from user's Roles and NamespaceRoles before deleting the role.\n\naction code: 10403",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Delete Role",
        "operationId": "AdminDeleteRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "description": "Required permission ADMIN:ROLE [UPDATE]\n\nUpdate role request body:\n- roleName: specify role name, alphanumeric, cannot have special character (required)\n- adminRole: specify if role is for admin user (default false)\n- isWildcard: specify if role can be assigned to wildcard (*) namespace (default false)\n\naction code: 10402",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Update Role",
        "operationId": "AdminUpdateRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleV4Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/roles/{roleId}/permissions": {
      "put": {
        "description": "<p>Required permission 'ADMIN:ROLE [UPDATE]'</p>\n<p>This endpoint will REPLACE role's permissions with the ones defined in body</p>\n<br>action code: 10405<br>\n<p>Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.</p>\n<p>Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.</p>\n<p>In ranged schedule, first element will be start date, and second one will be end date</p>\n<p>If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive</p>\n<p>Syntax reference</p>\n<p>Fields:</p>\n<ol>\n<li>Seconds: 0-59 * / , -</li>\n<li>Minutes: 0-59 * / , -</li>\n<li>Hours: 0-23 * / , -</li>\n<li>Day of month: 1-31 * / , - L W</li>\n<li>Month: 1-12 JAN-DEC * / , -</li>\n<li>Day of week: 0-6 SUN-SAT * / , - L #</li>\n<li>Year: 1970-2099 * / , -</li>\n</ol>\n<p>Special characters:</p>\n<ol>\n<li>*: all values in the fields, e.g. * in seconds fields indicates every second</li>\n<li>/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter</li>\n<li>,: separate items of a list, e.g. MON,WED,FRI in day of week</li>\n<li>-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive</li>\n<li>L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.</li>\n<li>W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"</li>\n<li>#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.</li>\n</ol>\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Update Role Permissions",
        "operationId": "AdminUpdateRolePermissionsV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.PermissionsV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "<p>Required permission 'ADMIN:ROLE [UPDATE]'</p>\n<p>This endpoint will ATTACH permission(s) into the role</p>\n<br>action code: 10404<br>\n<p>Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.</p>\n<p>Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.</p>\n<p>In ranged schedule, first element will be start date, and second one will be end date</p>\n<p>If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive</p>\n<p>Syntax reference</p>\n<p>Fields:</p>\n<ol>\n<li>Seconds: 0-59 * / , -</li>\n<li>Minutes: 0-59 * / , -</li>\n<li>Hours: 0-23 * / , -</li>\n<li>Day of month: 1-31 * / , - L W</li>\n<li>Month: 1-12 JAN-DEC * / , -</li>\n<li>Day of week: 0-6 SUN-SAT * / , - L #</li>\n<li>Year: 1970-2099 * / , -</li>\n</ol>\n<p>Special characters:</p>\n<ol>\n<li>*: all values in the fields, e.g. * in seconds fields indicates every second</li>\n<li>/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter</li>\n<li>,: separate items of a list, e.g. MON,WED,FRI in day of week</li>\n<li>-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive</li>\n<li>L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.</li>\n<li>W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"</li>\n<li>#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.</li>\n</ol>\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Add Role Permissions V4",
        "operationId": "AdminAddRolePermissionsV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.PermissionsV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission ADMIN:ROLE [UPDATE]\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Delete Role Permission V4",
        "operationId": "AdminDeleteRolePermissionsV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v4/admin/roles/{roleId}/users": {
      "get": {
        "description": "Required permission ADMIN:ROLE [READ]\nQuery all users that has the specified role.\naction code: 10416\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get Role's Assigned Users",
        "operationId": "AdminListAssignedUsersV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ListAssignedUsersV4Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Required permission ADMIN:ROLE [UPDATE]\n\nParameters:\n- userId: string  (required)\n- namespace: string (user’s namespace)  (required)\n- assignedNamespaces: array of string (namespaces to be assigned on role) (required)\n\naction code: 10410",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Assign User to Role",
        "operationId": "AdminAssignUserToRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AssignUserV4Request"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.AssignedUserV4Response"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10457</td><td>specified role is not admin role</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr><tr><td>10459</td><td>operator is not a role manager</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10469</td><td>role member exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10183</td><td>unprocessable entity</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission ADMIN:ROLE [UPDATE]\n\nCurrent implementation will revoke user from role in all assigned namespaces.\n\nParameters:\n- userId: string  (required)\n- namespace: string (user’s namespace)  (required)\n\naction code: 10411",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Revoke User from Role",
        "operationId": "AdminRevokeUserFromRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RevokeUserV4Request"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10457</td><td>specified role is not admin role</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr><tr><td>10459</td><td>operator is not a role manager</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/me": {
      "patch": {
        "description": "<p>Requires valid user access token </p>\n<br><p>This Endpoint support update user based on given data. <b>Single request can update single field or multi fields.</b></p> \n<p>Supported field {country, displayName, emailAddress, languageTag, dateOfBirth}</p>\n<p>Country use ISO3166-1 alpha-2 two letter, e.g. US.</p>\n<p>Date of Birth format : YYYY-MM-DD, e.g. 2019-04-29.</p>\n<br><b>Several case of updating email address</b>\n<ul><li>User want to update email address of which have been verified, newEmailAddress response field will be filled with new email address.</li>\n<li>User want to update email address of which have not been verified, { oldEmailAddress, emailAddress} response field will be filled with new email address. </li>\n<li>User want to update email address of which have been verified and updated before, { oldEmailAddress, emailAddress} response field will be filled with verified email before. newEmailAddress response field will be filled with newest email address. </li>\n<p>action code : 10103 </p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Admin Update My User",
        "operationId": "AdminUpdateMyUserV4",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10154</td><td>country not found</td></tr><tr><td>10130</td><td>user under age</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr><tr><td>10133</td><td>email already used</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users": {
      "post": {
        "description": "Create a new user with unique email address and username.\n\t\t<p>\n\t\t<b>Required attributes:</b>\n\t\t- authType: possible value is EMAILPASSWD\n\t\t- emailAddress\n\t\t- username: case insensitive, alphanumeric with allowed symbols underscore (_) and dot (.)\n\t\t- password: 8 to 32 characters, satisfy at least 3 out of 4 conditions(uppercase, lowercase letters, numbers and special characters) and should not have more than 2 equal characters in a row.\n\t\t- country: ISO3166-1 alpha-2 two letter, e.g. US.\n\t\t- dateOfBirth: YYYY-MM-DD, e.g. 1990-01-01. valid values are between 1905-01-01 until current date.\n\t\t</p>\n\t\t<p>This endpoint support accepting agreements for the created user. Supply the accepted agreements in acceptedPolicies attribute.</p>\n\t\t",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users V4"
        ],
        "summary": "Create User",
        "operationId": "PublicCreateUserV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account.createUserRequestV4"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/account.createUserResponseV4"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>10130</td><td>user under age</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10154</td><td>country not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr><tr><td>10177</td><td>username already used</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/invite/{invitationId}": {
      "post": {
        "description": "This endpoint create user from saved roles when creating invitation and submitted data.\nUser will be able to login after completing submitting the data through this endpoint.\nAvailable Authentication Types:\n\n\tEMAILPASSWD: an authentication type used for new user registration through email.\n\nCountry use ISO3166-1 alpha-2 two letter, e.g. US.\n\nDate of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\n\nRequired attributes:\n- authType: possible value is EMAILPASSWD (see above)\n- country: ISO3166-1 alpha-2 two letter, e.g. US.\n- dateOfBirth: YYYY-MM-DD, e.g. 1990-01-01. valid values are between 1905-01-01 until current date.\n- displayName: case insensitive, alphanumeric with allowed symbols dash (-), comma (,), and dot (.)\n- password: 8 to 32 characters, satisfy at least 3 out of 4 conditions(uppercase, lowercase letters, numbers and special characters) and should not have more than 2 equal characters in a row.\n- username: case insensitive, alphanumeric with allowed symbols underscore (_) and dot (.)\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users V4"
        ],
        "summary": "Create User Admin From Invitation",
        "operationId": "CreateUserFromInvitationV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateFromInvitationRequestV4"
            }
          },
          {
            "type": "string",
            "description": "Invitation ID, should follow UUID version 4 without hyphen",
            "name": "invitationId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/account.createUserResponseV4"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>10130</td><td>user under age</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10180</td><td>admin invitation not found or expired</td></tr><tr><td>10154</td><td>country not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me": {
      "patch": {
        "description": "<p>Requires valid user access token </p>\n<br><p>This Endpoint support update user based on given data. <b>Single request can update single field or multi fields.</b></p> \n<p>Supported field {country, displayName, languageTag, dateOfBirth}</p>\n<p>Country use ISO3166-1 alpha-2 two letter, e.g. US.</p>\n<p>Date of Birth format : YYYY-MM-DD, e.g. 2019-04-29.</p>\n<br><b>Several case of updating email address</b>\n<p>action code : 10103 </p>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users V4"
        ],
        "summary": "Update User",
        "operationId": "PublicUpdateUserV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10154</td><td>country not found</td></tr><tr><td>10130</td><td>user under age</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/email": {
      "put": {
        "description": "<p>The endpoint to update my email address. </p>\n<p>It requires a verification code from <pre>/users/me/code/request</pre> with <b>UpdateEmailAddress</b> context.</p>\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users V4"
        ],
        "summary": "Update My Email Address",
        "operationId": "PublicUpdateUserEmailAddressV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.EmailUpdateRequestV4"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/headless/code/verify": {
      "post": {
        "description": "Require valid user access token.\n        \tThe endpoint upgrades a headless account by linking the headless account with the email address, username, and password. \n\t\t\tBy upgrading the headless account into a full account, the user could use the email address, username, and password for using Justice IAM.\n        \t<br>\n\t\t\tThe endpoint is a shortcut for upgrading a headless account and verifying the email address in one call. \n\t\t\tIn order to get a verification code for the endpoint, please check the <a href=\"#operations-Users-PublicSendVerificationCodeV3\">send verification code endpoint</a>.\n        \t<br>\n\t\t\tThis endpoint also have an ability to update user data (if the user data field is specified) right after the upgrade account process is done.\n\t\t\tSupported user data fields:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>displayName</li>\n\t\t\t\t\t<li>dateOfBirth : format YYYY-MM-DD, e.g. 2019-04-29</li>\n\t\t\t\t\t<li>country : format ISO3166-1 alpha-2 two letter, e.g. US</li>\n\t\t\t\t</ul>\n        \taction code : 10124",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users V4"
        ],
        "summary": "Upgrade headless account and automatically verified the email address if it is succeeded",
        "operationId": "PublicUpgradeHeadlessAccountWithVerificationCodeV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account.upgradeHeadlessAccountWithVerificationCodeRequestV4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/account.UserResponseV4"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10155</td><td>country is not defined</td></tr><tr><td>10130</td><td>user under age</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10152</td><td>verification code not found</td></tr><tr><td>10137</td><td>code is expired</td></tr><tr><td>10136</td><td>code is either been used or not valid anymore</td></tr><tr><td>10138</td><td>code not match</td></tr><tr><td>10149</td><td>verification contact type doesn't match</td></tr><tr><td>10148</td><td>verification code context doesn't match the required context</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr><tr><td>10154</td><td>country not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10153</td><td>user exist</td></tr><tr><td>10170</td><td>account is already a full account</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/headless/verify": {
      "post": {
        "description": "Require valid user authorization\n\t\t\tUpgrade headless account to full account without verifying email address. Client does not need to provide verification code which sent to email address.\n\t\t\t<br>action code : 10124 </p>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users V4"
        ],
        "summary": "Upgrade user account to full account",
        "operationId": "PublicUpgradeHeadlessAccountV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account.upgradeHeadlessAccountRequestV4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/account.UserResponseV4"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10153</td><td>user exist</td></tr><tr><td>10170</td><td>account is already a full account</td></tr><tr><td>10133</td><td>email already used</td></tr><tr><td>10177</td><td>username already used</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>"
          }
        }
      }
    }
  },
  "definitions": {
    ".BannedBy": {
      "required": [
        "DisplayName",
        "userId"
      ],
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "account.UserActiveBanResponseV4": {
      "required": [
        "ban",
        "banId",
        "endDate"
      ],
      "properties": {
        "ban": {
          "type": "string"
        },
        "banId": {
          "type": "string"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "account.UserPermissionsResponseV4": {
      "required": [
        "action",
        "resource"
      ],
      "properties": {
        "action": {
          "type": "integer",
          "format": "int32"
        },
        "resource": {
          "type": "string"
        },
        "schedAction": {
          "type": "integer",
          "format": "int32"
        },
        "schedCron": {
          "type": "string"
        },
        "schedRange": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "account.UserResponseV4": {
      "required": [
        "authType",
        "bans",
        "country",
        "createdAt",
        "dateOfBirth",
        "displayName",
        "deletionStatus",
        "emailVerified",
        "enabled",
        "lastDateOfBirthChangedTime",
        "lastEnabledChangedTime",
        "emailAddress",
        "namespace",
        "oldEmailAddress",
        "permissions",
        "phoneVerified",
        "roles",
        "userId"
      ],
      "properties": {
        "authType": {
          "type": "string"
        },
        "bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/account.UserActiveBanResponseV4"
          }
        },
        "country": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "deletionStatus": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "lastDateOfBirthChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "lastEnabledChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "newEmailAddress": {
          "type": "string"
        },
        "oldEmailAddress": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/account.UserPermissionsResponseV4"
          }
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneVerified": {
          "type": "boolean"
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "account.createUserRequestV4": {
      "required": [
        "authType",
        "displayName",
        "emailAddress",
        "username",
        "password",
        "passwordMD5Sum",
        "country",
        "dateOfBirth"
      ],
      "properties": {
        "acceptedPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/legal.AcceptedPoliciesRequest"
          }
        },
        "authType": {
          "type": "string",
          "default": "EMAILPASSWD"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "passwordMD5Sum": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "account.createUserResponseV4": {
      "required": [
        "userId",
        "namespace",
        "authType",
        "displayName",
        "emailAddress",
        "username",
        "country",
        "dateOfBirth"
      ],
      "properties": {
        "authType": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "account.upgradeHeadlessAccountRequestV4": {
      "required": [
        "emailAddress",
        "username",
        "password"
      ],
      "properties": {
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "account.upgradeHeadlessAccountWithVerificationCodeRequestV4": {
      "required": [
        "password",
        "emailAddress",
        "username",
        "code"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "accountcommon.Ban": {
      "required": [
        "Ban",
        "Description"
      ],
      "properties": {
        "Ban": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "accountcommon.BanReason": {
      "required": [
        "Reason",
        "Description"
      ],
      "properties": {
        "Description": {
          "type": "string"
        },
        "Reason": {
          "type": "string"
        }
      }
    },
    "accountcommon.BanReasonV3": {
      "required": [
        "reason",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "accountcommon.BanReasons": {
      "required": [
        "Reasons"
      ],
      "properties": {
        "Reasons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.BanReason"
          }
        }
      }
    },
    "accountcommon.BanReasonsV3": {
      "required": [
        "reasons"
      ],
      "properties": {
        "reasons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.BanReasonV3"
          }
        }
      }
    },
    "accountcommon.BanV3": {
      "required": [
        "ban",
        "type"
      ],
      "properties": {
        "ban": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "descriptions": {
          "$ref": "#/definitions/accountcommon.Description"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "accountcommon.BannedByV3": {
      "required": [
        "userId",
        "displayName"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "accountcommon.Bans": {
      "required": [
        "Bans"
      ],
      "properties": {
        "Bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Ban"
          }
        }
      }
    },
    "accountcommon.BansV3": {
      "required": [
        "bans"
      ],
      "properties": {
        "bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.BanV3"
          }
        }
      }
    },
    "accountcommon.ClientPermission": {
      "required": [
        "Resource",
        "Action"
      ],
      "properties": {
        "Action": {
          "type": "integer",
          "format": "int32"
        },
        "Resource": {
          "type": "string"
        }
      }
    },
    "accountcommon.ClientPermissionV3": {
      "required": [
        "resource",
        "action"
      ],
      "properties": {
        "action": {
          "type": "integer",
          "format": "int32"
        },
        "resource": {
          "type": "string"
        }
      }
    },
    "accountcommon.ClientPermissions": {
      "required": [
        "Permissions"
      ],
      "properties": {
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.ClientPermission"
          }
        }
      }
    },
    "accountcommon.ClientPermissionsV3": {
      "required": [
        "permissions"
      ],
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.ClientPermissionV3"
          }
        }
      }
    },
    "accountcommon.ConflictedUserPlatformAccounts": {
      "required": [
        "platformUserID",
        "publisherAccounts"
      ],
      "properties": {
        "platformUserID": {
          "type": "string"
        },
        "publisherAccounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserWithLinkedPlatformAccounts"
          }
        }
      }
    },
    "accountcommon.CountryAgeRestriction": {
      "required": [
        "CountryCode",
        "CountryName",
        "AgeRestriction",
        "Enable"
      ],
      "properties": {
        "AgeRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "CountryCode": {
          "type": "string"
        },
        "CountryName": {
          "type": "string"
        },
        "Enable": {
          "type": "boolean"
        }
      }
    },
    "accountcommon.Description": {
      "required": [
        "en-US",
        "zh-CN"
      ],
      "properties": {
        "en-US": {
          "type": "string"
        },
        "zh-CN": {
          "type": "string"
        }
      }
    },
    "accountcommon.JWTBan": {
      "required": [
        "Ban",
        "EndDate",
        "Enabled",
        "TargetedNamespace"
      ],
      "properties": {
        "Ban": {
          "type": "string"
        },
        "DisabledDate": {
          "type": "string",
          "format": "date-time"
        },
        "Enabled": {
          "type": "boolean"
        },
        "EndDate": {
          "type": "string",
          "format": "date-time"
        },
        "TargetedNamespace": {
          "type": "string"
        }
      }
    },
    "accountcommon.JWTBanV3": {
      "required": [
        "ban",
        "endDate"
      ],
      "properties": {
        "ban": {
          "type": "string"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "accountcommon.ListUsersWithPlatformAccountsResponse": {
      "required": [
        "data",
        "paging",
        "totalData"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserWithPlatformAccounts"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        },
        "totalData": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "accountcommon.NamespaceRole": {
      "required": [
        "roleId",
        "namespace"
      ],
      "properties": {
        "namespace": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        }
      }
    },
    "accountcommon.Pagination": {
      "required": [
        "Previous",
        "Next",
        "First",
        "Last"
      ],
      "properties": {
        "First": {
          "type": "string"
        },
        "Last": {
          "type": "string"
        },
        "Next": {
          "type": "string"
        },
        "Previous": {
          "type": "string"
        }
      }
    },
    "accountcommon.PaginationV3": {
      "required": [
        "previous",
        "next",
        "first",
        "last"
      ],
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      }
    },
    "accountcommon.Permission": {
      "required": [
        "Resource",
        "Action"
      ],
      "properties": {
        "Action": {
          "type": "integer",
          "format": "int32"
        },
        "Resource": {
          "type": "string"
        },
        "SchedAction": {
          "type": "integer",
          "format": "int32"
        },
        "SchedCron": {
          "type": "string"
        },
        "SchedRange": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "accountcommon.PermissionV3": {
      "required": [
        "resource",
        "action"
      ],
      "properties": {
        "action": {
          "type": "integer",
          "format": "int32"
        },
        "resource": {
          "type": "string"
        },
        "schedAction": {
          "type": "integer",
          "format": "int32"
        },
        "schedCron": {
          "type": "string"
        },
        "schedRange": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "accountcommon.Permissions": {
      "required": [
        "Permissions"
      ],
      "properties": {
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        }
      }
    },
    "accountcommon.PermissionsV3": {
      "required": [
        "permissions"
      ],
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        }
      }
    },
    "accountcommon.PlatformAccount": {
      "required": [
        "namespace",
        "platformUserId"
      ],
      "properties": {
        "namespace": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        }
      }
    },
    "accountcommon.Role": {
      "required": [
        "RoleId",
        "RoleName",
        "Permissions",
        "Managers",
        "AdminRole",
        "IsWildcard",
        "Members"
      ],
      "properties": {
        "AdminRole": {
          "type": "boolean"
        },
        "IsWildcard": {
          "type": "boolean"
        },
        "Managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          }
        },
        "Members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMember"
          }
        },
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "RoleId": {
          "type": "string"
        },
        "RoleName": {
          "type": "string"
        }
      }
    },
    "accountcommon.RoleManager": {
      "required": [
        "UserId",
        "Namespace",
        "DisplayName"
      ],
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "accountcommon.RoleManagerV3": {
      "required": [
        "userId",
        "namespace",
        "displayName"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "accountcommon.RoleMember": {
      "required": [
        "UserId",
        "Namespace",
        "DisplayName"
      ],
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "accountcommon.RoleMemberV3": {
      "required": [
        "userId",
        "namespace",
        "displayName"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "accountcommon.RoleV3": {
      "required": [
        "roleId",
        "roleName",
        "permissions",
        "managers",
        "adminRole",
        "isWildcard",
        "members"
      ],
      "properties": {
        "adminRole": {
          "type": "boolean"
        },
        "isWildcard": {
          "type": "boolean"
        },
        "managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMemberV3"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserLinkedPlatform": {
      "required": [
        "UserId",
        "OriginNamespace",
        "Namespace",
        "LinkedAt"
      ],
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "LinkedAt": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "OriginNamespace": {
          "type": "string"
        },
        "PlatformId": {
          "type": "string"
        },
        "PlatformUserId": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserLinkedPlatformV3": {
      "required": [
        "linkedAt",
        "namespace",
        "originNamespace",
        "userId",
        "accountGroup"
      ],
      "properties": {
        "accountGroup": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "linkedAt": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "originNamespace": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserLinkedPlatformsResponseV3": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserLinkedPlatformV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "accountcommon.UserPlatformInfo": {
      "required": [
        "userId",
        "platformUserId",
        "platformId"
      ],
      "properties": {
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserPlatforms": {
      "required": [
        "userIdPlatforms"
      ],
      "properties": {
        "userIdPlatforms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserPlatformInfo"
          }
        }
      }
    },
    "accountcommon.UserSearchByPlatformIDResult": {
      "required": [
        "UserId",
        "DisplayName",
        "EmailAddress",
        "PhoneNumber",
        "LinkedPlatforms"
      ],
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "LinkedPlatforms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserLinkedPlatform"
          }
        },
        "PhoneNumber": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserSearchResult": {
      "required": [
        "UserId",
        "DisplayName",
        "EmailAddress",
        "PhoneNumber",
        "LinkedPlatforms"
      ],
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "LinkedPlatforms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserLinkedPlatform"
          }
        },
        "PhoneNumber": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserWithLinkedPlatformAccounts": {
      "required": [
        "userId",
        "namespace",
        "displayName",
        "emailAddress",
        "linkedPlatforms"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "linkedPlatforms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PlatformAccount"
          }
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserWithPlatformAccounts": {
      "required": [
        "userId",
        "namespace",
        "linkedPlatforms"
      ],
      "properties": {
        "linkedPlatforms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PlatformAccount"
          }
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "bloom.FilterJSON": {
      "required": [
        "m",
        "k",
        "bits"
      ],
      "properties": {
        "bits": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "k": {
          "type": "integer",
          "format": "integer"
        },
        "m": {
          "type": "integer",
          "format": "integer"
        }
      }
    },
    "clientmodel.ClientCreateRequest": {
      "required": [
        "Namespace",
        "ClientId",
        "ClientName",
        "Secret",
        "RedirectUri",
        "ClientPermissions"
      ],
      "properties": {
        "ClientId": {
          "type": "string"
        },
        "ClientName": {
          "type": "string"
        },
        "ClientPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "Namespace": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "Secret": {
          "type": "string"
        }
      }
    },
    "clientmodel.ClientCreationResponse": {
      "required": [
        "Namespace",
        "ClientId",
        "ClientName",
        "RedirectUri",
        "ClientPermissions"
      ],
      "properties": {
        "ClientId": {
          "type": "string"
        },
        "ClientName": {
          "type": "string"
        },
        "ClientPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "Namespace": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        }
      }
    },
    "clientmodel.ClientCreationV3Request": {
      "required": [
        "clientId",
        "clientName",
        "secret",
        "namespace",
        "redirectUri",
        "oauthClientType",
        "audiences",
        "baseUri",
        "clientPermissions"
      ],
      "properties": {
        "audiences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "baseUri": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientName": {
          "type": "string"
        },
        "clientPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "namespace": {
          "type": "string"
        },
        "oauthClientType": {
          "type": "string"
        },
        "redirectUri": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        }
      }
    },
    "clientmodel.ClientResponse": {
      "required": [
        "Namespace",
        "ClientId",
        "ClientName",
        "RedirectUri",
        "CreatedAt",
        "ClientPermissions"
      ],
      "properties": {
        "ClientId": {
          "type": "string"
        },
        "ClientName": {
          "type": "string"
        },
        "ClientPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "Namespace": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        }
      }
    },
    "clientmodel.ClientUpdateRequest": {
      "required": [
        "ClientName",
        "RedirectUri"
      ],
      "properties": {
        "ClientName": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        }
      }
    },
    "clientmodel.ClientUpdateSecretRequest": {
      "required": [
        "NewSecret"
      ],
      "properties": {
        "NewSecret": {
          "type": "string"
        }
      }
    },
    "clientmodel.ClientUpdateV3Request": {
      "properties": {
        "audiences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "baseUri": {
          "type": "string"
        },
        "clientName": {
          "type": "string"
        },
        "clientPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "namespace": {
          "type": "string"
        },
        "redirectUri": {
          "type": "string"
        }
      }
    },
    "clientmodel.ClientV3Response": {
      "required": [
        "clientId",
        "clientName",
        "namespace",
        "redirectUri",
        "oauthClientType",
        "audiences",
        "baseUri",
        "clientPermissions",
        "createdAt",
        "modifiedAt",
        "scopes"
      ],
      "properties": {
        "audiences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "baseUri": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientName": {
          "type": "string"
        },
        "clientPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "oauthClientType": {
          "type": "string"
        },
        "redirectUri": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "clientmodel.ClientsV3Response": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/clientmodel.ClientV3Response"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "legal.AcceptedPoliciesRequest": {
      "required": [
        "localizedPolicyVersionId",
        "policyVersionId",
        "policyId",
        "isAccepted"
      ],
      "properties": {
        "isAccepted": {
          "type": "boolean"
        },
        "localizedPolicyVersionId": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "policyVersionId": {
          "type": "string"
        }
      }
    },
    "model.AddUserRoleV4Request": {
      "required": [
        "roleId",
        "assignedNamespaces"
      ],
      "properties": {
        "assignedNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roleId": {
          "type": "string"
        }
      }
    },
    "model.AdminInvitationV3": {
      "required": [
        "email",
        "roles",
        "expiredAt"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "expiredAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        }
      }
    },
    "model.AgeRestrictionRequest": {
      "required": [
        "AgeRestriction",
        "Enable"
      ],
      "properties": {
        "AgeRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "Enable": {
          "type": "boolean"
        }
      }
    },
    "model.AgeRestrictionRequestV3": {
      "required": [
        "ageRestriction",
        "enable"
      ],
      "properties": {
        "ageRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "enable": {
          "type": "boolean"
        }
      }
    },
    "model.AgeRestrictionResponse": {
      "required": [
        "AgeRestriction",
        "Enable"
      ],
      "properties": {
        "AgeRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "Enable": {
          "type": "boolean"
        }
      }
    },
    "model.AgeRestrictionResponseV3": {
      "required": [
        "ageRestriction",
        "enable"
      ],
      "properties": {
        "ageRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "enable": {
          "type": "boolean"
        }
      }
    },
    "model.AssignUserV4Request": {
      "required": [
        "userId",
        "namespace",
        "assignedNamespaces"
      ],
      "properties": {
        "assignedNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.AssignedUserV4Response": {
      "required": [
        "userId",
        "roleId",
        "assignedNamespaces",
        "email",
        "displayName"
      ],
      "properties": {
        "assignedNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.BanCreateRequest": {
      "required": [
        "ban",
        "comment",
        "endDate",
        "reason",
        "skipNotif"
      ],
      "properties": {
        "ban": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "skipNotif": {
          "type": "boolean"
        }
      }
    },
    "model.BanUpdateRequest": {
      "required": [
        "enabled",
        "skipNotif"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "skipNotif": {
          "type": "boolean"
        }
      }
    },
    "model.Country": {
      "required": [
        "CountryCode",
        "CountryName",
        "AgeRestriction",
        "Enable"
      ],
      "properties": {
        "AgeRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "CountryCode": {
          "type": "string"
        },
        "CountryName": {
          "type": "string"
        },
        "Enable": {
          "type": "boolean"
        }
      }
    },
    "model.CountryAgeRestrictionRequest": {
      "required": [
        "AgeRestriction"
      ],
      "properties": {
        "AgeRestriction": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "model.CountryAgeRestrictionV3Request": {
      "required": [
        "ageRestriction"
      ],
      "properties": {
        "ageRestriction": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "model.CountryV3Response": {
      "required": [
        "countryCode",
        "countryName",
        "ageRestriction",
        "enable"
      ],
      "properties": {
        "ageRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "enable": {
          "type": "boolean"
        }
      }
    },
    "model.CreateJusticeUserResponse": {
      "required": [
        "userId",
        "namespace"
      ],
      "properties": {
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.DisableUserRequest": {
      "properties": {
        "Reason": {
          "type": "string"
        }
      }
    },
    "model.EmailUpdateRequestV4": {
      "required": [
        "code",
        "emailAddress"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        }
      }
    },
    "model.ForgotPasswordRequestV3": {
      "required": [
        "emailAddress"
      ],
      "properties": {
        "emailAddress": {
          "type": "string"
        },
        "languageTag": {
          "type": "string"
        }
      }
    },
    "model.GetAdminUsersResponse": {
      "required": [
        "Data",
        "Paging"
      ],
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserResponse"
          }
        },
        "Paging": {
          "$ref": "#/definitions/accountcommon.Pagination"
        }
      }
    },
    "model.GetPublisherUserResponse": {
      "required": [
        "UserId",
        "Namespace"
      ],
      "properties": {
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "model.GetUserBanV3Response": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserBanResponseV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.GetUserJusticePlatformAccountResponse": {
      "required": [
        "UserID",
        "DesignatedNamespace"
      ],
      "properties": {
        "DesignatedNamespace": {
          "type": "string"
        },
        "UserID": {
          "type": "string"
        }
      }
    },
    "model.GetUserMapping": {
      "required": [
        "UserId",
        "Namespace"
      ],
      "properties": {
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "model.GetUsersResponseWithPaginationV3": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserResponseV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.InviteAdminRequestV3": {
      "required": [
        "emailAddresses",
        "roles"
      ],
      "properties": {
        "emailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.InviteAdminResponseV3": {
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.AdminInvitationV3"
          }
        }
      }
    },
    "model.LinkPlatformAccountRequest": {
      "required": [
        "platformId",
        "platformUserId"
      ],
      "properties": {
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        }
      }
    },
    "model.LinkRequest": {
      "required": [
        "request_id",
        "status",
        "operation_name",
        "redirect_uri",
        "client_id",
        "namespace",
        "payload"
      ],
      "properties": {
        "client_id": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/rest.ErrorResponse"
        },
        "expiration": {
          "type": "integer",
          "format": "int32"
        },
        "namespace": {
          "type": "string"
        },
        "operation_name": {
          "type": "string"
        },
        "payload": {
          "type": "object"
        },
        "redirect_uri": {
          "type": "string"
        },
        "request_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "model.ListAssignedUsersV4Response": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.AssignedUserV4Response"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.ListEmailAddressRequest": {
      "required": [
        "listEmailAddressRequest"
      ],
      "properties": {
        "listEmailAddressRequest": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.ListRoleV4Response": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.RoleV4Response"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.ListUserResponseV3": {
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserResponseV3"
          }
        }
      }
    },
    "model.ListUserRolesV4Response": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserRolesV4Response"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.LoginHistoriesResponse": {
      "required": [
        "Data",
        "Paging"
      ],
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserLoginHistoryResponse"
          }
        },
        "Paging": {
          "$ref": "#/definitions/accountcommon.Pagination"
        }
      }
    },
    "model.NamespaceRoleRequest": {
      "required": [
        "roleId",
        "namespace"
      ],
      "properties": {
        "namespace": {
          "description": "required",
          "type": "string"
        },
        "roleId": {
          "type": "string"
        }
      }
    },
    "model.PermissionDeleteRequest": {
      "required": [
        "Resource",
        "Action"
      ],
      "properties": {
        "Action": {
          "type": "integer",
          "format": "int32"
        },
        "Resource": {
          "type": "string"
        }
      }
    },
    "model.PlatformUserIDRequest": {
      "required": [
        "platformUserIds"
      ],
      "properties": {
        "platformUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.PlatformUserInformation": {
      "required": [
        "PlatformID",
        "PlatformUserID",
        "DisplayName",
        "Namespace",
        "LinkedAt"
      ],
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "LinkedAt": {
          "type": "string",
          "format": "date-time"
        },
        "Namespace": {
          "type": "string"
        },
        "PlatformID": {
          "type": "string"
        },
        "PlatformUserID": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      }
    },
    "model.PublicThirdPartyPlatformInfo": {
      "required": [
        "ClientId",
        "PlatformId",
        "AppId",
        "Environment",
        "IsActive"
      ],
      "properties": {
        "AppId": {
          "type": "string"
        },
        "ClientId": {
          "type": "string"
        },
        "Environment": {
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "PlatformId": {
          "type": "string"
        }
      }
    },
    "model.PublicUserInformationResponseV3": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.PublicUserInformationV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.PublicUserInformationV3": {
      "required": [
        "createdAt",
        "displayName",
        "namespace",
        "userId",
        "userName"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "displayName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "model.PublicUserResponse": {
      "required": [
        "Namespace",
        "UserId",
        "DisplayName",
        "AuthType",
        "LoginId",
        "CreatedAt",
        "Roles",
        "NamespaceRoles",
        "Permissions",
        "PhoneVerified",
        "EmailVerified",
        "Enabled",
        "DeletionStatus",
        "LastEnabledChangedTime",
        "Bans"
      ],
      "properties": {
        "AuthType": {
          "type": "string"
        },
        "Bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserActiveBanResponse"
          }
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "DeletionStatus": {
          "type": "boolean"
        },
        "DisplayName": {
          "type": "string"
        },
        "EmailVerified": {
          "type": "boolean"
        },
        "Enabled": {
          "type": "boolean"
        },
        "LastEnabledChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "LoginId": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "NamespaceRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        },
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "PhoneVerified": {
          "type": "boolean"
        },
        "PlatformId": {
          "type": "string"
        },
        "PlatformUserId": {
          "type": "string"
        },
        "Roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UserId": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      }
    },
    "model.PublicUserResponseV3": {
      "required": [
        "authType",
        "bans",
        "createdAt",
        "displayName",
        "deletionStatus",
        "emailVerified",
        "enabled",
        "lastDateOfBirthChangedTime",
        "lastEnabledChangedTime",
        "namespace",
        "namespaceRoles",
        "permissions",
        "phoneVerified",
        "roles",
        "userId"
      ],
      "properties": {
        "authType": {
          "type": "string"
        },
        "bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserActiveBanResponseV3"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "deletionStatus": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "lastDateOfBirthChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "lastEnabledChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "namespaceRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserPermissionsResponseV3"
          }
        },
        "phoneVerified": {
          "type": "boolean"
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "model.PublicUsersResponse": {
      "properties": {
        "Users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.PublicUserResponse"
          }
        }
      }
    },
    "model.RemoveUserRoleV4Request": {
      "required": [
        "roleId",
        "assignedNamespaces"
      ],
      "properties": {
        "assignedNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roleId": {
          "type": "string"
        }
      }
    },
    "model.ResetPasswordRequest": {
      "required": [
        "Code",
        "LoginID",
        "NewPassword"
      ],
      "properties": {
        "Code": {
          "type": "string"
        },
        "LoginID": {
          "type": "string"
        },
        "NewPassword": {
          "type": "string"
        }
      }
    },
    "model.ResetPasswordRequestV3": {
      "required": [
        "code",
        "emailAddress",
        "newPassword"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "model.RevokeUserV4Request": {
      "required": [
        "userId",
        "namespace"
      ],
      "properties": {
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.RoleAdminStatusResponse": {
      "required": [
        "AdminRole"
      ],
      "properties": {
        "AdminRole": {
          "type": "boolean"
        }
      }
    },
    "model.RoleAdminStatusResponseV3": {
      "required": [
        "adminRole"
      ],
      "properties": {
        "adminRole": {
          "type": "boolean"
        }
      }
    },
    "model.RoleCreateRequest": {
      "required": [
        "RoleName",
        "Permissions",
        "Managers",
        "AdminRole",
        "Members"
      ],
      "properties": {
        "AdminRole": {
          "type": "boolean"
        },
        "Managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          }
        },
        "Members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMember"
          }
        },
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "RoleName": {
          "type": "string"
        }
      }
    },
    "model.RoleCreateV3Request": {
      "required": [
        "roleName",
        "permissions",
        "managers",
        "adminRole",
        "isWildcard",
        "members"
      ],
      "properties": {
        "adminRole": {
          "type": "boolean"
        },
        "isWildcard": {
          "type": "boolean"
        },
        "managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMemberV3"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "model.RoleManagersRequest": {
      "required": [
        "Managers"
      ],
      "properties": {
        "Managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          }
        }
      }
    },
    "model.RoleManagersRequestV3": {
      "required": [
        "managers"
      ],
      "properties": {
        "managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          }
        }
      }
    },
    "model.RoleManagersResponse": {
      "required": [
        "Managers"
      ],
      "properties": {
        "Managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          }
        }
      }
    },
    "model.RoleManagersResponsesV3": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.RoleMembersRequest": {
      "required": [
        "Members"
      ],
      "properties": {
        "Members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMember"
          }
        }
      }
    },
    "model.RoleMembersRequestV3": {
      "required": [
        "members"
      ],
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMemberV3"
          }
        }
      }
    },
    "model.RoleMembersResponse": {
      "required": [
        "Members"
      ],
      "properties": {
        "Members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMember"
          }
        }
      }
    },
    "model.RoleMembersResponseV3": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMemberV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.RoleNamesResponseV3": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.RoleResponse": {
      "required": [
        "RoleId",
        "RoleName",
        "Permissions",
        "IsWildcard"
      ],
      "properties": {
        "IsWildcard": {
          "type": "boolean"
        },
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "RoleId": {
          "type": "string"
        },
        "RoleName": {
          "type": "string"
        }
      }
    },
    "model.RoleResponseV3": {
      "required": [
        "roleId",
        "roleName",
        "permissions",
        "isWildcard",
        "adminRole"
      ],
      "properties": {
        "adminRole": {
          "type": "boolean"
        },
        "isWildcard": {
          "type": "boolean"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "model.RoleResponseWithManagers": {
      "required": [
        "RoleId",
        "RoleName",
        "Permissions",
        "Managers",
        "IsWildcard"
      ],
      "properties": {
        "IsWildcard": {
          "type": "boolean"
        },
        "Managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          }
        },
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "RoleId": {
          "type": "string"
        },
        "RoleName": {
          "type": "string"
        }
      }
    },
    "model.RoleResponseWithManagersAndPaginationV3": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.RoleResponseWithManagersV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.RoleResponseWithManagersV3": {
      "required": [
        "roleId",
        "roleName",
        "permissions",
        "managers",
        "isWildcard",
        "adminRole"
      ],
      "properties": {
        "adminRole": {
          "type": "boolean"
        },
        "isWildcard": {
          "type": "boolean"
        },
        "managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "model.RoleUpdateRequest": {
      "required": [
        "RoleName"
      ],
      "properties": {
        "RoleName": {
          "type": "string"
        }
      }
    },
    "model.RoleUpdateRequestV3": {
      "required": [
        "roleName",
        "isWildcard"
      ],
      "properties": {
        "isWildcard": {
          "type": "boolean"
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "model.RoleV4Request": {
      "required": [
        "roleName",
        "adminRole",
        "isWildcard"
      ],
      "properties": {
        "adminRole": {
          "type": "boolean",
          "default": false
        },
        "isWildcard": {
          "type": "boolean",
          "default": false
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "model.RoleV4Response": {
      "required": [
        "roleId",
        "roleName",
        "permissions",
        "adminRole",
        "isWildcard"
      ],
      "properties": {
        "adminRole": {
          "type": "boolean"
        },
        "isWildcard": {
          "type": "boolean"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "model.SSOPlatformCredentialRequest": {
      "required": [
        "redirectUri",
        "ssoUrl",
        "secret",
        "apiKey",
        "appId",
        "acsUrl",
        "federationMetadataUrl",
        "isActive"
      ],
      "properties": {
        "acsUrl": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "federationMetadataUrl": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "redirectUri": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "ssoUrl": {
          "type": "string"
        }
      }
    },
    "model.SSOPlatformCredentialResponse": {
      "required": [
        "namespace",
        "platformId",
        "redirectUri",
        "secret",
        "ssoUrl",
        "truncatedApiKey",
        "appId",
        "acsUrl",
        "federationMetadataUrl",
        "isActive"
      ],
      "properties": {
        "acsUrl": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "federationMetadataUrl": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "namespace": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "redirectUri": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "ssoUrl": {
          "type": "string"
        },
        "truncatedApiKey": {
          "description": "first few characters of key",
          "type": "string"
        }
      }
    },
    "model.SearchUsersByPlatformIDResponse": {
      "required": [
        "Data",
        "Paging"
      ],
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserSearchByPlatformIDResult"
          }
        },
        "Paging": {
          "$ref": "#/definitions/accountcommon.Pagination"
        }
      }
    },
    "model.SearchUsersResponse": {
      "required": [
        "Data"
      ],
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserSearchResult"
          }
        }
      }
    },
    "model.SearchUsersResponseWithPaginationV3": {
      "required": [
        "data",
        "totalData",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserResponseV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        },
        "totalData": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "model.SendVerificationCodeRequest": {
      "required": [
        "LoginID",
        "LanguageTag"
      ],
      "properties": {
        "Context": {
          "type": "string"
        },
        "LanguageTag": {
          "type": "string"
        },
        "LoginID": {
          "type": "string"
        }
      }
    },
    "model.SendVerificationCodeRequestV3": {
      "required": [
        "emailAddress"
      ],
      "properties": {
        "context": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "languageTag": {
          "type": "string"
        }
      }
    },
    "model.ThirdPartyLoginPlatformCredentialRequest": {
      "required": [
        "AppId",
        "ClientId",
        "RedirectUri",
        "Secret",
        "Environment",
        "OrganizationId",
        "IsActive",
        "FederationMetadataURL",
        "ACSURL"
      ],
      "properties": {
        "ACSURL": {
          "type": "string"
        },
        "AppId": {
          "type": "string"
        },
        "ClientId": {
          "type": "string"
        },
        "Environment": {
          "type": "string"
        },
        "FederationMetadataURL": {
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "OrganizationId": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "Secret": {
          "type": "string"
        }
      }
    },
    "model.ThirdPartyLoginPlatformCredentialResponse": {
      "required": [
        "AppId",
        "ClientId",
        "Namespace",
        "PlatformId",
        "RedirectUri",
        "Secret",
        "Environment",
        "OrganizationId",
        "IsActive",
        "FederationMetadataURL",
        "ACSURL"
      ],
      "properties": {
        "ACSURL": {
          "type": "string"
        },
        "AppId": {
          "type": "string"
        },
        "ClientId": {
          "type": "string"
        },
        "Environment": {
          "type": "string"
        },
        "FederationMetadataURL": {
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "Namespace": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "PlatformId": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "Secret": {
          "type": "string"
        }
      }
    },
    "model.UnlinkUserPlatformRequest": {
      "properties": {
        "platformNamespace": {
          "type": "string"
        }
      }
    },
    "model.UpdatePermissionScheduleRequest": {
      "properties": {
        "SchedAction": {
          "type": "integer",
          "format": "int32"
        },
        "SchedCron": {
          "type": "string"
        },
        "SchedRange": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.UpdateUserDeletionStatusRequest": {
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "model.UpdateUserStatusRequest": {
      "required": [
        "enabled",
        "reason"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "model.UpgradeHeadlessAccountRequest": {
      "required": [
        "LoginID",
        "Password"
      ],
      "properties": {
        "LoginID": {
          "description": "new email address or phone number",
          "type": "string"
        },
        "Password": {
          "description": "new password",
          "type": "string"
        }
      }
    },
    "model.UpgradeHeadlessAccountV3Request": {
      "required": [
        "emailAddress",
        "password"
      ],
      "properties": {
        "emailAddress": {
          "description": "new email address",
          "type": "string"
        },
        "password": {
          "description": "new password",
          "type": "string"
        }
      }
    },
    "model.UpgradeHeadlessAccountWithVerificationCodeRequest": {
      "required": [
        "loginId",
        "Password",
        "Code"
      ],
      "properties": {
        "Code": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "loginId": {
          "type": "string"
        }
      }
    },
    "model.UpgradeHeadlessAccountWithVerificationCodeRequestV3": {
      "required": [
        "emailAddress",
        "password",
        "code"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "model.UserActiveBanResponse": {
      "required": [
        "BanId",
        "Ban",
        "EndDate"
      ],
      "properties": {
        "Ban": {
          "type": "string"
        },
        "BanId": {
          "type": "string"
        },
        "EndDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "model.UserActiveBanResponseV3": {
      "required": [
        "ban",
        "banId",
        "endDate"
      ],
      "properties": {
        "ban": {
          "type": "string"
        },
        "banId": {
          "type": "string"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "model.UserBanResponse": {
      "required": [
        "Ban",
        "BanId",
        "BannedBy",
        "Comment",
        "CreatedAt",
        "Enabled",
        "EndDate",
        "Namespace",
        "Reason",
        "UserId"
      ],
      "properties": {
        "Ban": {
          "type": "string"
        },
        "BanId": {
          "type": "string"
        },
        "BannedBy": {
          "$ref": "#/definitions/.BannedBy"
        },
        "Comment": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "DisabledDate": {
          "type": "string",
          "format": "date-time"
        },
        "Enabled": {
          "type": "boolean"
        },
        "EndDate": {
          "type": "string",
          "format": "date-time"
        },
        "Namespace": {
          "type": "string"
        },
        "Reason": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "model.UserBanResponseV3": {
      "required": [
        "ban",
        "banId",
        "bannedBy",
        "comment",
        "createdAt",
        "disabledDate",
        "enabled",
        "endDate",
        "namespace",
        "reason",
        "userId"
      ],
      "properties": {
        "ban": {
          "type": "string"
        },
        "banId": {
          "type": "string"
        },
        "bannedBy": {
          "$ref": "#/definitions/accountcommon.BannedByV3"
        },
        "comment": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "disabledDate": {
          "type": "string",
          "format": "date-time"
        },
        "enabled": {
          "type": "boolean"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.UserCreateFromInvitationRequestV3": {
      "required": [
        "authType",
        "displayName",
        "password",
        "country",
        "dateOfBirth"
      ],
      "properties": {
        "authType": {
          "type": "string",
          "default": "EMAILPASSWD"
        },
        "country": {
          "type": "string",
          "default": "ID"
        },
        "dateOfBirth": {
          "type": "string",
          "default": "1990-12-31"
        },
        "displayName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "model.UserCreateFromInvitationRequestV4": {
      "required": [
        "authType",
        "displayName",
        "username",
        "password",
        "country",
        "dateOfBirth"
      ],
      "properties": {
        "authType": {
          "type": "string",
          "default": "EMAILPASSWD"
        },
        "country": {
          "type": "string",
          "default": "ID"
        },
        "dateOfBirth": {
          "type": "string",
          "default": "1990-12-31"
        },
        "displayName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "model.UserCreateRequest": {
      "required": [
        "AuthType",
        "DisplayName",
        "LoginId",
        "Password",
        "Country"
      ],
      "properties": {
        "AuthType": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "LoginId": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "PasswordMD5Sum": {
          "type": "string"
        }
      }
    },
    "model.UserCreateRequestV3": {
      "required": [
        "authType",
        "displayName",
        "emailAddress",
        "password",
        "country",
        "dateOfBirth"
      ],
      "properties": {
        "PasswordMD5Sum": {
          "type": "string"
        },
        "acceptedPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/legal.AcceptedPoliciesRequest"
          }
        },
        "authType": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "model.UserCreateResponse": {
      "required": [
        "Namespace",
        "UserId",
        "AuthType",
        "DisplayName",
        "LoginId",
        "Country",
        "DateOfBirth"
      ],
      "properties": {
        "AuthType": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "DateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "DisplayName": {
          "type": "string"
        },
        "LoginId": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "model.UserCreateResponseV3": {
      "required": [
        "namespace",
        "userId",
        "authType",
        "displayName",
        "emailAddress",
        "country",
        "dateOfBirth"
      ],
      "properties": {
        "authType": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.UserDeletionStatusResponse": {
      "required": [
        "deletionStatus"
      ],
      "properties": {
        "deletionStatus": {
          "type": "boolean"
        }
      }
    },
    "model.UserInformation": {
      "required": [
        "DisplayName",
        "EmailAddresses",
        "PhoneNumber",
        "Username",
        "LinkedPlatformAccounts",
        "Country"
      ],
      "properties": {
        "Country": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "EmailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LinkedPlatformAccounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.PlatformUserInformation"
          }
        },
        "PhoneNumber": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      }
    },
    "model.UserLoginHistoryResponse": {
      "required": [
        "Country",
        "State",
        "City",
        "DeviceId",
        "ApplicationName",
        "Timestamp",
        "deviceName"
      ],
      "properties": {
        "ApplicationName": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "DeviceId": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "Timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "deviceName": {
          "type": "string"
        }
      }
    },
    "model.UserPasswordUpdateRequest": {
      "required": [
        "OldPassword",
        "NewPassword",
        "LanguageTag"
      ],
      "properties": {
        "LanguageTag": {
          "type": "string"
        },
        "NewPassword": {
          "type": "string"
        },
        "OldPassword": {
          "type": "string"
        }
      }
    },
    "model.UserPasswordUpdateV3Request": {
      "required": [
        "oldPassword",
        "newPassword",
        "languageTag"
      ],
      "properties": {
        "languageTag": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        }
      }
    },
    "model.UserPermissionsResponseV3": {
      "required": [
        "action",
        "resource"
      ],
      "properties": {
        "action": {
          "type": "integer",
          "format": "int32"
        },
        "resource": {
          "type": "string"
        },
        "schedAction": {
          "type": "integer",
          "format": "int32"
        },
        "schedCron": {
          "type": "string"
        },
        "schedRange": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.UserResponse": {
      "required": [
        "Namespace",
        "UserId",
        "DisplayName",
        "AuthType",
        "LoginId",
        "OldEmailAddress",
        "CreatedAt",
        "Roles",
        "NamespaceRoles",
        "Permissions",
        "PhoneVerified",
        "EmailVerified",
        "Enabled",
        "DeletionStatus",
        "LastEnabledChangedTime",
        "Country",
        "Bans",
        "DateOfBirth",
        "LastDateOfBirthChangedTime"
      ],
      "properties": {
        "AuthType": {
          "type": "string"
        },
        "Bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserActiveBanResponse"
          }
        },
        "Country": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "DateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "DeletionStatus": {
          "type": "boolean"
        },
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "EmailVerified": {
          "type": "boolean"
        },
        "Enabled": {
          "type": "boolean"
        },
        "LastDateOfBirthChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "LastEnabledChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "LoginId": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "NamespaceRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        },
        "NewEmailAddress": {
          "type": "string"
        },
        "OldEmailAddress": {
          "type": "string"
        },
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "PhoneNumber": {
          "type": "string"
        },
        "PhoneVerified": {
          "type": "boolean"
        },
        "PlatformId": {
          "type": "string"
        },
        "PlatformUserId": {
          "type": "string"
        },
        "Roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UserId": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      }
    },
    "model.UserResponseV3": {
      "required": [
        "authType",
        "bans",
        "country",
        "createdAt",
        "dateOfBirth",
        "displayName",
        "deletionStatus",
        "emailVerified",
        "enabled",
        "lastDateOfBirthChangedTime",
        "lastEnabledChangedTime",
        "emailAddress",
        "namespace",
        "namespaceRoles",
        "oldEmailAddress",
        "permissions",
        "phoneVerified",
        "roles",
        "userId"
      ],
      "properties": {
        "authType": {
          "type": "string"
        },
        "bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserActiveBanResponseV3"
          }
        },
        "country": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "deletionStatus": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "lastDateOfBirthChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "lastEnabledChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "namespaceRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        },
        "newEmailAddress": {
          "type": "string"
        },
        "oldEmailAddress": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserPermissionsResponseV3"
          }
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneVerified": {
          "type": "boolean"
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "model.UserRolesV4Response": {
      "required": [
        "roleName",
        "roleId",
        "assignedNamespaces"
      ],
      "properties": {
        "assignedNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "model.UserUpdateRequest": {
      "properties": {
        "Country": {
          "type": "string"
        },
        "DateOfBirth": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "LanguageTag": {
          "type": "string"
        }
      }
    },
    "model.UserUpdateRequestV3": {
      "properties": {
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "languageTag": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "model.UserVerificationRequest": {
      "required": [
        "Code",
        "ContactType",
        "LanguageTag"
      ],
      "properties": {
        "Code": {
          "type": "string"
        },
        "ContactType": {
          "type": "string"
        },
        "LanguageTag": {
          "type": "string"
        }
      }
    },
    "model.UserVerificationRequestV3": {
      "required": [
        "code",
        "contactType",
        "languageTag"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "contactType": {
          "type": "string"
        },
        "languageTag": {
          "type": "string"
        }
      }
    },
    "model.VerificationCodeResponse": {
      "required": [
        "accountRegistration",
        "accountUpgrade",
        "passwordReset",
        "updateEmail"
      ],
      "properties": {
        "accountRegistration": {
          "type": "string"
        },
        "accountUpgrade": {
          "type": "string"
        },
        "passwordReset": {
          "type": "string"
        },
        "updateEmail": {
          "type": "string"
        }
      }
    },
    "model.WebLinkingResponse": {
      "required": [
        "third_party_url"
      ],
      "properties": {
        "third_party_url": {
          "type": "string"
        }
      }
    },
    "oauthapi.RevocationList": {
      "required": [
        "revoked_tokens",
        "revoked_users"
      ],
      "properties": {
        "revoked_tokens": {
          "$ref": "#/definitions/bloom.FilterJSON"
        },
        "revoked_users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/oauthcommon.UserRevocationListRecord"
          }
        }
      }
    },
    "oauthcommon.JWKKey": {
      "required": [
        "kty"
      ],
      "properties": {
        "alg": {
          "type": "string"
        },
        "e": {
          "type": "string"
        },
        "kid": {
          "type": "string"
        },
        "kty": {
          "type": "string"
        },
        "n": {
          "type": "string"
        },
        "use": {
          "type": "string"
        }
      }
    },
    "oauthcommon.JWKSet": {
      "required": [
        "keys"
      ],
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/oauthcommon.JWKKey"
          }
        }
      }
    },
    "oauthcommon.UserRevocationListRecord": {
      "required": [
        "id",
        "revoked_at"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "revoked_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "oauthmodel.CountryLocationResponse": {
      "required": [
        "countryCode",
        "countryName",
        "state",
        "city"
      ],
      "properties": {
        "city": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "oauthmodel.ErrorResponse": {
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "string"
        },
        "error_description": {
          "type": "string"
        },
        "error_uri": {
          "type": "string"
        }
      }
    },
    "oauthmodel.TokenIntrospectResponse": {
      "required": [
        "active"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "aud": {
          "type": "string"
        },
        "client_id": {
          "type": "string"
        },
        "exp": {
          "type": "integer",
          "format": "int64"
        },
        "iat": {
          "type": "integer",
          "format": "int64"
        },
        "scope": {
          "type": "string"
        },
        "sub": {
          "type": "string"
        }
      }
    },
    "oauthmodel.TokenResponse": {
      "required": [
        "access_token",
        "refresh_token",
        "expires_in",
        "token_type",
        "roles",
        "permissions",
        "bans",
        "user_id",
        "display_name",
        "namespace",
        "namespace_roles"
      ],
      "properties": {
        "access_token": {
          "type": "string"
        },
        "bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.JWTBan"
          }
        },
        "display_name": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer",
          "format": "int32"
        },
        "is_comply": {
          "type": "boolean"
        },
        "jflgs": {
          "type": "integer",
          "format": "int32"
        },
        "namespace": {
          "type": "string"
        },
        "namespace_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "platform_id": {
          "type": "string"
        },
        "platform_user_id": {
          "type": "string"
        },
        "refresh_token": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "token_type": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "oauthmodel.TokenResponseV3": {
      "required": [
        "access_token",
        "refresh_token",
        "expires_in",
        "token_type",
        "roles",
        "permissions",
        "bans",
        "user_id",
        "display_name",
        "namespace",
        "namespace_roles"
      ],
      "properties": {
        "access_token": {
          "type": "string"
        },
        "bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.JWTBanV3"
          }
        },
        "display_name": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer",
          "format": "int32"
        },
        "is_comply": {
          "type": "boolean"
        },
        "jflgs": {
          "type": "integer",
          "format": "int32"
        },
        "namespace": {
          "type": "string"
        },
        "namespace_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "platform_id": {
          "type": "string"
        },
        "platform_user_id": {
          "type": "string"
        },
        "refresh_token": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "token_type": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "oauthmodel.TokenThirdPartyResponse": {
      "required": [
        "platform_token"
      ],
      "properties": {
        "platform_token": {
          "type": "string"
        },
        "sand_box_id": {
          "type": "string"
        }
      }
    },
    "rest.ErrorResponse": {
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32"
        },
        "errorMessage": {
          "type": "string"
        },
        "messageVariables": {
          "$ref": "#/definitions/accountcommon.ConflictedUserPlatformAccounts"
        }
      }
    },
    "restapi.ErrorResponse": {
      "required": [
        "Message"
      ],
      "properties": {
        "Code": {
          "type": "integer",
          "format": "int32"
        },
        "Message": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "authorization": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "authorization": []
    },
    {
      "basic": []
    }
  ]
}