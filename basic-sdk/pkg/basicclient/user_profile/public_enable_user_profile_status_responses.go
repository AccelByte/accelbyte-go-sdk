// Code generated by go-swagger; DO NOT EDIT.

package user_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/basic-sdk/pkg/basicclientmodels"
)

// PublicEnableUserProfileStatusReader is a Reader for the PublicEnableUserProfileStatus structure.
type PublicEnableUserProfileStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PublicEnableUserProfileStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPublicEnableUserProfileStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPublicEnableUserProfileStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPublicEnableUserProfileStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPublicEnableUserProfileStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPublicEnableUserProfileStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PATCH /v1/public/namespaces/{namespace}/users/{userId}/profiles/status returns an error %d: %s", response.Code(), string(data))
	}
}

// NewPublicEnableUserProfileStatusOK creates a PublicEnableUserProfileStatusOK with default headers values
func NewPublicEnableUserProfileStatusOK() *PublicEnableUserProfileStatusOK {
	return &PublicEnableUserProfileStatusOK{}
}

/*PublicEnableUserProfileStatusOK handles this case with default header values.

  Successful operation
*/
type PublicEnableUserProfileStatusOK struct {
	Payload *basicclientmodels.UserProfileInfo
}

func (o *PublicEnableUserProfileStatusOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/public/namespaces/{namespace}/users/{userId}/profiles/status][%d] publicEnableUserProfileStatusOK  %+v", 200, o.Payload)
}

func (o *PublicEnableUserProfileStatusOK) GetPayload() *basicclientmodels.UserProfileInfo {
	return o.Payload
}

func (o *PublicEnableUserProfileStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.UserProfileInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicEnableUserProfileStatusBadRequest creates a PublicEnableUserProfileStatusBadRequest with default headers values
func NewPublicEnableUserProfileStatusBadRequest() *PublicEnableUserProfileStatusBadRequest {
	return &PublicEnableUserProfileStatusBadRequest{}
}

/*PublicEnableUserProfileStatusBadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>
*/
type PublicEnableUserProfileStatusBadRequest struct {
	Payload *basicclientmodels.ValidationErrorEntity
}

func (o *PublicEnableUserProfileStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/public/namespaces/{namespace}/users/{userId}/profiles/status][%d] publicEnableUserProfileStatusBadRequest  %+v", 400, o.Payload)
}

func (o *PublicEnableUserProfileStatusBadRequest) GetPayload() *basicclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *PublicEnableUserProfileStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicEnableUserProfileStatusUnauthorized creates a PublicEnableUserProfileStatusUnauthorized with default headers values
func NewPublicEnableUserProfileStatusUnauthorized() *PublicEnableUserProfileStatusUnauthorized {
	return &PublicEnableUserProfileStatusUnauthorized{}
}

/*PublicEnableUserProfileStatusUnauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>
*/
type PublicEnableUserProfileStatusUnauthorized struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *PublicEnableUserProfileStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/public/namespaces/{namespace}/users/{userId}/profiles/status][%d] publicEnableUserProfileStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *PublicEnableUserProfileStatusUnauthorized) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *PublicEnableUserProfileStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicEnableUserProfileStatusForbidden creates a PublicEnableUserProfileStatusForbidden with default headers values
func NewPublicEnableUserProfileStatusForbidden() *PublicEnableUserProfileStatusForbidden {
	return &PublicEnableUserProfileStatusForbidden{}
}

/*PublicEnableUserProfileStatusForbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>
*/
type PublicEnableUserProfileStatusForbidden struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *PublicEnableUserProfileStatusForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/public/namespaces/{namespace}/users/{userId}/profiles/status][%d] publicEnableUserProfileStatusForbidden  %+v", 403, o.Payload)
}

func (o *PublicEnableUserProfileStatusForbidden) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *PublicEnableUserProfileStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicEnableUserProfileStatusNotFound creates a PublicEnableUserProfileStatusNotFound with default headers values
func NewPublicEnableUserProfileStatusNotFound() *PublicEnableUserProfileStatusNotFound {
	return &PublicEnableUserProfileStatusNotFound{}
}

/*PublicEnableUserProfileStatusNotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>user profile not found</td></tr></table>
*/
type PublicEnableUserProfileStatusNotFound struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *PublicEnableUserProfileStatusNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/public/namespaces/{namespace}/users/{userId}/profiles/status][%d] publicEnableUserProfileStatusNotFound  %+v", 404, o.Payload)
}

func (o *PublicEnableUserProfileStatusNotFound) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *PublicEnableUserProfileStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
