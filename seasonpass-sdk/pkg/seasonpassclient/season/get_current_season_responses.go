// Code generated by go-swagger; DO NOT EDIT.

package season

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/seasonpass-sdk/pkg/seasonpassclientmodels"
)

// GetCurrentSeasonReader is a Reader for the GetCurrentSeason structure.
type GetCurrentSeasonReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCurrentSeasonReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCurrentSeasonOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCurrentSeasonBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetCurrentSeasonNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /admin/namespaces/{namespace}/seasons/current returns an error %d: %s", response.Code(), string(data))
	}
}

// NewGetCurrentSeasonOK creates a GetCurrentSeasonOK with default headers values
func NewGetCurrentSeasonOK() *GetCurrentSeasonOK {
	return &GetCurrentSeasonOK{}
}

/*GetCurrentSeasonOK handles this case with default header values.

  successful operation
*/
type GetCurrentSeasonOK struct {
	Payload *seasonpassclientmodels.SeasonSummary
}

func (o *GetCurrentSeasonOK) Error() string {
	return fmt.Sprintf("[GET /admin/namespaces/{namespace}/seasons/current][%d] getCurrentSeasonOK  %+v", 200, o.Payload)
}

func (o *GetCurrentSeasonOK) GetPayload() *seasonpassclientmodels.SeasonSummary {
	return o.Payload
}

func (o *GetCurrentSeasonOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(seasonpassclientmodels.SeasonSummary)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCurrentSeasonBadRequest creates a GetCurrentSeasonBadRequest with default headers values
func NewGetCurrentSeasonBadRequest() *GetCurrentSeasonBadRequest {
	return &GetCurrentSeasonBadRequest{}
}

/*GetCurrentSeasonBadRequest handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20026</td><td>publisher namespace not allowed</td></tr></table>
*/
type GetCurrentSeasonBadRequest struct {
	Payload *seasonpassclientmodels.ErrorEntity
}

func (o *GetCurrentSeasonBadRequest) Error() string {
	return fmt.Sprintf("[GET /admin/namespaces/{namespace}/seasons/current][%d] getCurrentSeasonBadRequest  %+v", 400, o.Payload)
}

func (o *GetCurrentSeasonBadRequest) GetPayload() *seasonpassclientmodels.ErrorEntity {
	return o.Payload
}

func (o *GetCurrentSeasonBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(seasonpassclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCurrentSeasonNotFound creates a GetCurrentSeasonNotFound with default headers values
func NewGetCurrentSeasonNotFound() *GetCurrentSeasonNotFound {
	return &GetCurrentSeasonNotFound{}
}

/*GetCurrentSeasonNotFound handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>49147</td><td>Published season does not exist</td></tr></table>
*/
type GetCurrentSeasonNotFound struct {
	Payload *seasonpassclientmodels.ErrorEntity
}

func (o *GetCurrentSeasonNotFound) Error() string {
	return fmt.Sprintf("[GET /admin/namespaces/{namespace}/seasons/current][%d] getCurrentSeasonNotFound  %+v", 404, o.Payload)
}

func (o *GetCurrentSeasonNotFound) GetPayload() *seasonpassclientmodels.ErrorEntity {
	return o.Payload
}

func (o *GetCurrentSeasonNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(seasonpassclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
