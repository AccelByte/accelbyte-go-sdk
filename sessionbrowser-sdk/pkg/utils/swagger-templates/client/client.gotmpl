// Code generated by go-swagger; DO NOT EDIT.


{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package {{ .Name }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  "fmt"
  "io"
  "net/http"

  "github.com/go-openapi/errors"
  "github.com/go-openapi/runtime"
  "github.com/go-openapi/strfmt"
  "github.com/go-openapi/swag"
  "github.com/go-openapi/validate"

  {{ imports .DefaultImports }}
  {{ imports .Imports }}
)

// New creates a new {{ humanize .Name }} API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
  return &Client{transport: transport, formats: formats}
}

/*
Client {{ if .Summary }}{{ .Summary }}{{ if .Description }}

{{ blockcomment .Description }}{{ end }}{{ else if .Description}}{{ blockcomment .Description }}{{ else }}for {{ humanize .Name }} API{{ end }}
*/
type Client struct {
  transport runtime.ClientTransport
  formats strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	{{ range .Operations -}}
	{{ pascalize .Name }}(params *{{ pascalize .Name }}Params{{ if .Authorized }}, authInfo runtime.ClientAuthInfoWriter{{end}}{{ if .HasStreamingResponse }}, writer io.Writer{{ end }}) ({{ range .Responses }}*{{ pascalize .Name }}, {{ end }}error)
    {{ pascalize .Name }}Short(params *{{ pascalize .Name }}Params{{ if .Authorized }}, authInfo runtime.ClientAuthInfoWriter{{end}}{{ if .HasStreamingResponse }}, writer io.Writer{{ end }}) (*{{ pascalize (index .Responses 0).Name }}, error)
	{{ end }}

	SetTransport(transport runtime.ClientTransport)
}

{{ range .Operations }}
/*
  {{ pascalize .Name }} {{ if .Summary }}{{ pluralizeFirstWord (humanize .Summary) }}{{ if .Description }}

  {{ blockcomment .Description }}{{ end }}{{ else if .Description}}{{ blockcomment .Description }}{{ else }}{{ humanize .Name }} API{{ end }}
*/
func (a *Client) {{ pascalize .Name }}(params *{{ pascalize .Name }}Params{{ if .Authorized }}, authInfo runtime.ClientAuthInfoWriter{{end}}{{ if .HasStreamingResponse }}, writer io.Writer{{ end }}) ({{ range .Responses }}*{{ pascalize .Name }}, {{ end }}error) {
  // TODO: Validate the params before sending
  if params == nil {
    params = New{{ pascalize .Name }}Params()
  }

  if params.Context == nil {
    params.Context = context.Background()
  }

  {{ $length := len .Responses }}
  result, err := a.transport.Submit(&runtime.ClientOperation{
    ID: {{ printf "%q" .Name }},
    Method: {{ printf "%q" .Method }},
    PathPattern: {{ printf "%q" .Path }},
    ProducesMediaTypes: {{ printf "%#v" .ProducesMediaTypes }},
    ConsumesMediaTypes: {{ printf "%#v" .ConsumesMediaTypes }},
    Schemes: {{ printf "%#v" .Schemes }},
    Params: params,
    Reader: &{{ pascalize .Name }}Reader{formats: a.formats{{ if .HasStreamingResponse }}, writer: writer{{ end }}},{{ if .Authorized }}
    AuthInfo: authInfo,{{ end}}
    Context: params.Context,
    Client: params.HTTPClient,
  })
  if err != nil {
    return {{ padSurround "nil" "nil" 0 $length }}, err
  }

  switch v := result.(type) {
  {{ range $i, $v := .Responses }}
  case *{{ pascalize .Name }}:
    return {{ padSurround "v" "nil" $i $length }}, nil
  {{ end }}
  default:
    return {{ padSurround "nil" "nil" 0 $length }}, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
  }
}

func (a *Client) {{ pascalize .Name }}Short (params *{{ pascalize .Name }}Params{{ if .Authorized }}, authInfo runtime.ClientAuthInfoWriter{{end}}{{ if .HasStreamingResponse }}, writer io.Writer{{ end }}) (*{{ pascalize (index .Responses 0).Name }}, error) {
  // TODO: Validate the params before sending
  if params == nil {
    params = New{{ pascalize .Name }}Params()
  }

  if params.Context == nil {
    params.Context = context.Background()
  }

  {{ $length := len .SuccessResponses }}
  result, err := a.transport.Submit(&runtime.ClientOperation{
    ID: {{ printf "%q" .Name }},
    Method: {{ printf "%q" .Method }},
    PathPattern: {{ printf "%q" .Path }},
    ProducesMediaTypes: {{ printf "%#v" .ProducesMediaTypes }},
    ConsumesMediaTypes: {{ printf "%#v" .ConsumesMediaTypes }},
    Schemes: {{ printf "%#v" .Schemes }},
    Params: params,
    Reader: &{{ pascalize .Name }}Reader{formats: a.formats{{ if .HasStreamingResponse }}, writer: writer{{ end }}},{{ if .Authorized }}
    AuthInfo: authInfo,{{ end}}
    Context: params.Context,
    Client: params.HTTPClient,
  })
  if err != nil {
    return {{ padSurround "nil" "nil" 0 $length }}, err
  }

  switch v := result.(type) {
  {{ range $i, $v := .Responses }}
  case *{{ pascalize .Name }}:
    {{ if .IsSuccess -}}
      return {{ padSurround "v" "nil" $i $length }}, nil
    {{- else -}}
      return {{ padSurround "nil" "nil" 0 $length }}, v
    {{- end -}}
  {{- end }}

  default:
    return {{ padSurround "nil" "nil" 0 $length }}, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
  }
}

{{- end }}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
  a.transport = transport
}