// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package misc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/basic-sdk/pkg/basicclientmodels"
)

// GetCountryGroupsReader is a Reader for the GetCountryGroups structure.
type GetCountryGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCountryGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCountryGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCountryGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetCountryGroupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetCountryGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetCountryGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /basic/v1/admin/namespaces/{namespace}/misc/countrygroups returns an error %d: %s", response.Code(), string(data))
	}
}

// NewGetCountryGroupsOK creates a GetCountryGroupsOK with default headers values
func NewGetCountryGroupsOK() *GetCountryGroupsOK {
	return &GetCountryGroupsOK{}
}

/*GetCountryGroupsOK handles this case with default header values.

  successful operation
*/
type GetCountryGroupsOK struct {
	Payload []*basicclientmodels.RetrieveCountryGroupResponse
}

func (o *GetCountryGroupsOK) Error() string {
	return fmt.Sprintf("[GET /basic/v1/admin/namespaces/{namespace}/misc/countrygroups][%d] getCountryGroupsOK  %+v", 200, o.Payload)
}

func (o *GetCountryGroupsOK) GetPayload() []*basicclientmodels.RetrieveCountryGroupResponse {
	return o.Payload
}

func (o *GetCountryGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCountryGroupsBadRequest creates a GetCountryGroupsBadRequest with default headers values
func NewGetCountryGroupsBadRequest() *GetCountryGroupsBadRequest {
	return &GetCountryGroupsBadRequest{}
}

/*GetCountryGroupsBadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type GetCountryGroupsBadRequest struct {
	Payload *basicclientmodels.ValidationErrorEntity
}

func (o *GetCountryGroupsBadRequest) Error() string {
	return fmt.Sprintf("[GET /basic/v1/admin/namespaces/{namespace}/misc/countrygroups][%d] getCountryGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *GetCountryGroupsBadRequest) GetPayload() *basicclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *GetCountryGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCountryGroupsUnauthorized creates a GetCountryGroupsUnauthorized with default headers values
func NewGetCountryGroupsUnauthorized() *GetCountryGroupsUnauthorized {
	return &GetCountryGroupsUnauthorized{}
}

/*GetCountryGroupsUnauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>
*/
type GetCountryGroupsUnauthorized struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *GetCountryGroupsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /basic/v1/admin/namespaces/{namespace}/misc/countrygroups][%d] getCountryGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCountryGroupsUnauthorized) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *GetCountryGroupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCountryGroupsForbidden creates a GetCountryGroupsForbidden with default headers values
func NewGetCountryGroupsForbidden() *GetCountryGroupsForbidden {
	return &GetCountryGroupsForbidden{}
}

/*GetCountryGroupsForbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>
*/
type GetCountryGroupsForbidden struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *GetCountryGroupsForbidden) Error() string {
	return fmt.Sprintf("[GET /basic/v1/admin/namespaces/{namespace}/misc/countrygroups][%d] getCountryGroupsForbidden  %+v", 403, o.Payload)
}

func (o *GetCountryGroupsForbidden) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *GetCountryGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCountryGroupsNotFound creates a GetCountryGroupsNotFound with default headers values
func NewGetCountryGroupsNotFound() *GetCountryGroupsNotFound {
	return &GetCountryGroupsNotFound{}
}

/*GetCountryGroupsNotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11233</td><td>Unable to {action}: Country group with code [{countryGroupCode}] is not found</td></tr></table>
*/
type GetCountryGroupsNotFound struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *GetCountryGroupsNotFound) Error() string {
	return fmt.Sprintf("[GET /basic/v1/admin/namespaces/{namespace}/misc/countrygroups][%d] getCountryGroupsNotFound  %+v", 404, o.Payload)
}

func (o *GetCountryGroupsNotFound) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *GetCountryGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
