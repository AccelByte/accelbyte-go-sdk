// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package third_party_credential

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// UpdateThirdPartyLoginPlatformCredentialV3Reader is a Reader for the UpdateThirdPartyLoginPlatformCredentialV3 structure.
type UpdateThirdPartyLoginPlatformCredentialV3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateThirdPartyLoginPlatformCredentialV3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateThirdPartyLoginPlatformCredentialV3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateThirdPartyLoginPlatformCredentialV3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateThirdPartyLoginPlatformCredentialV3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateThirdPartyLoginPlatformCredentialV3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdateThirdPartyLoginPlatformCredentialV3NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewUpdateThirdPartyLoginPlatformCredentialV3InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PATCH /iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/clients returns an error %d: %s", response.Code(), string(data))
	}
}

// NewUpdateThirdPartyLoginPlatformCredentialV3OK creates a UpdateThirdPartyLoginPlatformCredentialV3OK with default headers values
func NewUpdateThirdPartyLoginPlatformCredentialV3OK() *UpdateThirdPartyLoginPlatformCredentialV3OK {
	return &UpdateThirdPartyLoginPlatformCredentialV3OK{}
}

/*UpdateThirdPartyLoginPlatformCredentialV3OK handles this case with default header values.

  OK
*/
type UpdateThirdPartyLoginPlatformCredentialV3OK struct {
	Payload *iamclientmodels.ModelThirdPartyLoginPlatformCredentialResponse
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3OK) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/clients][%d] updateThirdPartyLoginPlatformCredentialV3OK  %+v", 200, o.Payload)
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3OK) GetPayload() *iamclientmodels.ModelThirdPartyLoginPlatformCredentialResponse {
	return o.Payload
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.ModelThirdPartyLoginPlatformCredentialResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateThirdPartyLoginPlatformCredentialV3BadRequest creates a UpdateThirdPartyLoginPlatformCredentialV3BadRequest with default headers values
func NewUpdateThirdPartyLoginPlatformCredentialV3BadRequest() *UpdateThirdPartyLoginPlatformCredentialV3BadRequest {
	return &UpdateThirdPartyLoginPlatformCredentialV3BadRequest{}
}

/*UpdateThirdPartyLoginPlatformCredentialV3BadRequest handles this case with default header values.

  Bad Request
*/
type UpdateThirdPartyLoginPlatformCredentialV3BadRequest struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3BadRequest) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/clients][%d] updateThirdPartyLoginPlatformCredentialV3BadRequest  %+v", 400, o.Payload)
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3BadRequest) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateThirdPartyLoginPlatformCredentialV3Unauthorized creates a UpdateThirdPartyLoginPlatformCredentialV3Unauthorized with default headers values
func NewUpdateThirdPartyLoginPlatformCredentialV3Unauthorized() *UpdateThirdPartyLoginPlatformCredentialV3Unauthorized {
	return &UpdateThirdPartyLoginPlatformCredentialV3Unauthorized{}
}

/*UpdateThirdPartyLoginPlatformCredentialV3Unauthorized handles this case with default header values.

  Unauthorized
*/
type UpdateThirdPartyLoginPlatformCredentialV3Unauthorized struct {
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3Unauthorized) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/clients][%d] updateThirdPartyLoginPlatformCredentialV3Unauthorized ", 401)
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateThirdPartyLoginPlatformCredentialV3Forbidden creates a UpdateThirdPartyLoginPlatformCredentialV3Forbidden with default headers values
func NewUpdateThirdPartyLoginPlatformCredentialV3Forbidden() *UpdateThirdPartyLoginPlatformCredentialV3Forbidden {
	return &UpdateThirdPartyLoginPlatformCredentialV3Forbidden{}
}

/*UpdateThirdPartyLoginPlatformCredentialV3Forbidden handles this case with default header values.

  Forbidden
*/
type UpdateThirdPartyLoginPlatformCredentialV3Forbidden struct {
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3Forbidden) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/clients][%d] updateThirdPartyLoginPlatformCredentialV3Forbidden ", 403)
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateThirdPartyLoginPlatformCredentialV3NotFound creates a UpdateThirdPartyLoginPlatformCredentialV3NotFound with default headers values
func NewUpdateThirdPartyLoginPlatformCredentialV3NotFound() *UpdateThirdPartyLoginPlatformCredentialV3NotFound {
	return &UpdateThirdPartyLoginPlatformCredentialV3NotFound{}
}

/*UpdateThirdPartyLoginPlatformCredentialV3NotFound handles this case with default header values.

  Third Party Credential Not Found
*/
type UpdateThirdPartyLoginPlatformCredentialV3NotFound struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3NotFound) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/clients][%d] updateThirdPartyLoginPlatformCredentialV3NotFound  %+v", 404, o.Payload)
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3NotFound) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateThirdPartyLoginPlatformCredentialV3InternalServerError creates a UpdateThirdPartyLoginPlatformCredentialV3InternalServerError with default headers values
func NewUpdateThirdPartyLoginPlatformCredentialV3InternalServerError() *UpdateThirdPartyLoginPlatformCredentialV3InternalServerError {
	return &UpdateThirdPartyLoginPlatformCredentialV3InternalServerError{}
}

/*UpdateThirdPartyLoginPlatformCredentialV3InternalServerError handles this case with default header values.

  Internal Server Error
*/
type UpdateThirdPartyLoginPlatformCredentialV3InternalServerError struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3InternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/clients][%d] updateThirdPartyLoginPlatformCredentialV3InternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3InternalServerError) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *UpdateThirdPartyLoginPlatformCredentialV3InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
