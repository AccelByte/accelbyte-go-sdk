// Code generated by go-swagger; DO NOT EDIT.

package iamclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountCreateTestUserRequestV4 account create test user request v4
//
// swagger:model account.createTestUserRequestV4
type AccountCreateTestUserRequestV4 struct {

	// accepted policies
	AcceptedPolicies []*LegalAcceptedPoliciesRequest `json:"acceptedPolicies"`

	// auth type
	// Required: true
	// Enum: [EMAILPASSWD]
	AuthType *string `json:"authType"`

	// country
	// Required: true
	Country *string `json:"country"`

	// date of birth
	// Required: true
	DateOfBirth *string `json:"dateOfBirth"`

	// display name
	// Required: true
	DisplayName *string `json:"displayName"`

	// email address
	// Required: true
	EmailAddress *string `json:"emailAddress"`

	// password
	// Required: true
	Password *string `json:"password"`

	// password m d5 sum
	// Required: true
	PasswordMD5Sum *string `json:"passwordMD5Sum"`

	// username
	// Required: true
	Username *string `json:"username"`

	// verified
	// Required: true
	Verified *bool `json:"verified"`
}

// Validate validates this account create test user request v4
func (m *AccountCreateTestUserRequestV4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcceptedPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordMD5Sum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerified(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountCreateTestUserRequestV4) validateAcceptedPolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.AcceptedPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.AcceptedPolicies); i++ {
		if swag.IsZero(m.AcceptedPolicies[i]) { // not required
			continue
		}

		if m.AcceptedPolicies[i] != nil {
			if err := m.AcceptedPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acceptedPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var accountCreateTestUserRequestV4TypeAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EMAILPASSWD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountCreateTestUserRequestV4TypeAuthTypePropEnum = append(accountCreateTestUserRequestV4TypeAuthTypePropEnum, v)
	}
}

const (

	// AccountCreateTestUserRequestV4AuthTypeEMAILPASSWD captures enum value "EMAILPASSWD"
	AccountCreateTestUserRequestV4AuthTypeEMAILPASSWD string = "EMAILPASSWD"
)

// prop value enum
func (m *AccountCreateTestUserRequestV4) validateAuthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accountCreateTestUserRequestV4TypeAuthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccountCreateTestUserRequestV4) validateAuthType(formats strfmt.Registry) error {

	if err := validate.Required("authType", "body", m.AuthType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAuthTypeEnum("authType", "body", *m.AuthType); err != nil {
		return err
	}

	return nil
}

func (m *AccountCreateTestUserRequestV4) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *AccountCreateTestUserRequestV4) validateDateOfBirth(formats strfmt.Registry) error {

	if err := validate.Required("dateOfBirth", "body", m.DateOfBirth); err != nil {
		return err
	}

	return nil
}

func (m *AccountCreateTestUserRequestV4) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *AccountCreateTestUserRequestV4) validateEmailAddress(formats strfmt.Registry) error {

	if err := validate.Required("emailAddress", "body", m.EmailAddress); err != nil {
		return err
	}

	return nil
}

func (m *AccountCreateTestUserRequestV4) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *AccountCreateTestUserRequestV4) validatePasswordMD5Sum(formats strfmt.Registry) error {

	if err := validate.Required("passwordMD5Sum", "body", m.PasswordMD5Sum); err != nil {
		return err
	}

	return nil
}

func (m *AccountCreateTestUserRequestV4) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

func (m *AccountCreateTestUserRequestV4) validateVerified(formats strfmt.Registry) error {

	if err := validate.Required("verified", "body", m.Verified); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountCreateTestUserRequestV4) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountCreateTestUserRequestV4) UnmarshalBinary(b []byte) error {
	var res AccountCreateTestUserRequestV4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
