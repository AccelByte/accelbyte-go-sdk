// Code generated by go-swagger; DO NOT EDIT.

package wallet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclientmodels"
)

// CheckTransactionCreditLimitReader is a Reader for the CheckTransactionCreditLimit structure.
type CheckTransactionCreditLimitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckTransactionCreditLimitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewCheckTransactionCreditLimitNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckTransactionCreditLimitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewCheckTransactionCreditLimitConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewCheckTransactionCreditLimitUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/checkTransactionCreditLimit returns an error %d: %s", response.Code(), string(data))
	}
}

// NewCheckTransactionCreditLimitNoContent creates a CheckTransactionCreditLimitNoContent with default headers values
func NewCheckTransactionCreditLimitNoContent() *CheckTransactionCreditLimitNoContent {
	return &CheckTransactionCreditLimitNoContent{}
}

/*CheckTransactionCreditLimitNoContent handles this case with default header values.

  check successfully and not limited
*/
type CheckTransactionCreditLimitNoContent struct {
}

func (o *CheckTransactionCreditLimitNoContent) Error() string {
	return fmt.Sprintf("[POST /admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/checkTransactionCreditLimit][%d] checkTransactionCreditLimitNoContent ", 204)
}

func (o *CheckTransactionCreditLimitNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCheckTransactionCreditLimitBadRequest creates a CheckTransactionCreditLimitBadRequest with default headers values
func NewCheckTransactionCreditLimitBadRequest() *CheckTransactionCreditLimitBadRequest {
	return &CheckTransactionCreditLimitBadRequest{}
}

/*CheckTransactionCreditLimitBadRequest handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35121</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per day</td></tr><tr><td>35122</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per transaction</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35125</td><td>Balance exceed max balance [{maxAmount}]</td></tr></table>
*/
type CheckTransactionCreditLimitBadRequest struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *CheckTransactionCreditLimitBadRequest) Error() string {
	return fmt.Sprintf("[POST /admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/checkTransactionCreditLimit][%d] checkTransactionCreditLimitBadRequest  %+v", 400, o.Payload)
}

func (o *CheckTransactionCreditLimitBadRequest) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *CheckTransactionCreditLimitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckTransactionCreditLimitConflict creates a CheckTransactionCreditLimitConflict with default headers values
func NewCheckTransactionCreditLimitConflict() *CheckTransactionCreditLimitConflict {
	return &CheckTransactionCreditLimitConflict{}
}

/*CheckTransactionCreditLimitConflict handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>
*/
type CheckTransactionCreditLimitConflict struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *CheckTransactionCreditLimitConflict) Error() string {
	return fmt.Sprintf("[POST /admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/checkTransactionCreditLimit][%d] checkTransactionCreditLimitConflict  %+v", 409, o.Payload)
}

func (o *CheckTransactionCreditLimitConflict) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *CheckTransactionCreditLimitConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckTransactionCreditLimitUnprocessableEntity creates a CheckTransactionCreditLimitUnprocessableEntity with default headers values
func NewCheckTransactionCreditLimitUnprocessableEntity() *CheckTransactionCreditLimitUnprocessableEntity {
	return &CheckTransactionCreditLimitUnprocessableEntity{}
}

/*CheckTransactionCreditLimitUnprocessableEntity handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type CheckTransactionCreditLimitUnprocessableEntity struct {
	Payload *platformclientmodels.ValidationErrorEntity
}

func (o *CheckTransactionCreditLimitUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/checkTransactionCreditLimit][%d] checkTransactionCreditLimitUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CheckTransactionCreditLimitUnprocessableEntity) GetPayload() *platformclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *CheckTransactionCreditLimitUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
