// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/dsmc-sdk/pkg/dsmcclientmodels"
)

// CountSessionReader is a Reader for the CountSession structure.
type CountSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CountSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCountSessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCountSessionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCountSessionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCountSessionOK creates a CountSessionOK with default headers values
func NewCountSessionOK() *CountSessionOK {
	return &CountSessionOK{}
}

/*CountSessionOK handles this case with default header values.

sessions listed
*/
type CountSessionOK struct {
	Payload *dsmcclientmodels.ModelsCountSessionResponse
}

func (o *CountSessionOK) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/sessions/count][%d] countSessionOK  %+v", 200, o.Payload)
}

func (o *CountSessionOK) GetPayload() *dsmcclientmodels.ModelsCountSessionResponse {
	return o.Payload
}

func (o *CountSessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ModelsCountSessionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCountSessionUnauthorized creates a CountSessionUnauthorized with default headers values
func NewCountSessionUnauthorized() *CountSessionUnauthorized {
	return &CountSessionUnauthorized{}
}

/*CountSessionUnauthorized handles this case with default header values.

Unauthorized
*/
type CountSessionUnauthorized struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *CountSessionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/sessions/count][%d] countSessionUnauthorized  %+v", 401, o.Payload)
}

func (o *CountSessionUnauthorized) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *CountSessionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCountSessionInternalServerError creates a CountSessionInternalServerError with default headers values
func NewCountSessionInternalServerError() *CountSessionInternalServerError {
	return &CountSessionInternalServerError{}
}

/*CountSessionInternalServerError handles this case with default header values.

Internal Server Error
*/
type CountSessionInternalServerError struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *CountSessionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/sessions/count][%d] countSessionInternalServerError  %+v", 500, o.Payload)
}

func (o *CountSessionInternalServerError) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *CountSessionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
