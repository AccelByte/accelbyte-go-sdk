// Code generated by go-swagger; DO NOT EDIT.

package image_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/dsmc-sdk/pkg/dsmcclientmodels"
)

// ExportImagesReader is a Reader for the ExportImages structure.
type ExportImagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportImagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportImagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewExportImagesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewExportImagesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewExportImagesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewExportImagesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /dsmcontroller/admin/namespaces/{namespace}/images/export returns an error %d: %s", response.Code(), string(data))
	}
}

// NewExportImagesOK creates a ExportImagesOK with default headers values
func NewExportImagesOK() *ExportImagesOK {
	return &ExportImagesOK{}
}

/*ExportImagesOK handles this case with default header values.

  images exported
*/
type ExportImagesOK struct {
	Payload []*dsmcclientmodels.ModelsImageRecord
}

func (o *ExportImagesOK) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/images/export][%d] exportImagesOK  %+v", 200, o.Payload)
}

func (o *ExportImagesOK) GetPayload() []*dsmcclientmodels.ModelsImageRecord {
	return o.Payload
}

func (o *ExportImagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportImagesUnauthorized creates a ExportImagesUnauthorized with default headers values
func NewExportImagesUnauthorized() *ExportImagesUnauthorized {
	return &ExportImagesUnauthorized{}
}

/*ExportImagesUnauthorized handles this case with default header values.

  unauthorized access
*/
type ExportImagesUnauthorized struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *ExportImagesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/images/export][%d] exportImagesUnauthorized  %+v", 401, o.Payload)
}

func (o *ExportImagesUnauthorized) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *ExportImagesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportImagesForbidden creates a ExportImagesForbidden with default headers values
func NewExportImagesForbidden() *ExportImagesForbidden {
	return &ExportImagesForbidden{}
}

/*ExportImagesForbidden handles this case with default header values.

  forbidden access
*/
type ExportImagesForbidden struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *ExportImagesForbidden) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/images/export][%d] exportImagesForbidden  %+v", 403, o.Payload)
}

func (o *ExportImagesForbidden) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *ExportImagesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportImagesNotFound creates a ExportImagesNotFound with default headers values
func NewExportImagesNotFound() *ExportImagesNotFound {
	return &ExportImagesNotFound{}
}

/*ExportImagesNotFound handles this case with default header values.

  images not found
*/
type ExportImagesNotFound struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *ExportImagesNotFound) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/images/export][%d] exportImagesNotFound  %+v", 404, o.Payload)
}

func (o *ExportImagesNotFound) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *ExportImagesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportImagesInternalServerError creates a ExportImagesInternalServerError with default headers values
func NewExportImagesInternalServerError() *ExportImagesInternalServerError {
	return &ExportImagesInternalServerError{}
}

/*ExportImagesInternalServerError handles this case with default header values.

  Internal Server Error
*/
type ExportImagesInternalServerError struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *ExportImagesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/images/export][%d] exportImagesInternalServerError  %+v", 500, o.Payload)
}

func (o *ExportImagesInternalServerError) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *ExportImagesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
