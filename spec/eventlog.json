{
  "host": "demo.accelbyte.io",
  "info": {
    "description": "Justice Event Log Service",
    "title": "justice-event-log-service",
    "version": ""
  },
  "schemes": [
    "https"
  ],
  "externalDocs": {
    "description": "API Docs",
    "url": "https://stage.accelbyte.io/event/apidocs"
  },
  "securityDefinitions": {
    "HasPermission": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "ADMIN:NAMESPACE:{namespace}:EVENT [CREATE]": "ADMIN:NAMESPACE:{namespace}:EVENT [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:EVENT [DELETE]": "ADMIN:NAMESPACE:{namespace}:EVENT [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:EVENT [READ]": "ADMIN:NAMESPACE:{namespace}:EVENT [READ]",
        "ADMIN:NAMESPACE:{namespace}:EVENT [UPDATE]": "ADMIN:NAMESPACE:{namespace}:EVENT [UPDATE]",
        "NAMESPACE:{namespace}:EVENT [CREATE]": "NAMESPACE:{namespace}:EVENT [CREATE]",
        "NAMESPACE:{namespace}:EVENT [UPDATE]": "NAMESPACE:{namespace}:EVENT [UPDATE]"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "HasScope": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "analytics": "analytics"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "paths": {
    "/event/descriptions/agentType": {
      "get": {
        "deprecated": true,
        "operationId": "AgentTypeDescriptionHandler",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MultipleAgentType"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get list of agent type and the descriptions",
        "tags": [
          "Event Descriptions"
        ]
      }
    },
    "/event/descriptions/agentType/listByAgentTypes": {
      "get": {
        "deprecated": true,
        "operationId": "SpecificAgentTypeDescriptionHandler",
        "parameters": [
          {
            "description": "Comma separated value of agent types",
            "in": "query",
            "name": "agentTypes",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MultipleAgentType"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get specific list of agent type and the descriptions by comma separated value of agent types",
        "tags": [
          "Event Descriptions"
        ]
      }
    },
    "/event/descriptions/eventId": {
      "get": {
        "deprecated": true,
        "operationId": "EventIDDescriptionHandler",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MultipleEventID"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get list of eventID and the descriptions",
        "tags": [
          "Event Descriptions"
        ]
      }
    },
    "/event/descriptions/eventId/listByEventIds": {
      "get": {
        "deprecated": true,
        "operationId": "SpecificEventIDDescriptionHandler",
        "parameters": [
          {
            "description": "Comma separated value of eventIDs",
            "in": "query",
            "name": "eventIds",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MultipleEventID"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get specific list of eventID and the descriptions by comma separated value of eventIDs",
        "tags": [
          "Event Descriptions"
        ]
      }
    },
    "/event/descriptions/eventLevel": {
      "get": {
        "deprecated": true,
        "operationId": "EventLevelDescriptionHandler",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MultipleEventLevel"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get list of event level and the descriptions",
        "tags": [
          "Event Descriptions"
        ]
      }
    },
    "/event/descriptions/eventLevel/listByEventLevels": {
      "get": {
        "deprecated": true,
        "operationId": "SpecificEventLevelDescriptionHandler",
        "parameters": [
          {
            "description": "Comma separated value of event levels",
            "in": "query",
            "name": "eventLevels",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MultipleEventLevel"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get specific list of event level and the descriptions by comma separated value of event levels",
        "tags": [
          "Event Descriptions"
        ]
      }
    },
    "/event/descriptions/eventType": {
      "get": {
        "deprecated": true,
        "operationId": "EventTypeDescriptionHandler",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MultipleEventType"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get list of event type and the descriptions",
        "tags": [
          "Event Descriptions"
        ]
      }
    },
    "/event/descriptions/eventType/listByEventTypes": {
      "get": {
        "deprecated": true,
        "operationId": "SpecificEventTypeDescriptionHandler",
        "parameters": [
          {
            "description": "Comma separated value of eventIDs",
            "in": "query",
            "name": "eventTypes",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MultipleEventType"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get specific list of event type and the descriptions by comma separated value of event types",
        "tags": [
          "Event Descriptions"
        ]
      }
    },
    "/event/descriptions/ux": {
      "get": {
        "deprecated": true,
        "operationId": "UXNameDescriptionHandler",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MultipleUX"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get list of ux name and the descriptions",
        "tags": [
          "Event Descriptions"
        ]
      }
    },
    "/event/descriptions/ux/listByUx": {
      "get": {
        "deprecated": true,
        "operationId": "SpecificUXDescriptionHandler",
        "parameters": [
          {
            "description": "Comma separated value of UX",
            "in": "query",
            "name": "ux",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MultipleUX"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get specific list of UX and the descriptions by comma separated value of UX",
        "tags": [
          "Event Descriptions"
        ]
      }
    },
    "/event/namespaces/{namespace}": {
      "get": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;NAMESPACE:{namespace}:EVENT [UPDATE]\u0026lt;/code\u0026gt; and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "GetEventByNamespaceHandler",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ending date. e.g. 2015-03-20T12:27:06Z",
            "in": "query",
            "name": "endDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Number of result in a page",
            "in": "query",
            "name": "pageSize",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Starting date. e.g. 2015-03-20T12:27:06Z",
            "in": "query",
            "name": "startDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Offset to query",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:EVENT [UPDATE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Get events from all users in a namespace",
        "tags": [
          "Event"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;NAMESPACE:{namespace}:EVENT [CREATE]\u0026lt;/code\u0026gt;and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "PostEventHandler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.Event"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:EVENT [CREATE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Post an activity log",
        "tags": [
          "Event"
        ]
      }
    },
    "/event/namespaces/{namespace}/eventId/{eventId}": {
      "get": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;NAMESPACE:{namespace}:EVENT [UPDATE]\u0026lt;/code\u0026gt; and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "GetEventByEventIDHandler",
        "parameters": [
          {
            "description": "Event's ID",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "number"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ending date. e.g. 2015-03-20T12:27:06.351Z",
            "in": "query",
            "name": "endDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Number of result in a page",
            "in": "query",
            "name": "pageSize",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Starting date. e.g. 2015-03-20T12:27:06.351Z",
            "in": "query",
            "name": "startDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Offset to query",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:EVENT [UPDATE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Get events from all users in a namespace with specific eventID",
        "tags": [
          "Event"
        ]
      }
    },
    "/event/namespaces/{namespace}/eventType/{eventType}": {
      "get": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;NAMESPACE:{namespace}:EVENT [UPDATE]\u0026lt;/code\u0026gt;and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "GetEventByEventTypeHandler",
        "parameters": [
          {
            "description": "Event's type",
            "in": "path",
            "name": "eventType",
            "required": true,
            "type": "number"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ending date. e.g. 2015-03-20T12:27:06.351Z",
            "in": "query",
            "name": "endDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Number of result in a page",
            "in": "query",
            "name": "pageSize",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Starting date. e.g. 2015-03-20T12:27:06.351Z",
            "in": "query",
            "name": "startDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Offset to query",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:EVENT [UPDATE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Get events from all users in a namespace with specific eventType",
        "tags": [
          "Event"
        ]
      }
    },
    "/event/namespaces/{namespace}/eventType/{eventType}/eventId/{eventId}": {
      "get": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;NAMESPACE:{namespace}:EVENT [UPDATE]\u0026lt;/code\u0026gt;and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "GetEventByEventTypeAndEventIDHandler",
        "parameters": [
          {
            "description": "Event's ID",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "number"
          },
          {
            "description": "Event's type",
            "in": "path",
            "name": "eventType",
            "required": true,
            "type": "number"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ending date. e.g. 2015-03-20T12:27:06.351Z",
            "in": "query",
            "name": "endDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Number of result in a page",
            "in": "query",
            "name": "pageSize",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Starting date. e.g. 2015-03-20T12:27:06.351Z",
            "in": "query",
            "name": "startDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Offset to query",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:EVENT [UPDATE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Get events from all users in a namespace with specific eventID and eventType",
        "tags": [
          "Event"
        ]
      }
    },
    "/event/namespaces/{namespace}/users/{userId}": {
      "get": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;NAMESPACE:{namespace}:EVENT [UPDATE]\u0026lt;/code\u0026gt; and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "GetEventByUserIDHandler",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ending date. e.g. 2015-03-20T12:27:06.351Z",
            "in": "query",
            "name": "endDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Number of result in a page",
            "in": "query",
            "name": "pageSize",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Starting date. e.g. 2015-03-20T12:27:06.351Z",
            "in": "query",
            "name": "startDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Offset to query",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:EVENT [UPDATE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Get events from specific user",
        "tags": [
          "Event"
        ]
      }
    },
    "/event/namespaces/{namespace}/users/{userId}/activities": {
      "delete": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;NAMESPACE:{namespace}:EVENT [UPDATE]\u0026lt;/code\u0026gt;and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "DeleteUserActivitiesHandler",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:EVENT [UPDATE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete all user's activities",
        "tags": [
          "User Information"
        ]
      },
      "get": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;NAMESPACE:{namespace}:EVENT [UPDATE]\u0026lt;/code\u0026gt;and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "GetUserActivitiesHandler",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Number of result in a page",
            "in": "query",
            "name": "pageSize",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Offset to query",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:EVENT [UPDATE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Get all user's activities",
        "tags": [
          "User Information"
        ]
      }
    },
    "/event/namespaces/{namespace}/users/{userId}/eventId/{eventId}": {
      "get": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;NAMESPACE:{namespace}:EVENT [UPDATE]\u0026lt;/code\u0026gt; and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "GetEventByUserIDAndEventIDHandler",
        "parameters": [
          {
            "description": "Event's ID",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "number"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ending date. e.g. 2015-03-20T12:27:06.351Z",
            "in": "query",
            "name": "endDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Number of result in a page",
            "in": "query",
            "name": "pageSize",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Starting date. e.g. 2015-03-20T12:27:06.351Z",
            "in": "query",
            "name": "startDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Offset to query",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:EVENT [UPDATE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Get events from specific user with specific eventID",
        "tags": [
          "Event"
        ]
      }
    },
    "/event/namespaces/{namespace}/users/{userId}/eventType/{eventType}": {
      "get": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;NAMESPACE:{namespace}:EVENT [UPDATE]and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "GetEventByUserIDAndEventTypeHandler",
        "parameters": [
          {
            "description": "Event's type",
            "in": "path",
            "name": "eventType",
            "required": true,
            "type": "number"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ending date. e.g. 2015-03-20T12:27:06.351Z",
            "in": "query",
            "name": "endDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Number of result in a page",
            "in": "query",
            "name": "pageSize",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Starting date. e.g. 2015-03-20T12:27:06.351Z",
            "in": "query",
            "name": "startDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Offset to query",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:EVENT [UPDATE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Get events from specific user with specific eventType",
        "tags": [
          "Event"
        ]
      }
    },
    "/event/namespaces/{namespace}/users/{userId}/eventType/{eventType}/eventId/{eventId}": {
      "get": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;NAMESPACE:{namespace}:EVENT [UPDATE]\u0026lt;/code\u0026gt;and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "GetEventByUserEventIDAndEventTypeHandler",
        "parameters": [
          {
            "description": "Event's ID",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "number"
          },
          {
            "description": "Event's type",
            "in": "path",
            "name": "eventType",
            "required": true,
            "type": "number"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ending date. e.g. 2015-03-20T12:27:06.351Z",
            "in": "query",
            "name": "endDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Number of result in a page",
            "in": "query",
            "name": "pageSize",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Starting date. e.g. 2015-03-20T12:27:06.351Z",
            "in": "query",
            "name": "startDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Offset to query",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:EVENT [UPDATE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Get events from specific user with specific eventID and eventType",
        "tags": [
          "Event"
        ]
      }
    },
    "/event/namespaces/{namespace}/users/{userId}/lastActivityTime": {
      "get": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;NAMESPACE:{namespace}:EVENT [UPDATE]\u0026lt;/code\u0026gt;and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "LastUserActivityTimeHandler",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UserLastActivity"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:EVENT [UPDATE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Get last activity time of a user in a namespace",
        "tags": [
          "User Information"
        ]
      }
    },
    "/event/registry/eventIds": {
      "get": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:EVENT [READ]\u0026lt;/code\u0026gt;and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "GetRegisteredEventsHandler",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventRegistry"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:EVENT [READ]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Get registered events in the Event Registry",
        "tags": [
          "Event Registry"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:EVENT [CREATE]\u0026lt;/code\u0026gt;and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "RegisterEventHandler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.EventRegistry"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:EVENT [CREATE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Register an eventID to the Event Registry",
        "tags": [
          "Event Registry"
        ]
      }
    },
    "/event/registry/eventIds/{eventId}": {
      "delete": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:EVENT [DELETE]\u0026lt;/code\u0026gt;and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "UnregisterEventIDHandler",
        "parameters": [
          {
            "description": "Event's ID",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:EVENT [DELETE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Unregister eventID from the Event Registry",
        "tags": [
          "Event Registry"
        ]
      },
      "get": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:EVENT [READ]\u0026lt;/code\u0026gt;and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "GetRegisteredEventIDHandler",
        "parameters": [
          {
            "description": "Event's ID",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventRegistry"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:EVENT [READ]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Get registered eventID data from the Event Registry",
        "tags": [
          "Event Registry"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:EVENT [UPDATE]\u0026lt;/code\u0026gt;and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "UpdateEventRegistryHandler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.EventRegistry"
            }
          },
          {
            "description": "Event's ID",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:EVENT [UPDATE]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Update an eventID data in the Event Registry",
        "tags": [
          "Event Registry"
        ]
      }
    },
    "/event/registry/eventTypes/{eventType}": {
      "get": {
        "deprecated": true,
        "description": "Required permission \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:EVENT [READ]\u0026lt;/code\u0026gt;and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "GetRegisteredEventsByEventTypeHandler",
        "parameters": [
          {
            "description": "Event's Type",
            "in": "path",
            "name": "eventType",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventRegistry"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:EVENT [READ]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Get registered eventID data from the Event Registry based on the event type",
        "tags": [
          "Event Registry"
        ]
      }
    },
    "/event/v2/admin/namespaces/{namespace}/query": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint is using POST which is somewhat unfamiliar, \n\t\t\tbut it\u0026#39;s logical that we have to send/post a filter (search term) in order to get the data.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint will not return anything if you give it an empty filters in the request body. \u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:EVENT [READ]\u0026lt;/code\u0026gt; and scope \u0026lt;code\u0026gt;\u0026#34;+scope+\u0026#34;\u0026lt;/code\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "QueryEventStreamHandler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.GenericQueryPayload"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ending date. e.g. 2015-03-20T12:27:06Z. Default : Current time in UTC",
            "in": "query",
            "name": "endDate",
            "type": "string"
          },
          {
            "description": "Offset to query. Default : 0",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "Number of result in a page. Default : 100. Max : 500",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "Starting date. e.g. 2015-03-20T12:27:06Z. Default : 1970-01-01T00:00:00Z",
            "in": "query",
            "name": "startDate",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventResponseV2"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "501": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:EVENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "A generic query to get a set of events based on the provided filters",
        "tags": [
          "Event V2"
        ]
      }
    },
    "/event/v2/admin/namespaces/{namespace}/users/{userId}/event": {
      "get": {
        "description": "Required permission \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:EVENT [READ]\u0026lt;/code\u0026gt;and scope \u0026lt;code\u0026gt;analytics\u0026lt;/code\u0026gt;",
        "operationId": "GetEventSpecificUserV2Handler",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ending date. e.g. 2015-03-20T12:27:06Z. Default : Current time in UTC",
            "in": "query",
            "name": "endDate",
            "type": "string"
          },
          {
            "description": "Event Name to filter",
            "in": "query",
            "name": "eventName",
            "type": "string"
          },
          {
            "description": "Offset to query. Default : 0",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "Number of result in a page. Default : 100. Max : 500",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "Starting date. e.g. 2015-03-20T12:27:06Z. Default : 1970-01-01T00:00:00Z",
            "in": "query",
            "name": "startDate",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventResponseV2"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "501": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:EVENT [READ]"
            ],
            "HasScope": [
              "analytics"
            ],
            "authorization": []
          }
        ],
        "summary": "Get events from a specific user",
        "tags": [
          "Event V2"
        ]
      }
    },
    "/event/v2/public/namespaces/{namespace}/users/{userId}/edithistory": {
      "get": {
        "description": "\u0026lt;p\u0026gt;Available Type: \u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;email\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;password\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;displayname\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;dateofbirth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;country\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;language\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Requires a valid user access token\u0026lt;/p\u0026gt;",
        "operationId": "GetPublicEditHistory",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ending date. e.g. 2015-03-20T12:27:06Z. Default : Current time in UTC",
            "in": "query",
            "name": "endDate",
            "type": "string"
          },
          {
            "description": "Offset to query. Default : 0",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "Number of result in a page. Default : 100. Max : 500",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "Starting date. e.g. 2015-03-20T12:27:06Z. Default : 1970-01-01T00:00:00Z",
            "in": "query",
            "name": "startDate",
            "type": "string"
          },
          {
            "description": "Edit History type to fetch",
            "in": "query",
            "name": "type",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventResponseV2"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "501": {
            "description": "Not Implemented"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get a user edit history based on the provided type",
        "tags": [
          "Event V2"
        ]
      }
    },
    "/event/v2/public/namespaces/{namespace}/users/{userId}/event": {
      "get": {
        "description": "\u0026lt;p\u0026gt;Requires valid user access token\u0026lt;/p\u0026gt;",
        "operationId": "GetUserEventsV2Public",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Ending date. e.g. 2015-03-20T12:27:06Z. Default : Current time in UTC",
            "in": "query",
            "name": "endDate",
            "type": "string"
          },
          {
            "description": "Event Name to filter",
            "in": "query",
            "name": "eventName",
            "type": "string"
          },
          {
            "description": "Offset to query. Default : 0",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "Number of result in a page. Default : 100. Max : 500",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "Starting date. e.g. 2015-03-20T12:27:06Z. Default : 1970-01-01T00:00:00Z",
            "in": "query",
            "name": "startDate",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.EventResponseV2"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "501": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get events from a specific user",
        "tags": [
          "Event V2"
        ]
      }
    }
  },
  "definitions": {
    "models.AgentType": {
      "properties": {
        "AgentType": {
          "format": "int32",
          "type": "integer"
        },
        "Description": {
          "type": "string"
        }
      },
      "required": [
        "AgentType",
        "Description"
      ]
    },
    "models.Event": {
      "properties": {
        "AgentType": {
          "format": "integer",
          "type": "integer"
        },
        "ClientID": {
          "type": "string"
        },
        "ComponentID": {
          "format": "integer",
          "type": "integer"
        },
        "EventID": {
          "format": "integer",
          "type": "integer"
        },
        "EventLevel": {
          "format": "integer",
          "type": "integer"
        },
        "EventType": {
          "format": "integer",
          "type": "integer"
        },
        "IPAddress": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "Realm": {
          "type": "string"
        },
        "TargetNamespace": {
          "type": "string"
        },
        "TargetUserID": {
          "type": "string"
        },
        "Time": {
          "type": "string"
        },
        "UX": {
          "format": "byte",
          "type": "integer"
        },
        "UserID": {
          "type": "string"
        }
      },
      "required": [
        "AgentType",
        "ClientID",
        "ComponentID",
        "EventID",
        "EventLevel",
        "EventType",
        "IPAddress",
        "Namespace",
        "Realm",
        "TargetNamespace",
        "TargetUserID",
        "Time",
        "UX",
        "UserID"
      ]
    },
    "models.EventID": {
      "properties": {
        "Description": {
          "type": "string"
        },
        "EventID": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "Description",
        "EventID"
      ]
    },
    "models.EventLevel": {
      "properties": {
        "Description": {
          "type": "string"
        },
        "EventLevel": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "Description",
        "EventLevel"
      ]
    },
    "models.EventRegistry": {
      "properties": {
        "EventID": {
          "format": "int32",
          "type": "integer"
        },
        "EventLevel": {
          "format": "int32",
          "type": "integer"
        },
        "EventType": {
          "format": "int32",
          "type": "integer"
        },
        "UX": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "EventID",
        "EventLevel",
        "EventType",
        "UX"
      ]
    },
    "models.EventResponse": {
      "properties": {
        "Data": {
          "items": {
            "$ref": "#/definitions/models.Event"
          },
          "type": "array"
        },
        "Pagination": {
          "$ref": "#/definitions/models.Pagination"
        }
      },
      "required": [
        "Data",
        "Pagination"
      ]
    },
    "models.EventResponseV2": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/models.EventV2"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/models.Paging"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "models.EventType": {
      "properties": {
        "Description": {
          "type": "string"
        },
        "EventType": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "Description",
        "EventType"
      ]
    },
    "models.EventV2": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "payload": {
          "type": "object"
        },
        "sessionId": {
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "traceId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "clientId",
        "id",
        "name",
        "namespace",
        "sessionId",
        "timestamp",
        "traceId",
        "userId",
        "version"
      ]
    },
    "models.GenericQueryPayload": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "eventName": {
          "type": "string"
        },
        "payloadQuery": {
          "type": "object"
        },
        "sessionId": {
          "type": "string"
        },
        "traceId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "clientId",
        "eventName",
        "payloadQuery",
        "sessionId",
        "traceId",
        "userId",
        "version"
      ]
    },
    "models.MultipleAgentType": {
      "properties": {
        "AgentTypes": {
          "items": {
            "$ref": "#/definitions/models.AgentType"
          },
          "type": "array"
        }
      },
      "required": [
        "AgentTypes"
      ]
    },
    "models.MultipleEventID": {
      "properties": {
        "EventIDs": {
          "items": {
            "$ref": "#/definitions/models.EventID"
          },
          "type": "array"
        }
      },
      "required": [
        "EventIDs"
      ]
    },
    "models.MultipleEventLevel": {
      "properties": {
        "EventLevel": {
          "items": {
            "$ref": "#/definitions/models.EventLevel"
          },
          "type": "array"
        }
      },
      "required": [
        "EventLevel"
      ]
    },
    "models.MultipleEventType": {
      "properties": {
        "EventType": {
          "items": {
            "$ref": "#/definitions/models.EventType"
          },
          "type": "array"
        }
      },
      "required": [
        "EventType"
      ]
    },
    "models.MultipleUX": {
      "properties": {
        "UX": {
          "items": {
            "$ref": "#/definitions/models.UX"
          },
          "type": "array"
        }
      },
      "required": [
        "UX"
      ]
    },
    "models.Pagination": {
      "properties": {
        "Next": {
          "type": "string"
        },
        "Previous": {
          "type": "string"
        }
      }
    },
    "models.Paging": {
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      }
    },
    "models.UX": {
      "properties": {
        "Description": {
          "type": "string"
        },
        "UX": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "Description",
        "UX"
      ]
    },
    "models.UserLastActivity": {
      "properties": {
        "LastActivityTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "Namespace": {
          "type": "string"
        },
        "UserID": {
          "type": "string"
        }
      },
      "required": [
        "LastActivityTime",
        "Namespace",
        "UserID"
      ]
    }
  },
  "x-docs": {
    "alias": "event",
    "host": "https://stage.accelbyte.io",
    "path": "/event/apidocs/api.json"
  },
  "x-version": {
    "buildDate": "2023-04-27T01:37:53+00:00",
    "gitHash": "89fe404cf31775652711a54b75bce82c16b5a232",
    "name": "justice-event-log-service",
    "realm": "staging",
    "version": "2.0.2",
    "version-roles-seeding": "0.0.3"
  }
}