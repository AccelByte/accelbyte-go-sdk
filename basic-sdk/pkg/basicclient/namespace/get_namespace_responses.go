// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/basic-sdk/pkg/basicclientmodels"
)

// GetNamespaceReader is a Reader for the GetNamespace structure.
type GetNamespaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNamespaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNamespaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNamespaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetNamespaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetNamespaceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetNamespaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /basic/v1/admin/namespaces/{namespace} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewGetNamespaceOK creates a GetNamespaceOK with default headers values
func NewGetNamespaceOK() *GetNamespaceOK {
	return &GetNamespaceOK{}
}

/*GetNamespaceOK handles this case with default header values.

  Successful operation
*/
type GetNamespaceOK struct {
	Payload *basicclientmodels.NamespaceInfo
}

func (o *GetNamespaceOK) Error() string {
	return fmt.Sprintf("[GET /basic/v1/admin/namespaces/{namespace}][%d] getNamespaceOK  %+v", 200, o.Payload)
}

func (o *GetNamespaceOK) GetPayload() *basicclientmodels.NamespaceInfo {
	return o.Payload
}

func (o *GetNamespaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.NamespaceInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNamespaceBadRequest creates a GetNamespaceBadRequest with default headers values
func NewGetNamespaceBadRequest() *GetNamespaceBadRequest {
	return &GetNamespaceBadRequest{}
}

/*GetNamespaceBadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type GetNamespaceBadRequest struct {
	Payload *basicclientmodels.ValidationErrorEntity
}

func (o *GetNamespaceBadRequest) Error() string {
	return fmt.Sprintf("[GET /basic/v1/admin/namespaces/{namespace}][%d] getNamespaceBadRequest  %+v", 400, o.Payload)
}

func (o *GetNamespaceBadRequest) GetPayload() *basicclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *GetNamespaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNamespaceUnauthorized creates a GetNamespaceUnauthorized with default headers values
func NewGetNamespaceUnauthorized() *GetNamespaceUnauthorized {
	return &GetNamespaceUnauthorized{}
}

/*GetNamespaceUnauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>
*/
type GetNamespaceUnauthorized struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *GetNamespaceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /basic/v1/admin/namespaces/{namespace}][%d] getNamespaceUnauthorized  %+v", 401, o.Payload)
}

func (o *GetNamespaceUnauthorized) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *GetNamespaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNamespaceForbidden creates a GetNamespaceForbidden with default headers values
func NewGetNamespaceForbidden() *GetNamespaceForbidden {
	return &GetNamespaceForbidden{}
}

/*GetNamespaceForbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>
*/
type GetNamespaceForbidden struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *GetNamespaceForbidden) Error() string {
	return fmt.Sprintf("[GET /basic/v1/admin/namespaces/{namespace}][%d] getNamespaceForbidden  %+v", 403, o.Payload)
}

func (o *GetNamespaceForbidden) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *GetNamespaceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNamespaceNotFound creates a GetNamespaceNotFound with default headers values
func NewGetNamespaceNotFound() *GetNamespaceNotFound {
	return &GetNamespaceNotFound{}
}

/*GetNamespaceNotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11337</td><td>Unable to {action}: Namespace not found</td></tr></table>
*/
type GetNamespaceNotFound struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *GetNamespaceNotFound) Error() string {
	return fmt.Sprintf("[GET /basic/v1/admin/namespaces/{namespace}][%d] getNamespaceNotFound  %+v", 404, o.Payload)
}

func (o *GetNamespaceNotFound) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *GetNamespaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
