// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package image_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/dsmc-sdk/pkg/dsmcclientmodels"
)

// GetImageLimitReader is a Reader for the GetImageLimit structure.
type GetImageLimitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetImageLimitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetImageLimitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetImageLimitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetImageLimitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetImageLimitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /dsmcontroller/admin/namespaces/{namespace}/images/limit returns an error %d: %s", response.Code(), string(data))
	}
}

// NewGetImageLimitOK creates a GetImageLimitOK with default headers values
func NewGetImageLimitOK() *GetImageLimitOK {
	return &GetImageLimitOK{}
}

/*GetImageLimitOK handles this case with default header values.

  ok
*/
type GetImageLimitOK struct {
	Payload *dsmcclientmodels.ModelsGetImageLimitResponse
}

func (o *GetImageLimitOK) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/images/limit][%d] getImageLimitOK  %+v", 200, o.ToString())
}

func (o *GetImageLimitOK) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *GetImageLimitOK) GetPayload() *dsmcclientmodels.ModelsGetImageLimitResponse {
	return o.Payload
}

func (o *GetImageLimitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ModelsGetImageLimitResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImageLimitBadRequest creates a GetImageLimitBadRequest with default headers values
func NewGetImageLimitBadRequest() *GetImageLimitBadRequest {
	return &GetImageLimitBadRequest{}
}

/*GetImageLimitBadRequest handles this case with default header values.

  malformed request
*/
type GetImageLimitBadRequest struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *GetImageLimitBadRequest) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/images/limit][%d] getImageLimitBadRequest  %+v", 400, o.ToString())
}

func (o *GetImageLimitBadRequest) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *GetImageLimitBadRequest) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *GetImageLimitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImageLimitUnauthorized creates a GetImageLimitUnauthorized with default headers values
func NewGetImageLimitUnauthorized() *GetImageLimitUnauthorized {
	return &GetImageLimitUnauthorized{}
}

/*GetImageLimitUnauthorized handles this case with default header values.

  Unauthorized
*/
type GetImageLimitUnauthorized struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *GetImageLimitUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/images/limit][%d] getImageLimitUnauthorized  %+v", 401, o.ToString())
}

func (o *GetImageLimitUnauthorized) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *GetImageLimitUnauthorized) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *GetImageLimitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImageLimitInternalServerError creates a GetImageLimitInternalServerError with default headers values
func NewGetImageLimitInternalServerError() *GetImageLimitInternalServerError {
	return &GetImageLimitInternalServerError{}
}

/*GetImageLimitInternalServerError handles this case with default header values.

  Internal Server Error
*/
type GetImageLimitInternalServerError struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *GetImageLimitInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/images/limit][%d] getImageLimitInternalServerError  %+v", 500, o.ToString())
}

func (o *GetImageLimitInternalServerError) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *GetImageLimitInternalServerError) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *GetImageLimitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
