// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentMerchantConfigInfo payment merchant config info
//
// swagger:model PaymentMerchantConfigInfo
type PaymentMerchantConfigInfo struct {

	// adyenConfig
	AdyenConfig *AdyenConfig `json:"adyenConfig,omitempty"`

	// adyenSandboxConfig
	AdyenSandboxConfig *AdyenConfig `json:"adyenSandboxConfig,omitempty"`

	// aliPayConfig
	AliPayConfig *AliPayConfig `json:"aliPayConfig,omitempty"`

	// aliPaySandboxConfig
	AliPaySandboxConfig *AliPayConfig `json:"aliPaySandboxConfig,omitempty"`

	// checkoutConfig
	CheckoutConfig *CheckoutConfig `json:"checkoutConfig,omitempty"`

	// checkoutSandboxConfig
	CheckoutSandboxConfig *CheckoutConfig `json:"checkoutSandboxConfig,omitempty"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt"`

	// id
	// Required: true
	ID *string `json:"id"`

	// payPalConfig
	PayPalConfig *PayPalConfig `json:"payPalConfig,omitempty"`

	// payPalSandboxConfig
	PayPalSandboxConfig *PayPalConfig `json:"payPalSandboxConfig,omitempty"`

	// stripeConfig
	StripeConfig *StripeConfig `json:"stripeConfig,omitempty"`

	// stripeSandboxConfig
	StripeSandboxConfig *StripeConfig `json:"stripeSandboxConfig,omitempty"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt"`

	// wxPayConfig
	WxPayConfig *WxPayConfigInfo `json:"wxPayConfig,omitempty"`

	// xsollaConfig
	XsollaConfig *XsollaConfig `json:"xsollaConfig,omitempty"`

	// xsollaPaywallConfig
	XsollaPaywallConfig *XsollaPaywallConfig `json:"xsollaPaywallConfig,omitempty"`
}

// Validate validates this payment merchant config info
func (m *PaymentMerchantConfigInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdyenConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdyenSandboxConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAliPayConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAliPaySandboxConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheckoutConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheckoutSandboxConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayPalConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayPalSandboxConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStripeConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStripeSandboxConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWxPayConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXsollaConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXsollaPaywallConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentMerchantConfigInfo) validateAdyenConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.AdyenConfig) { // not required
		return nil
	}

	if m.AdyenConfig != nil {
		if err := m.AdyenConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adyenConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validateAdyenSandboxConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.AdyenSandboxConfig) { // not required
		return nil
	}

	if m.AdyenSandboxConfig != nil {
		if err := m.AdyenSandboxConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adyenSandboxConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validateAliPayConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.AliPayConfig) { // not required
		return nil
	}

	if m.AliPayConfig != nil {
		if err := m.AliPayConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aliPayConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validateAliPaySandboxConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.AliPaySandboxConfig) { // not required
		return nil
	}

	if m.AliPaySandboxConfig != nil {
		if err := m.AliPaySandboxConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aliPaySandboxConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validateCheckoutConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.CheckoutConfig) { // not required
		return nil
	}

	if m.CheckoutConfig != nil {
		if err := m.CheckoutConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("checkoutConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validateCheckoutSandboxConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.CheckoutSandboxConfig) { // not required
		return nil
	}

	if m.CheckoutSandboxConfig != nil {
		if err := m.CheckoutSandboxConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("checkoutSandboxConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validatePayPalConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.PayPalConfig) { // not required
		return nil
	}

	if m.PayPalConfig != nil {
		if err := m.PayPalConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payPalConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validatePayPalSandboxConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.PayPalSandboxConfig) { // not required
		return nil
	}

	if m.PayPalSandboxConfig != nil {
		if err := m.PayPalSandboxConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payPalSandboxConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validateStripeConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.StripeConfig) { // not required
		return nil
	}

	if m.StripeConfig != nil {
		if err := m.StripeConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stripeConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validateStripeSandboxConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.StripeSandboxConfig) { // not required
		return nil
	}

	if m.StripeSandboxConfig != nil {
		if err := m.StripeSandboxConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stripeSandboxConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validateWxPayConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.WxPayConfig) { // not required
		return nil
	}

	if m.WxPayConfig != nil {
		if err := m.WxPayConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wxPayConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validateXsollaConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.XsollaConfig) { // not required
		return nil
	}

	if m.XsollaConfig != nil {
		if err := m.XsollaConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("xsollaConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMerchantConfigInfo) validateXsollaPaywallConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.XsollaPaywallConfig) { // not required
		return nil
	}

	if m.XsollaPaywallConfig != nil {
		if err := m.XsollaPaywallConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("xsollaPaywallConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentMerchantConfigInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentMerchantConfigInfo) UnmarshalBinary(b []byte) error {
	var res PaymentMerchantConfigInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
