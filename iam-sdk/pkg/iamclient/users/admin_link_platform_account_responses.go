// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// AdminLinkPlatformAccountReader is a Reader for the AdminLinkPlatformAccount structure.
type AdminLinkPlatformAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminLinkPlatformAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAdminLinkPlatformAccountNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminLinkPlatformAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminLinkPlatformAccountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAdminLinkPlatformAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewAdminLinkPlatformAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/link returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminLinkPlatformAccountNoContent creates a AdminLinkPlatformAccountNoContent with default headers values
func NewAdminLinkPlatformAccountNoContent() *AdminLinkPlatformAccountNoContent {
	return &AdminLinkPlatformAccountNoContent{}
}

/*AdminLinkPlatformAccountNoContent handles this case with default header values.

  No Content
*/
type AdminLinkPlatformAccountNoContent struct {
}

func (o *AdminLinkPlatformAccountNoContent) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/link][%d] adminLinkPlatformAccountNoContent ", 204)
}

func (o *AdminLinkPlatformAccountNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAdminLinkPlatformAccountBadRequest creates a AdminLinkPlatformAccountBadRequest with default headers values
func NewAdminLinkPlatformAccountBadRequest() *AdminLinkPlatformAccountBadRequest {
	return &AdminLinkPlatformAccountBadRequest{}
}

/*AdminLinkPlatformAccountBadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type AdminLinkPlatformAccountBadRequest struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminLinkPlatformAccountBadRequest) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/link][%d] adminLinkPlatformAccountBadRequest  %+v", 400, o.ToString())
}

func (o *AdminLinkPlatformAccountBadRequest) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminLinkPlatformAccountBadRequest) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminLinkPlatformAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminLinkPlatformAccountUnauthorized creates a AdminLinkPlatformAccountUnauthorized with default headers values
func NewAdminLinkPlatformAccountUnauthorized() *AdminLinkPlatformAccountUnauthorized {
	return &AdminLinkPlatformAccountUnauthorized{}
}

/*AdminLinkPlatformAccountUnauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>
*/
type AdminLinkPlatformAccountUnauthorized struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminLinkPlatformAccountUnauthorized) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/link][%d] adminLinkPlatformAccountUnauthorized  %+v", 401, o.ToString())
}

func (o *AdminLinkPlatformAccountUnauthorized) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminLinkPlatformAccountUnauthorized) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminLinkPlatformAccountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminLinkPlatformAccountForbidden creates a AdminLinkPlatformAccountForbidden with default headers values
func NewAdminLinkPlatformAccountForbidden() *AdminLinkPlatformAccountForbidden {
	return &AdminLinkPlatformAccountForbidden{}
}

/*AdminLinkPlatformAccountForbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>
*/
type AdminLinkPlatformAccountForbidden struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminLinkPlatformAccountForbidden) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/link][%d] adminLinkPlatformAccountForbidden  %+v", 403, o.ToString())
}

func (o *AdminLinkPlatformAccountForbidden) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminLinkPlatformAccountForbidden) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminLinkPlatformAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminLinkPlatformAccountInternalServerError creates a AdminLinkPlatformAccountInternalServerError with default headers values
func NewAdminLinkPlatformAccountInternalServerError() *AdminLinkPlatformAccountInternalServerError {
	return &AdminLinkPlatformAccountInternalServerError{}
}

/*AdminLinkPlatformAccountInternalServerError handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>
*/
type AdminLinkPlatformAccountInternalServerError struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminLinkPlatformAccountInternalServerError) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/link][%d] adminLinkPlatformAccountInternalServerError  %+v", 500, o.ToString())
}

func (o *AdminLinkPlatformAccountInternalServerError) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminLinkPlatformAccountInternalServerError) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminLinkPlatformAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
