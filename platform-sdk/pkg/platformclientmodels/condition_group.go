// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConditionGroup condition group
//
// swagger:model ConditionGroup
type ConditionGroup struct {

	// predicate operator, default is and
	// Enum: [and or]
	Operator string `json:"operator,omitempty"`

	// predicate list
	Predicates []*Predicate `json:"predicates"`
}

// Validate validates this condition group
func (m *ConditionGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePredicates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var conditionGroupTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["and","or"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conditionGroupTypeOperatorPropEnum = append(conditionGroupTypeOperatorPropEnum, v)
	}
}

const (

	// ConditionGroupOperatorAnd captures enum value "and"
	ConditionGroupOperatorAnd string = "and"

	// ConditionGroupOperatorOr captures enum value "or"
	ConditionGroupOperatorOr string = "or"
)

// prop value enum
func (m *ConditionGroup) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, conditionGroupTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConditionGroup) validateOperator(formats strfmt.Registry) error {

	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *ConditionGroup) validatePredicates(formats strfmt.Registry) error {

	if swag.IsZero(m.Predicates) { // not required
		return nil
	}

	for i := 0; i < len(m.Predicates); i++ {
		if swag.IsZero(m.Predicates[i]) { // not required
			continue
		}

		if m.Predicates[i] != nil {
			if err := m.Predicates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("predicates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConditionGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConditionGroup) UnmarshalBinary(b []byte) error {
	var res ConditionGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
