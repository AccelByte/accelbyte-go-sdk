// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package admin_tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/ugc-sdk/pkg/ugcclientmodels"
)

// AdminUpdateTagReader is a Reader for the AdminUpdateTag structure.
type AdminUpdateTagReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminUpdateTagReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminUpdateTagOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminUpdateTagBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminUpdateTagUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAdminUpdateTagNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewAdminUpdateTagConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewAdminUpdateTagInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PUT /ugc/v1/admin/namespaces/{namespace}/tags/{tagId} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminUpdateTagOK creates a AdminUpdateTagOK with default headers values
func NewAdminUpdateTagOK() *AdminUpdateTagOK {
	return &AdminUpdateTagOK{}
}

/*AdminUpdateTagOK handles this case with default header values.

  OK
*/
type AdminUpdateTagOK struct {
	Payload *ugcclientmodels.ModelsCreateTagResponse
}

func (o *AdminUpdateTagOK) Error() string {
	return fmt.Sprintf("[PUT /ugc/v1/admin/namespaces/{namespace}/tags/{tagId}][%d] adminUpdateTagOK  %+v", 200, o.ToJSONString())
}

func (o *AdminUpdateTagOK) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateTagOK) GetPayload() *ugcclientmodels.ModelsCreateTagResponse {
	return o.Payload
}

func (o *AdminUpdateTagOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ModelsCreateTagResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateTagBadRequest creates a AdminUpdateTagBadRequest with default headers values
func NewAdminUpdateTagBadRequest() *AdminUpdateTagBadRequest {
	return &AdminUpdateTagBadRequest{}
}

/*AdminUpdateTagBadRequest handles this case with default header values.

  Bad Request
*/
type AdminUpdateTagBadRequest struct {
	Payload *ugcclientmodels.ResponseError
}

func (o *AdminUpdateTagBadRequest) Error() string {
	return fmt.Sprintf("[PUT /ugc/v1/admin/namespaces/{namespace}/tags/{tagId}][%d] adminUpdateTagBadRequest  %+v", 400, o.ToJSONString())
}

func (o *AdminUpdateTagBadRequest) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateTagBadRequest) GetPayload() *ugcclientmodels.ResponseError {
	return o.Payload
}

func (o *AdminUpdateTagBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateTagUnauthorized creates a AdminUpdateTagUnauthorized with default headers values
func NewAdminUpdateTagUnauthorized() *AdminUpdateTagUnauthorized {
	return &AdminUpdateTagUnauthorized{}
}

/*AdminUpdateTagUnauthorized handles this case with default header values.

  Unauthorized
*/
type AdminUpdateTagUnauthorized struct {
	Payload *ugcclientmodels.ResponseError
}

func (o *AdminUpdateTagUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /ugc/v1/admin/namespaces/{namespace}/tags/{tagId}][%d] adminUpdateTagUnauthorized  %+v", 401, o.ToJSONString())
}

func (o *AdminUpdateTagUnauthorized) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateTagUnauthorized) GetPayload() *ugcclientmodels.ResponseError {
	return o.Payload
}

func (o *AdminUpdateTagUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateTagNotFound creates a AdminUpdateTagNotFound with default headers values
func NewAdminUpdateTagNotFound() *AdminUpdateTagNotFound {
	return &AdminUpdateTagNotFound{}
}

/*AdminUpdateTagNotFound handles this case with default header values.

  Not Found
*/
type AdminUpdateTagNotFound struct {
	Payload *ugcclientmodels.ResponseError
}

func (o *AdminUpdateTagNotFound) Error() string {
	return fmt.Sprintf("[PUT /ugc/v1/admin/namespaces/{namespace}/tags/{tagId}][%d] adminUpdateTagNotFound  %+v", 404, o.ToJSONString())
}

func (o *AdminUpdateTagNotFound) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateTagNotFound) GetPayload() *ugcclientmodels.ResponseError {
	return o.Payload
}

func (o *AdminUpdateTagNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateTagConflict creates a AdminUpdateTagConflict with default headers values
func NewAdminUpdateTagConflict() *AdminUpdateTagConflict {
	return &AdminUpdateTagConflict{}
}

/*AdminUpdateTagConflict handles this case with default header values.

  Conflict
*/
type AdminUpdateTagConflict struct {
	Payload *ugcclientmodels.ResponseError
}

func (o *AdminUpdateTagConflict) Error() string {
	return fmt.Sprintf("[PUT /ugc/v1/admin/namespaces/{namespace}/tags/{tagId}][%d] adminUpdateTagConflict  %+v", 409, o.ToJSONString())
}

func (o *AdminUpdateTagConflict) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateTagConflict) GetPayload() *ugcclientmodels.ResponseError {
	return o.Payload
}

func (o *AdminUpdateTagConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateTagInternalServerError creates a AdminUpdateTagInternalServerError with default headers values
func NewAdminUpdateTagInternalServerError() *AdminUpdateTagInternalServerError {
	return &AdminUpdateTagInternalServerError{}
}

/*AdminUpdateTagInternalServerError handles this case with default header values.

  Internal Server Error
*/
type AdminUpdateTagInternalServerError struct {
	Payload *ugcclientmodels.ResponseError
}

func (o *AdminUpdateTagInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /ugc/v1/admin/namespaces/{namespace}/tags/{tagId}][%d] adminUpdateTagInternalServerError  %+v", 500, o.ToJSONString())
}

func (o *AdminUpdateTagInternalServerError) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateTagInternalServerError) GetPayload() *ugcclientmodels.ResponseError {
	return o.Payload
}

func (o *AdminUpdateTagInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
