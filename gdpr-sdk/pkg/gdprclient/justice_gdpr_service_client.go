// Code generated by go-swagger; DO NOT EDIT.

package gdprclient

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"strings"
	"time"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/gdpr-sdk/pkg/gdprclient/data_deletion"
	"github.com/AccelByte/accelbyte-go-sdk/gdpr-sdk/pkg/gdprclient/data_retrieval"
)

// Default justice gdpr service HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "demo.accelbyte.io"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new justice gdpr service HTTP client.
func NewHTTPClient(formats strfmt.Registry) *JusticeGdprService {
	return NewHTTPClientWithConfig(formats, nil, "", "")
}

func SetUserAgent(inner http.RoundTripper, userAgent string) http.RoundTripper {
	return &customTransport{
		inner: inner,
		Agent: userAgent,
	}
}

func SetXAmznTraceId(inner http.RoundTripper, xAmznTraceId string) http.RoundTripper {
	return &customTransport{
		inner:        inner,
		XAmznTraceId: xAmznTraceId,
	}
}

type customTransport struct {
	inner        http.RoundTripper
	Agent        string
	XAmznTraceId string
}

func (c *customTransport) RoundTrip(r *http.Request) (*http.Response, error) {
	r.Header.Set("User-Agent", c.Agent)
	r.Header.Set("X-Amzn-Trace-Id", c.Agent)
	return c.inner.RoundTrip(r)
}

// NewHTTPClientWithConfig creates a new justice gdpr service HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig, userAgent, amazonTraceId string) *JusticeGdprService {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)

	// optional custom producers and consumer
	transport.Producers["*/*"] = runtime.JSONProducer()
	transport.Consumers["application/problem+json"] = runtime.JSONConsumer()
	transport.Consumers["application/x-www-form-urlencoded"] = runtime.JSONConsumer()
	transport.Consumers["application/zip"] = runtime.JSONConsumer()
	transport.Consumers["application/pdf"] = runtime.JSONConsumer()
	transport.Consumers["image/png"] = runtime.ByteStreamConsumer()

	// optional custom user-agent for request header
	transport.Transport = SetUserAgent(transport.Transport, userAgent)

	// optional custom amazonTraceId for request header
	transport.Transport = SetXAmznTraceId(transport.Transport, amazonTraceId)

	return New(transport, formats)
}

// New creates a new justice gdpr service client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *JusticeGdprService {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(JusticeGdprService)
	cli.Transport = transport
	cli.DataDeletion = data_deletion.New(transport, formats)
	cli.DataRetrieval = data_retrieval.New(transport, formats)
	return cli
}

func NewDateTime(t time.Time) strfmt.DateTime {
	return strfmt.DateTime(t)
}

func NewClientWithBasePath(url string, endpoint string) *JusticeGdprService {
	schemes := []string{"http"}
	if strings.HasSuffix(url, ":443") {
		schemes = []string{"https"}
	}

	transport := httptransport.New(url, endpoint, schemes)
	return New(transport, strfmt.Default)
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// JusticeGdprService is a client for justice gdpr service
type JusticeGdprService struct {
	DataDeletion data_deletion.ClientService

	DataRetrieval data_retrieval.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *JusticeGdprService) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.DataDeletion.SetTransport(transport)
	c.DataRetrieval.SetTransport(transport)
}
