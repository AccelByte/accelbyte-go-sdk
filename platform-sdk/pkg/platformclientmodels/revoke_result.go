// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RevokeResult revoke result
//
// swagger:model RevokeResult
type RevokeResult struct {

	// revoke item summaries
	RevokeItemSummaries []*RevokeItemSummary `json:"revokeItemSummaries"`

	// reward
	Reward *PlatformReward `json:"reward,omitempty"`

	// status
	// Enum: [COMPLETED SKIPPED]
	Status string `json:"status,omitempty"`
}

// Validate validates this revoke result
func (m *RevokeResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRevokeItemSummaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReward(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RevokeResult) validateRevokeItemSummaries(formats strfmt.Registry) error {

	if swag.IsZero(m.RevokeItemSummaries) { // not required
		return nil
	}

	for i := 0; i < len(m.RevokeItemSummaries); i++ {
		if swag.IsZero(m.RevokeItemSummaries[i]) { // not required
			continue
		}

		if m.RevokeItemSummaries[i] != nil {
			if err := m.RevokeItemSummaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("revokeItemSummaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RevokeResult) validateReward(formats strfmt.Registry) error {

	if swag.IsZero(m.Reward) { // not required
		return nil
	}

	if m.Reward != nil {
		if err := m.Reward.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reward")
			}
			return err
		}
	}

	return nil
}

var revokeResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COMPLETED","SKIPPED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		revokeResultTypeStatusPropEnum = append(revokeResultTypeStatusPropEnum, v)
	}
}

const (

	// RevokeResultStatusCOMPLETED captures enum value "COMPLETED"
	RevokeResultStatusCOMPLETED string = "COMPLETED"

	// RevokeResultStatusSKIPPED captures enum value "SKIPPED"
	RevokeResultStatusSKIPPED string = "SKIPPED"
)

// prop value enum
func (m *RevokeResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, revokeResultTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RevokeResult) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RevokeResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RevokeResult) UnmarshalBinary(b []byte) error {
	var res RevokeResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
