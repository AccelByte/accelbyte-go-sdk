// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// AdminUpdateRoleV3Reader is a Reader for the AdminUpdateRoleV3 structure.
type AdminUpdateRoleV3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminUpdateRoleV3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminUpdateRoleV3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminUpdateRoleV3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminUpdateRoleV3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAdminUpdateRoleV3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAdminUpdateRoleV3NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PATCH /iam/v3/admin/roles/{roleId} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminUpdateRoleV3OK creates a AdminUpdateRoleV3OK with default headers values
func NewAdminUpdateRoleV3OK() *AdminUpdateRoleV3OK {
	return &AdminUpdateRoleV3OK{}
}

/*AdminUpdateRoleV3OK handles this case with default header values.

  OK
*/
type AdminUpdateRoleV3OK struct {
	Payload *iamclientmodels.ModelRoleResponseV3
}

func (o *AdminUpdateRoleV3OK) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/roles/{roleId}][%d] adminUpdateRoleV3OK  %+v", 200, o.ToString())
}

func (o *AdminUpdateRoleV3OK) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateRoleV3OK) GetPayload() *iamclientmodels.ModelRoleResponseV3 {
	return o.Payload
}

func (o *AdminUpdateRoleV3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.ModelRoleResponseV3)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateRoleV3BadRequest creates a AdminUpdateRoleV3BadRequest with default headers values
func NewAdminUpdateRoleV3BadRequest() *AdminUpdateRoleV3BadRequest {
	return &AdminUpdateRoleV3BadRequest{}
}

/*AdminUpdateRoleV3BadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>
*/
type AdminUpdateRoleV3BadRequest struct {
	Payload *iamclientmodels.RestapiErrorResponse
}

func (o *AdminUpdateRoleV3BadRequest) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/roles/{roleId}][%d] adminUpdateRoleV3BadRequest  %+v", 400, o.ToString())
}

func (o *AdminUpdateRoleV3BadRequest) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateRoleV3BadRequest) GetPayload() *iamclientmodels.RestapiErrorResponse {
	return o.Payload
}

func (o *AdminUpdateRoleV3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestapiErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateRoleV3Unauthorized creates a AdminUpdateRoleV3Unauthorized with default headers values
func NewAdminUpdateRoleV3Unauthorized() *AdminUpdateRoleV3Unauthorized {
	return &AdminUpdateRoleV3Unauthorized{}
}

/*AdminUpdateRoleV3Unauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>
*/
type AdminUpdateRoleV3Unauthorized struct {
	Payload *iamclientmodels.RestapiErrorResponse
}

func (o *AdminUpdateRoleV3Unauthorized) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/roles/{roleId}][%d] adminUpdateRoleV3Unauthorized  %+v", 401, o.ToString())
}

func (o *AdminUpdateRoleV3Unauthorized) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateRoleV3Unauthorized) GetPayload() *iamclientmodels.RestapiErrorResponse {
	return o.Payload
}

func (o *AdminUpdateRoleV3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestapiErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateRoleV3Forbidden creates a AdminUpdateRoleV3Forbidden with default headers values
func NewAdminUpdateRoleV3Forbidden() *AdminUpdateRoleV3Forbidden {
	return &AdminUpdateRoleV3Forbidden{}
}

/*AdminUpdateRoleV3Forbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>
*/
type AdminUpdateRoleV3Forbidden struct {
	Payload *iamclientmodels.RestapiErrorResponse
}

func (o *AdminUpdateRoleV3Forbidden) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/roles/{roleId}][%d] adminUpdateRoleV3Forbidden  %+v", 403, o.ToString())
}

func (o *AdminUpdateRoleV3Forbidden) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateRoleV3Forbidden) GetPayload() *iamclientmodels.RestapiErrorResponse {
	return o.Payload
}

func (o *AdminUpdateRoleV3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestapiErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateRoleV3NotFound creates a AdminUpdateRoleV3NotFound with default headers values
func NewAdminUpdateRoleV3NotFound() *AdminUpdateRoleV3NotFound {
	return &AdminUpdateRoleV3NotFound{}
}

/*AdminUpdateRoleV3NotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>
*/
type AdminUpdateRoleV3NotFound struct {
	Payload *iamclientmodels.RestapiErrorResponse
}

func (o *AdminUpdateRoleV3NotFound) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/roles/{roleId}][%d] adminUpdateRoleV3NotFound  %+v", 404, o.ToString())
}

func (o *AdminUpdateRoleV3NotFound) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateRoleV3NotFound) GetPayload() *iamclientmodels.RestapiErrorResponse {
	return o.Payload
}

func (o *AdminUpdateRoleV3NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestapiErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
