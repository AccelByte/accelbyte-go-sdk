// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// PublicUpdateUserV3Reader is a Reader for the PublicUpdateUserV3 structure.
type PublicUpdateUserV3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PublicUpdateUserV3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPublicUpdateUserV3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPublicUpdateUserV3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPublicUpdateUserV3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewPublicUpdateUserV3Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewPublicUpdateUserV3InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PUT /iam/v3/public/namespaces/{namespace}/users/me returns an error %d: %s", response.Code(), string(data))
	}
}

// NewPublicUpdateUserV3OK creates a PublicUpdateUserV3OK with default headers values
func NewPublicUpdateUserV3OK() *PublicUpdateUserV3OK {
	return &PublicUpdateUserV3OK{}
}

/*PublicUpdateUserV3OK handles this case with default header values.

  OK
*/
type PublicUpdateUserV3OK struct {
	Payload []*iamclientmodels.ModelUserResponseV3
}

func (o *PublicUpdateUserV3OK) Error() string {
	return fmt.Sprintf("[PUT /iam/v3/public/namespaces/{namespace}/users/me][%d] publicUpdateUserV3OK  %+v", 200, o.Payload)
}

func (o *PublicUpdateUserV3OK) GetPayload() []*iamclientmodels.ModelUserResponseV3 {
	return o.Payload
}

func (o *PublicUpdateUserV3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicUpdateUserV3BadRequest creates a PublicUpdateUserV3BadRequest with default headers values
func NewPublicUpdateUserV3BadRequest() *PublicUpdateUserV3BadRequest {
	return &PublicUpdateUserV3BadRequest{}
}

/*PublicUpdateUserV3BadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10154</td><td>country not found</td></tr><tr><td>10130</td><td>user under age</td></tr></table>
*/
type PublicUpdateUserV3BadRequest struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *PublicUpdateUserV3BadRequest) Error() string {
	return fmt.Sprintf("[PUT /iam/v3/public/namespaces/{namespace}/users/me][%d] publicUpdateUserV3BadRequest  %+v", 400, o.Payload)
}

func (o *PublicUpdateUserV3BadRequest) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *PublicUpdateUserV3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicUpdateUserV3Unauthorized creates a PublicUpdateUserV3Unauthorized with default headers values
func NewPublicUpdateUserV3Unauthorized() *PublicUpdateUserV3Unauthorized {
	return &PublicUpdateUserV3Unauthorized{}
}

/*PublicUpdateUserV3Unauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>
*/
type PublicUpdateUserV3Unauthorized struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *PublicUpdateUserV3Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /iam/v3/public/namespaces/{namespace}/users/me][%d] publicUpdateUserV3Unauthorized  %+v", 401, o.Payload)
}

func (o *PublicUpdateUserV3Unauthorized) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *PublicUpdateUserV3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicUpdateUserV3Conflict creates a PublicUpdateUserV3Conflict with default headers values
func NewPublicUpdateUserV3Conflict() *PublicUpdateUserV3Conflict {
	return &PublicUpdateUserV3Conflict{}
}

/*PublicUpdateUserV3Conflict handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10133</td><td>email already used</td></tr></table>
*/
type PublicUpdateUserV3Conflict struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *PublicUpdateUserV3Conflict) Error() string {
	return fmt.Sprintf("[PUT /iam/v3/public/namespaces/{namespace}/users/me][%d] publicUpdateUserV3Conflict  %+v", 409, o.Payload)
}

func (o *PublicUpdateUserV3Conflict) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *PublicUpdateUserV3Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicUpdateUserV3InternalServerError creates a PublicUpdateUserV3InternalServerError with default headers values
func NewPublicUpdateUserV3InternalServerError() *PublicUpdateUserV3InternalServerError {
	return &PublicUpdateUserV3InternalServerError{}
}

/*PublicUpdateUserV3InternalServerError handles this case with default header values.

  Internal Server Error
*/
type PublicUpdateUserV3InternalServerError struct {
}

func (o *PublicUpdateUserV3InternalServerError) Error() string {
	return fmt.Sprintf("[PUT /iam/v3/public/namespaces/{namespace}/users/me][%d] publicUpdateUserV3InternalServerError ", 500)
}

func (o *PublicUpdateUserV3InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
