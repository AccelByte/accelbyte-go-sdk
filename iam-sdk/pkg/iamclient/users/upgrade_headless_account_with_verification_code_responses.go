// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// UpgradeHeadlessAccountWithVerificationCodeReader is a Reader for the UpgradeHeadlessAccountWithVerificationCode structure.
type UpgradeHeadlessAccountWithVerificationCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpgradeHeadlessAccountWithVerificationCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpgradeHeadlessAccountWithVerificationCodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpgradeHeadlessAccountWithVerificationCodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpgradeHeadlessAccountWithVerificationCodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpgradeHeadlessAccountWithVerificationCodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewUpgradeHeadlessAccountWithVerificationCodeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /iam/namespaces/{namespace}/users/{userId}/upgradeHeadlessAccountWithVerificationCode returns an error %d: %s", response.Code(), string(data))
	}
}

// NewUpgradeHeadlessAccountWithVerificationCodeOK creates a UpgradeHeadlessAccountWithVerificationCodeOK with default headers values
func NewUpgradeHeadlessAccountWithVerificationCodeOK() *UpgradeHeadlessAccountWithVerificationCodeOK {
	return &UpgradeHeadlessAccountWithVerificationCodeOK{}
}

/*UpgradeHeadlessAccountWithVerificationCodeOK handles this case with default header values.

  OK
*/
type UpgradeHeadlessAccountWithVerificationCodeOK struct {
	Payload *iamclientmodels.ModelUserResponse
}

func (o *UpgradeHeadlessAccountWithVerificationCodeOK) Error() string {
	return fmt.Sprintf("[POST /iam/namespaces/{namespace}/users/{userId}/upgradeHeadlessAccountWithVerificationCode][%d] upgradeHeadlessAccountWithVerificationCodeOK  %+v", 200, o.Payload)
}

func (o *UpgradeHeadlessAccountWithVerificationCodeOK) GetPayload() *iamclientmodels.ModelUserResponse {
	return o.Payload
}

func (o *UpgradeHeadlessAccountWithVerificationCodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.ModelUserResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpgradeHeadlessAccountWithVerificationCodeBadRequest creates a UpgradeHeadlessAccountWithVerificationCodeBadRequest with default headers values
func NewUpgradeHeadlessAccountWithVerificationCodeBadRequest() *UpgradeHeadlessAccountWithVerificationCodeBadRequest {
	return &UpgradeHeadlessAccountWithVerificationCodeBadRequest{}
}

/*UpgradeHeadlessAccountWithVerificationCodeBadRequest handles this case with default header values.

  Invalid request
*/
type UpgradeHeadlessAccountWithVerificationCodeBadRequest struct {
}

func (o *UpgradeHeadlessAccountWithVerificationCodeBadRequest) Error() string {
	return fmt.Sprintf("[POST /iam/namespaces/{namespace}/users/{userId}/upgradeHeadlessAccountWithVerificationCode][%d] upgradeHeadlessAccountWithVerificationCodeBadRequest ", 400)
}

func (o *UpgradeHeadlessAccountWithVerificationCodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpgradeHeadlessAccountWithVerificationCodeUnauthorized creates a UpgradeHeadlessAccountWithVerificationCodeUnauthorized with default headers values
func NewUpgradeHeadlessAccountWithVerificationCodeUnauthorized() *UpgradeHeadlessAccountWithVerificationCodeUnauthorized {
	return &UpgradeHeadlessAccountWithVerificationCodeUnauthorized{}
}

/*UpgradeHeadlessAccountWithVerificationCodeUnauthorized handles this case with default header values.

  Unauthorized access
*/
type UpgradeHeadlessAccountWithVerificationCodeUnauthorized struct {
}

func (o *UpgradeHeadlessAccountWithVerificationCodeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /iam/namespaces/{namespace}/users/{userId}/upgradeHeadlessAccountWithVerificationCode][%d] upgradeHeadlessAccountWithVerificationCodeUnauthorized ", 401)
}

func (o *UpgradeHeadlessAccountWithVerificationCodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpgradeHeadlessAccountWithVerificationCodeForbidden creates a UpgradeHeadlessAccountWithVerificationCodeForbidden with default headers values
func NewUpgradeHeadlessAccountWithVerificationCodeForbidden() *UpgradeHeadlessAccountWithVerificationCodeForbidden {
	return &UpgradeHeadlessAccountWithVerificationCodeForbidden{}
}

/*UpgradeHeadlessAccountWithVerificationCodeForbidden handles this case with default header values.

  Forbidden
*/
type UpgradeHeadlessAccountWithVerificationCodeForbidden struct {
}

func (o *UpgradeHeadlessAccountWithVerificationCodeForbidden) Error() string {
	return fmt.Sprintf("[POST /iam/namespaces/{namespace}/users/{userId}/upgradeHeadlessAccountWithVerificationCode][%d] upgradeHeadlessAccountWithVerificationCodeForbidden ", 403)
}

func (o *UpgradeHeadlessAccountWithVerificationCodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpgradeHeadlessAccountWithVerificationCodeConflict creates a UpgradeHeadlessAccountWithVerificationCodeConflict with default headers values
func NewUpgradeHeadlessAccountWithVerificationCodeConflict() *UpgradeHeadlessAccountWithVerificationCodeConflict {
	return &UpgradeHeadlessAccountWithVerificationCodeConflict{}
}

/*UpgradeHeadlessAccountWithVerificationCodeConflict handles this case with default header values.

  Conflict
*/
type UpgradeHeadlessAccountWithVerificationCodeConflict struct {
}

func (o *UpgradeHeadlessAccountWithVerificationCodeConflict) Error() string {
	return fmt.Sprintf("[POST /iam/namespaces/{namespace}/users/{userId}/upgradeHeadlessAccountWithVerificationCode][%d] upgradeHeadlessAccountWithVerificationCodeConflict ", 409)
}

func (o *UpgradeHeadlessAccountWithVerificationCodeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
