// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclientmodels"
)

// PublicCancelUserOrderReader is a Reader for the PublicCancelUserOrder structure.
type PublicCancelUserOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PublicCancelUserOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPublicCancelUserOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPublicCancelUserOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewPublicCancelUserOrderConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PUT /platform/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}/cancel returns an error %d: %s", response.Code(), string(data))
	}
}

// NewPublicCancelUserOrderOK creates a PublicCancelUserOrderOK with default headers values
func NewPublicCancelUserOrderOK() *PublicCancelUserOrderOK {
	return &PublicCancelUserOrderOK{}
}

/*PublicCancelUserOrderOK handles this case with default header values.

  successful operation
*/
type PublicCancelUserOrderOK struct {
	Payload *platformclientmodels.OrderInfo
}

func (o *PublicCancelUserOrderOK) Error() string {
	return fmt.Sprintf("[PUT /platform/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}/cancel][%d] publicCancelUserOrderOK  %+v", 200, o.Payload)
}

func (o *PublicCancelUserOrderOK) GetPayload() *platformclientmodels.OrderInfo {
	return o.Payload
}

func (o *PublicCancelUserOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.OrderInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicCancelUserOrderNotFound creates a PublicCancelUserOrderNotFound with default headers values
func NewPublicCancelUserOrderNotFound() *PublicCancelUserOrderNotFound {
	return &PublicCancelUserOrderNotFound{}
}

/*PublicCancelUserOrderNotFound handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>
*/
type PublicCancelUserOrderNotFound struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *PublicCancelUserOrderNotFound) Error() string {
	return fmt.Sprintf("[PUT /platform/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}/cancel][%d] publicCancelUserOrderNotFound  %+v", 404, o.Payload)
}

func (o *PublicCancelUserOrderNotFound) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *PublicCancelUserOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicCancelUserOrderConflict creates a PublicCancelUserOrderConflict with default headers values
func NewPublicCancelUserOrderConflict() *PublicCancelUserOrderConflict {
	return &PublicCancelUserOrderConflict{}
}

/*PublicCancelUserOrderConflict handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32177</td><td>Order [{orderNo}] is not cancelable</td></tr></table>
*/
type PublicCancelUserOrderConflict struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *PublicCancelUserOrderConflict) Error() string {
	return fmt.Sprintf("[PUT /platform/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}/cancel][%d] publicCancelUserOrderConflict  %+v", 409, o.Payload)
}

func (o *PublicCancelUserOrderConflict) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *PublicCancelUserOrderConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
