// Code generated by go-swagger; DO NOT EDIT.

package dsmcclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsDSMConfig models d s m config
//
// swagger:model models.DSMConfig
type ModelsDSMConfig struct {

	// allow version override
	// Required: true
	AllowVersionOverride *bool `json:"allow_version_override"`

	// artifact path
	// Required: true
	ArtifactPath *string `json:"artifact_path"`

	// buffer count
	// Required: true
	BufferCount *int32 `json:"buffer_count"`

	// claim timeout
	// Required: true
	ClaimTimeout *int32 `json:"claim_timeout"`

	// configurations
	// Required: true
	Configurations map[string]ModelsPodConfig `json:"configurations"`

	// cpu limit
	// Required: true
	CPULimit *int32 `json:"cpu_limit"`

	// creation timeout
	// Required: true
	CreationTimeout *int32 `json:"creation_timeout"`

	// default version
	// Required: true
	DefaultVersion *string `json:"default_version"`

	// deployments
	// Required: true
	Deployments map[string]ModelsDeploymentWithOverride `json:"deployments"`

	// image version mapping
	// Required: true
	ImageVersionMapping map[string]string `json:"image_version_mapping"`

	// max count
	// Required: true
	MaxCount *int32 `json:"max_count"`

	// mem limit
	// Required: true
	MemLimit *int32 `json:"mem_limit"`

	// min count
	// Required: true
	MinCount *int32 `json:"min_count"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// overrides
	// Required: true
	Overrides map[string]ModelsDeploymentConfig `json:"overrides"`

	// params
	// Required: true
	Params *string `json:"params"`

	// port
	// Required: true
	Port *int32 `json:"port"`

	// ports
	// Required: true
	Ports map[string]int64 `json:"ports"`

	// protocol
	// Required: true
	Protocol *string `json:"protocol"`

	// providers
	// Required: true
	Providers []string `json:"providers"`

	// session timeout
	// Required: true
	SessionTimeout *int32 `json:"session_timeout"`

	// unreachable timeout
	// Required: true
	UnreachableTimeout *int32 `json:"unreachable_timeout"`

	// version image size mapping
	// Required: true
	VersionImageSizeMapping map[string]int64 `json:"version_image_size_mapping"`
}

// Validate validates this models d s m config
func (m *ModelsDSMConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowVersionOverride(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBufferCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClaimTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPULimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageVersionMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnreachableTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionImageSizeMapping(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsDSMConfig) validateAllowVersionOverride(formats strfmt.Registry) error {

	if err := validate.Required("allow_version_override", "body", m.AllowVersionOverride); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateArtifactPath(formats strfmt.Registry) error {

	if err := validate.Required("artifact_path", "body", m.ArtifactPath); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateBufferCount(formats strfmt.Registry) error {

	if err := validate.Required("buffer_count", "body", m.BufferCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateClaimTimeout(formats strfmt.Registry) error {

	if err := validate.Required("claim_timeout", "body", m.ClaimTimeout); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateConfigurations(formats strfmt.Registry) error {

	for k := range m.Configurations {

		if err := validate.Required("configurations"+"."+k, "body", m.Configurations[k]); err != nil {
			return err
		}
		if val, ok := m.Configurations[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ModelsDSMConfig) validateCPULimit(formats strfmt.Registry) error {

	if err := validate.Required("cpu_limit", "body", m.CPULimit); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateCreationTimeout(formats strfmt.Registry) error {

	if err := validate.Required("creation_timeout", "body", m.CreationTimeout); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateDefaultVersion(formats strfmt.Registry) error {

	if err := validate.Required("default_version", "body", m.DefaultVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateDeployments(formats strfmt.Registry) error {

	for k := range m.Deployments {

		if err := validate.Required("deployments"+"."+k, "body", m.Deployments[k]); err != nil {
			return err
		}
		if val, ok := m.Deployments[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ModelsDSMConfig) validateImageVersionMapping(formats strfmt.Registry) error {

	return nil
}

func (m *ModelsDSMConfig) validateMaxCount(formats strfmt.Registry) error {

	if err := validate.Required("max_count", "body", m.MaxCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateMemLimit(formats strfmt.Registry) error {

	if err := validate.Required("mem_limit", "body", m.MemLimit); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateMinCount(formats strfmt.Registry) error {

	if err := validate.Required("min_count", "body", m.MinCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateOverrides(formats strfmt.Registry) error {

	for k := range m.Overrides {

		if err := validate.Required("overrides"+"."+k, "body", m.Overrides[k]); err != nil {
			return err
		}
		if val, ok := m.Overrides[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ModelsDSMConfig) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("params", "body", m.Params); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validatePorts(formats strfmt.Registry) error {

	return nil
}

func (m *ModelsDSMConfig) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateProviders(formats strfmt.Registry) error {

	if err := validate.Required("providers", "body", m.Providers); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateSessionTimeout(formats strfmt.Registry) error {

	if err := validate.Required("session_timeout", "body", m.SessionTimeout); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateUnreachableTimeout(formats strfmt.Registry) error {

	if err := validate.Required("unreachable_timeout", "body", m.UnreachableTimeout); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDSMConfig) validateVersionImageSizeMapping(formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsDSMConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsDSMConfig) UnmarshalBinary(b []byte) error {
	var res ModelsDSMConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
