// Code generated by go-swagger; DO NOT EDIT.

package user_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/basic-sdk/pkg/basicclientmodels"
)

// UpdateUserZipCodeReader is a Reader for the UpdateUserZipCode structure.
type UpdateUserZipCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserZipCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserZipCodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUserZipCodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateUserZipCodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateUserZipCodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PATCH /v1/public/namespaces/{namespace}/users/me/profiles/zipCode returns an error %d: %s", response.Code(), string(data))
	}
}

// NewUpdateUserZipCodeOK creates a UpdateUserZipCodeOK with default headers values
func NewUpdateUserZipCodeOK() *UpdateUserZipCodeOK {
	return &UpdateUserZipCodeOK{}
}

/*UpdateUserZipCodeOK handles this case with default header values.

  Successful operation
*/
type UpdateUserZipCodeOK struct {
	Payload *basicclientmodels.UserZipCode
}

func (o *UpdateUserZipCodeOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/public/namespaces/{namespace}/users/me/profiles/zipCode][%d] updateUserZipCodeOK  %+v", 200, o.Payload)
}

func (o *UpdateUserZipCodeOK) GetPayload() *basicclientmodels.UserZipCode {
	return o.Payload
}

func (o *UpdateUserZipCodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.UserZipCode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserZipCodeBadRequest creates a UpdateUserZipCodeBadRequest with default headers values
func NewUpdateUserZipCodeBadRequest() *UpdateUserZipCodeBadRequest {
	return &UpdateUserZipCodeBadRequest{}
}

/*UpdateUserZipCodeBadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>
*/
type UpdateUserZipCodeBadRequest struct {
	Payload *basicclientmodels.ValidationErrorEntity
}

func (o *UpdateUserZipCodeBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/public/namespaces/{namespace}/users/me/profiles/zipCode][%d] updateUserZipCodeBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserZipCodeBadRequest) GetPayload() *basicclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *UpdateUserZipCodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserZipCodeUnauthorized creates a UpdateUserZipCodeUnauthorized with default headers values
func NewUpdateUserZipCodeUnauthorized() *UpdateUserZipCodeUnauthorized {
	return &UpdateUserZipCodeUnauthorized{}
}

/*UpdateUserZipCodeUnauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>
*/
type UpdateUserZipCodeUnauthorized struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *UpdateUserZipCodeUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/public/namespaces/{namespace}/users/me/profiles/zipCode][%d] updateUserZipCodeUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateUserZipCodeUnauthorized) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *UpdateUserZipCodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserZipCodeForbidden creates a UpdateUserZipCodeForbidden with default headers values
func NewUpdateUserZipCodeForbidden() *UpdateUserZipCodeForbidden {
	return &UpdateUserZipCodeForbidden{}
}

/*UpdateUserZipCodeForbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>
*/
type UpdateUserZipCodeForbidden struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *UpdateUserZipCodeForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/public/namespaces/{namespace}/users/me/profiles/zipCode][%d] updateUserZipCodeForbidden  %+v", 403, o.Payload)
}

func (o *UpdateUserZipCodeForbidden) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *UpdateUserZipCodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
