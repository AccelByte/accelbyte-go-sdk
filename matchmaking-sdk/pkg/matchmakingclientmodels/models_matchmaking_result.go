// Code generated by go-swagger; DO NOT EDIT.

package matchmakingclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsMatchmakingResult models matchmaking result
//
// swagger:model models.MatchmakingResult
type ModelsMatchmakingResult struct {

	// channel
	// Required: true
	Channel string `json:"channel"`

	// client version
	// Required: true
	ClientVersion string `json:"client_version"`

	// deployment
	// Required: true
	Deployment string `json:"deployment"`

	// error code
	// Required: true
	ErrorCode *int32 `json:"error_code"`

	// error message
	// Required: true
	ErrorMessage *string `json:"error_message"`

	// game mode
	// Required: true
	GameMode string `json:"game_mode"`

	// joinable
	Joinable *bool `json:"joinable"`

	// match id
	// Required: true
	MatchID string `json:"match_id"`

	// matching allies
	// Required: true
	MatchingAllies []*ModelsMatchingAlly `json:"matching_allies"`

	// namespace
	// Required: true
	Namespace string `json:"namespace"`

	// party attributes
	// Required: true
	PartyAttributes interface{} `json:"party_attributes"`

	// party id
	PartyID *string `json:"party_id,omitempty"`

	// queued at
	// Required: true
	QueuedAt int64 `json:"queued_at"`

	// region
	// Required: true
	Region string `json:"region"`

	// server name
	// Required: true
	ServerName string `json:"server_name"`

	// status
	// Required: true
	Status string `json:"status"`

	// ticket id
	// Required: true
	TicketID string `json:"ticket_id"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at"`
}

// Validate validates this models matchmaking result
func (m *ModelsMatchmakingResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGameMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchingAllies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartyAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueuedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicketID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsMatchmakingResult) validateChannel(formats strfmt.Registry) error {

	if err := validate.RequiredString("channel", "body", string(m.Channel)); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMatchmakingResult) validateClientVersion(formats strfmt.Registry) error {

	if err := validate.RequiredString("client_version", "body", string(m.ClientVersion)); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMatchmakingResult) validateDeployment(formats strfmt.Registry) error {

	if err := validate.RequiredString("deployment", "body", string(m.Deployment)); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMatchmakingResult) validateErrorCode(formats strfmt.Registry) error {

	if err := validate.Required("error_code", "body", m.ErrorCode); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMatchmakingResult) validateErrorMessage(formats strfmt.Registry) error {

	if err := validate.Required("error_message", "body", m.ErrorMessage); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMatchmakingResult) validateGameMode(formats strfmt.Registry) error {

	if err := validate.RequiredString("game_mode", "body", string(m.GameMode)); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMatchmakingResult) validateMatchID(formats strfmt.Registry) error {

	if err := validate.RequiredString("match_id", "body", string(m.MatchID)); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMatchmakingResult) validateMatchingAllies(formats strfmt.Registry) error {

	if err := validate.Required("matching_allies", "body", m.MatchingAllies); err != nil {
		return err
	}

	for i := 0; i < len(m.MatchingAllies); i++ {
		if swag.IsZero(m.MatchingAllies[i]) { // not required
			continue
		}

		if m.MatchingAllies[i] != nil {
			if err := m.MatchingAllies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matching_allies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsMatchmakingResult) validateNamespace(formats strfmt.Registry) error {

	if err := validate.RequiredString("namespace", "body", string(m.Namespace)); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMatchmakingResult) validatePartyAttributes(formats strfmt.Registry) error {

	if err := validate.Required("party_attributes", "body", m.PartyAttributes); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMatchmakingResult) validateQueuedAt(formats strfmt.Registry) error {

	if err := validate.Required("queued_at", "body", int64(m.QueuedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMatchmakingResult) validateRegion(formats strfmt.Registry) error {

	if err := validate.RequiredString("region", "body", string(m.Region)); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMatchmakingResult) validateServerName(formats strfmt.Registry) error {

	if err := validate.RequiredString("server_name", "body", string(m.ServerName)); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMatchmakingResult) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMatchmakingResult) validateTicketID(formats strfmt.Registry) error {

	if err := validate.RequiredString("ticket_id", "body", string(m.TicketID)); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMatchmakingResult) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsMatchmakingResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsMatchmakingResult) UnmarshalBinary(b []byte) error {
	var res ModelsMatchmakingResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
