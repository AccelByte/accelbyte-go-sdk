// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io/ioutil"
	"strings"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AdminEnableUserV2Reader is a Reader for the AdminEnableUserV2 structure.
type AdminEnableUserV2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminEnableUserV2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAdminEnableUserV2NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminEnableUserV2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAdminEnableUserV2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAdminEnableUserV2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewAdminEnableUserV2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PUT /iam/v2/admin/namespaces/{namespace}/users/{userId}/enable returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminEnableUserV2NoContent creates a AdminEnableUserV2NoContent with default headers values
func NewAdminEnableUserV2NoContent() *AdminEnableUserV2NoContent {
	return &AdminEnableUserV2NoContent{}
}

/*AdminEnableUserV2NoContent handles this case with default header values.

  Operation succeeded
*/
type AdminEnableUserV2NoContent struct {
}

func (o *AdminEnableUserV2NoContent) Error() string {
	return fmt.Sprintf("[PUT /iam/v2/admin/namespaces/{namespace}/users/{userId}/enable][%d] adminEnableUserV2NoContent ", 204)
}

func (o *AdminEnableUserV2NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}

// NewAdminEnableUserV2Unauthorized creates a AdminEnableUserV2Unauthorized with default headers values
func NewAdminEnableUserV2Unauthorized() *AdminEnableUserV2Unauthorized {
	return &AdminEnableUserV2Unauthorized{}
}

/*AdminEnableUserV2Unauthorized handles this case with default header values.

  Unauthorized access
*/
type AdminEnableUserV2Unauthorized struct {
}

func (o *AdminEnableUserV2Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /iam/v2/admin/namespaces/{namespace}/users/{userId}/enable][%d] adminEnableUserV2Unauthorized ", 401)
}

func (o *AdminEnableUserV2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}

// NewAdminEnableUserV2Forbidden creates a AdminEnableUserV2Forbidden with default headers values
func NewAdminEnableUserV2Forbidden() *AdminEnableUserV2Forbidden {
	return &AdminEnableUserV2Forbidden{}
}

/*AdminEnableUserV2Forbidden handles this case with default header values.

  Forbidden
*/
type AdminEnableUserV2Forbidden struct {
}

func (o *AdminEnableUserV2Forbidden) Error() string {
	return fmt.Sprintf("[PUT /iam/v2/admin/namespaces/{namespace}/users/{userId}/enable][%d] adminEnableUserV2Forbidden ", 403)
}

func (o *AdminEnableUserV2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}

// NewAdminEnableUserV2NotFound creates a AdminEnableUserV2NotFound with default headers values
func NewAdminEnableUserV2NotFound() *AdminEnableUserV2NotFound {
	return &AdminEnableUserV2NotFound{}
}

/*AdminEnableUserV2NotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>
*/
type AdminEnableUserV2NotFound struct {
}

func (o *AdminEnableUserV2NotFound) Error() string {
	return fmt.Sprintf("[PUT /iam/v2/admin/namespaces/{namespace}/users/{userId}/enable][%d] adminEnableUserV2NotFound ", 404)
}

func (o *AdminEnableUserV2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}

// NewAdminEnableUserV2InternalServerError creates a AdminEnableUserV2InternalServerError with default headers values
func NewAdminEnableUserV2InternalServerError() *AdminEnableUserV2InternalServerError {
	return &AdminEnableUserV2InternalServerError{}
}

/*AdminEnableUserV2InternalServerError handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>
*/
type AdminEnableUserV2InternalServerError struct {
}

func (o *AdminEnableUserV2InternalServerError) Error() string {
	return fmt.Sprintf("[PUT /iam/v2/admin/namespaces/{namespace}/users/{userId}/enable][%d] adminEnableUserV2InternalServerError ", 500)
}

func (o *AdminEnableUserV2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}
