// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io/ioutil"
	"strings"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteUserPermissionReader is a Reader for the DeleteUserPermission structure.
type DeleteUserPermissionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteUserPermissionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteUserPermissionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteUserPermissionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteUserPermissionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteUserPermissionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteUserPermissionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested DELETE /iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewDeleteUserPermissionNoContent creates a DeleteUserPermissionNoContent with default headers values
func NewDeleteUserPermissionNoContent() *DeleteUserPermissionNoContent {
	return &DeleteUserPermissionNoContent{}
}

/*DeleteUserPermissionNoContent handles this case with default header values.

  Operation succeeded
*/
type DeleteUserPermissionNoContent struct {
}

func (o *DeleteUserPermissionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}][%d] deleteUserPermissionNoContent ", 204)
}

func (o *DeleteUserPermissionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}

// NewDeleteUserPermissionBadRequest creates a DeleteUserPermissionBadRequest with default headers values
func NewDeleteUserPermissionBadRequest() *DeleteUserPermissionBadRequest {
	return &DeleteUserPermissionBadRequest{}
}

/*DeleteUserPermissionBadRequest handles this case with default header values.

  Invalid request
*/
type DeleteUserPermissionBadRequest struct {
}

func (o *DeleteUserPermissionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}][%d] deleteUserPermissionBadRequest ", 400)
}

func (o *DeleteUserPermissionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}

// NewDeleteUserPermissionUnauthorized creates a DeleteUserPermissionUnauthorized with default headers values
func NewDeleteUserPermissionUnauthorized() *DeleteUserPermissionUnauthorized {
	return &DeleteUserPermissionUnauthorized{}
}

/*DeleteUserPermissionUnauthorized handles this case with default header values.

  Unauthorized access
*/
type DeleteUserPermissionUnauthorized struct {
}

func (o *DeleteUserPermissionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}][%d] deleteUserPermissionUnauthorized ", 401)
}

func (o *DeleteUserPermissionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}

// NewDeleteUserPermissionForbidden creates a DeleteUserPermissionForbidden with default headers values
func NewDeleteUserPermissionForbidden() *DeleteUserPermissionForbidden {
	return &DeleteUserPermissionForbidden{}
}

/*DeleteUserPermissionForbidden handles this case with default header values.

  Forbidden
*/
type DeleteUserPermissionForbidden struct {
}

func (o *DeleteUserPermissionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}][%d] deleteUserPermissionForbidden ", 403)
}

func (o *DeleteUserPermissionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}

// NewDeleteUserPermissionNotFound creates a DeleteUserPermissionNotFound with default headers values
func NewDeleteUserPermissionNotFound() *DeleteUserPermissionNotFound {
	return &DeleteUserPermissionNotFound{}
}

/*DeleteUserPermissionNotFound handles this case with default header values.

  Data not found
*/
type DeleteUserPermissionNotFound struct {
}

func (o *DeleteUserPermissionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}][%d] deleteUserPermissionNotFound ", 404)
}

func (o *DeleteUserPermissionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}
