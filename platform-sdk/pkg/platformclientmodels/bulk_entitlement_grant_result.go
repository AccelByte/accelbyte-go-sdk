// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BulkEntitlementGrantResult bulk entitlement grant result
//
// swagger:model BulkEntitlementGrantResult
type BulkEntitlementGrantResult struct {

	// fail list
	FailList []*EntitlementGrantResult `json:"failList"`

	// status
	// Enum: [FAIL PARTIAL_SUCCESS SUCCESS]
	Status string `json:"status,omitempty"`

	// success list
	SuccessList []*EntitlementGrantResult `json:"successList"`
}

// Validate validates this bulk entitlement grant result
func (m *BulkEntitlementGrantResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccessList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkEntitlementGrantResult) validateFailList(formats strfmt.Registry) error {

	if swag.IsZero(m.FailList) { // not required
		return nil
	}

	for i := 0; i < len(m.FailList); i++ {
		if swag.IsZero(m.FailList[i]) { // not required
			continue
		}

		if m.FailList[i] != nil {
			if err := m.FailList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var bulkEntitlementGrantResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FAIL","PARTIAL_SUCCESS","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bulkEntitlementGrantResultTypeStatusPropEnum = append(bulkEntitlementGrantResultTypeStatusPropEnum, v)
	}
}

const (

	// BulkEntitlementGrantResultStatusFAIL captures enum value "FAIL"
	BulkEntitlementGrantResultStatusFAIL string = "FAIL"

	// BulkEntitlementGrantResultStatusPARTIALSUCCESS captures enum value "PARTIAL_SUCCESS"
	BulkEntitlementGrantResultStatusPARTIALSUCCESS string = "PARTIAL_SUCCESS"

	// BulkEntitlementGrantResultStatusSUCCESS captures enum value "SUCCESS"
	BulkEntitlementGrantResultStatusSUCCESS string = "SUCCESS"
)

// prop value enum
func (m *BulkEntitlementGrantResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bulkEntitlementGrantResultTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BulkEntitlementGrantResult) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *BulkEntitlementGrantResult) validateSuccessList(formats strfmt.Registry) error {

	if swag.IsZero(m.SuccessList) { // not required
		return nil
	}

	for i := 0; i < len(m.SuccessList); i++ {
		if swag.IsZero(m.SuccessList[i]) { // not required
			continue
		}

		if m.SuccessList[i] != nil {
			if err := m.SuccessList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("successList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkEntitlementGrantResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkEntitlementGrantResult) UnmarshalBinary(b []byte) error {
	var res BulkEntitlementGrantResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
