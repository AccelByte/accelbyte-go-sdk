{
  "host": "demo.accelbyte.io",
  "info": {
    "description": "Justice QoS Manager Service",
    "title": "Justice QoS Manager Service",
    "version": ""
  },
  "schemes": [
    "https"
  ],
  "externalDocs": {
    "description": "API Docs",
    "url": "https://stage.accelbyte.io/qosm/apidocs"
  },
  "securityDefinitions": {
    "HasPermission": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "ADMIN:NAMESPACE:{namespace}:QOS:SERVER [UPDATE]": "ADMIN:NAMESPACE:{namespace}:QOS:SERVER [UPDATE]",
        "ADMIN:QOS:SERVER [DELETE]": "ADMIN:QOS:SERVER [DELETE]",
        "ADMIN:QOS:SERVER []": "ADMIN:QOS:SERVER []"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "HasScope": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "social": "social"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "paths": {
    "/qosm/admin/namespaces/{namespace}/servers/{region}": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:QOS:SERVER [UPDATE]\nRequired scope: social\n\nThis endpoint updates the registered QoS service\u0026#39;s configurable configuration\u0026#39;.\n```",
        "operationId": "UpdateServerConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateServerRequest"
            }
          },
          {
            "description": "namespace of the QoS",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "original region of the QoS",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "record updated"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "server record not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:QOS:SERVER [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Update QoS Service configuration",
        "tags": [
          "Admin"
        ]
      }
    },
    "/qosm/admin/servers/{region}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:QOS:SERVER [DELETE]\nRequired scope: social\n\nThis endpoint delete a registered QoS service record.\n```",
        "operationId": "DeleteServer",
        "parameters": [
          {
            "description": "region of the QoS",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "record deleted"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:QOS:SERVER [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a QoS service record",
        "tags": [
          "Admin"
        ]
      }
    },
    "/qosm/admin/servers/{region}/alias": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:QOS:SERVER [UDPATE]\nRequired scope: social\n\nThis endpoint modifies a registered QoS service\u0026#39;s region alias.\n```",
        "operationId": "SetServerAlias",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.SetAliasRequest"
            }
          },
          {
            "description": "original region of the QoS",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "record updated"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "server record not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:QOS:SERVER []"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Modify a QoS service's region alias",
        "tags": [
          "Admin"
        ]
      }
    },
    "/qosm/public/namespaces/{namespace}/qos": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nThis endpoint lists all QoS services available in all regions.\n\nThis endpoint is intended to be called by game client to find out all available regions.\nAfter getting a list of QoS on each region, game client is expected to ping each one with UDP\nconnection as described below:\n\n1. Make UDP connection to each QoS\u0026#39;s IP:Port\n2. Send string \u0026#34;PING\u0026#34; after connection established\n3. Wait for string \u0026#34;PONG\u0026#34; response\n4. Note the request-response latency for each QoS in each region\n\nThe game then can use ping latency information to either:\n1. Inform the player on these latencies and let player choose preferred region\n2. Send the latency list to Matchmaking Service so that player can be matched with other players\n   in nearby regions\n```",
        "operationId": "ListServerPerNamespace",
        "parameters": [
          {
            "description": "namespace of the QoS",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "QoS status, available value: ACTIVE, INACTIVE, UNREACHABLE",
            "in": "query",
            "name": "status",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "list of QoS services returned",
            "schema": {
              "$ref": "#/definitions/models.ListServerResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get list of QoS services per region",
        "tags": [
          "Public"
        ]
      }
    },
    "/qosm/public/qos": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nThis endpoint lists all QoS services available in all regions.\n\nThis endpoint is intended to be called by game client to find out all available regions.\nAfter getting a list of QoS on each region, game client is expected to ping each one with UDP\nconnection as described below:\n\n1. Make UDP connection to each QoS\u0026#39;s IP:Port\n2. Send string \u0026#34;PING\u0026#34; after connection established\n3. Wait for string \u0026#34;PONG\u0026#34; response\n4. Note the request-response latency for each QoS in each region\n\nThe game then can use ping latency information to either:\n1. Inform the player on these latencies and let player choose preferred region\n2. Send the latency list to Matchmaking Service so that player can be matched with other players\n   in nearby regions\n```",
        "operationId": "ListServer",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "list of QoS services returned",
            "schema": {
              "$ref": "#/definitions/models.ListServerResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get list of QoS services",
        "tags": [
          "Public"
        ]
      }
    },
    "/qosm/servers/heartbeat": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: QOS:SERVER [CREATE][UPDATE]\nRequired scope: social\n\nThis endpoint is intended to be called by QoS service \nto register and periodically let QoS Manager know that it is still alive.\n```",
        "operationId": "Heartbeat",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.HeartbeatRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "heartbeat received"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Send heartbeat",
        "tags": [
          "Server"
        ]
      }
    }
  },
  "definitions": {
    "models.HeartbeatRequest": {
      "properties": {
        "ip": {
          "type": "string"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        },
        "region": {
          "type": "string"
        }
      },
      "required": [
        "ip",
        "port",
        "region"
      ]
    },
    "models.ListServerResponse": {
      "properties": {
        "servers": {
          "items": {
            "$ref": "#/definitions/models.Server"
          },
          "type": "array"
        }
      },
      "required": [
        "servers"
      ]
    },
    "models.Server": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "last_update": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "port": {
          "format": "int32",
          "type": "integer"
        },
        "region": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "required": [
        "alias",
        "ip",
        "last_update",
        "port",
        "region",
        "status"
      ]
    },
    "models.SetAliasRequest": {
      "properties": {
        "alias": {
          "type": "string"
        }
      },
      "required": [
        "alias"
      ]
    },
    "models.UpdateServerRequest": {
      "properties": {
        "status": {
          "type": "string"
        }
      },
      "required": [
        "status"
      ]
    },
    "response.Error": {
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "message"
      ]
    }
  },
  "x-docs": {
    "alias": "qosm",
    "host": "https://stage.accelbyte.io",
    "path": "/qosm/apidocs/api.json"
  },
  "x-version": {
    "buildDate": "2023-02-23T11:45:01+00:00",
    "gitHash": "21f27d0a207a881e0dd59026520221e0b057fe8f",
    "name": "Justice QoS Manager Service",
    "revisionID": "1.18.0",
    "version": "1.18.0",
    "version-roles-seeding": "0.0.3"
  }
}