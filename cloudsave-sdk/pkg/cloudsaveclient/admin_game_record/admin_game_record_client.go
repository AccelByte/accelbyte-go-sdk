// Code generated by go-swagger; DO NOT EDIT.

package admin_game_record

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"reflect"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new admin game record API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for admin game record API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAdminGameRecordHandlerV1(params *DeleteAdminGameRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*DeleteAdminGameRecordHandlerV1NoContent, *DeleteAdminGameRecordHandlerV1InternalServerError, error)

	GetGameRecordHandlerByKeyV1(params *GetGameRecordHandlerByKeyV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetGameRecordHandlerByKeyV1OK, *GetGameRecordHandlerByKeyV1InternalServerError, error)

	ListGameRecordsHandlerV1(params *ListGameRecordsHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*ListGameRecordsHandlerV1OK, *ListGameRecordsHandlerV1InternalServerError, error)

	PostAdminGameRecordHandlerV1(params *PostAdminGameRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PostAdminGameRecordHandlerV1OK, *PostAdminGameRecordHandlerV1InternalServerError, error)

	PutAdminGameRecordHandlerV1(params *PutAdminGameRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PutAdminGameRecordHandlerV1OK, *PutAdminGameRecordHandlerV1InternalServerError, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAdminGameRecordHandlerV1 purges all records under the given key

  Required permission: ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [DELETE]

Required scope: social

This endpoints is to store arbitrary JSON data in namespace-level
*/
func (a *Client) DeleteAdminGameRecordHandlerV1(params *DeleteAdminGameRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*DeleteAdminGameRecordHandlerV1NoContent, *DeleteAdminGameRecordHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAdminGameRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAdminGameRecordHandlerV1",
		Method:             "DELETE",
		PathPattern:        "/cloudsave/v1/admin/namespaces/{namespace}/records/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAdminGameRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *DeleteAdminGameRecordHandlerV1NoContent:
		return v, nil, nil
	case *DeleteAdminGameRecordHandlerV1InternalServerError:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  GetGameRecordHandlerByKeyV1 retrieves a record value by its key

  Required permission: ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [READ]

Required scope: social

Get a record by its key in namespace-level.
*/
func (a *Client) GetGameRecordHandlerByKeyV1(params *GetGameRecordHandlerByKeyV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetGameRecordHandlerByKeyV1OK, *GetGameRecordHandlerByKeyV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGameRecordHandlerByKeyV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGameRecordHandlerByKeyV1",
		Method:             "GET",
		PathPattern:        "/cloudsave/v1/admin/namespaces/{namespace}/records/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGameRecordHandlerByKeyV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *GetGameRecordHandlerByKeyV1OK:
		return v, nil, nil
	case *GetGameRecordHandlerByKeyV1InternalServerError:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  ListGameRecordsHandlerV1 retrieves list of records key by namespace

  Required permission: ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [READ]

Required scope: social

Retrieve list of records key by namespace
*/
func (a *Client) ListGameRecordsHandlerV1(params *ListGameRecordsHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*ListGameRecordsHandlerV1OK, *ListGameRecordsHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGameRecordsHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listGameRecordsHandlerV1",
		Method:             "GET",
		PathPattern:        "/cloudsave/v1/admin/namespaces/{namespace}/records",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGameRecordsHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *ListGameRecordsHandlerV1OK:
		return v, nil, nil
	case *ListGameRecordsHandlerV1InternalServerError:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PostAdminGameRecordHandlerV1 saves namespace level record

  Required permission: ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [WRITE]

Required scope: social

This endpoints is to store arbitrary JSON data in namespace-level.
*/
func (a *Client) PostAdminGameRecordHandlerV1(params *PostAdminGameRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PostAdminGameRecordHandlerV1OK, *PostAdminGameRecordHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAdminGameRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAdminGameRecordHandlerV1",
		Method:             "POST",
		PathPattern:        "/cloudsave/v1/admin/namespaces/{namespace}/records/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAdminGameRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *PostAdminGameRecordHandlerV1OK:
		return v, nil, nil
	case *PostAdminGameRecordHandlerV1InternalServerError:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PutAdminGameRecordHandlerV1 saves or replace game record

  Required permission: ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [UPDATE]

Required scope: social

This endpoints is to store arbitrary JSON data in namespace-level
*/
func (a *Client) PutAdminGameRecordHandlerV1(params *PutAdminGameRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PutAdminGameRecordHandlerV1OK, *PutAdminGameRecordHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAdminGameRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAdminGameRecordHandlerV1",
		Method:             "PUT",
		PathPattern:        "/cloudsave/v1/admin/namespaces/{namespace}/records/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAdminGameRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *PutAdminGameRecordHandlerV1OK:
		return v, nil, nil
	case *PutAdminGameRecordHandlerV1InternalServerError:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
