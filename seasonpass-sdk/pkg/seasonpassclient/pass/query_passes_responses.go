// Code generated by go-swagger; DO NOT EDIT.

package pass

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/seasonpass-sdk/pkg/seasonpassclientmodels"
)

// QueryPassesReader is a Reader for the QueryPasses structure.
type QueryPassesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryPassesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryPassesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryPassesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewQueryPassesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /admin/namespaces/{namespace}/seasons/{seasonId}/passes returns an error %d: %s", response.Code(), string(data))
	}
}

// NewQueryPassesOK creates a QueryPassesOK with default headers values
func NewQueryPassesOK() *QueryPassesOK {
	return &QueryPassesOK{}
}

/*QueryPassesOK handles this case with default header values.

  successful operation
*/
type QueryPassesOK struct {
	Payload []*seasonpassclientmodels.PassInfo
}

func (o *QueryPassesOK) Error() string {
	return fmt.Sprintf("[GET /admin/namespaces/{namespace}/seasons/{seasonId}/passes][%d] queryPassesOK  %+v", 200, o.Payload)
}

func (o *QueryPassesOK) GetPayload() []*seasonpassclientmodels.PassInfo {
	return o.Payload
}

func (o *QueryPassesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryPassesBadRequest creates a QueryPassesBadRequest with default headers values
func NewQueryPassesBadRequest() *QueryPassesBadRequest {
	return &QueryPassesBadRequest{}
}

/*QueryPassesBadRequest handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20026</td><td>publisher namespace not allowed</td></tr></table>
*/
type QueryPassesBadRequest struct {
	Payload *seasonpassclientmodels.ErrorEntity
}

func (o *QueryPassesBadRequest) Error() string {
	return fmt.Sprintf("[GET /admin/namespaces/{namespace}/seasons/{seasonId}/passes][%d] queryPassesBadRequest  %+v", 400, o.Payload)
}

func (o *QueryPassesBadRequest) GetPayload() *seasonpassclientmodels.ErrorEntity {
	return o.Payload
}

func (o *QueryPassesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(seasonpassclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryPassesNotFound creates a QueryPassesNotFound with default headers values
func NewQueryPassesNotFound() *QueryPassesNotFound {
	return &QueryPassesNotFound{}
}

/*QueryPassesNotFound handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>49143</td><td>Season [{seasonId}] does not exist in namespace [{namespace}]</td></tr></table>
*/
type QueryPassesNotFound struct {
	Payload *seasonpassclientmodels.ErrorEntity
}

func (o *QueryPassesNotFound) Error() string {
	return fmt.Sprintf("[GET /admin/namespaces/{namespace}/seasons/{seasonId}/passes][%d] queryPassesNotFound  %+v", 404, o.Payload)
}

func (o *QueryPassesNotFound) GetPayload() *seasonpassclientmodels.ErrorEntity {
	return o.Payload
}

func (o *QueryPassesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(seasonpassclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
