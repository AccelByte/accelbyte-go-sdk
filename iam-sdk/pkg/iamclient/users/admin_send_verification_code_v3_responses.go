// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// AdminSendVerificationCodeV3Reader is a Reader for the AdminSendVerificationCodeV3 structure.
type AdminSendVerificationCodeV3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminSendVerificationCodeV3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAdminSendVerificationCodeV3NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminSendVerificationCodeV3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminSendVerificationCodeV3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAdminSendVerificationCodeV3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAdminSendVerificationCodeV3NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewAdminSendVerificationCodeV3Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 429:
		result := NewAdminSendVerificationCodeV3TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /iam/v3/admin/namespaces/{namespace}/users/{userId}/code/request returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminSendVerificationCodeV3NoContent creates a AdminSendVerificationCodeV3NoContent with default headers values
func NewAdminSendVerificationCodeV3NoContent() *AdminSendVerificationCodeV3NoContent {
	return &AdminSendVerificationCodeV3NoContent{}
}

/*AdminSendVerificationCodeV3NoContent handles this case with default header values.

  Operation succeeded
*/
type AdminSendVerificationCodeV3NoContent struct {
}

func (o *AdminSendVerificationCodeV3NoContent) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/users/{userId}/code/request][%d] adminSendVerificationCodeV3NoContent ", 204)
}

func (o *AdminSendVerificationCodeV3NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAdminSendVerificationCodeV3BadRequest creates a AdminSendVerificationCodeV3BadRequest with default headers values
func NewAdminSendVerificationCodeV3BadRequest() *AdminSendVerificationCodeV3BadRequest {
	return &AdminSendVerificationCodeV3BadRequest{}
}

/*AdminSendVerificationCodeV3BadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>
*/
type AdminSendVerificationCodeV3BadRequest struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminSendVerificationCodeV3BadRequest) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/users/{userId}/code/request][%d] adminSendVerificationCodeV3BadRequest  %+v", 400, o.ToJSONString())
}

func (o *AdminSendVerificationCodeV3BadRequest) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminSendVerificationCodeV3BadRequest) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminSendVerificationCodeV3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminSendVerificationCodeV3Unauthorized creates a AdminSendVerificationCodeV3Unauthorized with default headers values
func NewAdminSendVerificationCodeV3Unauthorized() *AdminSendVerificationCodeV3Unauthorized {
	return &AdminSendVerificationCodeV3Unauthorized{}
}

/*AdminSendVerificationCodeV3Unauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>
*/
type AdminSendVerificationCodeV3Unauthorized struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminSendVerificationCodeV3Unauthorized) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/users/{userId}/code/request][%d] adminSendVerificationCodeV3Unauthorized  %+v", 401, o.ToJSONString())
}

func (o *AdminSendVerificationCodeV3Unauthorized) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminSendVerificationCodeV3Unauthorized) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminSendVerificationCodeV3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminSendVerificationCodeV3Forbidden creates a AdminSendVerificationCodeV3Forbidden with default headers values
func NewAdminSendVerificationCodeV3Forbidden() *AdminSendVerificationCodeV3Forbidden {
	return &AdminSendVerificationCodeV3Forbidden{}
}

/*AdminSendVerificationCodeV3Forbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10146</td><td>userID not match</td></tr></table>
*/
type AdminSendVerificationCodeV3Forbidden struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminSendVerificationCodeV3Forbidden) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/users/{userId}/code/request][%d] adminSendVerificationCodeV3Forbidden  %+v", 403, o.ToJSONString())
}

func (o *AdminSendVerificationCodeV3Forbidden) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminSendVerificationCodeV3Forbidden) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminSendVerificationCodeV3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminSendVerificationCodeV3NotFound creates a AdminSendVerificationCodeV3NotFound with default headers values
func NewAdminSendVerificationCodeV3NotFound() *AdminSendVerificationCodeV3NotFound {
	return &AdminSendVerificationCodeV3NotFound{}
}

/*AdminSendVerificationCodeV3NotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10171</td><td>email address not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>
*/
type AdminSendVerificationCodeV3NotFound struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminSendVerificationCodeV3NotFound) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/users/{userId}/code/request][%d] adminSendVerificationCodeV3NotFound  %+v", 404, o.ToJSONString())
}

func (o *AdminSendVerificationCodeV3NotFound) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminSendVerificationCodeV3NotFound) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminSendVerificationCodeV3NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminSendVerificationCodeV3Conflict creates a AdminSendVerificationCodeV3Conflict with default headers values
func NewAdminSendVerificationCodeV3Conflict() *AdminSendVerificationCodeV3Conflict {
	return &AdminSendVerificationCodeV3Conflict{}
}

/*AdminSendVerificationCodeV3Conflict handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10140</td><td>user verified</td></tr><tr><td>10133</td><td>email already used</td></tr></table>
*/
type AdminSendVerificationCodeV3Conflict struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminSendVerificationCodeV3Conflict) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/users/{userId}/code/request][%d] adminSendVerificationCodeV3Conflict  %+v", 409, o.ToJSONString())
}

func (o *AdminSendVerificationCodeV3Conflict) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminSendVerificationCodeV3Conflict) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminSendVerificationCodeV3Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminSendVerificationCodeV3TooManyRequests creates a AdminSendVerificationCodeV3TooManyRequests with default headers values
func NewAdminSendVerificationCodeV3TooManyRequests() *AdminSendVerificationCodeV3TooManyRequests {
	return &AdminSendVerificationCodeV3TooManyRequests{}
}

/*AdminSendVerificationCodeV3TooManyRequests handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20007</td><td>too many requests</td></tr></table>
*/
type AdminSendVerificationCodeV3TooManyRequests struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminSendVerificationCodeV3TooManyRequests) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/users/{userId}/code/request][%d] adminSendVerificationCodeV3TooManyRequests  %+v", 429, o.ToJSONString())
}

func (o *AdminSendVerificationCodeV3TooManyRequests) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminSendVerificationCodeV3TooManyRequests) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminSendVerificationCodeV3TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
