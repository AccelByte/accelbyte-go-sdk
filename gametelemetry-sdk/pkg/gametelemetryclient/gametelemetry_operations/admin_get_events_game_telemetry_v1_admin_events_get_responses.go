// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package gametelemetry_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/gametelemetry-sdk/pkg/gametelemetryclientmodels"
)

// AdminGetEventsGameTelemetryV1AdminEventsGetReader is a Reader for the AdminGetEventsGameTelemetryV1AdminEventsGet structure.
type AdminGetEventsGameTelemetryV1AdminEventsGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminGetEventsGameTelemetryV1AdminEventsGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminGetEventsGameTelemetryV1AdminEventsGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewAdminGetEventsGameTelemetryV1AdminEventsGetUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /game-telemetry/v1/admin/events returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminGetEventsGameTelemetryV1AdminEventsGetOK creates a AdminGetEventsGameTelemetryV1AdminEventsGetOK with default headers values
func NewAdminGetEventsGameTelemetryV1AdminEventsGetOK() *AdminGetEventsGameTelemetryV1AdminEventsGetOK {
	return &AdminGetEventsGameTelemetryV1AdminEventsGetOK{}
}

/*AdminGetEventsGameTelemetryV1AdminEventsGetOK handles this case with default header values.

  Successful Response
*/
type AdminGetEventsGameTelemetryV1AdminEventsGetOK struct {
	Payload interface{}
}

func (o *AdminGetEventsGameTelemetryV1AdminEventsGetOK) Error() string {
	return fmt.Sprintf("[GET /game-telemetry/v1/admin/events][%d] adminGetEventsGameTelemetryV1AdminEventsGetOK  %+v", 200, o.Payload)
}

func (o *AdminGetEventsGameTelemetryV1AdminEventsGetOK) GetPayload() interface{} {
	return o.Payload
}

func (o *AdminGetEventsGameTelemetryV1AdminEventsGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminGetEventsGameTelemetryV1AdminEventsGetUnprocessableEntity creates a AdminGetEventsGameTelemetryV1AdminEventsGetUnprocessableEntity with default headers values
func NewAdminGetEventsGameTelemetryV1AdminEventsGetUnprocessableEntity() *AdminGetEventsGameTelemetryV1AdminEventsGetUnprocessableEntity {
	return &AdminGetEventsGameTelemetryV1AdminEventsGetUnprocessableEntity{}
}

/*AdminGetEventsGameTelemetryV1AdminEventsGetUnprocessableEntity handles this case with default header values.

  Validation Error
*/
type AdminGetEventsGameTelemetryV1AdminEventsGetUnprocessableEntity struct {
	Payload *gametelemetryclientmodels.HTTPValidationError
}

func (o *AdminGetEventsGameTelemetryV1AdminEventsGetUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /game-telemetry/v1/admin/events][%d] adminGetEventsGameTelemetryV1AdminEventsGetUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AdminGetEventsGameTelemetryV1AdminEventsGetUnprocessableEntity) GetPayload() *gametelemetryclientmodels.HTTPValidationError {
	return o.Payload
}

func (o *AdminGetEventsGameTelemetryV1AdminEventsGetUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(gametelemetryclientmodels.HTTPValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
