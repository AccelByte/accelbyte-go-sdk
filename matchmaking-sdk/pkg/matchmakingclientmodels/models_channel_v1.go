// Code generated by go-swagger; DO NOT EDIT.

package matchmakingclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsChannelV1 models channel v1
//
// swagger:model models.ChannelV1
type ModelsChannelV1 struct {

	// deployment
	// Required: true
	Deployment *string `json:"deployment"`

	// description
	// Required: true
	Description *string `json:"description"`

	// find match timeout seconds
	// Required: true
	FindMatchTimeoutSeconds *int32 `json:"findMatchTimeoutSeconds"`

	// game mode
	// Required: true
	GameMode *string `json:"gameMode"`

	// joinable
	// Required: true
	Joinable *bool `json:"joinable"`

	// max delay ms
	// Required: true
	MaxDelayMs *int32 `json:"max_delay_ms"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// rule set
	// Required: true
	RuleSet *ModelsRuleSetV1 `json:"ruleSet"`

	// session queue timeout seconds
	// Required: true
	SessionQueueTimeoutSeconds *int32 `json:"sessionQueueTimeoutSeconds"`

	// slug
	// Required: true
	Slug *string `json:"slug"`

	// social matchmaking
	// Required: true
	SocialMatchmaking *bool `json:"socialMatchmaking"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updatedAt"`

	// use sub gamemode
	// Required: true
	UseSubGamemode *bool `json:"use_sub_gamemode"`
}

// Validate validates this models channel v1
func (m *ModelsChannelV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFindMatchTimeoutSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGameMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJoinable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxDelayMs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionQueueTimeoutSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSocialMatchmaking(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseSubGamemode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsChannelV1) validateDeployment(formats strfmt.Registry) error {

	if err := validate.Required("deployment", "body", m.Deployment); err != nil {
		return err
	}

	return nil
}

func (m *ModelsChannelV1) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ModelsChannelV1) validateFindMatchTimeoutSeconds(formats strfmt.Registry) error {

	if err := validate.Required("findMatchTimeoutSeconds", "body", m.FindMatchTimeoutSeconds); err != nil {
		return err
	}

	return nil
}

func (m *ModelsChannelV1) validateGameMode(formats strfmt.Registry) error {

	if err := validate.Required("gameMode", "body", m.GameMode); err != nil {
		return err
	}

	return nil
}

func (m *ModelsChannelV1) validateJoinable(formats strfmt.Registry) error {

	if err := validate.Required("joinable", "body", m.Joinable); err != nil {
		return err
	}

	return nil
}

func (m *ModelsChannelV1) validateMaxDelayMs(formats strfmt.Registry) error {

	if err := validate.Required("max_delay_ms", "body", m.MaxDelayMs); err != nil {
		return err
	}

	return nil
}

func (m *ModelsChannelV1) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *ModelsChannelV1) validateRuleSet(formats strfmt.Registry) error {

	if err := validate.Required("ruleSet", "body", m.RuleSet); err != nil {
		return err
	}

	if m.RuleSet != nil {
		if err := m.RuleSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ruleSet")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsChannelV1) validateSessionQueueTimeoutSeconds(formats strfmt.Registry) error {

	if err := validate.Required("sessionQueueTimeoutSeconds", "body", m.SessionQueueTimeoutSeconds); err != nil {
		return err
	}

	return nil
}

func (m *ModelsChannelV1) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	return nil
}

func (m *ModelsChannelV1) validateSocialMatchmaking(formats strfmt.Registry) error {

	if err := validate.Required("socialMatchmaking", "body", m.SocialMatchmaking); err != nil {
		return err
	}

	return nil
}

func (m *ModelsChannelV1) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ModelsChannelV1) validateUseSubGamemode(formats strfmt.Registry) error {

	if err := validate.Required("use_sub_gamemode", "body", m.UseSubGamemode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsChannelV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsChannelV1) UnmarshalBinary(b []byte) error {
	var res ModelsChannelV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
