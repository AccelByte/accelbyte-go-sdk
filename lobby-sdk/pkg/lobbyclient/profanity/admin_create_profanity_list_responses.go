// Code generated by go-swagger; DO NOT EDIT.

package profanity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/lobby-sdk/pkg/lobbyclientmodels"
)

// AdminCreateProfanityListReader is a Reader for the AdminCreateProfanityList structure.
type AdminCreateProfanityListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminCreateProfanityListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminCreateProfanityListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminCreateProfanityListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminCreateProfanityListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAdminCreateProfanityListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAdminCreateProfanityListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewAdminCreateProfanityListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /v1/admin/profanity/namespaces/{namespace}/lists returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminCreateProfanityListOK creates a AdminCreateProfanityListOK with default headers values
func NewAdminCreateProfanityListOK() *AdminCreateProfanityListOK {
	return &AdminCreateProfanityListOK{}
}

/*AdminCreateProfanityListOK handles this case with default header values.

  OK
*/
type AdminCreateProfanityListOK struct {
}

func (o *AdminCreateProfanityListOK) Error() string {
	return fmt.Sprintf("[POST /v1/admin/profanity/namespaces/{namespace}/lists][%d] adminCreateProfanityListOK ", 200)
}

func (o *AdminCreateProfanityListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAdminCreateProfanityListBadRequest creates a AdminCreateProfanityListBadRequest with default headers values
func NewAdminCreateProfanityListBadRequest() *AdminCreateProfanityListBadRequest {
	return &AdminCreateProfanityListBadRequest{}
}

/*AdminCreateProfanityListBadRequest handles this case with default header values.

  Bad Request
*/
type AdminCreateProfanityListBadRequest struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminCreateProfanityListBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/admin/profanity/namespaces/{namespace}/lists][%d] adminCreateProfanityListBadRequest  %+v", 400, o.Payload)
}

func (o *AdminCreateProfanityListBadRequest) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminCreateProfanityListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminCreateProfanityListUnauthorized creates a AdminCreateProfanityListUnauthorized with default headers values
func NewAdminCreateProfanityListUnauthorized() *AdminCreateProfanityListUnauthorized {
	return &AdminCreateProfanityListUnauthorized{}
}

/*AdminCreateProfanityListUnauthorized handles this case with default header values.

  Unauthorized
*/
type AdminCreateProfanityListUnauthorized struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminCreateProfanityListUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/admin/profanity/namespaces/{namespace}/lists][%d] adminCreateProfanityListUnauthorized  %+v", 401, o.Payload)
}

func (o *AdminCreateProfanityListUnauthorized) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminCreateProfanityListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminCreateProfanityListForbidden creates a AdminCreateProfanityListForbidden with default headers values
func NewAdminCreateProfanityListForbidden() *AdminCreateProfanityListForbidden {
	return &AdminCreateProfanityListForbidden{}
}

/*AdminCreateProfanityListForbidden handles this case with default header values.

  Forbidden
*/
type AdminCreateProfanityListForbidden struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminCreateProfanityListForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/admin/profanity/namespaces/{namespace}/lists][%d] adminCreateProfanityListForbidden  %+v", 403, o.Payload)
}

func (o *AdminCreateProfanityListForbidden) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminCreateProfanityListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminCreateProfanityListNotFound creates a AdminCreateProfanityListNotFound with default headers values
func NewAdminCreateProfanityListNotFound() *AdminCreateProfanityListNotFound {
	return &AdminCreateProfanityListNotFound{}
}

/*AdminCreateProfanityListNotFound handles this case with default header values.

  Not Found
*/
type AdminCreateProfanityListNotFound struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminCreateProfanityListNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/admin/profanity/namespaces/{namespace}/lists][%d] adminCreateProfanityListNotFound  %+v", 404, o.Payload)
}

func (o *AdminCreateProfanityListNotFound) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminCreateProfanityListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminCreateProfanityListInternalServerError creates a AdminCreateProfanityListInternalServerError with default headers values
func NewAdminCreateProfanityListInternalServerError() *AdminCreateProfanityListInternalServerError {
	return &AdminCreateProfanityListInternalServerError{}
}

/*AdminCreateProfanityListInternalServerError handles this case with default header values.

  Internal Server Error
*/
type AdminCreateProfanityListInternalServerError struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminCreateProfanityListInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/admin/profanity/namespaces/{namespace}/lists][%d] adminCreateProfanityListInternalServerError  %+v", 500, o.Payload)
}

func (o *AdminCreateProfanityListInternalServerError) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminCreateProfanityListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
