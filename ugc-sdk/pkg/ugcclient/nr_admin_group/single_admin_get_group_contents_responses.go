// Code generated by go-swagger; DO NOT EDIT.

package nr_admin_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/ugc-sdk/pkg/ugcclientmodels"
)

// SingleAdminGetGroupContentsReader is a Reader for the SingleAdminGetGroupContents structure.
type SingleAdminGetGroupContentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SingleAdminGetGroupContentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSingleAdminGetGroupContentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSingleAdminGetGroupContentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewSingleAdminGetGroupContentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewSingleAdminGetGroupContentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /ugc/v1/admin/namespaces/{namespace}/groups/{groupId}/contents returns an error %d: %s", response.Code(), string(data))
	}
}

// NewSingleAdminGetGroupContentsOK creates a SingleAdminGetGroupContentsOK with default headers values
func NewSingleAdminGetGroupContentsOK() *SingleAdminGetGroupContentsOK {
	return &SingleAdminGetGroupContentsOK{}
}

/*SingleAdminGetGroupContentsOK handles this case with default header values.

  OK
*/
type SingleAdminGetGroupContentsOK struct {
	Payload *ugcclientmodels.ModelsPaginatedContentDownloadResponse
}

func (o *SingleAdminGetGroupContentsOK) Error() string {
	return fmt.Sprintf("[GET /ugc/v1/admin/namespaces/{namespace}/groups/{groupId}/contents][%d] singleAdminGetGroupContentsOK  %+v", 200, o.Payload)
}

func (o *SingleAdminGetGroupContentsOK) GetPayload() *ugcclientmodels.ModelsPaginatedContentDownloadResponse {
	return o.Payload
}

func (o *SingleAdminGetGroupContentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ModelsPaginatedContentDownloadResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSingleAdminGetGroupContentsUnauthorized creates a SingleAdminGetGroupContentsUnauthorized with default headers values
func NewSingleAdminGetGroupContentsUnauthorized() *SingleAdminGetGroupContentsUnauthorized {
	return &SingleAdminGetGroupContentsUnauthorized{}
}

/*SingleAdminGetGroupContentsUnauthorized handles this case with default header values.

  Unauthorized
*/
type SingleAdminGetGroupContentsUnauthorized struct {
	Payload *ugcclientmodels.ResponseError
}

func (o *SingleAdminGetGroupContentsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /ugc/v1/admin/namespaces/{namespace}/groups/{groupId}/contents][%d] singleAdminGetGroupContentsUnauthorized  %+v", 401, o.Payload)
}

func (o *SingleAdminGetGroupContentsUnauthorized) GetPayload() *ugcclientmodels.ResponseError {
	return o.Payload
}

func (o *SingleAdminGetGroupContentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSingleAdminGetGroupContentsNotFound creates a SingleAdminGetGroupContentsNotFound with default headers values
func NewSingleAdminGetGroupContentsNotFound() *SingleAdminGetGroupContentsNotFound {
	return &SingleAdminGetGroupContentsNotFound{}
}

/*SingleAdminGetGroupContentsNotFound handles this case with default header values.

  Not Found
*/
type SingleAdminGetGroupContentsNotFound struct {
	Payload *ugcclientmodels.ResponseError
}

func (o *SingleAdminGetGroupContentsNotFound) Error() string {
	return fmt.Sprintf("[GET /ugc/v1/admin/namespaces/{namespace}/groups/{groupId}/contents][%d] singleAdminGetGroupContentsNotFound  %+v", 404, o.Payload)
}

func (o *SingleAdminGetGroupContentsNotFound) GetPayload() *ugcclientmodels.ResponseError {
	return o.Payload
}

func (o *SingleAdminGetGroupContentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSingleAdminGetGroupContentsInternalServerError creates a SingleAdminGetGroupContentsInternalServerError with default headers values
func NewSingleAdminGetGroupContentsInternalServerError() *SingleAdminGetGroupContentsInternalServerError {
	return &SingleAdminGetGroupContentsInternalServerError{}
}

/*SingleAdminGetGroupContentsInternalServerError handles this case with default header values.

  Internal Server Error
*/
type SingleAdminGetGroupContentsInternalServerError struct {
	Payload *ugcclientmodels.ResponseError
}

func (o *SingleAdminGetGroupContentsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ugc/v1/admin/namespaces/{namespace}/groups/{groupId}/contents][%d] singleAdminGetGroupContentsInternalServerError  %+v", 500, o.Payload)
}

func (o *SingleAdminGetGroupContentsInternalServerError) GetPayload() *ugcclientmodels.ResponseError {
	return o.Payload
}

func (o *SingleAdminGetGroupContentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
