// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RevocationHistoryInfo revocation history info
//
// swagger:model RevocationHistoryInfo
type RevocationHistoryInfo struct {

	// created at
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt,omitempty"`

	// credit revocations
	CreditRevocations []*CreditRevocation `json:"creditRevocations"`

	// entitlement revocations
	EntitlementRevocations []*EntitlementRevocation `json:"entitlementRevocations"`

	// id
	ID string `json:"id,omitempty"`

	// item revocations
	ItemRevocations []*ItemRevocation `json:"itemRevocations"`

	// meta
	Meta map[string]interface{} `json:"meta,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// revoke entries
	RevokeEntries []*RevokeEntry `json:"revokeEntries"`

	// source
	Source string `json:"source,omitempty"`

	// status
	// Enum: [FAIL SUCCESS]
	Status string `json:"status,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt,omitempty"`

	// userId
	UserID string `json:"userId,omitempty"`
}

// Validate validates this revocation history info
func (m *RevocationHistoryInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditRevocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntitlementRevocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemRevocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevokeEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RevocationHistoryInfo) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RevocationHistoryInfo) validateCreditRevocations(formats strfmt.Registry) error {

	if swag.IsZero(m.CreditRevocations) { // not required
		return nil
	}

	for i := 0; i < len(m.CreditRevocations); i++ {
		if swag.IsZero(m.CreditRevocations[i]) { // not required
			continue
		}

		if m.CreditRevocations[i] != nil {
			if err := m.CreditRevocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("creditRevocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RevocationHistoryInfo) validateEntitlementRevocations(formats strfmt.Registry) error {

	if swag.IsZero(m.EntitlementRevocations) { // not required
		return nil
	}

	for i := 0; i < len(m.EntitlementRevocations); i++ {
		if swag.IsZero(m.EntitlementRevocations[i]) { // not required
			continue
		}

		if m.EntitlementRevocations[i] != nil {
			if err := m.EntitlementRevocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entitlementRevocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RevocationHistoryInfo) validateItemRevocations(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemRevocations) { // not required
		return nil
	}

	for i := 0; i < len(m.ItemRevocations); i++ {
		if swag.IsZero(m.ItemRevocations[i]) { // not required
			continue
		}

		if m.ItemRevocations[i] != nil {
			if err := m.ItemRevocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("itemRevocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RevocationHistoryInfo) validateRevokeEntries(formats strfmt.Registry) error {

	if swag.IsZero(m.RevokeEntries) { // not required
		return nil
	}

	for i := 0; i < len(m.RevokeEntries); i++ {
		if swag.IsZero(m.RevokeEntries[i]) { // not required
			continue
		}

		if m.RevokeEntries[i] != nil {
			if err := m.RevokeEntries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("revokeEntries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var revocationHistoryInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FAIL","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		revocationHistoryInfoTypeStatusPropEnum = append(revocationHistoryInfoTypeStatusPropEnum, v)
	}
}

const (

	// RevocationHistoryInfoStatusFAIL captures enum value "FAIL"
	RevocationHistoryInfoStatusFAIL string = "FAIL"

	// RevocationHistoryInfoStatusSUCCESS captures enum value "SUCCESS"
	RevocationHistoryInfoStatusSUCCESS string = "SUCCESS"
)

// prop value enum
func (m *RevocationHistoryInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, revocationHistoryInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RevocationHistoryInfo) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *RevocationHistoryInfo) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RevocationHistoryInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RevocationHistoryInfo) UnmarshalBinary(b []byte) error {
	var res RevocationHistoryInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
