// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// AdminUpdateUserDeletionStatusV3Reader is a Reader for the AdminUpdateUserDeletionStatusV3 structure.
type AdminUpdateUserDeletionStatusV3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminUpdateUserDeletionStatusV3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAdminUpdateUserDeletionStatusV3NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminUpdateUserDeletionStatusV3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminUpdateUserDeletionStatusV3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAdminUpdateUserDeletionStatusV3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAdminUpdateUserDeletionStatusV3NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewAdminUpdateUserDeletionStatusV3InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PATCH /iam/v3/admin/namespaces/{namespace}/users/{userId}/deletion/status returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminUpdateUserDeletionStatusV3NoContent creates a AdminUpdateUserDeletionStatusV3NoContent with default headers values
func NewAdminUpdateUserDeletionStatusV3NoContent() *AdminUpdateUserDeletionStatusV3NoContent {
	return &AdminUpdateUserDeletionStatusV3NoContent{}
}

/*AdminUpdateUserDeletionStatusV3NoContent handles this case with default header values.

  Operation succeeded
*/
type AdminUpdateUserDeletionStatusV3NoContent struct {
}

func (o *AdminUpdateUserDeletionStatusV3NoContent) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/namespaces/{namespace}/users/{userId}/deletion/status][%d] adminUpdateUserDeletionStatusV3NoContent ", 204)
}

func (o *AdminUpdateUserDeletionStatusV3NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAdminUpdateUserDeletionStatusV3BadRequest creates a AdminUpdateUserDeletionStatusV3BadRequest with default headers values
func NewAdminUpdateUserDeletionStatusV3BadRequest() *AdminUpdateUserDeletionStatusV3BadRequest {
	return &AdminUpdateUserDeletionStatusV3BadRequest{}
}

/*AdminUpdateUserDeletionStatusV3BadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type AdminUpdateUserDeletionStatusV3BadRequest struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminUpdateUserDeletionStatusV3BadRequest) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/namespaces/{namespace}/users/{userId}/deletion/status][%d] adminUpdateUserDeletionStatusV3BadRequest  %+v", 400, o.Payload)
}

func (o *AdminUpdateUserDeletionStatusV3BadRequest) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminUpdateUserDeletionStatusV3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateUserDeletionStatusV3Unauthorized creates a AdminUpdateUserDeletionStatusV3Unauthorized with default headers values
func NewAdminUpdateUserDeletionStatusV3Unauthorized() *AdminUpdateUserDeletionStatusV3Unauthorized {
	return &AdminUpdateUserDeletionStatusV3Unauthorized{}
}

/*AdminUpdateUserDeletionStatusV3Unauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>
*/
type AdminUpdateUserDeletionStatusV3Unauthorized struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminUpdateUserDeletionStatusV3Unauthorized) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/namespaces/{namespace}/users/{userId}/deletion/status][%d] adminUpdateUserDeletionStatusV3Unauthorized  %+v", 401, o.Payload)
}

func (o *AdminUpdateUserDeletionStatusV3Unauthorized) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminUpdateUserDeletionStatusV3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateUserDeletionStatusV3Forbidden creates a AdminUpdateUserDeletionStatusV3Forbidden with default headers values
func NewAdminUpdateUserDeletionStatusV3Forbidden() *AdminUpdateUserDeletionStatusV3Forbidden {
	return &AdminUpdateUserDeletionStatusV3Forbidden{}
}

/*AdminUpdateUserDeletionStatusV3Forbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>
*/
type AdminUpdateUserDeletionStatusV3Forbidden struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminUpdateUserDeletionStatusV3Forbidden) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/namespaces/{namespace}/users/{userId}/deletion/status][%d] adminUpdateUserDeletionStatusV3Forbidden  %+v", 403, o.Payload)
}

func (o *AdminUpdateUserDeletionStatusV3Forbidden) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminUpdateUserDeletionStatusV3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateUserDeletionStatusV3NotFound creates a AdminUpdateUserDeletionStatusV3NotFound with default headers values
func NewAdminUpdateUserDeletionStatusV3NotFound() *AdminUpdateUserDeletionStatusV3NotFound {
	return &AdminUpdateUserDeletionStatusV3NotFound{}
}

/*AdminUpdateUserDeletionStatusV3NotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>
*/
type AdminUpdateUserDeletionStatusV3NotFound struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminUpdateUserDeletionStatusV3NotFound) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/namespaces/{namespace}/users/{userId}/deletion/status][%d] adminUpdateUserDeletionStatusV3NotFound  %+v", 404, o.Payload)
}

func (o *AdminUpdateUserDeletionStatusV3NotFound) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminUpdateUserDeletionStatusV3NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateUserDeletionStatusV3InternalServerError creates a AdminUpdateUserDeletionStatusV3InternalServerError with default headers values
func NewAdminUpdateUserDeletionStatusV3InternalServerError() *AdminUpdateUserDeletionStatusV3InternalServerError {
	return &AdminUpdateUserDeletionStatusV3InternalServerError{}
}

/*AdminUpdateUserDeletionStatusV3InternalServerError handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>
*/
type AdminUpdateUserDeletionStatusV3InternalServerError struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminUpdateUserDeletionStatusV3InternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /iam/v3/admin/namespaces/{namespace}/users/{userId}/deletion/status][%d] adminUpdateUserDeletionStatusV3InternalServerError  %+v", 500, o.Payload)
}

func (o *AdminUpdateUserDeletionStatusV3InternalServerError) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminUpdateUserDeletionStatusV3InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
