// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package friends

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"reflect"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new friends API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for friends API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddFriendsWithoutConfirmation(params *AddFriendsWithoutConfirmationParams, authInfo runtime.ClientAuthInfoWriter) (*AddFriendsWithoutConfirmationNoContent, *AddFriendsWithoutConfirmationBadRequest, *AddFriendsWithoutConfirmationUnauthorized, *AddFriendsWithoutConfirmationForbidden, *AddFriendsWithoutConfirmationInternalServerError, error)
	AddFriendsWithoutConfirmationShort(params *AddFriendsWithoutConfirmationParams, authInfo runtime.ClientAuthInfoWriter) (*AddFriendsWithoutConfirmationNoContent, error)
	GetListOfFriends(params *GetListOfFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetListOfFriendsOK, *GetListOfFriendsBadRequest, *GetListOfFriendsUnauthorized, *GetListOfFriendsForbidden, *GetListOfFriendsInternalServerError, error)
	GetListOfFriendsShort(params *GetListOfFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetListOfFriendsOK, error)
	GetUserFriendsUpdated(params *GetUserFriendsUpdatedParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserFriendsUpdatedOK, *GetUserFriendsUpdatedBadRequest, *GetUserFriendsUpdatedUnauthorized, *GetUserFriendsUpdatedForbidden, *GetUserFriendsUpdatedNotFound, *GetUserFriendsUpdatedInternalServerError, error)
	GetUserFriendsUpdatedShort(params *GetUserFriendsUpdatedParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserFriendsUpdatedOK, error)
	GetUserIncomingFriends(params *GetUserIncomingFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserIncomingFriendsOK, *GetUserIncomingFriendsBadRequest, *GetUserIncomingFriendsUnauthorized, *GetUserIncomingFriendsForbidden, *GetUserIncomingFriendsNotFound, *GetUserIncomingFriendsInternalServerError, error)
	GetUserIncomingFriendsShort(params *GetUserIncomingFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserIncomingFriendsOK, error)
	GetUserOutgoingFriends(params *GetUserOutgoingFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOutgoingFriendsOK, *GetUserOutgoingFriendsBadRequest, *GetUserOutgoingFriendsUnauthorized, *GetUserOutgoingFriendsForbidden, *GetUserOutgoingFriendsNotFound, *GetUserOutgoingFriendsInternalServerError, error)
	GetUserOutgoingFriendsShort(params *GetUserOutgoingFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOutgoingFriendsOK, error)
	UserAcceptFriendRequest(params *UserAcceptFriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserAcceptFriendRequestNoContent, *UserAcceptFriendRequestBadRequest, *UserAcceptFriendRequestUnauthorized, *UserAcceptFriendRequestForbidden, *UserAcceptFriendRequestNotFound, *UserAcceptFriendRequestInternalServerError, error)
	UserAcceptFriendRequestShort(params *UserAcceptFriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserAcceptFriendRequestNoContent, error)
	UserCancelFriendRequest(params *UserCancelFriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserCancelFriendRequestNoContent, *UserCancelFriendRequestBadRequest, *UserCancelFriendRequestUnauthorized, *UserCancelFriendRequestForbidden, *UserCancelFriendRequestNotFound, *UserCancelFriendRequestInternalServerError, error)
	UserCancelFriendRequestShort(params *UserCancelFriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserCancelFriendRequestNoContent, error)
	UserGetFriendshipStatus(params *UserGetFriendshipStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetFriendshipStatusOK, *UserGetFriendshipStatusBadRequest, *UserGetFriendshipStatusUnauthorized, *UserGetFriendshipStatusForbidden, *UserGetFriendshipStatusInternalServerError, error)
	UserGetFriendshipStatusShort(params *UserGetFriendshipStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetFriendshipStatusOK, error)
	UserRejectFriendRequest(params *UserRejectFriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserRejectFriendRequestNoContent, *UserRejectFriendRequestBadRequest, *UserRejectFriendRequestUnauthorized, *UserRejectFriendRequestForbidden, *UserRejectFriendRequestNotFound, *UserRejectFriendRequestInternalServerError, error)
	UserRejectFriendRequestShort(params *UserRejectFriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserRejectFriendRequestNoContent, error)
	UserRequestFriend(params *UserRequestFriendParams, authInfo runtime.ClientAuthInfoWriter) (*UserRequestFriendCreated, *UserRequestFriendBadRequest, *UserRequestFriendUnauthorized, *UserRequestFriendForbidden, *UserRequestFriendNotFound, *UserRequestFriendUnprocessableEntity, *UserRequestFriendInternalServerError, error)
	UserRequestFriendShort(params *UserRequestFriendParams, authInfo runtime.ClientAuthInfoWriter) (*UserRequestFriendCreated, error)
	UserUnfriendRequest(params *UserUnfriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserUnfriendRequestNoContent, *UserUnfriendRequestBadRequest, *UserUnfriendRequestUnauthorized, *UserUnfriendRequestForbidden, *UserUnfriendRequestNotFound, *UserUnfriendRequestInternalServerError, error)
	UserUnfriendRequestShort(params *UserUnfriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserUnfriendRequestNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddFriendsWithoutConfirmation adds friends without confirmation

  Required permission : &lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:FRIENDS [CREATE]&lt;/code&gt; with scope &lt;code&gt;social&lt;/code&gt;
			&lt;br&gt;friends request in a namespace.
*/
func (a *Client) AddFriendsWithoutConfirmation(params *AddFriendsWithoutConfirmationParams, authInfo runtime.ClientAuthInfoWriter) (*AddFriendsWithoutConfirmationNoContent, *AddFriendsWithoutConfirmationBadRequest, *AddFriendsWithoutConfirmationUnauthorized, *AddFriendsWithoutConfirmationForbidden, *AddFriendsWithoutConfirmationInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFriendsWithoutConfirmationParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addFriendsWithoutConfirmation",
		Method:             "POST",
		PathPattern:        "/friends/namespaces/{namespace}/users/{userId}/add/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddFriendsWithoutConfirmationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AddFriendsWithoutConfirmationNoContent:
		return v, nil, nil, nil, nil, nil

	case *AddFriendsWithoutConfirmationBadRequest:
		return nil, v, nil, nil, nil, nil

	case *AddFriendsWithoutConfirmationUnauthorized:
		return nil, nil, v, nil, nil, nil

	case *AddFriendsWithoutConfirmationForbidden:
		return nil, nil, nil, v, nil, nil

	case *AddFriendsWithoutConfirmationInternalServerError:
		return nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

func (a *Client) AddFriendsWithoutConfirmationShort(params *AddFriendsWithoutConfirmationParams, authInfo runtime.ClientAuthInfoWriter) (*AddFriendsWithoutConfirmationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFriendsWithoutConfirmationParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addFriendsWithoutConfirmation",
		Method:             "POST",
		PathPattern:        "/friends/namespaces/{namespace}/users/{userId}/add/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddFriendsWithoutConfirmationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *AddFriendsWithoutConfirmationNoContent:
		return v, nil
	case *AddFriendsWithoutConfirmationBadRequest:
		return nil, v
	case *AddFriendsWithoutConfirmationUnauthorized:
		return nil, v
	case *AddFriendsWithoutConfirmationForbidden:
		return nil, v
	case *AddFriendsWithoutConfirmationInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  GetListOfFriends gets list of friends

  Required permission : &lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:FRIENDS [READ]&lt;/code&gt; with scope &lt;code&gt;social&lt;/code&gt;
&lt;br&gt;get list of friends in a namespace.
*/
func (a *Client) GetListOfFriends(params *GetListOfFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetListOfFriendsOK, *GetListOfFriendsBadRequest, *GetListOfFriendsUnauthorized, *GetListOfFriendsForbidden, *GetListOfFriendsInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListOfFriendsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get list of friends",
		Method:             "GET",
		PathPattern:        "/lobby/v1/admin/friend/namespaces/{namespace}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetListOfFriendsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetListOfFriendsOK:
		return v, nil, nil, nil, nil, nil

	case *GetListOfFriendsBadRequest:
		return nil, v, nil, nil, nil, nil

	case *GetListOfFriendsUnauthorized:
		return nil, nil, v, nil, nil, nil

	case *GetListOfFriendsForbidden:
		return nil, nil, nil, v, nil, nil

	case *GetListOfFriendsInternalServerError:
		return nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

func (a *Client) GetListOfFriendsShort(params *GetListOfFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetListOfFriendsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListOfFriendsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get list of friends",
		Method:             "GET",
		PathPattern:        "/lobby/v1/admin/friend/namespaces/{namespace}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetListOfFriendsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *GetListOfFriendsOK:
		return v, nil
	case *GetListOfFriendsBadRequest:
		return nil, v
	case *GetListOfFriendsUnauthorized:
		return nil, v
	case *GetListOfFriendsForbidden:
		return nil, v
	case *GetListOfFriendsInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  GetUserFriendsUpdated gets list of friends
*/
func (a *Client) GetUserFriendsUpdated(params *GetUserFriendsUpdatedParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserFriendsUpdatedOK, *GetUserFriendsUpdatedBadRequest, *GetUserFriendsUpdatedUnauthorized, *GetUserFriendsUpdatedForbidden, *GetUserFriendsUpdatedNotFound, *GetUserFriendsUpdatedInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserFriendsUpdatedParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserFriendsUpdated",
		Method:             "GET",
		PathPattern:        "/friends/namespaces/{namespace}/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserFriendsUpdatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetUserFriendsUpdatedOK:
		return v, nil, nil, nil, nil, nil, nil

	case *GetUserFriendsUpdatedBadRequest:
		return nil, v, nil, nil, nil, nil, nil

	case *GetUserFriendsUpdatedUnauthorized:
		return nil, nil, v, nil, nil, nil, nil

	case *GetUserFriendsUpdatedForbidden:
		return nil, nil, nil, v, nil, nil, nil

	case *GetUserFriendsUpdatedNotFound:
		return nil, nil, nil, nil, v, nil, nil

	case *GetUserFriendsUpdatedInternalServerError:
		return nil, nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

func (a *Client) GetUserFriendsUpdatedShort(params *GetUserFriendsUpdatedParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserFriendsUpdatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserFriendsUpdatedParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserFriendsUpdated",
		Method:             "GET",
		PathPattern:        "/friends/namespaces/{namespace}/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserFriendsUpdatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *GetUserFriendsUpdatedOK:
		return v, nil
	case *GetUserFriendsUpdatedBadRequest:
		return nil, v
	case *GetUserFriendsUpdatedUnauthorized:
		return nil, v
	case *GetUserFriendsUpdatedForbidden:
		return nil, v
	case *GetUserFriendsUpdatedNotFound:
		return nil, v
	case *GetUserFriendsUpdatedInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  GetUserIncomingFriends gets list of incoming friends
*/
func (a *Client) GetUserIncomingFriends(params *GetUserIncomingFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserIncomingFriendsOK, *GetUserIncomingFriendsBadRequest, *GetUserIncomingFriendsUnauthorized, *GetUserIncomingFriendsForbidden, *GetUserIncomingFriendsNotFound, *GetUserIncomingFriendsInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserIncomingFriendsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserIncomingFriends",
		Method:             "GET",
		PathPattern:        "/friends/namespaces/{namespace}/me/incoming",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserIncomingFriendsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetUserIncomingFriendsOK:
		return v, nil, nil, nil, nil, nil, nil

	case *GetUserIncomingFriendsBadRequest:
		return nil, v, nil, nil, nil, nil, nil

	case *GetUserIncomingFriendsUnauthorized:
		return nil, nil, v, nil, nil, nil, nil

	case *GetUserIncomingFriendsForbidden:
		return nil, nil, nil, v, nil, nil, nil

	case *GetUserIncomingFriendsNotFound:
		return nil, nil, nil, nil, v, nil, nil

	case *GetUserIncomingFriendsInternalServerError:
		return nil, nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

func (a *Client) GetUserIncomingFriendsShort(params *GetUserIncomingFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserIncomingFriendsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserIncomingFriendsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserIncomingFriends",
		Method:             "GET",
		PathPattern:        "/friends/namespaces/{namespace}/me/incoming",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserIncomingFriendsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *GetUserIncomingFriendsOK:
		return v, nil
	case *GetUserIncomingFriendsBadRequest:
		return nil, v
	case *GetUserIncomingFriendsUnauthorized:
		return nil, v
	case *GetUserIncomingFriendsForbidden:
		return nil, v
	case *GetUserIncomingFriendsNotFound:
		return nil, v
	case *GetUserIncomingFriendsInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  GetUserOutgoingFriends gets list of outgoing friends
*/
func (a *Client) GetUserOutgoingFriends(params *GetUserOutgoingFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOutgoingFriendsOK, *GetUserOutgoingFriendsBadRequest, *GetUserOutgoingFriendsUnauthorized, *GetUserOutgoingFriendsForbidden, *GetUserOutgoingFriendsNotFound, *GetUserOutgoingFriendsInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserOutgoingFriendsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserOutgoingFriends",
		Method:             "GET",
		PathPattern:        "/friends/namespaces/{namespace}/me/outgoing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserOutgoingFriendsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetUserOutgoingFriendsOK:
		return v, nil, nil, nil, nil, nil, nil

	case *GetUserOutgoingFriendsBadRequest:
		return nil, v, nil, nil, nil, nil, nil

	case *GetUserOutgoingFriendsUnauthorized:
		return nil, nil, v, nil, nil, nil, nil

	case *GetUserOutgoingFriendsForbidden:
		return nil, nil, nil, v, nil, nil, nil

	case *GetUserOutgoingFriendsNotFound:
		return nil, nil, nil, nil, v, nil, nil

	case *GetUserOutgoingFriendsInternalServerError:
		return nil, nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

func (a *Client) GetUserOutgoingFriendsShort(params *GetUserOutgoingFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOutgoingFriendsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserOutgoingFriendsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserOutgoingFriends",
		Method:             "GET",
		PathPattern:        "/friends/namespaces/{namespace}/me/outgoing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserOutgoingFriendsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *GetUserOutgoingFriendsOK:
		return v, nil
	case *GetUserOutgoingFriendsBadRequest:
		return nil, v
	case *GetUserOutgoingFriendsUnauthorized:
		return nil, v
	case *GetUserOutgoingFriendsForbidden:
		return nil, v
	case *GetUserOutgoingFriendsNotFound:
		return nil, v
	case *GetUserOutgoingFriendsInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  UserAcceptFriendRequest users accept friend
*/
func (a *Client) UserAcceptFriendRequest(params *UserAcceptFriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserAcceptFriendRequestNoContent, *UserAcceptFriendRequestBadRequest, *UserAcceptFriendRequestUnauthorized, *UserAcceptFriendRequestForbidden, *UserAcceptFriendRequestNotFound, *UserAcceptFriendRequestInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAcceptFriendRequestParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userAcceptFriendRequest",
		Method:             "POST",
		PathPattern:        "/friends/namespaces/{namespace}/me/request/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAcceptFriendRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *UserAcceptFriendRequestNoContent:
		return v, nil, nil, nil, nil, nil, nil

	case *UserAcceptFriendRequestBadRequest:
		return nil, v, nil, nil, nil, nil, nil

	case *UserAcceptFriendRequestUnauthorized:
		return nil, nil, v, nil, nil, nil, nil

	case *UserAcceptFriendRequestForbidden:
		return nil, nil, nil, v, nil, nil, nil

	case *UserAcceptFriendRequestNotFound:
		return nil, nil, nil, nil, v, nil, nil

	case *UserAcceptFriendRequestInternalServerError:
		return nil, nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

func (a *Client) UserAcceptFriendRequestShort(params *UserAcceptFriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserAcceptFriendRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAcceptFriendRequestParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userAcceptFriendRequest",
		Method:             "POST",
		PathPattern:        "/friends/namespaces/{namespace}/me/request/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAcceptFriendRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *UserAcceptFriendRequestNoContent:
		return v, nil
	case *UserAcceptFriendRequestBadRequest:
		return nil, v
	case *UserAcceptFriendRequestUnauthorized:
		return nil, v
	case *UserAcceptFriendRequestForbidden:
		return nil, v
	case *UserAcceptFriendRequestNotFound:
		return nil, v
	case *UserAcceptFriendRequestInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  UserCancelFriendRequest users cancel a friend request
*/
func (a *Client) UserCancelFriendRequest(params *UserCancelFriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserCancelFriendRequestNoContent, *UserCancelFriendRequestBadRequest, *UserCancelFriendRequestUnauthorized, *UserCancelFriendRequestForbidden, *UserCancelFriendRequestNotFound, *UserCancelFriendRequestInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCancelFriendRequestParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userCancelFriendRequest",
		Method:             "POST",
		PathPattern:        "/friends/namespaces/{namespace}/me/request/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCancelFriendRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *UserCancelFriendRequestNoContent:
		return v, nil, nil, nil, nil, nil, nil

	case *UserCancelFriendRequestBadRequest:
		return nil, v, nil, nil, nil, nil, nil

	case *UserCancelFriendRequestUnauthorized:
		return nil, nil, v, nil, nil, nil, nil

	case *UserCancelFriendRequestForbidden:
		return nil, nil, nil, v, nil, nil, nil

	case *UserCancelFriendRequestNotFound:
		return nil, nil, nil, nil, v, nil, nil

	case *UserCancelFriendRequestInternalServerError:
		return nil, nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

func (a *Client) UserCancelFriendRequestShort(params *UserCancelFriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserCancelFriendRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCancelFriendRequestParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userCancelFriendRequest",
		Method:             "POST",
		PathPattern:        "/friends/namespaces/{namespace}/me/request/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCancelFriendRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *UserCancelFriendRequestNoContent:
		return v, nil
	case *UserCancelFriendRequestBadRequest:
		return nil, v
	case *UserCancelFriendRequestUnauthorized:
		return nil, v
	case *UserCancelFriendRequestForbidden:
		return nil, v
	case *UserCancelFriendRequestNotFound:
		return nil, v
	case *UserCancelFriendRequestInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  UserGetFriendshipStatus users get friendship status
*/
func (a *Client) UserGetFriendshipStatus(params *UserGetFriendshipStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetFriendshipStatusOK, *UserGetFriendshipStatusBadRequest, *UserGetFriendshipStatusUnauthorized, *UserGetFriendshipStatusForbidden, *UserGetFriendshipStatusInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetFriendshipStatusParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userGetFriendshipStatus",
		Method:             "GET",
		PathPattern:        "/friends/namespaces/{namespace}/me/status/{friendId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetFriendshipStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *UserGetFriendshipStatusOK:
		return v, nil, nil, nil, nil, nil

	case *UserGetFriendshipStatusBadRequest:
		return nil, v, nil, nil, nil, nil

	case *UserGetFriendshipStatusUnauthorized:
		return nil, nil, v, nil, nil, nil

	case *UserGetFriendshipStatusForbidden:
		return nil, nil, nil, v, nil, nil

	case *UserGetFriendshipStatusInternalServerError:
		return nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

func (a *Client) UserGetFriendshipStatusShort(params *UserGetFriendshipStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetFriendshipStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetFriendshipStatusParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userGetFriendshipStatus",
		Method:             "GET",
		PathPattern:        "/friends/namespaces/{namespace}/me/status/{friendId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetFriendshipStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *UserGetFriendshipStatusOK:
		return v, nil
	case *UserGetFriendshipStatusBadRequest:
		return nil, v
	case *UserGetFriendshipStatusUnauthorized:
		return nil, v
	case *UserGetFriendshipStatusForbidden:
		return nil, v
	case *UserGetFriendshipStatusInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  UserRejectFriendRequest users reject a friend request
*/
func (a *Client) UserRejectFriendRequest(params *UserRejectFriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserRejectFriendRequestNoContent, *UserRejectFriendRequestBadRequest, *UserRejectFriendRequestUnauthorized, *UserRejectFriendRequestForbidden, *UserRejectFriendRequestNotFound, *UserRejectFriendRequestInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserRejectFriendRequestParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userRejectFriendRequest",
		Method:             "POST",
		PathPattern:        "/friends/namespaces/{namespace}/me/request/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserRejectFriendRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *UserRejectFriendRequestNoContent:
		return v, nil, nil, nil, nil, nil, nil

	case *UserRejectFriendRequestBadRequest:
		return nil, v, nil, nil, nil, nil, nil

	case *UserRejectFriendRequestUnauthorized:
		return nil, nil, v, nil, nil, nil, nil

	case *UserRejectFriendRequestForbidden:
		return nil, nil, nil, v, nil, nil, nil

	case *UserRejectFriendRequestNotFound:
		return nil, nil, nil, nil, v, nil, nil

	case *UserRejectFriendRequestInternalServerError:
		return nil, nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

func (a *Client) UserRejectFriendRequestShort(params *UserRejectFriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserRejectFriendRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserRejectFriendRequestParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userRejectFriendRequest",
		Method:             "POST",
		PathPattern:        "/friends/namespaces/{namespace}/me/request/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserRejectFriendRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *UserRejectFriendRequestNoContent:
		return v, nil
	case *UserRejectFriendRequestBadRequest:
		return nil, v
	case *UserRejectFriendRequestUnauthorized:
		return nil, v
	case *UserRejectFriendRequestForbidden:
		return nil, v
	case *UserRejectFriendRequestNotFound:
		return nil, v
	case *UserRejectFriendRequestInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  UserRequestFriend users add friend
*/
func (a *Client) UserRequestFriend(params *UserRequestFriendParams, authInfo runtime.ClientAuthInfoWriter) (*UserRequestFriendCreated, *UserRequestFriendBadRequest, *UserRequestFriendUnauthorized, *UserRequestFriendForbidden, *UserRequestFriendNotFound, *UserRequestFriendUnprocessableEntity, *UserRequestFriendInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserRequestFriendParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userRequestFriend",
		Method:             "POST",
		PathPattern:        "/friends/namespaces/{namespace}/me/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserRequestFriendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *UserRequestFriendCreated:
		return v, nil, nil, nil, nil, nil, nil, nil

	case *UserRequestFriendBadRequest:
		return nil, v, nil, nil, nil, nil, nil, nil

	case *UserRequestFriendUnauthorized:
		return nil, nil, v, nil, nil, nil, nil, nil

	case *UserRequestFriendForbidden:
		return nil, nil, nil, v, nil, nil, nil, nil

	case *UserRequestFriendNotFound:
		return nil, nil, nil, nil, v, nil, nil, nil

	case *UserRequestFriendUnprocessableEntity:
		return nil, nil, nil, nil, nil, v, nil, nil

	case *UserRequestFriendInternalServerError:
		return nil, nil, nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

func (a *Client) UserRequestFriendShort(params *UserRequestFriendParams, authInfo runtime.ClientAuthInfoWriter) (*UserRequestFriendCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserRequestFriendParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userRequestFriend",
		Method:             "POST",
		PathPattern:        "/friends/namespaces/{namespace}/me/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserRequestFriendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *UserRequestFriendCreated:
		return v, nil
	case *UserRequestFriendBadRequest:
		return nil, v
	case *UserRequestFriendUnauthorized:
		return nil, v
	case *UserRequestFriendForbidden:
		return nil, v
	case *UserRequestFriendNotFound:
		return nil, v
	case *UserRequestFriendUnprocessableEntity:
		return nil, v
	case *UserRequestFriendInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  UserUnfriendRequest users unfriend a friend
*/
func (a *Client) UserUnfriendRequest(params *UserUnfriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserUnfriendRequestNoContent, *UserUnfriendRequestBadRequest, *UserUnfriendRequestUnauthorized, *UserUnfriendRequestForbidden, *UserUnfriendRequestNotFound, *UserUnfriendRequestInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUnfriendRequestParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userUnfriendRequest",
		Method:             "POST",
		PathPattern:        "/friends/namespaces/{namespace}/me/unfriend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserUnfriendRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *UserUnfriendRequestNoContent:
		return v, nil, nil, nil, nil, nil, nil

	case *UserUnfriendRequestBadRequest:
		return nil, v, nil, nil, nil, nil, nil

	case *UserUnfriendRequestUnauthorized:
		return nil, nil, v, nil, nil, nil, nil

	case *UserUnfriendRequestForbidden:
		return nil, nil, nil, v, nil, nil, nil

	case *UserUnfriendRequestNotFound:
		return nil, nil, nil, nil, v, nil, nil

	case *UserUnfriendRequestInternalServerError:
		return nil, nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

func (a *Client) UserUnfriendRequestShort(params *UserUnfriendRequestParams, authInfo runtime.ClientAuthInfoWriter) (*UserUnfriendRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUnfriendRequestParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userUnfriendRequest",
		Method:             "POST",
		PathPattern:        "/friends/namespaces/{namespace}/me/unfriend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserUnfriendRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *UserUnfriendRequestNoContent:
		return v, nil
	case *UserUnfriendRequestBadRequest:
		return nil, v
	case *UserUnfriendRequestUnauthorized:
		return nil, v
	case *UserUnfriendRequestForbidden:
		return nil, v
	case *UserUnfriendRequestNotFound:
		return nil, v
	case *UserUnfriendRequestInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
