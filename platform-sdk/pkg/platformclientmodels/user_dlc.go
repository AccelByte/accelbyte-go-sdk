// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserDLC user DLC
//
// swagger:model UserDLC
type UserDLC struct {

	// created at
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt,omitempty"`

	// dlcs
	Dlcs []*DLCRecord `json:"dlcs"`

	// id
	ID string `json:"id,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// platform
	// Enum: [EPICGAMES PSN STEAM XBOX]
	Platform string `json:"platform,omitempty"`

	// rvn
	Rvn int32 `json:"rvn,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// Validate validates this user DLC
func (m *UserDLC) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDlcs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserDLC) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserDLC) validateDlcs(formats strfmt.Registry) error {

	if swag.IsZero(m.Dlcs) { // not required
		return nil
	}

	for i := 0; i < len(m.Dlcs); i++ {
		if swag.IsZero(m.Dlcs[i]) { // not required
			continue
		}

		if m.Dlcs[i] != nil {
			if err := m.Dlcs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dlcs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var userDlcTypePlatformPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EPICGAMES","PSN","STEAM","XBOX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userDlcTypePlatformPropEnum = append(userDlcTypePlatformPropEnum, v)
	}
}

const (

	// UserDLCPlatformEPICGAMES captures enum value "EPICGAMES"
	UserDLCPlatformEPICGAMES string = "EPICGAMES"

	// UserDLCPlatformPSN captures enum value "PSN"
	UserDLCPlatformPSN string = "PSN"

	// UserDLCPlatformSTEAM captures enum value "STEAM"
	UserDLCPlatformSTEAM string = "STEAM"

	// UserDLCPlatformXBOX captures enum value "XBOX"
	UserDLCPlatformXBOX string = "XBOX"
)

// prop value enum
func (m *UserDLC) validatePlatformEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userDlcTypePlatformPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserDLC) validatePlatform(formats strfmt.Registry) error {

	if swag.IsZero(m.Platform) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlatformEnum("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *UserDLC) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserDLC) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserDLC) UnmarshalBinary(b []byte) error {
	var res UserDLC
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
