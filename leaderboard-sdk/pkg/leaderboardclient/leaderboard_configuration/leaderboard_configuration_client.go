// Code generated by go-swagger; DO NOT EDIT.

package leaderboard_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"reflect"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new leaderboard configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for leaderboard configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetLeaderboardConfigurationsPublicV2(params *GetLeaderboardConfigurationsPublicV2Params, authInfo runtime.ClientAuthInfoWriter) (*GetLeaderboardConfigurationsPublicV2OK, *GetLeaderboardConfigurationsPublicV2BadRequest, *GetLeaderboardConfigurationsPublicV2Unauthorized, *GetLeaderboardConfigurationsPublicV2Forbidden, *GetLeaderboardConfigurationsPublicV2InternalServerError, error)

	CreateLeaderboardConfigurationAdminV1(params *CreateLeaderboardConfigurationAdminV1Params, authInfo runtime.ClientAuthInfoWriter) (*CreateLeaderboardConfigurationAdminV1Created, *CreateLeaderboardConfigurationAdminV1BadRequest, *CreateLeaderboardConfigurationAdminV1Unauthorized, *CreateLeaderboardConfigurationAdminV1Forbidden, *CreateLeaderboardConfigurationAdminV1Conflict, *CreateLeaderboardConfigurationAdminV1InternalServerError, error)

	CreateLeaderboardConfigurationPublicV1(params *CreateLeaderboardConfigurationPublicV1Params, authInfo runtime.ClientAuthInfoWriter) (*CreateLeaderboardConfigurationPublicV1Created, *CreateLeaderboardConfigurationPublicV1BadRequest, *CreateLeaderboardConfigurationPublicV1Unauthorized, *CreateLeaderboardConfigurationPublicV1Forbidden, *CreateLeaderboardConfigurationPublicV1Conflict, *CreateLeaderboardConfigurationPublicV1InternalServerError, error)

	DeleteBulkLeaderboardConfigurationAdminV1(params *DeleteBulkLeaderboardConfigurationAdminV1Params, authInfo runtime.ClientAuthInfoWriter) (*DeleteBulkLeaderboardConfigurationAdminV1OK, *DeleteBulkLeaderboardConfigurationAdminV1BadRequest, *DeleteBulkLeaderboardConfigurationAdminV1Unauthorized, *DeleteBulkLeaderboardConfigurationAdminV1Forbidden, *DeleteBulkLeaderboardConfigurationAdminV1InternalServerError, error)

	DeleteLeaderboardConfigurationAdminV1(params *DeleteLeaderboardConfigurationAdminV1Params, authInfo runtime.ClientAuthInfoWriter) (*DeleteLeaderboardConfigurationAdminV1NoContent, *DeleteLeaderboardConfigurationAdminV1BadRequest, *DeleteLeaderboardConfigurationAdminV1Unauthorized, *DeleteLeaderboardConfigurationAdminV1Forbidden, *DeleteLeaderboardConfigurationAdminV1NotFound, *DeleteLeaderboardConfigurationAdminV1InternalServerError, error)

	GetLeaderboardConfigurationAdminV1(params *GetLeaderboardConfigurationAdminV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetLeaderboardConfigurationAdminV1OK, *GetLeaderboardConfigurationAdminV1BadRequest, *GetLeaderboardConfigurationAdminV1Unauthorized, *GetLeaderboardConfigurationAdminV1Forbidden, *GetLeaderboardConfigurationAdminV1NotFound, *GetLeaderboardConfigurationAdminV1InternalServerError, error)

	GetLeaderboardConfigurationsAdminV1(params *GetLeaderboardConfigurationsAdminV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetLeaderboardConfigurationsAdminV1OK, *GetLeaderboardConfigurationsAdminV1BadRequest, *GetLeaderboardConfigurationsAdminV1Unauthorized, *GetLeaderboardConfigurationsAdminV1Forbidden, *GetLeaderboardConfigurationsAdminV1InternalServerError, error)

	GetLeaderboardConfigurationsPublicV1(params *GetLeaderboardConfigurationsPublicV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetLeaderboardConfigurationsPublicV1OK, *GetLeaderboardConfigurationsPublicV1BadRequest, *GetLeaderboardConfigurationsPublicV1Unauthorized, *GetLeaderboardConfigurationsPublicV1Forbidden, *GetLeaderboardConfigurationsPublicV1InternalServerError, error)

	UpdateLeaderboardConfigurationAdminV1(params *UpdateLeaderboardConfigurationAdminV1Params, authInfo runtime.ClientAuthInfoWriter) (*UpdateLeaderboardConfigurationAdminV1OK, *UpdateLeaderboardConfigurationAdminV1BadRequest, *UpdateLeaderboardConfigurationAdminV1Unauthorized, *UpdateLeaderboardConfigurationAdminV1Forbidden, *UpdateLeaderboardConfigurationAdminV1NotFound, *UpdateLeaderboardConfigurationAdminV1InternalServerError, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetLeaderboardConfigurationsPublicV2 lists all leaderboards by given namespace

  This endpoint return all leaderboard configurations
*/
func (a *Client) GetLeaderboardConfigurationsPublicV2(params *GetLeaderboardConfigurationsPublicV2Params, authInfo runtime.ClientAuthInfoWriter) (*GetLeaderboardConfigurationsPublicV2OK, *GetLeaderboardConfigurationsPublicV2BadRequest, *GetLeaderboardConfigurationsPublicV2Unauthorized, *GetLeaderboardConfigurationsPublicV2Forbidden, *GetLeaderboardConfigurationsPublicV2InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLeaderboardConfigurationsPublicV2Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLeaderboardConfigurationsPublicV2",
		Method:             "GET",
		PathPattern:        "/leaderboard/v2/public/namespaces/{namespace}/leaderboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLeaderboardConfigurationsPublicV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetLeaderboardConfigurationsPublicV2OK:
		return v, nil, nil, nil, nil, nil
	case *GetLeaderboardConfigurationsPublicV2BadRequest:
		return nil, v, nil, nil, nil, nil
	case *GetLeaderboardConfigurationsPublicV2Unauthorized:
		return nil, nil, v, nil, nil, nil
	case *GetLeaderboardConfigurationsPublicV2Forbidden:
		return nil, nil, nil, v, nil, nil
	case *GetLeaderboardConfigurationsPublicV2InternalServerError:
		return nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  CreateLeaderboardConfigurationAdminV1 creates new leaderboard

  <p>Required permission 'ADMIN:NAMESPACE:{namespace}:LEADERBOARD [CREATE]'</p>
			<p><b>Fields :</b></p>
			<ul><li>LeaderboardConfig code must be lowercase and maximum length is 48 characters. <b>(required)</b>.</li>
				<li>Maximum length for leaderboard name is 128 characters. <b>(required)</b>.</li>
				<li>Start time must be follow RFC3339 standard. e.g. 2020-10-02T15:00:00.05Z<b>(required)</b>.</li>
				<li>Season period must be greater than 31 days.</li>
				<li>If seasonPeriod is filled, the LeaderboardConfig would have seasonal leaderboard.</li>
				<li>Reset Date must be a number 1 - 31. Default is '1'.</li>
				<li>Reset Day must be a number 0 - 6. 0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday (day of week). Default is '0'.</li>
				<li>Reset time must be <b>hours:minutes</b> in 24 hours format e.g. 01:30, 10:30, 15:30, 23:15.Default is '00:00'.</li>
				<li>Stat Code is related with statistic code in statistic service. <b>(required)</b>.</li>
			</ul>

*/
func (a *Client) CreateLeaderboardConfigurationAdminV1(params *CreateLeaderboardConfigurationAdminV1Params, authInfo runtime.ClientAuthInfoWriter) (*CreateLeaderboardConfigurationAdminV1Created, *CreateLeaderboardConfigurationAdminV1BadRequest, *CreateLeaderboardConfigurationAdminV1Unauthorized, *CreateLeaderboardConfigurationAdminV1Forbidden, *CreateLeaderboardConfigurationAdminV1Conflict, *CreateLeaderboardConfigurationAdminV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLeaderboardConfigurationAdminV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createLeaderboardConfigurationAdminV1",
		Method:             "POST",
		PathPattern:        "/leaderboard/v1/admin/namespaces/{namespace}/leaderboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLeaderboardConfigurationAdminV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *CreateLeaderboardConfigurationAdminV1Created:
		return v, nil, nil, nil, nil, nil, nil
	case *CreateLeaderboardConfigurationAdminV1BadRequest:
		return nil, v, nil, nil, nil, nil, nil
	case *CreateLeaderboardConfigurationAdminV1Unauthorized:
		return nil, nil, v, nil, nil, nil, nil
	case *CreateLeaderboardConfigurationAdminV1Forbidden:
		return nil, nil, nil, v, nil, nil, nil
	case *CreateLeaderboardConfigurationAdminV1Conflict:
		return nil, nil, nil, nil, v, nil, nil
	case *CreateLeaderboardConfigurationAdminV1InternalServerError:
		return nil, nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  CreateLeaderboardConfigurationPublicV1 creates new leaderboard

  Public endpoint to create a new leaderboard.

<p>Required permission 'NAMESPACE:{namespace}:LEADERBOARD [CREATE]'</p>
<p><b>Fields :</b></p>
<ul><li>LeaderboardConfig code must be lowercase and maximum length is 48 characters. <b>(required)</b>.</li>
	<li>Maximum length for leaderboard name is 128 characters. <b>(required)</b>.</li>
	<li>Start time must be follow RFC3339 standard. e.g. 2020-10-02T15:00:00.05Z<b>(required)</b>.</li>
	<li>Season period must be greater than 31 days.</li>
	<li>If seasonPeriod is filled, the LeaderboardConfig would have seasonal leaderboard.</li>
	<li>Reset Date must be a number 1 - 31. Default is '1'.</li>
	<li>Reset Day must be a number 0 - 6. 0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday (day of week). Default is '0'.</li>
	<li>Reset time must be <b>hours:minutes</b> in 24 hours format e.g. 01:30, 10:30, 15:30, 23:15.Default is '00:00'.</li>
	<li>Stat Code is related with statistic code in statistic service. <b>(required)</b>.</li>
</ul>

*/
func (a *Client) CreateLeaderboardConfigurationPublicV1(params *CreateLeaderboardConfigurationPublicV1Params, authInfo runtime.ClientAuthInfoWriter) (*CreateLeaderboardConfigurationPublicV1Created, *CreateLeaderboardConfigurationPublicV1BadRequest, *CreateLeaderboardConfigurationPublicV1Unauthorized, *CreateLeaderboardConfigurationPublicV1Forbidden, *CreateLeaderboardConfigurationPublicV1Conflict, *CreateLeaderboardConfigurationPublicV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLeaderboardConfigurationPublicV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createLeaderboardConfigurationPublicV1",
		Method:             "POST",
		PathPattern:        "/leaderboard/v1/public/namespaces/{namespace}/leaderboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLeaderboardConfigurationPublicV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *CreateLeaderboardConfigurationPublicV1Created:
		return v, nil, nil, nil, nil, nil, nil
	case *CreateLeaderboardConfigurationPublicV1BadRequest:
		return nil, v, nil, nil, nil, nil, nil
	case *CreateLeaderboardConfigurationPublicV1Unauthorized:
		return nil, nil, v, nil, nil, nil, nil
	case *CreateLeaderboardConfigurationPublicV1Forbidden:
		return nil, nil, nil, v, nil, nil, nil
	case *CreateLeaderboardConfigurationPublicV1Conflict:
		return nil, nil, nil, nil, v, nil, nil
	case *CreateLeaderboardConfigurationPublicV1InternalServerError:
		return nil, nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  DeleteBulkLeaderboardConfigurationAdminV1 deletes bulk leaderboards response body will contains failed leaderboard with the reason why it s failed to delete

  <p>Required permission 'ADMIN:NAMESPACE:{namespace}:LEADERBOARD [DELETE]'</p>
			<p>This endpoint delete multiple leaderboards configuration in one request</p>

*/
func (a *Client) DeleteBulkLeaderboardConfigurationAdminV1(params *DeleteBulkLeaderboardConfigurationAdminV1Params, authInfo runtime.ClientAuthInfoWriter) (*DeleteBulkLeaderboardConfigurationAdminV1OK, *DeleteBulkLeaderboardConfigurationAdminV1BadRequest, *DeleteBulkLeaderboardConfigurationAdminV1Unauthorized, *DeleteBulkLeaderboardConfigurationAdminV1Forbidden, *DeleteBulkLeaderboardConfigurationAdminV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBulkLeaderboardConfigurationAdminV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBulkLeaderboardConfigurationAdminV1",
		Method:             "POST",
		PathPattern:        "/leaderboard/v1/admin/namespaces/{namespace}/leaderboards/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBulkLeaderboardConfigurationAdminV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *DeleteBulkLeaderboardConfigurationAdminV1OK:
		return v, nil, nil, nil, nil, nil
	case *DeleteBulkLeaderboardConfigurationAdminV1BadRequest:
		return nil, v, nil, nil, nil, nil
	case *DeleteBulkLeaderboardConfigurationAdminV1Unauthorized:
		return nil, nil, v, nil, nil, nil
	case *DeleteBulkLeaderboardConfigurationAdminV1Forbidden:
		return nil, nil, nil, v, nil, nil
	case *DeleteBulkLeaderboardConfigurationAdminV1InternalServerError:
		return nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  DeleteLeaderboardConfigurationAdminV1 deletes leaderboard by leaderboard code

  <p>Required permission 'ADMIN:NAMESPACE:{namespace}:LEADERBOARD [DELETE]'</p>
			<p>This endpoint delete a leaderboard configuration</p>

*/
func (a *Client) DeleteLeaderboardConfigurationAdminV1(params *DeleteLeaderboardConfigurationAdminV1Params, authInfo runtime.ClientAuthInfoWriter) (*DeleteLeaderboardConfigurationAdminV1NoContent, *DeleteLeaderboardConfigurationAdminV1BadRequest, *DeleteLeaderboardConfigurationAdminV1Unauthorized, *DeleteLeaderboardConfigurationAdminV1Forbidden, *DeleteLeaderboardConfigurationAdminV1NotFound, *DeleteLeaderboardConfigurationAdminV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLeaderboardConfigurationAdminV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLeaderboardConfigurationAdminV1",
		Method:             "DELETE",
		PathPattern:        "/leaderboard/v1/admin/namespaces/{namespace}/leaderboards/{leaderboardCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLeaderboardConfigurationAdminV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *DeleteLeaderboardConfigurationAdminV1NoContent:
		return v, nil, nil, nil, nil, nil, nil
	case *DeleteLeaderboardConfigurationAdminV1BadRequest:
		return nil, v, nil, nil, nil, nil, nil
	case *DeleteLeaderboardConfigurationAdminV1Unauthorized:
		return nil, nil, v, nil, nil, nil, nil
	case *DeleteLeaderboardConfigurationAdminV1Forbidden:
		return nil, nil, nil, v, nil, nil, nil
	case *DeleteLeaderboardConfigurationAdminV1NotFound:
		return nil, nil, nil, nil, v, nil, nil
	case *DeleteLeaderboardConfigurationAdminV1InternalServerError:
		return nil, nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  GetLeaderboardConfigurationAdminV1 gets leaderboard by leaderboard code

  <p>Required permission 'ADMIN:NAMESPACE:{namespace}:LEADERBOARD [READ]'</p>
			<p>This endpoint returns a leaderboard configuration</p>

*/
func (a *Client) GetLeaderboardConfigurationAdminV1(params *GetLeaderboardConfigurationAdminV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetLeaderboardConfigurationAdminV1OK, *GetLeaderboardConfigurationAdminV1BadRequest, *GetLeaderboardConfigurationAdminV1Unauthorized, *GetLeaderboardConfigurationAdminV1Forbidden, *GetLeaderboardConfigurationAdminV1NotFound, *GetLeaderboardConfigurationAdminV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLeaderboardConfigurationAdminV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLeaderboardConfigurationAdminV1",
		Method:             "GET",
		PathPattern:        "/leaderboard/v1/admin/namespaces/{namespace}/leaderboards/{leaderboardCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLeaderboardConfigurationAdminV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetLeaderboardConfigurationAdminV1OK:
		return v, nil, nil, nil, nil, nil, nil
	case *GetLeaderboardConfigurationAdminV1BadRequest:
		return nil, v, nil, nil, nil, nil, nil
	case *GetLeaderboardConfigurationAdminV1Unauthorized:
		return nil, nil, v, nil, nil, nil, nil
	case *GetLeaderboardConfigurationAdminV1Forbidden:
		return nil, nil, nil, v, nil, nil, nil
	case *GetLeaderboardConfigurationAdminV1NotFound:
		return nil, nil, nil, nil, v, nil, nil
	case *GetLeaderboardConfigurationAdminV1InternalServerError:
		return nil, nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  GetLeaderboardConfigurationsAdminV1 lists all leaderboards by given namespace

  <p>Required permission 'ADMIN:NAMESPACE:{namespace}:LEADERBOARD [READ]'</p>
			<p>This endpoint return all leaderboard configurations</p>

*/
func (a *Client) GetLeaderboardConfigurationsAdminV1(params *GetLeaderboardConfigurationsAdminV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetLeaderboardConfigurationsAdminV1OK, *GetLeaderboardConfigurationsAdminV1BadRequest, *GetLeaderboardConfigurationsAdminV1Unauthorized, *GetLeaderboardConfigurationsAdminV1Forbidden, *GetLeaderboardConfigurationsAdminV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLeaderboardConfigurationsAdminV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLeaderboardConfigurationsAdminV1",
		Method:             "GET",
		PathPattern:        "/leaderboard/v1/admin/namespaces/{namespace}/leaderboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLeaderboardConfigurationsAdminV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetLeaderboardConfigurationsAdminV1OK:
		return v, nil, nil, nil, nil, nil
	case *GetLeaderboardConfigurationsAdminV1BadRequest:
		return nil, v, nil, nil, nil, nil
	case *GetLeaderboardConfigurationsAdminV1Unauthorized:
		return nil, nil, v, nil, nil, nil
	case *GetLeaderboardConfigurationsAdminV1Forbidden:
		return nil, nil, nil, v, nil, nil
	case *GetLeaderboardConfigurationsAdminV1InternalServerError:
		return nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  GetLeaderboardConfigurationsPublicV1 lists all leaderboards by given namespace

  <p>This endpoint return all leaderboard configurations</p>

*/
func (a *Client) GetLeaderboardConfigurationsPublicV1(params *GetLeaderboardConfigurationsPublicV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetLeaderboardConfigurationsPublicV1OK, *GetLeaderboardConfigurationsPublicV1BadRequest, *GetLeaderboardConfigurationsPublicV1Unauthorized, *GetLeaderboardConfigurationsPublicV1Forbidden, *GetLeaderboardConfigurationsPublicV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLeaderboardConfigurationsPublicV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLeaderboardConfigurationsPublicV1",
		Method:             "GET",
		PathPattern:        "/leaderboard/v1/public/namespaces/{namespace}/leaderboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLeaderboardConfigurationsPublicV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetLeaderboardConfigurationsPublicV1OK:
		return v, nil, nil, nil, nil, nil
	case *GetLeaderboardConfigurationsPublicV1BadRequest:
		return nil, v, nil, nil, nil, nil
	case *GetLeaderboardConfigurationsPublicV1Unauthorized:
		return nil, nil, v, nil, nil, nil
	case *GetLeaderboardConfigurationsPublicV1Forbidden:
		return nil, nil, nil, v, nil, nil
	case *GetLeaderboardConfigurationsPublicV1InternalServerError:
		return nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  UpdateLeaderboardConfigurationAdminV1 updates leaderboard by leaderboard code

  <p>Required permission 'ADMIN:NAMESPACE:{namespace}:LEADERBOARD [UPDATE]'</p>
			<p><b>Fields :</b></p>
			<ul>
				<li>Maximum length for leaderboard name is 128 characters.</li>
				<li>Start time must be follow RFC3339 standard. e.g. 2020-10-02T15:00:00.05Z</li>
				<li>Season period must be greater than 31 days.</li>
				<li>If seasonPeriod is filled, the LeaderboardConfig would have seasonal leaderboard.</li>
				<li>Reset Date must be a number 1 - 31. Default is '1'.</li>
				<li>Reset Day must be a number 0 - 6. 0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday (day of week). Default is '0'.</li>
				<li>Reset time must be <b>hours:minutes</b> in 24 hours format e.g. 01:30, 10:30, 15:30, 23:15.</li>
			</ul>

*/
func (a *Client) UpdateLeaderboardConfigurationAdminV1(params *UpdateLeaderboardConfigurationAdminV1Params, authInfo runtime.ClientAuthInfoWriter) (*UpdateLeaderboardConfigurationAdminV1OK, *UpdateLeaderboardConfigurationAdminV1BadRequest, *UpdateLeaderboardConfigurationAdminV1Unauthorized, *UpdateLeaderboardConfigurationAdminV1Forbidden, *UpdateLeaderboardConfigurationAdminV1NotFound, *UpdateLeaderboardConfigurationAdminV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLeaderboardConfigurationAdminV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateLeaderboardConfigurationAdminV1",
		Method:             "PUT",
		PathPattern:        "/leaderboard/v1/admin/namespaces/{namespace}/leaderboards/{leaderboardCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLeaderboardConfigurationAdminV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *UpdateLeaderboardConfigurationAdminV1OK:
		return v, nil, nil, nil, nil, nil, nil
	case *UpdateLeaderboardConfigurationAdminV1BadRequest:
		return nil, v, nil, nil, nil, nil, nil
	case *UpdateLeaderboardConfigurationAdminV1Unauthorized:
		return nil, nil, v, nil, nil, nil, nil
	case *UpdateLeaderboardConfigurationAdminV1Forbidden:
		return nil, nil, nil, v, nil, nil, nil
	case *UpdateLeaderboardConfigurationAdminV1NotFound:
		return nil, nil, nil, nil, v, nil, nil
	case *UpdateLeaderboardConfigurationAdminV1InternalServerError:
		return nil, nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
