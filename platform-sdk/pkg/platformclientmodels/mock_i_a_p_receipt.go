// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MockIAPReceipt mock i a p receipt
//
// swagger:model MockIAPReceipt
type MockIAPReceipt struct {

	// The item identity type
	// Enum: [ITEM_ID ITEM_SKU]
	ItemIdentityType string `json:"itemIdentityType,omitempty"`

	// language value from language tag, allowed format: en, en-US
	// Pattern: ^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$
	Language string `json:"language,omitempty"`

	// The product identifier of the item that was purchased.
	// Required: true
	ProductID *string `json:"productId"`

	// country value from ISO countries
	Region string `json:"region,omitempty"`

	// The IAP type.
	// Required: true
	// Enum: [APPLE GOOGLE PLAYSTATION STEAM XBOX STADIA EPICGAMES TWITCH]
	Type *string `json:"type"`
}

// Validate validates this mock i a p receipt
func (m *MockIAPReceipt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItemIdentityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mockIAPReceiptTypeItemIdentityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ITEM_ID","ITEM_SKU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mockIAPReceiptTypeItemIdentityTypePropEnum = append(mockIAPReceiptTypeItemIdentityTypePropEnum, v)
	}
}

const (

	// MockIAPReceiptItemIdentityTypeITEMID captures enum value "ITEM_ID"
	MockIAPReceiptItemIdentityTypeITEMID string = "ITEM_ID"

	// MockIAPReceiptItemIdentityTypeITEMSKU captures enum value "ITEM_SKU"
	MockIAPReceiptItemIdentityTypeITEMSKU string = "ITEM_SKU"
)

// prop value enum
func (m *MockIAPReceipt) validateItemIdentityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mockIAPReceiptTypeItemIdentityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MockIAPReceipt) validateItemIdentityType(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemIdentityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateItemIdentityTypeEnum("itemIdentityType", "body", m.ItemIdentityType); err != nil {
		return err
	}

	return nil
}

func (m *MockIAPReceipt) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	if err := validate.Pattern("language", "body", string(m.Language), `^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$`); err != nil {
		return err
	}

	return nil
}

func (m *MockIAPReceipt) validateProductID(formats strfmt.Registry) error {

	if err := validate.Required("productId", "body", m.ProductID); err != nil {
		return err
	}

	return nil
}

var mockIAPReceiptTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["APPLE","GOOGLE","PLAYSTATION","STEAM","XBOX","STADIA","EPICGAMES","TWITCH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mockIAPReceiptTypeTypePropEnum = append(mockIAPReceiptTypeTypePropEnum, v)
	}
}

const (

	// MockIAPReceiptTypeAPPLE captures enum value "APPLE"
	MockIAPReceiptTypeAPPLE string = "APPLE"

	// MockIAPReceiptTypeGOOGLE captures enum value "GOOGLE"
	MockIAPReceiptTypeGOOGLE string = "GOOGLE"

	// MockIAPReceiptTypePLAYSTATION captures enum value "PLAYSTATION"
	MockIAPReceiptTypePLAYSTATION string = "PLAYSTATION"

	// MockIAPReceiptTypeSTEAM captures enum value "STEAM"
	MockIAPReceiptTypeSTEAM string = "STEAM"

	// MockIAPReceiptTypeXBOX captures enum value "XBOX"
	MockIAPReceiptTypeXBOX string = "XBOX"

	// MockIAPReceiptTypeSTADIA captures enum value "STADIA"
	MockIAPReceiptTypeSTADIA string = "STADIA"

	// MockIAPReceiptTypeEPICGAMES captures enum value "EPICGAMES"
	MockIAPReceiptTypeEPICGAMES string = "EPICGAMES"

	// MockIAPReceiptTypeTWITCH captures enum value "TWITCH"
	MockIAPReceiptTypeTWITCH string = "TWITCH"
)

// prop value enum
func (m *MockIAPReceipt) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mockIAPReceiptTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MockIAPReceipt) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MockIAPReceipt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MockIAPReceipt) UnmarshalBinary(b []byte) error {
	var res MockIAPReceipt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
