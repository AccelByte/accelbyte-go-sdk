// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package profanity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/lobby-sdk/pkg/lobbyclientmodels"
)

// AdminVerifyMessageProfanityResponseReader is a Reader for the AdminVerifyMessageProfanityResponse structure.
type AdminVerifyMessageProfanityResponseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminVerifyMessageProfanityResponseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminVerifyMessageProfanityResponseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminVerifyMessageProfanityResponseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminVerifyMessageProfanityResponseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAdminVerifyMessageProfanityResponseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAdminVerifyMessageProfanityResponseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewAdminVerifyMessageProfanityResponseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /lobby/v1/admin/profanity/namespaces/{namespace}/verify returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminVerifyMessageProfanityResponseOK creates a AdminVerifyMessageProfanityResponseOK with default headers values
func NewAdminVerifyMessageProfanityResponseOK() *AdminVerifyMessageProfanityResponseOK {
	return &AdminVerifyMessageProfanityResponseOK{}
}

/*AdminVerifyMessageProfanityResponseOK handles this case with default header values.

  OK
*/
type AdminVerifyMessageProfanityResponseOK struct {
	Payload *lobbyclientmodels.ModelsAdminVerifyMessageProfanityResponse
}

func (o *AdminVerifyMessageProfanityResponseOK) Error() string {
	return fmt.Sprintf("[POST /lobby/v1/admin/profanity/namespaces/{namespace}/verify][%d] adminVerifyMessageProfanityResponseOK  %+v", 200, o.Payload)
}

func (o *AdminVerifyMessageProfanityResponseOK) GetPayload() *lobbyclientmodels.ModelsAdminVerifyMessageProfanityResponse {
	return o.Payload
}

func (o *AdminVerifyMessageProfanityResponseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.ModelsAdminVerifyMessageProfanityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminVerifyMessageProfanityResponseBadRequest creates a AdminVerifyMessageProfanityResponseBadRequest with default headers values
func NewAdminVerifyMessageProfanityResponseBadRequest() *AdminVerifyMessageProfanityResponseBadRequest {
	return &AdminVerifyMessageProfanityResponseBadRequest{}
}

/*AdminVerifyMessageProfanityResponseBadRequest handles this case with default header values.

  Bad Request
*/
type AdminVerifyMessageProfanityResponseBadRequest struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminVerifyMessageProfanityResponseBadRequest) Error() string {
	return fmt.Sprintf("[POST /lobby/v1/admin/profanity/namespaces/{namespace}/verify][%d] adminVerifyMessageProfanityResponseBadRequest  %+v", 400, o.Payload)
}

func (o *AdminVerifyMessageProfanityResponseBadRequest) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminVerifyMessageProfanityResponseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminVerifyMessageProfanityResponseUnauthorized creates a AdminVerifyMessageProfanityResponseUnauthorized with default headers values
func NewAdminVerifyMessageProfanityResponseUnauthorized() *AdminVerifyMessageProfanityResponseUnauthorized {
	return &AdminVerifyMessageProfanityResponseUnauthorized{}
}

/*AdminVerifyMessageProfanityResponseUnauthorized handles this case with default header values.

  Unauthorized
*/
type AdminVerifyMessageProfanityResponseUnauthorized struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminVerifyMessageProfanityResponseUnauthorized) Error() string {
	return fmt.Sprintf("[POST /lobby/v1/admin/profanity/namespaces/{namespace}/verify][%d] adminVerifyMessageProfanityResponseUnauthorized  %+v", 401, o.Payload)
}

func (o *AdminVerifyMessageProfanityResponseUnauthorized) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminVerifyMessageProfanityResponseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminVerifyMessageProfanityResponseForbidden creates a AdminVerifyMessageProfanityResponseForbidden with default headers values
func NewAdminVerifyMessageProfanityResponseForbidden() *AdminVerifyMessageProfanityResponseForbidden {
	return &AdminVerifyMessageProfanityResponseForbidden{}
}

/*AdminVerifyMessageProfanityResponseForbidden handles this case with default header values.

  Forbidden
*/
type AdminVerifyMessageProfanityResponseForbidden struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminVerifyMessageProfanityResponseForbidden) Error() string {
	return fmt.Sprintf("[POST /lobby/v1/admin/profanity/namespaces/{namespace}/verify][%d] adminVerifyMessageProfanityResponseForbidden  %+v", 403, o.Payload)
}

func (o *AdminVerifyMessageProfanityResponseForbidden) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminVerifyMessageProfanityResponseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminVerifyMessageProfanityResponseNotFound creates a AdminVerifyMessageProfanityResponseNotFound with default headers values
func NewAdminVerifyMessageProfanityResponseNotFound() *AdminVerifyMessageProfanityResponseNotFound {
	return &AdminVerifyMessageProfanityResponseNotFound{}
}

/*AdminVerifyMessageProfanityResponseNotFound handles this case with default header values.

  Not Found
*/
type AdminVerifyMessageProfanityResponseNotFound struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminVerifyMessageProfanityResponseNotFound) Error() string {
	return fmt.Sprintf("[POST /lobby/v1/admin/profanity/namespaces/{namespace}/verify][%d] adminVerifyMessageProfanityResponseNotFound  %+v", 404, o.Payload)
}

func (o *AdminVerifyMessageProfanityResponseNotFound) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminVerifyMessageProfanityResponseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminVerifyMessageProfanityResponseInternalServerError creates a AdminVerifyMessageProfanityResponseInternalServerError with default headers values
func NewAdminVerifyMessageProfanityResponseInternalServerError() *AdminVerifyMessageProfanityResponseInternalServerError {
	return &AdminVerifyMessageProfanityResponseInternalServerError{}
}

/*AdminVerifyMessageProfanityResponseInternalServerError handles this case with default header values.

  Internal Server Error
*/
type AdminVerifyMessageProfanityResponseInternalServerError struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminVerifyMessageProfanityResponseInternalServerError) Error() string {
	return fmt.Sprintf("[POST /lobby/v1/admin/profanity/namespaces/{namespace}/verify][%d] adminVerifyMessageProfanityResponseInternalServerError  %+v", 500, o.Payload)
}

func (o *AdminVerifyMessageProfanityResponseInternalServerError) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminVerifyMessageProfanityResponseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
