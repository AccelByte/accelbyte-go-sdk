{
  "securityDefinitions": {
    "authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "security": [
    {
      "authorization": []
    }
  ],
  "paths": {
    "/chat/namespaces/{namespace}/users/{userId}/friend/{friendId}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u003ccode\u003eNAMESPACE:{namespace}:USER:{userId}:CHAT [READ]\u003c/code\u003e with scope \u003ccode\u003esocial\u003c/code\u003e\n\t\t\t\u003cbr\u003eload personal chat history in a namespace.",
        "operationId": "personalChatHistory",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID that receive the chat",
            "in": "path",
            "name": "friendId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.ChatMessageResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "summary": "load personal chat history",
        "tags": [
          "chat"
        ]
      }
    },
    "/friends/namespaces/{namespace}/me": {
      "get": {
        "operationId": "getUserFriends",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.GetUserFriendsResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "summary": "get list of friends",
        "tags": [
          "friends"
        ]
      }
    },
    "/friends/namespaces/{namespace}/me/incoming": {
      "get": {
        "operationId": "getUserIncomingFriends",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.GetUserIncomingFriendsResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "summary": "get list of incoming friends",
        "tags": [
          "friends"
        ]
      }
    }
  },
  "definitions": {
    "model.ChatMessageResponse": {
      "properties": {
        "from": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "payload": {
          "type": "string"
        },
        "receivedAt": {
          "format": "int64",
          "type": "integer"
        },
        "to": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "from",
        "to",
        "payload",
        "receivedAt"
      ]
    },
    "model.GetUserFriendsResponse": {
      "properties": {
        "friendIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      },
      "required": [
        "friendIDs",
        "paging"
      ]
    },
    "model.GetUserIncomingFriendsResponse": {
      "properties": {
        "friendIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      },
      "required": [
        "friendIDs",
        "paging"
      ]
    },
    "model.Pagination": {
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      },
      "required": [
        "previous",
        "next",
        "first",
        "last"
      ]
    },
    "restapi.ErrorResponseBody": {
      "properties": {
        "ErrorCode": {
          "format": "int32",
          "type": "integer"
        },
        "ErrorMessage": {
          "type": "string"
        }
      },
      "required": [
        "ErrorCode",
        "ErrorMessage"
      ]
    },
    "restapi.ErrorResponseV1": {
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "required": [
        "errorCode",
        "errorMessage"
      ]
    }
  },
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "demo.accelbyte.io",
  "info": {
    "description": "Justice Lobby Server",
    "title": "justice-lobby-server",
    "version": "demo"
  }
}