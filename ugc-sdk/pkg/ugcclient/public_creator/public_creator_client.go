// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package public_creator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"reflect"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new public creator API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for public creator API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetCreator(params *GetCreatorParams, authInfo runtime.ClientAuthInfoWriter) (*GetCreatorOK, *GetCreatorUnauthorized, *GetCreatorNotFound, *GetCreatorInternalServerError, error)
	GetCreatorShort(params *GetCreatorParams, authInfo runtime.ClientAuthInfoWriter) (*GetCreatorOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetCreator gets creator stats number of total like by other user number of total following and follower user

  Public user can access without token or if token specified, requires valid user token
*/
func (a *Client) GetCreator(params *GetCreatorParams, authInfo runtime.ClientAuthInfoWriter) (*GetCreatorOK, *GetCreatorUnauthorized, *GetCreatorNotFound, *GetCreatorInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreatorParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCreator",
		Method:             "GET",
		PathPattern:        "/ugc/v1/public/namespaces/{namespace}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCreatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetCreatorOK:
		return v, nil, nil, nil, nil

	case *GetCreatorUnauthorized:
		return nil, v, nil, nil, nil

	case *GetCreatorNotFound:
		return nil, nil, v, nil, nil

	case *GetCreatorInternalServerError:
		return nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

func (a *Client) GetCreatorShort(params *GetCreatorParams, authInfo runtime.ClientAuthInfoWriter) (*GetCreatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreatorParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCreator",
		Method:             "GET",
		PathPattern:        "/ugc/v1/public/namespaces/{namespace}/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCreatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *GetCreatorOK:
		return v, nil
	case *GetCreatorUnauthorized:
		return nil, v
	case *GetCreatorNotFound:
		return nil, v
	case *GetCreatorInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
