// Code generated by go-swagger; DO NOT EDIT.

package stat_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/social-sdk/pkg/socialclientmodels"
)

// ImportStatsReader is a Reader for the ImportStats structure.
type ImportStatsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportStatsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewImportStatsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewImportStatsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /social/v1/admin/namespaces/{namespace}/stats/import returns an error %d: %s", response.Code(), string(data))
	}
}

// NewImportStatsOK creates a ImportStatsOK with default headers values
func NewImportStatsOK() *ImportStatsOK {
	return &ImportStatsOK{}
}

/*ImportStatsOK handles this case with default header values.

  successful operation
*/
type ImportStatsOK struct {
	Payload *socialclientmodels.StatImportInfo
}

func (o *ImportStatsOK) Error() string {
	return fmt.Sprintf("[POST /social/v1/admin/namespaces/{namespace}/stats/import][%d] importStatsOK  %+v", 200, o.Payload)
}

func (o *ImportStatsOK) GetPayload() *socialclientmodels.StatImportInfo {
	return o.Payload
}

func (o *ImportStatsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(socialclientmodels.StatImportInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportStatsBadRequest creates a ImportStatsBadRequest with default headers values
func NewImportStatsBadRequest() *ImportStatsBadRequest {
	return &ImportStatsBadRequest{}
}

/*ImportStatsBadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>70138</td><td>Stats data for namespace [{namespace}] is invalid</td></tr></table>
*/
type ImportStatsBadRequest struct {
	Payload *socialclientmodels.ErrorEntity
}

func (o *ImportStatsBadRequest) Error() string {
	return fmt.Sprintf("[POST /social/v1/admin/namespaces/{namespace}/stats/import][%d] importStatsBadRequest  %+v", 400, o.Payload)
}

func (o *ImportStatsBadRequest) GetPayload() *socialclientmodels.ErrorEntity {
	return o.Payload
}

func (o *ImportStatsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(socialclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
