// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// PublicWebLinkPlatformReader is a Reader for the PublicWebLinkPlatform structure.
type PublicWebLinkPlatformReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PublicWebLinkPlatformReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPublicWebLinkPlatformOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPublicWebLinkPlatformBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPublicWebLinkPlatformUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPublicWebLinkPlatformNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/web/link returns an error %d: %s", response.Code(), string(data))
	}
}

// NewPublicWebLinkPlatformOK creates a PublicWebLinkPlatformOK with default headers values
func NewPublicWebLinkPlatformOK() *PublicWebLinkPlatformOK {
	return &PublicWebLinkPlatformOK{}
}

/*PublicWebLinkPlatformOK handles this case with default header values.

  OK
*/
type PublicWebLinkPlatformOK struct {
	Payload *iamclientmodels.ModelWebLinkingResponse
}

func (o *PublicWebLinkPlatformOK) Error() string {
	return fmt.Sprintf("[GET /iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/web/link][%d] publicWebLinkPlatformOK  %+v", 200, o.Payload)
}

func (o *PublicWebLinkPlatformOK) GetPayload() *iamclientmodels.ModelWebLinkingResponse {
	return o.Payload
}

func (o *PublicWebLinkPlatformOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.ModelWebLinkingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicWebLinkPlatformBadRequest creates a PublicWebLinkPlatformBadRequest with default headers values
func NewPublicWebLinkPlatformBadRequest() *PublicWebLinkPlatformBadRequest {
	return &PublicWebLinkPlatformBadRequest{}
}

/*PublicWebLinkPlatformBadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type PublicWebLinkPlatformBadRequest struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *PublicWebLinkPlatformBadRequest) Error() string {
	return fmt.Sprintf("[GET /iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/web/link][%d] publicWebLinkPlatformBadRequest  %+v", 400, o.Payload)
}

func (o *PublicWebLinkPlatformBadRequest) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *PublicWebLinkPlatformBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicWebLinkPlatformUnauthorized creates a PublicWebLinkPlatformUnauthorized with default headers values
func NewPublicWebLinkPlatformUnauthorized() *PublicWebLinkPlatformUnauthorized {
	return &PublicWebLinkPlatformUnauthorized{}
}

/*PublicWebLinkPlatformUnauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>
*/
type PublicWebLinkPlatformUnauthorized struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *PublicWebLinkPlatformUnauthorized) Error() string {
	return fmt.Sprintf("[GET /iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/web/link][%d] publicWebLinkPlatformUnauthorized  %+v", 401, o.Payload)
}

func (o *PublicWebLinkPlatformUnauthorized) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *PublicWebLinkPlatformUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicWebLinkPlatformNotFound creates a PublicWebLinkPlatformNotFound with default headers values
func NewPublicWebLinkPlatformNotFound() *PublicWebLinkPlatformNotFound {
	return &PublicWebLinkPlatformNotFound{}
}

/*PublicWebLinkPlatformNotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10365</td><td>client not found</td></tr><tr><td>20008</td><td>user not found</td></tr></table>
*/
type PublicWebLinkPlatformNotFound struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *PublicWebLinkPlatformNotFound) Error() string {
	return fmt.Sprintf("[GET /iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/web/link][%d] publicWebLinkPlatformNotFound  %+v", 404, o.Payload)
}

func (o *PublicWebLinkPlatformNotFound) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *PublicWebLinkPlatformNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
