// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteUserRoleParams creates a new DeleteUserRoleParams object
// with the default values initialized.
func NewDeleteUserRoleParams() *DeleteUserRoleParams {
	var ()
	return &DeleteUserRoleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteUserRoleParamsWithTimeout creates a new DeleteUserRoleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteUserRoleParamsWithTimeout(timeout time.Duration) *DeleteUserRoleParams {
	var ()
	return &DeleteUserRoleParams{

		timeout: timeout,
	}
}

// NewDeleteUserRoleParamsWithContext creates a new DeleteUserRoleParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteUserRoleParamsWithContext(ctx context.Context) *DeleteUserRoleParams {
	var ()
	return &DeleteUserRoleParams{

		Context: ctx,
	}
}

// NewDeleteUserRoleParamsWithHTTPClient creates a new DeleteUserRoleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteUserRoleParamsWithHTTPClient(client *http.Client) *DeleteUserRoleParams {
	var ()
	return &DeleteUserRoleParams{
		HTTPClient: client,
	}
}

/*DeleteUserRoleParams contains all the parameters to send to the API endpoint
for the delete user role operation typically these are written to a http.Request
*/
type DeleteUserRoleParams struct {

	/*Namespace
	  Namespace, only accept alphabet and numeric

	*/
	Namespace string
	/*RoleID
	  Role id

	*/
	RoleID string
	/*UserID
	  User id

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete user role params
func (o *DeleteUserRoleParams) WithTimeout(timeout time.Duration) *DeleteUserRoleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete user role params
func (o *DeleteUserRoleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete user role params
func (o *DeleteUserRoleParams) WithContext(ctx context.Context) *DeleteUserRoleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete user role params
func (o *DeleteUserRoleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete user role params
func (o *DeleteUserRoleParams) WithHTTPClient(client *http.Client) *DeleteUserRoleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete user role params
func (o *DeleteUserRoleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNamespace adds the namespace to the delete user role params
func (o *DeleteUserRoleParams) WithNamespace(namespace string) *DeleteUserRoleParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the delete user role params
func (o *DeleteUserRoleParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithRoleID adds the roleID to the delete user role params
func (o *DeleteUserRoleParams) WithRoleID(roleID string) *DeleteUserRoleParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the delete user role params
func (o *DeleteUserRoleParams) SetRoleID(roleID string) {
	o.RoleID = roleID
}

// WithUserID adds the userID to the delete user role params
func (o *DeleteUserRoleParams) WithUserID(userID string) *DeleteUserRoleParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the delete user role params
func (o *DeleteUserRoleParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteUserRoleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param roleId
	if err := r.SetPathParam("roleId", o.RoleID); err != nil {
		return err
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
