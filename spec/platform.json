{
  "host": "demo.accelbyte.io",
  "info": {
    "contact": {
      "email": "engineering@accelbyte.io",
      "name": "Engineering Team at AccelByte",
      "url": "https://accelbyte.io"
    },
    "description": "Justice Platform Service",
    "title": "justice-platform-service",
    "version": "4.41.0"
  },
  "schemes": [
    "https"
  ],
  "tags": [
    {
      "name": "Achievement(Platform)"
    },
    {
      "name": "Anonymization"
    },
    {
      "name": "Campaign"
    },
    {
      "name": "CatalogChanges"
    },
    {
      "name": "Category"
    },
    {
      "name": "Clawback"
    },
    {
      "name": "Currency"
    },
    {
      "name": "DLC"
    },
    {
      "name": "Entitlement"
    },
    {
      "name": "Fulfillment"
    },
    {
      "name": "FulfillmentScript"
    },
    {
      "name": "IAP"
    },
    {
      "name": "Invoice"
    },
    {
      "name": "Item"
    },
    {
      "name": "KeyGroup"
    },
    {
      "name": "Order"
    },
    {
      "name": "Order(Dedicated)"
    },
    {
      "name": "Payment"
    },
    {
      "name": "Payment(Dedicated)"
    },
    {
      "name": "PaymentAccount"
    },
    {
      "name": "PaymentCallbackConfig"
    },
    {
      "name": "PaymentConfig"
    },
    {
      "name": "PaymentStation"
    },
    {
      "name": "Revocation"
    },
    {
      "name": "Reward"
    },
    {
      "name": "Section"
    },
    {
      "name": "ServicePluginConfig"
    },
    {
      "name": "Session(Platform)"
    },
    {
      "name": "Store"
    },
    {
      "name": "Subscription"
    },
    {
      "name": "Ticket"
    },
    {
      "name": "TradeAction"
    },
    {
      "name": "View"
    },
    {
      "name": "Wallet"
    }
  ],
  "externalDocs": {
    "description": "API Docs",
    "url": "https://demo.accelbyte.io/platform"
  },
  "securityDefinitions": {
    "HasPermission": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "ADMIN:FULFILLMENT [CREATE]": "ADMIN:FULFILLMENT [CREATE]",
        "ADMIN:FULFILLMENT [DELETE]": "ADMIN:FULFILLMENT [DELETE]",
        "ADMIN:FULFILLMENT [READ]": "ADMIN:FULFILLMENT [READ]",
        "ADMIN:FULFILLMENT [UPDATE]": "ADMIN:FULFILLMENT [UPDATE]",
        "ADMIN:ITEM:CONFIG [CREATE]": "ADMIN:ITEM:CONFIG [CREATE]",
        "ADMIN:ITEM:CONFIG [DELETE]": "ADMIN:ITEM:CONFIG [DELETE]",
        "ADMIN:ITEM:CONFIG [READ]": "ADMIN:ITEM:CONFIG [READ]",
        "ADMIN:ITEM:CONFIG [UPDATE]": "ADMIN:ITEM:CONFIG [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [CREATE]": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]",
        "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [UPDATE]": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:CATEGORY [CREATE]": "ADMIN:NAMESPACE:{namespace}:CATEGORY [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:CATEGORY [DELETE]": "ADMIN:NAMESPACE:{namespace}:CATEGORY [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:CATEGORY [READ]": "ADMIN:NAMESPACE:{namespace}:CATEGORY [READ]",
        "ADMIN:NAMESPACE:{namespace}:CATEGORY [UPDATE]": "ADMIN:NAMESPACE:{namespace}:CATEGORY [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:CURRENCY [CREATE]": "ADMIN:NAMESPACE:{namespace}:CURRENCY [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:CURRENCY [DELETE]": "ADMIN:NAMESPACE:{namespace}:CURRENCY [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:CURRENCY [READ]": "ADMIN:NAMESPACE:{namespace}:CURRENCY [READ]",
        "ADMIN:NAMESPACE:{namespace}:CURRENCY [UPDATE]": "ADMIN:NAMESPACE:{namespace}:CURRENCY [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [DELETE]": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [READ]": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [READ]",
        "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [UPDATE]": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT [READ]": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT [READ]",
        "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT [UPDATE]": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:FULFILLMENT [READ]": "ADMIN:NAMESPACE:{namespace}:FULFILLMENT [READ]",
        "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]",
        "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:ITEM [CREATE]": "ADMIN:NAMESPACE:{namespace}:ITEM [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:ITEM [DELETE]": "ADMIN:NAMESPACE:{namespace}:ITEM [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:ITEM [READ]": "ADMIN:NAMESPACE:{namespace}:ITEM [READ]",
        "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]": "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:KEYGROUP [CREATE]": "ADMIN:NAMESPACE:{namespace}:KEYGROUP [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:KEYGROUP [READ]": "ADMIN:NAMESPACE:{namespace}:KEYGROUP [READ]",
        "ADMIN:NAMESPACE:{namespace}:KEYGROUP [UPDATE]": "ADMIN:NAMESPACE:{namespace}:KEYGROUP [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:ORDER [READ]": "ADMIN:NAMESPACE:{namespace}:ORDER [READ]",
        "ADMIN:NAMESPACE:{namespace}:ORDER [UPDATE]": "ADMIN:NAMESPACE:{namespace}:ORDER [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:PAYMENT [CREATE]": "ADMIN:NAMESPACE:{namespace}:PAYMENT [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:PAYMENT [READ]": "ADMIN:NAMESPACE:{namespace}:PAYMENT [READ]",
        "ADMIN:NAMESPACE:{namespace}:PAYMENT [UPDATE]": "ADMIN:NAMESPACE:{namespace}:PAYMENT [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG [READ]": "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG [READ]",
        "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG [UPDATE]": "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:PAYMENT:NOTIFICATION [READ]": "ADMIN:NAMESPACE:{namespace}:PAYMENT:NOTIFICATION [READ]",
        "ADMIN:NAMESPACE:{namespace}:REWARD [CREATE]": "ADMIN:NAMESPACE:{namespace}:REWARD [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:REWARD [DELETE]": "ADMIN:NAMESPACE:{namespace}:REWARD [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:REWARD [READ]": "ADMIN:NAMESPACE:{namespace}:REWARD [READ]",
        "ADMIN:NAMESPACE:{namespace}:REWARD [UPDATE]": "ADMIN:NAMESPACE:{namespace}:REWARD [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:STORE [CREATE]": "ADMIN:NAMESPACE:{namespace}:STORE [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:STORE [DELETE]": "ADMIN:NAMESPACE:{namespace}:STORE [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:STORE [READ]": "ADMIN:NAMESPACE:{namespace}:STORE [READ]",
        "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]": "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION [READ]": "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION [READ]",
        "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION [UPDATE]": "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:TICKET [READ]": "ADMIN:NAMESPACE:{namespace}:TICKET [READ]",
        "ADMIN:NAMESPACE:{namespace}:TICKET [UPDATE]": "ADMIN:NAMESPACE:{namespace}:TICKET [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT []": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT []",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:REDEMPTION [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:REDEMPTION [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [DELETE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:TICKET [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:TICKET [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:WALLET [READ]": "ADMIN:NAMESPACE:{namespace}:WALLET [READ]",
        "ADMIN:NAMESPACE:{namespace}:WALLET [UPDATE]": "ADMIN:NAMESPACE:{namespace}:WALLET [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG [READ]": "ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG [READ]",
        "ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG [UPDATE]": "ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG [UPDATE]",
        "ADMIN:ORDER [READ]": "ADMIN:ORDER [READ]",
        "ADMIN:PAYMENT [READ]": "ADMIN:PAYMENT [READ]",
        "ADMIN:PAYMENT:CONFIG [CREATE]": "ADMIN:PAYMENT:CONFIG [CREATE]",
        "ADMIN:PAYMENT:CONFIG [DELETE]": "ADMIN:PAYMENT:CONFIG [DELETE]",
        "ADMIN:PAYMENT:CONFIG [READ]": "ADMIN:PAYMENT:CONFIG [READ]",
        "ADMIN:PAYMENT:CONFIG [UPDATE]": "ADMIN:PAYMENT:CONFIG [UPDATE]",
        "NAMESPACE:{namespace}:ENTITLEMENT [READ]": "NAMESPACE:{namespace}:ENTITLEMENT [READ]",
        "NAMESPACE:{namespace}:REWARD [READ]": "NAMESPACE:{namespace}:REWARD [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []": "NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []",
        "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]": "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:ORDER [CREATE]": "NAMESPACE:{namespace}:USER:{userId}:ORDER [CREATE]",
        "NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]": "NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]": "NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT [DELETE]": "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT [DELETE]",
        "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT [READ]": "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [CREATE]": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [CREATE]",
        "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]": "NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]",
        "NAMESPACE:{namespace}:WALLET [READ]": "NAMESPACE:{namespace}:WALLET [READ]"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "HasScope": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {},
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "paths": {
    "/platform/admin/fulfillment/scripts": {
      "get": {
        "description": "List all fulfillment scripts.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:FULFILLMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "listFulfillmentScripts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/FulfillmentScriptInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:FULFILLMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List all fulfillment scripts",
        "tags": [
          "FulfillmentScript"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:FULFILLMENT"
        }
      }
    },
    "/platform/admin/fulfillment/scripts/{id}": {
      "delete": {
        "description": "Delete fulfillment script.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:FULFILLMENT\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteFulfillmentScript",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "delete fulfillment script successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:FULFILLMENT [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete fulfillment script",
        "tags": [
          "FulfillmentScript"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:FULFILLMENT"
        }
      },
      "get": {
        "description": "Get fulfillment script by id.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:FULFILLMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: get fulfillment script\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getFulfillmentScript",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentScriptInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38141\u003c/td\u003e\u003ctd\u003eFulfillment script does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:FULFILLMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get fulfillment script by id",
        "tags": [
          "FulfillmentScript"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:FULFILLMENT"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[AGS Premium Feature]\u0026lt;/b\u0026gt;Update fulfillment script.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:FULFILLMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateFulfillmentScript",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FulfillmentScriptUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentScriptInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38141\u003c/td\u003e\u003ctd\u003eFulfillment script does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:FULFILLMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update fulfillment script",
        "tags": [
          "FulfillmentScript"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:FULFILLMENT"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[AGS Premium Feature]\u0026lt;/b\u0026gt;Create fulfillment script.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:FULFILLMENT\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Fulfillment scripts are used for adding custom fulfillment logic based on \u0026lt;b\u0026gt;ITEM_TYPE\u0026lt;/b\u0026gt;: [MEDIA,INGAMEITEM] for now, and the custom scripts only cover grantDays.\u0026lt;br\u0026gt;Example for grantDays: \u0026lt;br\u0026gt;\u0026lt;code\u0026gt;order \u0026amp;\u0026amp; ((order.currency \u0026amp;\u0026amp; order.currency.currencyCode) == \u0026#39;LP\u0026#39; || order.isFree) ? 30 : -1\u0026lt;/code\u0026gt;\u0026lt;br\u0026gt;",
        "operationId": "createFulfillmentScript",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FulfillmentScriptCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentScriptInfo"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38171\u003c/td\u003e\u003ctd\u003eFulfillment script already exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:FULFILLMENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create fulfillment script",
        "tags": [
          "FulfillmentScript"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:FULFILLMENT"
        }
      }
    },
    "/platform/admin/items/configs": {
      "get": {
        "description": "This API is used to get all item type configs.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:ITEM:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of items\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "listItemTypeConfigs",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/ItemTypeConfigInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:ITEM:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get all item type configs",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:ITEM:CONFIG"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to create an item type config.\u0026lt;p\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:ITEM:CONFIG\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: item type config data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "createItemTypeConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemTypeConfigCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "item type config created"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30336\u003c/td\u003e\u003ctd\u003eItem type [{itemType}] does not support\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30371\u003c/td\u003e\u003ctd\u003eItem type config for type [{itemType}] and clazz [{clazz}] already exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:ITEM:CONFIG [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create an Item Type Config",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:ITEM:CONFIG"
        }
      }
    },
    "/platform/admin/items/configs/search": {
      "get": {
        "description": "This API is used to get an item type config.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:ITEM:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: item type config data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "searchItemTypeConfig",
        "parameters": [
          {
            "enum": [
              "APP",
              "BUNDLE",
              "CODE",
              "COINS",
              "EXTENSION",
              "INGAMEITEM",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SEASON",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "itemType",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "clazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemTypeConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30541\u003c/td\u003e\u003ctd\u003eItem type config [{id}] doesn't exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:ITEM:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get an item type config",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:ITEM:CONFIG"
        }
      }
    },
    "/platform/admin/items/configs/{id}": {
      "delete": {
        "description": "This API is used to delete an item type config permanently.Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:ITEM:CONFIG\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteItemTypeConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete item successfully"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30541\u003c/td\u003e\u003ctd\u003eItem type config [{id}] doesn't exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:ITEM:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete an item type config",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:ITEM:CONFIG"
        }
      },
      "get": {
        "description": "This API is used to get an item type config.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:ITEM:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: item type config data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getItemTypeConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemTypeConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30541\u003c/td\u003e\u003ctd\u003eItem type config [{id}] doesn't exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:ITEM:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get an item type config",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:ITEM:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to update an item type config.\u0026lt;p\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:ITEM:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: item type config data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateItemTypeConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemTypeConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemTypeConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30541\u003c/td\u003e\u003ctd\u003eItem type config [{id}] doesn't exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30371\u003c/td\u003e\u003ctd\u003eItem type config for type [{itemType}] and clazz [{clazz}] already exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:ITEM:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update an Item Type Config",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:ITEM:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/campaigns": {
      "get": {
        "description": "Query campaigns, if name is presented, it\u0026#39;s fuzzy match.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN\u0026#34;, action=2 (READ) (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: slice of campaigns\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryCampaigns",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "tag",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CampaignPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query campaigns",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create campaign.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: created campaign\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "createCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CampaignInfo"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37171\u003c/td\u003e\u003ctd\u003eCampaign [{name}] already exists in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create campaign",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/campaigns/{campaignId}": {
      "get": {
        "description": "Get campaign info.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: campaign info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CampaignInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37141\u003c/td\u003e\u003ctd\u003eCampaign [{campaignId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get campaign",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update campaign.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated campaign\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CampaignInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37141\u003c/td\u003e\u003ctd\u003eCampaign [{campaignId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37171\u003c/td\u003e\u003ctd\u003eCampaign [{name}] already exists in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update campaign",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/campaigns/{campaignId}/dynamic": {
      "get": {
        "description": "Get campaign dynamic.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: campaign dynamic\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getCampaignDynamic",
        "parameters": [
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CampaignDynamicInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37141\u003c/td\u003e\u003ctd\u003eCampaign [{campaignId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get campaign dynamic",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/catalog/plugins/lootbox": {
      "delete": {
        "description": "Delete service plugin config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteLootBoxPluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete lootbox plugin config",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG"
        }
      },
      "get": {
        "description": "Get lootbox plugin config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG\u0026lt;/b\u0026gt;, action=2 \u0026lt;b\u0026gt;(READ)\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getLootBoxPluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LootBoxPluginConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get lootbox plugin config",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update lootbox plugin config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated service plugin config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateLootBoxPluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LootBoxPluginConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LootBoxPluginConfigInfo"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update lootbox plugin config",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/catalog/plugins/lootbox/customConfig/cert": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Upload lootbox plugin custom config tls cert.Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated service plugin config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "uplodLootBoxPluginConfigCert",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LootBoxPluginConfigInfo"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Upload lootbox plugin custom config tls cert",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/catalog/plugins/lootbox/grpcInfo": {
      "get": {
        "description": "Get lootbox plugin gRPC info.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG\u0026lt;/b\u0026gt;, action=2 \u0026lt;b\u0026gt;(READ)\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getLootBoxGrpcInfo",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "force",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GrpcServerInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get lootbox plugin gRPC info",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/catalog/plugins/section": {
      "delete": {
        "description": "Delete section plugin config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteSectionPluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete section plugin config",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG"
        }
      },
      "get": {
        "description": "Get section plugin config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG\u0026lt;/b\u0026gt;, action=2 \u0026lt;b\u0026gt;(READ)\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getSectionPluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SectionPluginConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get section plugin config",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update section config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated service plugin config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateSectionPluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SectionPluginConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SectionPluginConfigInfo"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update section plugin config",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/catalog/plugins/section/customConfig/cert": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Upload section plugin custom config tls cert.Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated service plugin config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "uploadSectionPluginConfigCert",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SectionPluginConfigInfo"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Upload section plugin custom config tls cert",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/categories": {
      "get": {
        "description": "This API is used to get root categories.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CATEGORY\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: root category data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getRootCategories",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/FullCategoryInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get root categories",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to create category.\u0026lt;p\u0026gt;A category is a path separated by \u0026#34;/\u0026#34;. A category also has localized display names. Example:\u0026lt;p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;{\r\n\t\u0026#34;categoryPath\u0026#34;: \u0026#34;/games\u0026#34;,\r\n\t\u0026#34;localizationDisplayNames\u0026#34;: \\{\u0026#34;en\u0026#34; : \u0026#34;Games\u0026#34;}\r\n}\u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CATEGORY\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: created category data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "createCategory",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CategoryCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullCategoryInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30021\u003c/td\u003e\u003ctd\u003eDefault language [{language}] required\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30241\u003c/td\u003e\u003ctd\u003eCategory [{categoryPath}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30271\u003c/td\u003e\u003ctd\u003eCategory [{categoryPath}] already exists in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create category",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/categories/basic": {
      "get": {
        "description": "This API is used to list all categories\u0026#39; basic info of a store ordered by category path.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CATEGORY\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: list of categories\u0026#39; paths\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "listCategoriesBasic",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/BasicCategoryInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List categories' basic info",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/categories/{categoryPath}": {
      "delete": {
        "description": "This API is used to delete category by category path. \u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CATEGORY\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the deleted category data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullCategoryInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30241\u003c/td\u003e\u003ctd\u003eCategory [{categoryPath}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30272\u003c/td\u003e\u003ctd\u003eCategory [{categoryPath}] is not empty in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete category",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      },
      "get": {
        "description": "This API is used to get category by category path.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CATEGORY\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: category data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getCategory",
        "parameters": [
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullCategoryInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30241\u003c/td\u003e\u003ctd\u003eCategory [{categoryPath}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get category",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to update category. \u0026lt;p\u0026gt; The category update data is a category object, example as:\u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;{\r\n\t\u0026#34;storeId\u0026#34;: \u0026#34;store-id\u0026#34;,\r\n\t\u0026#34;localizationDisplayNames\u0026#34;: {\u0026#34;en\u0026#34; : \u0026#34;Games\u0026#34;}\r\n}\u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CATEGORY\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the updated category data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateCategory",
        "parameters": [
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CategoryUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullCategoryInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30021\u003c/td\u003e\u003ctd\u003eDefault language [{language}] required\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30241\u003c/td\u003e\u003ctd\u003eCategory [{categoryPath}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update category",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/categories/{categoryPath}/children": {
      "get": {
        "description": "This API is used to get child categories by category path.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CATEGORY\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: list of child categories data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getChildCategories",
        "parameters": [
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/FullCategoryInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get child categories",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/categories/{categoryPath}/descendants": {
      "get": {
        "description": "This API is used to get descendant categories by category path.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CATEGORY\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: list of descendant categories data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getDescendantCategories",
        "parameters": [
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/FullCategoryInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get descendant categories",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/codes/campaigns/{campaignId}": {
      "get": {
        "description": "Query campaign codes.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN\u0026#34;, action=2 (READ) (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: list of codes\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryCodes",
        "parameters": [
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "format": "int32",
            "in": "query",
            "name": "batchNo",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CodeInfoPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query codes",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to create campaign codes, it will increase the batch No. based on last creation.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN\u0026#34;, action=1 (CREATE)\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: number of codes created\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "createCodes",
        "parameters": [
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CodeCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CodeCreateResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37141\u003c/td\u003e\u003ctd\u003eCampaign [{campaignId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create campaign codes",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/codes/campaigns/{campaignId}/codes.csv": {
      "get": {
        "description": "Download all or a batch of campaign\u0026#39;s codes as a csv file.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: codes csv file\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "download",
        "parameters": [
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "format": "int32",
            "in": "query",
            "name": "batchNo",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Download codes",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/codes/campaigns/{campaignId}/disable/bulk": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Bulk disable codes.\u0026lt;p\u0026gt;Bulk disable campaign codes, all matched codes will be disabled except those have already been redeemed.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the number of code actually disabled\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "bulkDisableCodes",
        "parameters": [
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "if not present will match all except 0",
            "format": "int32",
            "in": "query",
            "name": "batchNo",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BulkOperationResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Bulk disable codes",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/codes/campaigns/{campaignId}/enable/bulk": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Bulk enable campaign codes.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the number of code actually enabled\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "bulkEnableCodes",
        "parameters": [
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "if not present will match all except 0",
            "format": "int32",
            "in": "query",
            "name": "batchNo",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BulkOperationResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Bulk enable codes",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/codes/campaigns/{campaignId}/history": {
      "get": {
        "description": "Query redeem history.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: slice of redeem history\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryRedeemHistory",
        "parameters": [
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RedeemHistoryPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query redeem history",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/codes/{code}": {
      "get": {
        "description": "Get campaign code, it will check code whether available to redeem if redeemable true.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN\u0026#34;, action=2 (READ) (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: code info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getCode",
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "redeemable",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CodeInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37142\u003c/td\u003e\u003ctd\u003eCode [{code}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37172\u003c/td\u003e\u003ctd\u003eCampaign [{campaignId}] is inactive in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37173\u003c/td\u003e\u003ctd\u003eCode [{code}] is inactive in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37174\u003c/td\u003e\u003ctd\u003eExceeded max redeem count per code [{maxCount}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37177\u003c/td\u003e\u003ctd\u003eCode redemption not started\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37178\u003c/td\u003e\u003ctd\u003eCode redemption already ended\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get code info",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/codes/{code}/disable": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Disable code.\u0026lt;p\u0026gt;Disable an active code, the code can\u0026#39;t be disabled if it has already been redeemed.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: disabled code\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "disableCode",
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CodeInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37142\u003c/td\u003e\u003ctd\u003eCode [{code}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37176\u003c/td\u003e\u003ctd\u003eCode [{code}] has been redeemed in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Disable code",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/codes/{code}/enable": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Enable code.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: enabled code\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "enableCode",
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CodeInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37142\u003c/td\u003e\u003ctd\u003eCode [{code}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Enable code",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/configs/servicePlugin": {
      "delete": {
        "deprecated": true,
        "description": "Delete service plugin config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:CONFIG:SERVICEPLUGIN, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteServicePluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete service plugin config",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:CONFIG:SERVICEPLUGIN"
        }
      },
      "get": {
        "deprecated": true,
        "description": "Get service plugin config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:CONFIG:SERVICEPLUGIN\u0026lt;/b\u0026gt;, action=2 \u0026lt;b\u0026gt;(READ)\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getServicePluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServicePluginConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get service plugin config",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CONFIG:SERVICEPLUGIN"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Update catalog config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:CONFIG:SERVICEPLUGIN, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated service plugin config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateServicePluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServicePluginConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServicePluginConfigInfo"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update service plugin config service",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CONFIG:SERVICEPLUGIN"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/currencies": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List currencies of a namespace.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CURRENCY\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Currency List\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "listCurrencies",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "currencyType",
            "enum": [
              "REAL",
              "VIRTUAL"
            ],
            "in": "query",
            "name": "currencyType",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/CurrencyInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CURRENCY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List currencies",
        "tags": [
          "Currency"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a currency.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CURRENCY\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: created currency\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "createCurrency",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CurrencyCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencyInfo"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e36171\u003c/td\u003e\u003ctd\u003eCurrency [{currencyCode}] already exists in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CURRENCY [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create a currency",
        "tags": [
          "Currency"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/currencies/{currencyCode}": {
      "delete": {
        "description": "Delete a currency by currency code.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CURRENCY\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteCurrency",
        "parameters": [
          {
            "description": "currencyCode",
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencyInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e36141\u003c/td\u003e\u003ctd\u003eCurrency [{currencyCode}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CURRENCY [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a currency",
        "tags": [
          "Currency"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a currency by currency code.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CURRENCY\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated currency\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateCurrency",
        "parameters": [
          {
            "description": "currencyCode",
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CurrencyUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencyInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e36141\u003c/td\u003e\u003ctd\u003eCurrency [{currencyCode}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CURRENCY [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update a currency",
        "tags": [
          "Currency"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/currencies/{currencyCode}/config": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; Get currency config by code.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CURRENCY\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: simplified Currency\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getCurrencyConfig",
        "parameters": [
          {
            "description": "currencyCode",
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencyConfig"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e36141\u003c/td\u003e\u003ctd\u003eCurrency [{currencyCode}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CURRENCY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get currency config",
        "tags": [
          "Currency"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/currencies/{currencyCode}/summary": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get currency summary by code.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:CURRENCY\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: simplified Currency\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getCurrencySummary",
        "parameters": [
          {
            "description": "currencyCode",
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencySummary"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e36141\u003c/td\u003e\u003ctd\u003eCurrency [{currencyCode}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CURRENCY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get currency summary",
        "tags": [
          "Currency"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/dlc/config/item": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "delete a DLC item config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026lt;b\u0026gt;\u0026#34;ADMIN:NAMESPACE:{namespace}:DLC:CONFIG\u0026#34;\u0026lt;/b\u0026gt;, action=8 \u0026lt;b\u0026gt;(DELETE)\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteDLCItemConfig",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "delete a DLC item config",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG"
        }
      },
      "get": {
        "description": "Get DLC item config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026lt;b\u0026gt;\u0026#34;ADMIN:NAMESPACE:{namespace}:DLC:CONFIG\u0026#34;\u0026lt;/b\u0026gt;, action=2 \u0026lt;b\u0026gt;(READ)\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getDLCItemConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DLCItemConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39442\u003c/td\u003e\u003ctd\u003eDLC item config cannot be found in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get DLC item config",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update DLC item config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:DLC:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated DLC item config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateDLCItemConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DLCItemConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DLCItemConfigInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e394721\u003c/td\u003e\u003ctd\u003eInvalid platform DLC config namespace [{namespace}]: [{message}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39471\u003c/td\u003e\u003ctd\u003eDuplicated dlc reward id [{dlcRewardId}] in namespace [{namespace}] \u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update DLC item config",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/dlc/config/platformMap": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "delete a Platform DLC config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026lt;b\u0026gt;\u0026#34;ADMIN:NAMESPACE:{namespace}:DLC:CONFIG\u0026#34;\u0026lt;/b\u0026gt;, action=8 \u0026lt;b\u0026gt;(DELETE)\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deletePlatformDLCConfig",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "delete a Platform DLC config",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG"
        }
      },
      "get": {
        "description": "Get Platform DLC config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026lt;b\u0026gt;\u0026#34;ADMIN:NAMESPACE:{namespace}:DLC:CONFIG\u0026#34;\u0026lt;/b\u0026gt;, action=2 \u0026lt;b\u0026gt;(READ)\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getPlatformDLCConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlatformDLCConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39341\u003c/td\u003e\u003ctd\u003ePlatform DLC config cannot be found in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Platform DLC config",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update Platform DLC config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:DLC:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated Platform DLC config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h2\u0026gt;Restrictions for platform dlc map\u0026lt;/h2\u0026gt;\n1. Cannot use \u0026lt;b\u0026gt;\u0026#34;.\u0026#34;\u0026lt;/b\u0026gt; as the key name\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;data.2\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;\n2. Cannot use \u0026lt;b\u0026gt;\u0026#34;$\u0026#34;\u0026lt;/b\u0026gt; as the prefix in key names\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;$data\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;",
        "operationId": "updatePlatformDLCConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlatformDLCConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlatformDLCConfigInfo"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Platform DLC config",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/entitlements": {
      "get": {
        "description": "Query entitlements.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: entitlement list\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryEntitlements",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "entitlementName",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemId",
            "required": false,
            "type": "array"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query entitlements",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/entitlements/byItemIds": {
      "get": {
        "description": "Query entitlements by Item Ids.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: entitlement list\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryEntitlements_1",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemIds",
            "required": false,
            "type": "array"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query entitlements by Item Ids",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/entitlements/grant": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Grant entitlements to multiple users, skipped granting will be treated as fail.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ENTITLEMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: bulk grant entitlements result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "grantEntitlements",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BulkEntitlementGrantRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BulkEntitlementGrantResult"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Grant entitlements to different users",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/entitlements/revoke": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Revoke entitlements, skipped revocation will be treated as fail.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ENTITLEMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: bulk revoke entitlements result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "revokeEntitlements",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BulkEntitlementRevokeResult"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Revoke entitlements by Ids",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/entitlements/{entitlementId}": {
      "get": {
        "description": "Get entitlement.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: entitlement\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31141\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/fulfillment/history": {
      "get": {
        "description": "Query fulfillment histories in a namespace.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:FULFILLMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: query fulfillment history\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryFulfillmentHistories",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "enum": [
              "FAIL",
              "SUCCESS"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentHistoryPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:FULFILLMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query fulfillment histories",
        "tags": [
          "Fulfillment"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:FULFILLMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/iap/clawback/histories": {
      "get": {
        "description": "Query clawback history.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:IAP:CLAWBACK, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: paginated clawback history\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryIAPClawbackHistory",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "endTime",
            "required": false,
            "type": "string"
          },
          {
            "description": "event type",
            "enum": [
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "OTHER",
              "REFUND"
            ],
            "in": "query",
            "name": "eventType",
            "required": false,
            "type": "string"
          },
          {
            "description": "third party order id",
            "in": "query",
            "name": "externalOrderId",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "startTime",
            "required": false,
            "type": "string"
          },
          {
            "description": "status",
            "enum": [
              "FAIL",
              "IGNORED",
              "INIT",
              "SUCCESS"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "description": "AGS user id",
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/IAPClawbackPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Query clawback history",
        "tags": [
          "Clawback"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CLAWBACK"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/iap/clawback/playstation/mock": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Mock Sync PlayStation Clawback event..\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:IAP:CLAWBACK, action=1(CREATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "mockPlayStationStreamEvent",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StreamEvent"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Mock Sync PlayStation Clawback event.",
        "tags": [
          "Clawback"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CLAWBACK"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/iap/config/apple": {
      "delete": {
        "description": "Delete apple iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteAppleIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete apple iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get apple iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: apple iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getAppleIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get apple iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update apple iap config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated apple iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateAppleIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AppleIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update apple iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/iap/config/epicgames": {
      "delete": {
        "description": "Delete epic games iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteEpicGamesIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete epic games iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get epic games iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: epic games iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getEpicGamesIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EpicGamesIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get epicgames iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update epic games iap config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated epic games iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateEpicGamesIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EpicGamesIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EpicGamesIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update epic games iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/iap/config/google": {
      "delete": {
        "description": "Delete google iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteGoogleIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete google iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get google iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: google iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getGoogleIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoogleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get google iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update google iap config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated google iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateGoogleIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoogleIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoogleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update google iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/iap/config/google/cert": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Upload google play p12 file.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated google iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateGoogleP12File",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoogleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload google play p12 file",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/iap/config/item": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "delete a iap item config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026lt;b\u0026gt;\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;\u0026lt;/b\u0026gt;, action=8 \u0026lt;b\u0026gt;(DELETE)\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteIAPItemConfig",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "delete a iap item config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get iap item config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026lt;b\u0026gt;\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;\u0026lt;/b\u0026gt;, action=2 \u0026lt;b\u0026gt;(READ)\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getIAPItemConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/IAPItemConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39341\u003c/td\u003e\u003ctd\u003eIAP item config cannot be found in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get iap item config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update iap item config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated iap item config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateIAPItemConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/IAPItemConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/IAPItemConfigInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39321\u003c/td\u003e\u003ctd\u003eInvalid IAP item config namespace [{namespace}]: [{message}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39175\u003c/td\u003e\u003ctd\u003eDuplicate IAP item mapping, IAPType: [{iapType}] and id: [{iapId}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update iap item config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/iap/config/oculus": {
      "delete": {
        "description": "Delete oculus iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteOculusIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete oculus iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get oculus iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: steam iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getOculusIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OculusIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get oculus iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update oculus iap config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated steam iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateOculusIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OculusIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OculusIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update oculus iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/iap/config/playstation": {
      "delete": {
        "description": "Delete playstation iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deletePlaystationIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete playstation iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get playstation iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: playstation iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getPlayStationIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayStationIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get playstation iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update playstation iap config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated playstation iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updatePlaystationIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlaystationIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayStationIAPConfigInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39130\u003c/td\u003e\u003ctd\u003eInvalid playstation config: [{message}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update playstation iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/iap/config/playstation/validate": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Validate playstation iap config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Test Results\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "validateExistedPlaystationIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Validate existed playstation iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Validate playstation iap config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Test Results\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "validatePlaystationIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlaystationIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Validate playstation iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/iap/config/steam": {
      "delete": {
        "description": "Delete steam iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteSteamIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete steam iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get steam iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: steam iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getSteamIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SteamIAPConfig"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get steam iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update steam iap config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated steam iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateSteamIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SteamIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SteamIAPConfigInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39128\u003c/td\u003e\u003ctd\u003eSteam publisher key is invalid\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39129\u003c/td\u003e\u003ctd\u003eSteam app id is invalid\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update steam iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/iap/config/twitch": {
      "delete": {
        "description": "Delete twitch iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteTwitchIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete twitch iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get twitch iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: twitch iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getTwitchIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TwitchIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get twitch iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update twitch iap config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated twitch iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateTwitchIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TwitchIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TwitchIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update twitch iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/iap/config/xbl": {
      "delete": {
        "description": "Delete xbl iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteXblAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete xbl iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get xbox iap config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: xbox iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getXblIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/XblIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get xbox iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update xbl iap config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated xbl iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateXblIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XblIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/XblIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update xbl iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/iap/config/xbl/cert": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Upload xbl business partner cert file.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated xbl iap config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateXblBPCertFile",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          },
          {
            "in": "formData",
            "name": "password",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/XblIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload xbl business partner cert file",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/invoice/details.csv": {
      "get": {
        "description": "Download invoice details as a csv file.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: invoice details csv file\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "downloadInvoiceDetails",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "endTime",
            "required": true,
            "type": "string"
          },
          {
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "startTime",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "feature",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "BUNDLE",
              "CODE",
              "COINS",
              "EXTENSION",
              "INGAMEITEM",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SEASON",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "itemType",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Download invoice details",
        "tags": [
          "Invoice"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ORDER"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/invoice/summary": {
      "get": {
        "description": "Generate invoice summary.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: query orders\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "generateInvoiceSummary",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "endTime",
            "required": true,
            "type": "string"
          },
          {
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "startTime",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "feature",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "BUNDLE",
              "CODE",
              "COINS",
              "EXTENSION",
              "INGAMEITEM",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SEASON",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "itemType",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InvoiceSummary"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Generate invoice summary",
        "tags": [
          "Invoice"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ORDER"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to create an item. APP item only can created in publisher namespace.\u0026lt;p\u0026gt;An item create example:\u0026lt;p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;{\r\n   \u0026#34;categoryPath\u0026#34;: \u0026#34;/games\u0026#34;,\r\n   \u0026#34;localizations\u0026#34;: \\{\r\n       \u0026#34;en\u0026#34;: \\{\r\n           \u0026#34;title\u0026#34;:\u0026#34;required\u0026#34;,\r\n           \u0026#34;description\u0026#34;:\u0026#34;optional\u0026#34;,\r\n           \u0026#34;longDescription\u0026#34;:\u0026#34;optional\u0026#34;,\r\n           \u0026#34;localExt\u0026#34;: \\{\r\n                  \u0026#34;properties\u0026#34;:\\[\r\n                                   \\{\r\n                                       \u0026#34;key1\u0026#34;:\u0026#34;value1\u0026#34;,\r\n                                       \u0026#34;key2\u0026#34;:\u0026#34;value2\u0026#34;\r\n                                   \\}\r\n                  \\],\r\n                  \u0026#34;functions\u0026#34;:\\[\r\n                                   \\{\r\n                                       \u0026#34;key1\u0026#34;:\u0026#34;value1\u0026#34;,\r\n                                       \u0026#34;key2\u0026#34;:\u0026#34;value2\u0026#34;\r\n                                   \\}\r\n                 \\]\r\n           \\}\r\n        \\}\r\n   \\},\r\n   \u0026#34;images\u0026#34;: \\[\r\n     \\{\r\n           \u0026#34;as\u0026#34;:\u0026#34;optional, image for\u0026#34;,\r\n           \u0026#34;caption\u0026#34;:\u0026#34;optional\u0026#34;,\r\n           \u0026#34;height\u0026#34;:10,\r\n           \u0026#34;width\u0026#34;:10,\r\n           \u0026#34;imageUrl\u0026#34;:\u0026#34;http://img-url-required\u0026#34;,\r\n           \u0026#34;smallImageUrl\u0026#34;:\u0026#34;http://small-img-url-required\u0026#34;\r\n     \\}\r\n   \\],\r\n   \u0026#34;thumbnailUrl\u0026#34;: \u0026#34;optional, thumbnail url\u0026#34;,\r\n   \u0026#34;status\u0026#34;: \u0026#34;ACTIVE\u0026#34;,\r\n   \u0026#34;listable\u0026#34;: true,\r\n   \u0026#34;purchasable\u0026#34;: true,\r\n   \u0026#34;itemType\u0026#34;: \u0026#34;APP(allowed: [APP,COINS,INGAMEITEM,CODE,BUNDLE])\u0026#34;,\r\n   \u0026#34;name\u0026#34;: \u0026#34;required, also will be used as entitlement name\u0026#34;,\r\n   \u0026#34;entitlementType\u0026#34;: \u0026#34;DURABLE(allowed:[DURABLE,CONSUMABLE], should be CONSUMABLE when item type is COINS)\u0026#34;, \r\n   \u0026#34;useCount\u0026#34;: 1(optional, required if the entitlement type is consumable),\r\n   \u0026#34;stackable\u0026#34;: false,\r\n   \u0026#34;appId\u0026#34;: \u0026#34;optional, required if itemType is APP\u0026#34;,\r\n   \u0026#34;appType\u0026#34;: \u0026#34;GAME(optional, required if itemType is APP)\u0026#34;,\r\n   \u0026#34;seasonType\u0026#34;: \u0026#34;PASS(optional, required if itemType is SEASON)\u0026#34;,\r\n   \u0026#34;baseAppId\u0026#34;: \u0026#34;optional, set value of game app id if you want to link to a game\u0026#34;,\r\n   \u0026#34;targetCurrencyCode\u0026#34;: \u0026#34;optional, required if itemType is COINS\u0026#34;,\r\n   \u0026#34;targetNamespace\u0026#34;: \u0026#34;optional, required when itemType is INGAMEITEM, the targetNamespace will only take effect when the item\r\n   created belongs to the publisher namespace\u0026#34;,\r\n   \u0026#34;sku\u0026#34;: \u0026#34;optional, commonly unique item code\u0026#34;,\r\n   \u0026#34;regionData\u0026#34;: \\{\r\n       \u0026#34;US(store\u0026#39;s default region is required)\u0026#34;: \\[\r\n         \\{\r\n            \u0026#34;price\u0026#34;:10,\r\n            \u0026#34;discountPercentage\u0026#34;: 0(integer, optional, range[0,100], discountedPrice = price  \\* ((100 - discountPercentage) \\* 0.01),\r\n              will use it to calculate discounted price if it is not 0),\r\n            \u0026#34;discountAmount\u0026#34;:0(integer, optional, range[0,itemPrice], will use it to calculate discounted price if discountPercentage is 0),\r\n            \u0026#34;currencyCode\u0026#34;:\u0026#34;code(required, example: USD)\u0026#34;,\r\n            \u0026#34;currencyNamespace\u0026#34;:\u0026#34;test-ns-required(allow publisher namespace if namespace is publisher namespace, allow publisher and game namespace if namespace is not publisher namespace)\u0026#34;,\r\n            \u0026#34;trialPrice\u0026#34;:5(required while fixedTrialCycles set, should \u0026gt;=0 and \u0026lt;= price, will same as price if not present),\r\n            \u0026#34;purchaseAt\u0026#34;:\u0026#34;optional yyyy-MM-dd\u0026#39;T\u0026#39;HH:mm:ss.SSS\u0026#39;Z\u0026#39;\u0026#34;,\r\n            \u0026#34;expireAt\u0026#34;:\u0026#34;optional yyyy-MM-dd\u0026#39;T\u0026#39;HH:mm:ss.SSS\u0026#39;Z\u0026#39;\u0026#34;,\r\n            \u0026#34;discountPurchaseAt\u0026#34;:\u0026#34;optional yyyy-MM-dd\u0026#39;T\u0026#39;HH:mm:ss.SSS\u0026#39;Z\u0026#39;\u0026#34;,\r\n            \u0026#34;discountExpireAt\u0026#34;:\u0026#34;optional yyyy-MM-dd\u0026#39;T\u0026#39;HH:mm:ss.SSS\u0026#39;Z\u0026#39;\u0026#34;\r\n         \\}\r\n       \\]\r\n   \\},\r\n   \u0026#34;itemIds\u0026#34;: \\[\r\n       \u0026#34;itemId\u0026#34;\r\n   \\],\r\n   \u0026#34;itemQty\u0026#34;: \\{\r\n       \u0026#34;itemId\u0026#34;:1\r\n   \\},\r\n   \u0026#34;recurring\u0026#34;: \\{\r\n       \u0026#34;cycle\u0026#34;:\u0026#34;MONTHLY(allowed: [WEEKLY,MONTHLY,QUARTERLY,YEARLY])\u0026#34;,\r\n       \u0026#34;fixedFreeDays\u0026#34;:0(integer, fixed free days, 0 means not set),\r\n       \u0026#34;fixedTrialCycles\u0026#34;:0(integer, fixed trial cycles, 0 means not set, will not take effect if fixedFreeDays set),\r\n       \u0026#34;graceDays\u0026#34;:7(integer, recurring grace days, retry recurring charge within configured days if charge fail, default 7)\r\n   \\},\r\n   \u0026#34;tags\u0026#34;: \\[\r\n       \u0026#34;exampleTag24\u0026#34;\r\n   \\],\r\n   \u0026#34;features\u0026#34;: \\[\r\n       \u0026#34;feature\u0026#34;\r\n   \\],\r\n   \u0026#34;clazz\u0026#34;: \u0026#34;weapon\u0026#34;,\r\n   \u0026#34;boothName\u0026#34;: \u0026#34;C_campaign1\u0026#34;,\r\n   \u0026#34;displayOrder\u0026#34;: 1000,\r\n   \u0026#34;ext\u0026#34;: \\{\r\n       \u0026#34;properties\u0026#34;:\\[\r\n           \\{\r\n               \u0026#34;key1\u0026#34;:\u0026#34;value1\u0026#34;,\r\n               \u0026#34;key2\u0026#34;:\u0026#34;value2\u0026#34;\r\n           \\}\r\n       \\],\r\n       \u0026#34;functions\u0026#34;:\\[\r\n           \\{\r\n               \u0026#34;key1\u0026#34;:\u0026#34;value1\u0026#34;,\r\n               \u0026#34;key2\u0026#34;:\u0026#34;value2\u0026#34;\r\n           \\}\r\n       \\]\r\n   \\},\r\n   \u0026#34;maxCountPerUser\u0026#34;: 1(integer, optional, -1 means UNLIMITED),\r\n   \u0026#34;maxCount\u0026#34;: 1(integer, optional, -1 means UNLIMITED, unset when itemType is CODE)\r\n}\u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: created item data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h2\u0026gt;Restrictions for item extension and localization extension\u0026lt;/h2\u0026gt;\n1. Cannot use \u0026lt;b\u0026gt;\u0026#34;.\u0026#34;\u0026lt;/b\u0026gt; as the key name\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;data.2\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;\n2. Cannot use \u0026lt;b\u0026gt;\u0026#34;$\u0026#34;\u0026lt;/b\u0026gt; as the prefix in key names\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;$data\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;",
        "operationId": "createItem",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20024\u003c/td\u003e\u003ctd\u003eunsupported operation\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30301\u003c/td\u003e\u003ctd\u003eUnsupported Item Type [{itemType}] for box item [{itemId}] with expiration\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30322\u003c/td\u003e\u003ctd\u003eBundle item [{itemId}] can't be bundled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30325\u003c/td\u003e\u003ctd\u003eCode item [{itemId}] can't be bundled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30326\u003c/td\u003e\u003ctd\u003eSubscription item [{itemId}] can't be bundled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30329\u003c/td\u003e\u003ctd\u003eInvalid bundled item [{itemId}] quantity\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30021\u003c/td\u003e\u003ctd\u003eDefault language [{language}] required\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30321\u003c/td\u003e\u003ctd\u003eInvalid item discount amount\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30022\u003c/td\u003e\u003ctd\u003eDefault region [{region}] is required\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30323\u003c/td\u003e\u003ctd\u003eTarget namespace is required\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30327\u003c/td\u003e\u003ctd\u003eInvalid item trial price\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30330\u003c/td\u003e\u003ctd\u003eInvalid item region price currency namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30332\u003c/td\u003e\u003ctd\u003eInvalid option box item [{itemId}] quantity\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30333\u003c/td\u003e\u003ctd\u003eItem [{itemId}] item type [{itemType}] can't be bundled into option box\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30334\u003c/td\u003e\u003ctd\u003eOption box item [{itemId}] can't be bundled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30337\u003c/td\u003e\u003ctd\u003eInvalid loot box item [{itemId}] quantity\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30338\u003c/td\u003e\u003ctd\u003eItem [{itemId}] item type [{itemType}] can't be bundled into loot box\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30339\u003c/td\u003e\u003ctd\u003eLoot box item [{itemId}] can't be bundled\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30241\u003c/td\u003e\u003ctd\u003eCategory [{categoryPath}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e36141\u003c/td\u003e\u003ctd\u003eCurrency [{currencyCode}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30175\u003c/td\u003e\u003ctd\u003eDuplicated currencyCode [{currencyCode}] in Region [{region}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30373\u003c/td\u003e\u003ctd\u003eItemType [{itemType}] is not allowed in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30376\u003c/td\u003e\u003ctd\u003ePublisher namespace don’t allow sellback item\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30377\u003c/td\u003e\u003ctd\u003eThis item type [{itemType}] don’t allow sellback\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30378\u003c/td\u003e\u003ctd\u003eSale price don’t allow real currency [{currencyCode}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30380\u003c/td\u003e\u003ctd\u003eBox item [{itemId}] duration and end date can’t be set at the same time\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30381\u003c/td\u003e\u003ctd\u003eCurrency [{currency}] is not set for bundle Item [{itemId}] in region [{region}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create an Item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to sync an in game item in game namespace to publisher namespace, only INGAMEITEM, CODE, COINS and SEASON are supported\u0026lt;p\u0026gt;The synced item has an additional field targetItemId besides targetNamespace, mostly this item should not modified manually again. \u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: item data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "syncInGameItem",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InGameItemSync"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30021\u003c/td\u003e\u003ctd\u003eDefault language [{language}] required\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30022\u003c/td\u003e\u003ctd\u003eDefault region [{region}] is required\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30324\u003c/td\u003e\u003ctd\u003eInvalid namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30241\u003c/td\u003e\u003ctd\u003eCategory [{categoryPath}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30373\u003c/td\u003e\u003ctd\u003eItemType [{itemType}] is not allowed in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync an in game item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/byAppId": {
      "get": {
        "description": "This API is used to get the item by appId.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the item with that appId\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getItemByAppId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30342\u003c/td\u003e\u003ctd\u003eItem of appId [{appId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get item by appId",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/byCriteria": {
      "get": {
        "description": "This API is used to query items by criteria within a store.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of items\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryItems",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": false,
            "type": "string"
          },
          {
            "description": "allowed format: \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z , filter date include(purchaseAt, expireAt)",
            "in": "query",
            "name": "availableDate",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "baseAppId",
            "required": false,
            "type": "string"
          },
          {
            "description": "category path",
            "in": "query",
            "name": "categoryPath",
            "required": false,
            "type": "string"
          },
          {
            "description": "features, separate multiple value by commas parameter",
            "in": "query",
            "name": "features",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "default is false, only available when search by category path, it will return all of the items(includes sub category path) under this category path",
            "in": "query",
            "name": "includeSubCategoryItem",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "enum": [
              "APP",
              "BUNDLE",
              "CODE",
              "COINS",
              "EXTENSION",
              "INGAMEITEM",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SEASON",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "itemType",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "exist in region",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "default": [
              "name:asc",
              "displayOrder:asc"
            ],
            "description": "default is name:asc,displayOrder:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc. Make sure to always use more than one sort if the first sort is not an unique valuefor example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "in": "query",
            "items": {
              "enum": [
                "name",
                "name:asc",
                "name:desc",
                "createdAt",
                "createdAt:asc",
                "createdAt:desc",
                "updatedAt",
                "updatedAt:asc",
                "updatedAt:desc",
                "displayOrder",
                "displayOrder:asc",
                "displayOrder:desc"
              ],
              "type": "string"
            },
            "name": "sortBy",
            "required": false,
            "type": "array",
            "uniqueItems": true
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "tags, separate multiple value by commas parameter",
            "in": "query",
            "name": "tags",
            "required": false,
            "type": "string"
          },
          {
            "description": "targetNamespace",
            "in": "query",
            "name": "targetNamespace",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemPagingSlicedResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query items by criteria",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/byFeatures/basic": {
      "get": {
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; This API is used to list basic items by features.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of basic items\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "listBasicItemsByFeatures",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "collectionFormat": "multi",
            "description": "features",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "features",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/BasicItem"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List basic items by features",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/byIds": {
      "get": {
        "description": "This API is used to get items.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of items info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getItems",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "commas separated item ids",
            "in": "query",
            "name": "itemIds",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/FullItemInfo"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get items",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/bySku": {
      "get": {
        "description": "This API is used to get the item by sku.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the item with sku\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getItemBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30343\u003c/td\u003e\u003ctd\u003eItem of sku [{sku}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get item by sku",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/bySku/locale": {
      "get": {
        "description": "This API is used to get an item by sku in specific locale. If item not exist in specific region, default region item will return.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: item data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getLocaleItemBySku",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "whether populate bundled items if it's a bundle",
            "in": "query",
            "name": "populateBundle",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PopulatedItemInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30343\u003c/td\u003e\u003ctd\u003eItem of sku [{sku}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get an item by sku in locale",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/estimatedPrice": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to get estimated prices of a flexible pricing bundle",
        "operationId": "getEstimatedPrice",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "commas separated item ids",
            "in": "query",
            "name": "itemIds",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "use published store id by default",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EstimatedPriceInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get estimated price",
        "tags": [
          "Item"
        ]
      }
    },
    "/platform/admin/namespaces/{namespace}/items/itemId/bySku": {
      "get": {
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; This API is used to get the itemId by sku.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the itemId with sku\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getItemIdBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemId"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30343\u003c/td\u003e\u003ctd\u003eItem of sku [{sku}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get itemId by sku",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/itemId/bySkus": {
      "get": {
        "description": "This API is used to get an list of itemId by list of sku.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: item data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getBulkItemIdBySkus",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "list of sku",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "sku",
            "required": false,
            "type": "array"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/ItemId"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get multiple itemId by sku",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/locale/byIds": {
      "get": {
        "description": "This API is used to bulk get locale items. If item not exist in specific region, default region item will return.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of items info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "bulkGetLocaleItems",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "commas separated item ids",
            "in": "query",
            "name": "itemIds",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/ItemInfo"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Bulk get locale items",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/predicate/types": {
      "get": {
        "description": "Get available predicate types.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:ITEM, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: available predicate types\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getAvailablePredicateTypes",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/AvailablePredicate"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get available predicate types",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/purchase/conditions/validate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to validate user purchase condition",
        "operationId": "validateItemPurchaseCondition",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemPurchaseConditionValidateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/ItemPurchaseConditionValidateResult"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Validate user purchase condition",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/regiondata": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to update region data of items in bulk \u0026lt;br /\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "bulkUpdateRegionData",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BulkRegionDataChangeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30022\u003c/td\u003e\u003ctd\u003eDefault region [{region}] is required\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30321\u003c/td\u003e\u003ctd\u003eInvalid item discount amount\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30327\u003c/td\u003e\u003ctd\u003eInvalid item trial price\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30330\u003c/td\u003e\u003ctd\u003eInvalid item region price currency namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30343\u003c/td\u003e\u003ctd\u003eItem of sku [{sku}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update item's region data in bulk",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/search": {
      "get": {
        "description": "This API is used to search items by keyword in title, description and long description within a store.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of items\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "searchItems",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "keyword",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "enum": [
              "APP",
              "BUNDLE",
              "CODE",
              "COINS",
              "EXTENSION",
              "INGAMEITEM",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SEASON",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "itemType",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": "name:asc,createdAt:asc",
            "description": "default is name:asc,createdAt:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc. Make sure to always use more than one sort if the first sort is not an unique valuefor example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemPagingSlicedResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Search items by keyword",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/uncategorized": {
      "get": {
        "description": "This API is used to query uncategorized items within a store.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of uncategorized items\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryUncategorizedItems",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": [
              "name:asc"
            ],
            "description": "default is name:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc Make sure to always use more than one sort if the first sort is not an unique valuefor example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "in": "query",
            "items": {
              "enum": [
                "name",
                "name:asc",
                "name:desc",
                "createdAt",
                "createdAt:asc",
                "createdAt:desc",
                "updatedAt",
                "updatedAt:asc",
                "updatedAt:desc",
                "displayOrder",
                "displayOrder:asc",
                "displayOrder:desc"
              ],
              "type": "string"
            },
            "name": "sortBy",
            "required": false,
            "type": "array",
            "uniqueItems": true
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemPagingSlicedResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query uncategorized items",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/{itemId}": {
      "delete": {
        "description": "This API is used to delete an item permanently.\u0026lt;p\u0026gt;force: the default value should be: false. When the value is: \u0026lt;li\u0026gt;\u0026lt;i\u0026gt;false:\u0026lt;i\u0026gt;only the items in the draft store that have never been published yet can be removed.\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;true:\u0026lt;i\u0026gt;the item in the draft store(even been published before) can be removed.\u0026lt;/li\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteItem",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "default is false",
            "in": "query",
            "name": "force",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete item successfully"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30335\u003c/td\u003e\u003ctd\u003eItem [{itemId}] can't be deleted in non-forced mode if item has been published\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete an item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      },
      "get": {
        "description": "This API is used to get an item.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: item data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getItem",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get an item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to update an item.\u0026lt;p\u0026gt;An item update example:\u0026lt;p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;{\r\n\t\u0026#34;categoryPath\u0026#34;: \u0026#34;/games\u0026#34;,\r\n\t\u0026#34;localizations\u0026#34;: \\{\r\n       \u0026#34;en\u0026#34;: \\{\r\n           \u0026#34;title\u0026#34;:\u0026#34;required\u0026#34;,\r\n           \u0026#34;description\u0026#34;:\u0026#34;optional\u0026#34;,\r\n           \u0026#34;longDescription\u0026#34;:\u0026#34;optional\u0026#34;,\r\n           \u0026#34;localExt\u0026#34;: \\{\r\n                  \u0026#34;properties\u0026#34;:\\[\r\n                                   \\{\r\n                                       \u0026#34;key1\u0026#34;:\u0026#34;value1\u0026#34;,\r\n                                       \u0026#34;key2\u0026#34;:\u0026#34;value2\u0026#34;\r\n                                   \\}\r\n                  \\],\r\n                  \u0026#34;functions\u0026#34;:\\[\r\n                                   \\{\r\n                                       \u0026#34;key1\u0026#34;:\u0026#34;value1\u0026#34;,\r\n                                       \u0026#34;key2\u0026#34;:\u0026#34;value2\u0026#34;\r\n                                   \\}\r\n                 \\]\r\n           \\}\r\n       \\}\r\n   \\},\r\n   \u0026#34;images\u0026#34;: \\[\r\n     \\{\r\n           \u0026#34;as\u0026#34;:\u0026#34;optional, image for\u0026#34;,\r\n           \u0026#34;caption\u0026#34;:\u0026#34;optional\u0026#34;,\r\n           \u0026#34;height\u0026#34;:10,\r\n           \u0026#34;width\u0026#34;:10,\r\n           \u0026#34;imageUrl\u0026#34;:\u0026#34;http://img-url-required\u0026#34;,\r\n           \u0026#34;smallImageUrl\u0026#34;:\u0026#34;http://small-img-url-required\u0026#34;\r\n     \\}\r\n   \\],\r\n   \u0026#34;thumbnailUrl\u0026#34;: \u0026#34;optional, thumbnail url\u0026#34;,\r\n   \u0026#34;status\u0026#34;: \u0026#34;ACTIVE\u0026#34;,\r\n   \u0026#34;listable\u0026#34;: true,\r\n   \u0026#34;purchasable\u0026#34;: true,\r\n   \u0026#34;itemType\u0026#34;: \u0026#34;APP(allowed: [APP,COINS,INGAMEITEM,CODE,BUNDLE])\u0026#34;,\r\n   \u0026#34;name\u0026#34;: \u0026#34;optional\u0026#34;,\r\n   \u0026#34;entitlementType\u0026#34;: \u0026#34;DURABLE(allowed:[DURABLE,CONSUMABLE], should be CONSUMABLE when item type is COINS)\u0026#34;, \r\n   \u0026#34;useCount\u0026#34;: 1(optional, required if the entitlement type is consumable),\r\n   \u0026#34;stackable\u0026#34;: false,\r\n   \u0026#34;appId\u0026#34;: \u0026#34;optional, required if itemType is APP\u0026#34;,\r\n   \u0026#34;baseAppId\u0026#34;: \u0026#34;optional, set value of game app id if you want to link to a game\u0026#34;,\r\n   \u0026#34;appType\u0026#34;: \u0026#34;GAME(optional, required if itemType is APP)\u0026#34;,\r\n   \u0026#34;seasonType\u0026#34;: \u0026#34;PASS(optional, required if itemType is SEASON)\u0026#34;,\r\n   \u0026#34;sku\u0026#34;: \u0026#34;optional, commonly unique item code\u0026#34;,\r\n   \u0026#34;targetCurrencyCode\u0026#34;: \u0026#34;optional, required if itemType is COINS\u0026#34;,\r\n   \u0026#34;targetNamespace\u0026#34;: \u0026#34;optional, required when itemType is INGAMEITEM, the targetNamespace will only take effect when the item\r\n   created belongs to the publisher namespace\u0026#34;,\r\n   \u0026#34;regionData\u0026#34;: \\{\r\n       \u0026#34;US(store\u0026#39;s default region is required)\u0026#34;: \\[\r\n         \\{\r\n            \u0026#34;price\u0026#34;:10,\r\n            \u0026#34;discountPercentage\u0026#34;:0(integer, optional, range[0,100], discountedPrice = price\\*((100 - discountPercentage) \\* 0.01),\r\n              if it is not 0, will use it to calculate discounted price),\r\n            \u0026#34;discountAmount\u0026#34;:0(integer, optional, range[0,itemPrice], will use it to calculate discounted price if discountPercentage is 0),\r\n            \u0026#34;currencyCode\u0026#34;:\u0026#34;code(required, example: USD)\u0026#34;,\r\n            \u0026#34;currencyNamespace\u0026#34;:\u0026#34;test-ns-required(allow publisher namespace if namespace is publisher namespace, allow publisher and game namespace if namespace is not publisher namespace)\u0026#34;,\r\n            \u0026#34;trialPrice\u0026#34;:5(required while fixedTrialCycles set, should \u0026gt;=0 and \u0026lt;= price, will same as price if not present),\r\n            \u0026#34;purchaseAt\u0026#34;:\u0026#34;optional yyyy-MM-dd\u0026#39;T\u0026#39;HH:mm:ss.SSS\u0026#39;Z\u0026#39;\u0026#34;,\r\n            \u0026#34;expireAt\u0026#34;:\u0026#34;optional yyyy-MM-dd\u0026#39;T\u0026#39;HH:mm:ss.SSS\u0026#39;Z\u0026#39;\u0026#34;,\r\n            \u0026#34;discountPurchaseAt\u0026#34;:\u0026#34;optional yyyy-MM-dd\u0026#39;T\u0026#39;HH:mm:ss.SSS\u0026#39;Z\u0026#39;\u0026#34;,\r\n            \u0026#34;discountExpireAt\u0026#34;:\u0026#34;optional yyyy-MM-dd\u0026#39;T\u0026#39;HH:mm:ss.SSS\u0026#39;Z\u0026#39;\u0026#34;\r\n         \\}\r\n       \\]\r\n   \\},\r\n   \u0026#34;itemIds\u0026#34;: \\[\r\n       \u0026#34;itemId\u0026#34;\r\n   \\],\r\n   \u0026#34;itemQty\u0026#34;: \\{\r\n       \u0026#34;itemId\u0026#34;:1\r\n   \\},\r\n   \u0026#34;recurring\u0026#34;: \\{\r\n       \u0026#34;cycle\u0026#34;:\u0026#34;MONTHLY(allowed: [WEEKLY,MONTHLY,QUARTERLY,YEARLY])\u0026#34;,\r\n       \u0026#34;fixedFreeDays\u0026#34;:0(integer, fixed free days, 0 means not set),\r\n       \u0026#34;fixedTrialCycles\u0026#34;:0(integer, fixed trial cycles, 0 means not set, will not take effect if fixedFreeDays set),\r\n       \u0026#34;graceDays\u0026#34;:7(integer, recurring grace days, retry recurring charge within configured days if charge fail, default 7)\r\n   \\},\r\n   \u0026#34;tags\u0026#34;: \\[\r\n       \u0026#34;exampleTag24\u0026#34;\r\n   \\],\r\n   \u0026#34;features\u0026#34;: \\[\r\n       \u0026#34;feature\u0026#34;\r\n   \\],\r\n   \u0026#34;clazz\u0026#34;: \u0026#34;weapon\u0026#34;,\r\n   \u0026#34;boothName\u0026#34;: \u0026#34;C_campaign1\u0026#34;,\r\n   \u0026#34;displayOrder\u0026#34;: 1000,\r\n   \u0026#34;ext\u0026#34;: \\{\r\n       \u0026#34;properties\u0026#34;:\\[\r\n           \\{\r\n               \u0026#34;key1\u0026#34;:\u0026#34;value1\u0026#34;,\r\n               \u0026#34;key2\u0026#34;:\u0026#34;value2\u0026#34;\r\n           \\}\r\n       \\],\r\n       \u0026#34;functions\u0026#34;:\\[\r\n           \\{\r\n               \u0026#34;key1\u0026#34;:\u0026#34;value1\u0026#34;,\r\n               \u0026#34;key2\u0026#34;:\u0026#34;value2\u0026#34;\r\n           \\}\r\n       \\]\r\n   \\},\r\n   \u0026#34;maxCountPerUser\u0026#34;: 1(integer, optional, -1 means UNLIMITED),\r\n   \u0026#34;maxCount\u0026#34;: 1(integer, optional, -1 means UNLIMITED, new value should \u0026gt;= old value if both old value and new value is\r\n   limited, unset when item type is CODE)\r\n}\u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated item data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h2\u0026gt;Restrictions for item extension and localization extension\u0026lt;/h2\u0026gt;\n1. Cannot use \u0026lt;b\u0026gt;\u0026#34;.\u0026#34;\u0026lt;/b\u0026gt; as the key name\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;data.2\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;\n2. Cannot use \u0026lt;b\u0026gt;\u0026#34;$\u0026#34;\u0026lt;/b\u0026gt; as the prefix in key names\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;$data\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;",
        "operationId": "updateItem",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20024\u003c/td\u003e\u003ctd\u003eunsupported operation\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30301\u003c/td\u003e\u003ctd\u003eUnsupported Item Type [{itemType}] for box item [{itemId}] with expiration\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30322\u003c/td\u003e\u003ctd\u003eBundle item [{itemId}] can't be bundled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30325\u003c/td\u003e\u003ctd\u003eCode item [{itemId}] can't be bundled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30326\u003c/td\u003e\u003ctd\u003eSubscription item [{itemId}] can't be bundled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30329\u003c/td\u003e\u003ctd\u003eInvalid bundled item [{itemId}] quantity\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30021\u003c/td\u003e\u003ctd\u003eDefault language [{language}] required\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30321\u003c/td\u003e\u003ctd\u003eInvalid item discount amount\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30022\u003c/td\u003e\u003ctd\u003eDefault region [{region}] is required\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30323\u003c/td\u003e\u003ctd\u003eTarget namespace is required\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30327\u003c/td\u003e\u003ctd\u003eInvalid item trial price\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30330\u003c/td\u003e\u003ctd\u003eInvalid item region price currency namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30332\u003c/td\u003e\u003ctd\u003eInvalid option box item [{itemId}] quantity\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30333\u003c/td\u003e\u003ctd\u003eItem [{itemId}] item type [{itemType}] can't be bundled into option box\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30334\u003c/td\u003e\u003ctd\u003eOption box item [{itemId}] can't be bundled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30337\u003c/td\u003e\u003ctd\u003eInvalid loot box item [{itemId}] quantity\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30338\u003c/td\u003e\u003ctd\u003eItem [{itemId}] item type [{itemType}] can't be bundled into loot box\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30339\u003c/td\u003e\u003ctd\u003eLoot box item [{itemId}] can't be bundled\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30241\u003c/td\u003e\u003ctd\u003eCategory [{categoryPath}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e36141\u003c/td\u003e\u003ctd\u003eCurrency [{currencyCode}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30371\u003c/td\u003e\u003ctd\u003eItem maxCount not allow reduce\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30372\u003c/td\u003e\u003ctd\u003eItemType is not updatable\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30175\u003c/td\u003e\u003ctd\u003eDuplicated currencyCode [{currencyCode}] in Region [{region}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30374\u003c/td\u003e\u003ctd\u003eItem sku [{sku}] already exists in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30376\u003c/td\u003e\u003ctd\u003ePublisher namespace don’t allow sellback item\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30377\u003c/td\u003e\u003ctd\u003eThis item type [{itemType}] don’t allow sellback\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30378\u003c/td\u003e\u003ctd\u003eSale price don’t allow real currency [{currencyCode}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30379\u003c/td\u003e\u003ctd\u003eItem sku is not updatable\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30380\u003c/td\u003e\u003ctd\u003eBox item [{itemId}] duration and end date can’t be set at the same time\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30381\u003c/td\u003e\u003ctd\u003eCurrency [{currency}] is not set for bundle Item [{itemId}] in region [{region}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update an item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/{itemId}/acquire": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; This api is used for acquiring a published item while the item is maxCount limited, it will decrease the sale available count.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: acquire result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "acquireItem",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemAcquireRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemAcquireResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Acquire item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/{itemId}/app": {
      "get": {
        "description": "This API is used to get an app info.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: app data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getApp",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullAppInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get an app info",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to update an app.\u0026lt;p\u0026gt;An app update example:\u0026lt;p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;{\r\n  \u0026#34;developer\u0026#34;: \u0026#34;accelbyte\u0026#34;,\r\n  \u0026#34;publisher\u0026#34;: \u0026#34;accelbyte\u0026#34;,\r\n  \u0026#34;websiteUrl\u0026#34;: \u0026#34;http://accelbyte.io\u0026#34;,\r\n  \u0026#34;forumUrl\u0026#34;: \u0026#34;http://accelbyte.io\u0026#34;,\r\n  \u0026#34;platforms\u0026#34;: \\[\u0026#34;Windows(allowed values: Windows, MacOS, Linux, IOS, Android)\u0026#34;\\],\r\n  \u0026#34;platformRequirements\u0026#34;: \\{\r\n    \u0026#34;Windows\u0026#34;: \\[\r\n      \\{\r\n        \u0026#34;label\u0026#34;:\u0026#34;minimum(can be minimum or recommended)\u0026#34;,\r\n        \u0026#34;osVersion\u0026#34;:\u0026#34;os version\u0026#34;,\r\n        \u0026#34;processor\u0026#34;:\u0026#34;processor\u0026#34;,\r\n        \u0026#34;ram\u0026#34;:\u0026#34;RAM\u0026#34;,\r\n        \u0026#34;graphics\u0026#34;:\u0026#34;graphics\u0026#34;,\r\n        \u0026#34;directXVersion\u0026#34;:\u0026#34;directXVersion\u0026#34;,\r\n        \u0026#34;diskSpace\u0026#34;:\u0026#34;diskSpace\u0026#34;,\r\n        \u0026#34;soundCard\u0026#34;:\u0026#34;soundCard\u0026#34;,\r\n        \u0026#34;additionals\u0026#34;:\u0026#34;additionals\u0026#34;\r\n      \\}\r\n     \\]\r\n  \\},\r\n  \u0026#34;carousel\u0026#34;: \\[\r\n    \\{\r\n      \u0026#34;type\u0026#34;:\u0026#34;image(allowed values: image, video)\u0026#34;,\r\n      \u0026#34;videoSource\u0026#34;:\u0026#34;generic(allowed values:generic, youtube, viemo)\u0026#34;,\r\n      \u0026#34;url\u0026#34;:\u0026#34;url\u0026#34;,\r\n      \u0026#34;alt\u0026#34;:\u0026#34;alternative url or text\u0026#34;,\r\n      \u0026#34;thumbnailUrl\u0026#34;:\u0026#34;thumbnail url\u0026#34;,\r\n      \u0026#34;previewUrl\u0026#34;:\u0026#34;preview url\u0026#34;,\r\n    \\}\r\n  \\],\r\n  \u0026#34;localizations\u0026#34;: \\{\r\n    \u0026#34;en\u0026#34;: \\{\r\n      \u0026#34;slogan\u0026#34;:\u0026#34;slogan\u0026#34;,\r\n      \u0026#34;announcement\u0026#34;:\u0026#34;announcement\u0026#34;,\r\n    \\}\r\n  \\},\r\n  \u0026#34;primaryGenre\u0026#34;: \u0026#34;Action\u0026#34;,\r\n  \u0026#34;genres\u0026#34;: \\[\u0026#34;Action\u0026#34;, \u0026#34;Adventure\u0026#34;\\],\r\n  \u0026#34;players\u0026#34;: \\[\u0026#34;Single\u0026#34;\\],\r\n  \u0026#34;releaseDate\u0026#34;: \u0026#34;optional yyyy-MM-dd\u0026#39;T\u0026#39;HH:mm:ss.SSS\u0026#39;Z\u0026#39;\u0026#34;\r\n}\u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated app data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateApp",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AppUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullAppInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctdErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update an app",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/{itemId}/disable": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Disable an item.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "disableItem",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Disable an item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/{itemId}/dynamic": {
      "get": {
        "description": "Get item dynamic data for published item.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: item dynamic data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getItemDynamicData",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemDynamicDataInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get item dynamic data",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/{itemId}/enable": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Enable an item.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "enableItem",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Enable an item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/{itemId}/features/{feature}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Remove a feature from an item.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "defeatureItem",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Defeature an item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Add a feature to an item.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "featureItem",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Feature an item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/{itemId}/locale": {
      "get": {
        "description": "This API is used to get an item in specific locale. If item not exist in specific region, default region item will return.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: item data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getLocaleItem",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "whether populate bundled items if it's a bundle",
            "in": "query",
            "name": "populateBundle",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PopulatedItemInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get an item in locale",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/{itemId}/purchase/condition": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to update item purchase condition",
        "operationId": "updateItemPurchaseCondition",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseConditionUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30331\u003c/td\u003e\u003ctd\u003eInvalid purchase condition\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update item purchase condition",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/items/{itemId}/return": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; This api is used for returning a published item while the item is maxCount limited, it will increase the sale available count if orderNo already acquired.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "returnItem",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemReturnRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Return item successfully"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Return item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/keygroups": {
      "get": {
        "description": "Query key groups, if name is presented, it\u0026#39;s fuzzy match.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: slice of key group\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryKeyGroups",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "tag",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KeyGroupPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query key groups",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create key group.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: created key group\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "createKeyGroup",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/KeyGroupCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KeyGroupInfo"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37271\u003c/td\u003e\u003ctd\u003eKey group [{name}] already exists in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create key group",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/keygroups/byBoothName": {
      "get": {
        "deprecated": true,
        "description": "Get key group.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: key group info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getKeyGroupByBoothName",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "boothName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KeyGroupInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37041\u003c/td\u003e\u003ctd\u003eTicket booth [{boothName}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get key group by booth name",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/keygroups/{keyGroupId}": {
      "get": {
        "description": "Get key group.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: key group info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getKeyGroup",
        "parameters": [
          {
            "in": "path",
            "name": "keyGroupId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KeyGroupInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37241\u003c/td\u003e\u003ctd\u003eKey group [{keyGroupId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get key group",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update key group.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated key group\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateKeyGroup",
        "parameters": [
          {
            "in": "path",
            "name": "keyGroupId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/KeyGroupUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KeyGroupInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37241\u003c/td\u003e\u003ctd\u003eKey group [{keyGroupId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37271\u003c/td\u003e\u003ctd\u003eKey group [{name}] already exists in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update key group",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/keygroups/{keyGroupId}/dynamic": {
      "get": {
        "description": "Get key group dynamic.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: key group info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getKeyGroupDynamic",
        "parameters": [
          {
            "in": "path",
            "name": "keyGroupId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KeyGroupDynamicInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37241\u003c/td\u003e\u003ctd\u003eKey group [{keyGroupId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get key group dynamic",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/keygroups/{keyGroupId}/keys": {
      "get": {
        "description": "This API is used to list keys of a key group.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: keys\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "listKeys",
        "parameters": [
          {
            "in": "path",
            "name": "keyGroupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "enum": [
              "ACQUIRED",
              "ACTIVE"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KeyPagingSliceResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List keys of a key group",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "This API is used to upload keys with csv format to a key group.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: item data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "uploadKeys",
        "parameters": [
          {
            "in": "path",
            "name": "keyGroupId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BulkOperationResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37221\u003c/td\u003e\u003ctd\u003eInvalid key file\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37241\u003c/td\u003e\u003ctd\u003eKey group [{keyGroupId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload keys to key group",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/orders": {
      "get": {
        "description": "Query orders.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: query orders\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryOrders",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "endTime",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "orderNos",
            "required": false,
            "type": "array"
          },
          {
            "default": "createdTime:desc",
            "description": "default is createdTime:desc, support sort group, e.g. sortBy=status:asc,createdTime:desc",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "type": "string"
          },
          {
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "startTime",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "CHARGED",
              "CLOSED",
              "DELETED",
              "FULFILLED",
              "FULFILL_FAILED",
              "INIT",
              "REFUNDED",
              "REFUNDING",
              "REFUND_FAILED"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "return total in slice result when true",
            "in": "query",
            "name": "withTotal",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderPagingResult"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query orders",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ORDER"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/orders/stats": {
      "get": {
        "description": "Get Order Statistics.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: order statistics\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getOrderStatistics",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderStatistics"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Order Statistics",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ORDER"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/orders/{orderNo}": {
      "get": {
        "description": "Get order by orderNo.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: order instance\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32141\u003c/td\u003e\u003ctd\u003eOrder [{orderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ORDER"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/orders/{orderNo}/refund": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Refund order by orderNo.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ORDER\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "refundOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderRefundCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32141\u003c/td\u003e\u003ctd\u003eOrder [{orderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32171\u003c/td\u003e\u003ctd\u003eOrder [{orderNo}] is not refundable\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ORDER [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Refund order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ORDER"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/payment/config/callback": {
      "get": {
        "description": "Get payment callback configuration.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Payment callback config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getPaymentCallbackConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentCallbackConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33243\u003c/td\u003e\u003ctd\u003ePayment callback config for [{namespace}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get payment callback configuration",
        "tags": [
          "PaymentCallbackConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update payment callback configuration.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Payment callback config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updatePaymentCallbackConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentCallbackConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentCallbackConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update payment callback configuration",
        "tags": [
          "PaymentCallbackConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/payment/notifications": {
      "get": {
        "description": "Query payment notifications.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:PAYMENT:NOTIFICATION\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Payment notifications\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryPaymentNotifications",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "allowed format: \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z",
            "in": "query",
            "name": "endDate",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "externalId",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "enum": [
              "ADYEN",
              "ALIPAY",
              "CHECKOUT",
              "PAYPAL",
              "STRIPE",
              "WALLET",
              "WXPAY",
              "XSOLLA"
            ],
            "in": "query",
            "name": "notificationSource",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "notificationType",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "paymentOrderNo",
            "required": false,
            "type": "string"
          },
          {
            "description": "allowed format: \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z",
            "in": "query",
            "name": "startDate",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "ERROR",
              "IGNORED",
              "PROCESSED",
              "WARN"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentNotificationPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT:NOTIFICATION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query payment notifications",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT:NOTIFICATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/payment/orders": {
      "get": {
        "description": "Query payment orders.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:PAYMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: query payment orders\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryPaymentOrders",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "EXTERNAL",
              "INTERNAL"
            ],
            "in": "query",
            "name": "channel",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "extTxId",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "enum": [
              "AUTHORISED",
              "AUTHORISE_FAILED",
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "CHARGED",
              "CHARGE_FAILED",
              "DELETED",
              "INIT",
              "NOTIFICATION_OF_CHARGEBACK",
              "REFUNDED",
              "REFUNDING",
              "REFUND_FAILED",
              "REQUEST_FOR_INFORMATION"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query payment orders",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;This API is used to create payment order from non justice service. e.g. from dedicated server, the result contains the payment station url.\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Path Parameter:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Parameter\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Required\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;namespace\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Namespace that payment order resides in, should be publisher namespace if it\u0026#39;s a Steam like platform that share \u0026lt;br\u0026gt;payment config cross namespaces, otherwise it\u0026#39;s the game namespace\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Request Body Parameters:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Parameter\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Required\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;extOrderNo\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;External order number, it should be unique in invoker order system\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;sku\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Item identity\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;targetNamespace\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;The game namespace\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;targetUserId\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;User id for the order owner in game namespace\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;extUserId\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;External user id, can be user character id \u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;price\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;int\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;price which should be greater than 0\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;title\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Item title\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;description\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Item description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;currencyCode\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Currency code, default is USD\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;currencyNamespace\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Currency namespace, default is publisher namespace\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;region\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Country of the user, will get from user info if not present\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;language\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Language of the user\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;sandbox\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Boolean\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;set to true will create sandbox order that not real paid for xsolla/alipay and will not validate \u0026lt;br\u0026gt;price for wxpay.\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;returnUrl\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;customized return url for redirect once payment finished, leave unset to use configuration in \u0026lt;br\u0026gt;namespace\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;notifyUrl\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;customized notify url for payment web hook, leave unset to use configuration in namespace\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;customParameters\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Custom parameters\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;\u0026lt;/pre\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Request Body Example:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;code style=\u0026#39;overflow: auto\u0026#39;\u0026gt;{\r\n           \u0026#34;extOrderNo\u0026#34;: \u0026#34;123456789\u0026#34;,\n           \u0026#34;sku\u0026#34;: \u0026#34;sku\u0026#34;,\n           \u0026#34;targetNamespace\u0026#34;: \u0026#34;game1\u0026#34;,\n           \u0026#34;targetUserId\u0026#34;: \u0026#34;94451623768940d58416ca33ca767ec3\u0026#34;,\n           \u0026#34;extUserId\u0026#34;: \u0026#34;678\u0026#34;,\n           \u0026#34;title\u0026#34;: \u0026#34;Frostmourne\u0026#34;,\n           \u0026#34;description\\\u0026#34;: \u0026#34;Here was power. Here was despair\u0026#34;,\n           \u0026#34;price\u0026#34;: 100,\n           \u0026#34;region\u0026#34;: \u0026#34;CN\u0026#34;, \n           \u0026#34;language\u0026#34;: \u0026#34;zh-CN\u0026#34;, \n           \u0026#34;currencyCode\u0026#34;: \u0026#34;USD\u0026#34;,\n           \u0026#34;currencyNamespace\u0026#34;: \u0026#34;accelbyte\u0026#34;\r\n}\u0026lt;/pre\u0026gt;\u0026lt;/code\u0026gt;\u0026lt;h4\u0026gt;Payment Notification:\u0026lt;/h4\u0026gt;\u0026lt;p\u0026gt;After user complete the payment, it will send notification to configured web hook, http status code should return 200 or 204 once you resolve notification successfully, otherwise payment system will retry notification in interval\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Payment notification parameter:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Parameter\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Required\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;payload\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment notification payload in json string \u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;sign\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;sha1 hex signature for payload and private key\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;\u0026lt;/pre\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Payment notification parameter Example:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;code style=\u0026#39;overflow: auto\u0026#39;\u0026gt;{\r\n       \u0026#34;payload\u0026#34;: \u0026#34;{\n           \\\u0026#34;type\\\u0026#34;: \\\u0026#34;payment\\\u0026#34;,\n           \\\u0026#34;nonceStr\\\u0026#34;: \\\u0026#34;34c1dcf3eb58455eb161465bbfc0b590\\\u0026#34;,\n           \\\u0026#34;paymentOrderNo\\\u0026#34;: \\\u0026#34;18081239088\\\u0026#34;,\n           \\\u0026#34;namespace\\\u0026#34;: \\\u0026#34;accelbyte\\\u0026#34;,\n           \\\u0026#34;targetNamespace\\\u0026#34;: \\\u0026#34;game1\\\u0026#34;,\n           \\\u0026#34;targetUserId\\\u0026#34;: \\\u0026#34;94451623768940d58416ca33ca767ec3\\\u0026#34;,\n           \\\u0026#34;extOrderNo\\\u0026#34;: \\\u0026#34;123456789\\\u0026#34;,\n           \\\u0026#34;sku\\\u0026#34;: \\\u0026#34;sku\\\u0026#34;,\n           \\\u0026#34;extUserId\\\u0026#34;: \\\u0026#34;678\\\u0026#34;,\n           \\\u0026#34;price\\\u0026#34;: 100,\n           \\\u0026#34;paymentProvider\\\u0026#34;: \\\u0026#34;XSOLLA\\\u0026#34;,\n           \\\u0026#34;vat\\\u0026#34;: 0,\n           \\\u0026#34;salesTax\\\u0026#34;: 0,\n           \\\u0026#34;paymentProviderFee\\\u0026#34;: 0,\n           \\\u0026#34;paymentMethodFee\\\u0026#34;: 0,\n           \\\u0026#34;currency\\\u0026#34;: {\n                   \\\u0026#34;currencyCode\\\u0026#34;: \\\u0026#34;USD\\\u0026#34;,\n                   \\\u0026#34;currencySymbol\\\u0026#34;: \\\u0026#34;$\\\u0026#34;,\n                   \\\u0026#34;currencyType\\\u0026#34;: \\\u0026#34;REAL\\\u0026#34;,\n                   \\\u0026#34;namespace\\\u0026#34;: \\\u0026#34;accelbyte\\\u0026#34;,\n                   \\\u0026#34;decimals\\\u0026#34;: 2\n               },\n           \\\u0026#34;status\\\u0026#34;: \\\u0026#34;CHARGED\\\u0026#34;,\n           \\\u0026#34;createdTime\\\u0026#34;: \\\u0026#34;2018-07-28T00:39:16.274Z\\\u0026#34;,\n           \\\u0026#34;chargedTime\\\u0026#34;: \\\u0026#34;2018-07-28T00:39:16.274Z\\\u0026#34;\n       }\u0026#34;,\r\n       \u0026#34;sign\u0026#34;:\u0026#34;e31fb92516cc9faaf50ad70343e1293acec6f3d5\u0026#34;\r\n}\u0026lt;/pre\u0026gt;\u0026lt;/code\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Payment notification payload parameter list:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Parameter\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Required\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Notification type: \u0026#39;payment\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;paymentOrderNo\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment system generated order number\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;extOrderNo\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;External order number that passed by invoker\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;namespace\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Namespace that related payment order resides in\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;targetNamespace\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;The game namespace\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;targetUserId\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;The user id in game namespace\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;sku\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Item identify, it will return if pass it when create payment\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;extUserId\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;External user id, can be character id, it will return if pass it when create payment\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;price\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;int\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Price of item\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;paymentProvider\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment provider, allowed values: xsolla/alipay/wxpay/wallet\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;vat\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;int\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment order VAT\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;salesTax\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;int\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment order sales tax\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;paymentProviderFee\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;int\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment provider fee\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;paymentMethodFee\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;int\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment method fee\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;currency\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Map\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment order currency info\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;status\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment order status\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;statusReason\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment order status reason\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;createdTime\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Datetime\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;The time of the order created\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;chargedTime\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Datetime\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;The time of the order charged\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;customParameters\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Map\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;custom parameters, will return if pass it when create payment\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;nonceStr\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Random string, max length is 32, can be timestamp or uuid\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;\u0026lt;/pre\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Currency info parameter list:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Parameter\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Required\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;currencyCode\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Currency Code\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;currencySymbol\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Currency Symbol\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;currencyType\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Currency type(REAL/VIRTUAL)\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;namespace\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Currency namespace\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;decimals\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;int\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Currency decimals\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;\u0026lt;/pre\u0026gt;\u0026lt;h4\u0026gt;Encryption Rule:\u0026lt;/h4\u0026gt;\u0026lt;p\u0026gt;Concat payload json string and private key and then do sha1Hex.\u0026lt;/p\u0026gt;\u0026lt;h4\u0026gt;Other detail info:\u0026lt;/h4\u0026gt; \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Token type\u0026lt;/i\u0026gt;: client token\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:PAYMENT\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission(user with this permission will create sandbox order)\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;It will be forbidden while the target user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;cross namespace allowed\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: created payment order info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "createPaymentOrderByDedicated",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExternalPaymentOrderCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderCreateResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33121\u003c/td\u003e\u003ctd\u003eRecurring payment failed with code: [{errorCode}] and message: [{errorMessage}] by provider: [{provider}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33122\u003c/td\u003e\u003ctd\u003eSubscription not match when create payment order\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20016\u003c/td\u003e\u003ctd\u003eaction is banned\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e36141\u003c/td\u003e\u003ctd\u003eCurrency [{currencyCode}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33141\u003c/td\u003e\u003ctd\u003ePayment Order [{paymentOrderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33145\u003c/td\u003e\u003ctd\u003eRecurring token not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser [{userId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33173\u003c/td\u003e\u003ctd\u003eExtOrderNo [{extOrderNo}] already exists in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create payment order by dedicated server",
        "tags": [
          "Payment(Dedicated)"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/payment/orders/byExtTxId": {
      "get": {
        "description": "List external order No by external transaction id.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:PAYMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment orders\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "listExtOrderNoByExtTxId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "extTxId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List external order No by external transaction id",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/payment/orders/{paymentOrderNo}": {
      "get": {
        "description": "Get payment order by paymentOrderNo.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:PAYMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment order instance\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getPaymentOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33141\u003c/td\u003e\u003ctd\u003ePayment Order [{paymentOrderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get payment order",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[TEST FACILITY ONLY] Forbidden in live environment. \u0026lt;/b\u0026gt; Charge payment order without payment flow for unpaid payment order, usually for test usage to simulate real currency payment process.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:PAYMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment order instance\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "chargePaymentOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOrderChargeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33322\u003c/td\u003e\u003ctd\u003ePayment provider [{paymentProvider}] not supported\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33141\u003c/td\u003e\u003ctd\u003ePayment Order [{paymentOrderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33171\u003c/td\u003e\u003ctd\u003eInvalid payment order status [{status}] for payment order [{paymentOrderNo}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Charge payment order without payment flow",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/payment/orders/{paymentOrderNo}/refund": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;This API is used to refund payment order by paymentOrderNo from non justice service. e.g. dedicated server. \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;if the status field of response json is \u0026#34;REFUNDED\u0026#34;, usually wallet paid, it indicates payment order already refunded\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;if the status field of response json is \u0026#34;REFUNDING\u0026#34;, usually real money paid, platform will send notification to registered notify url once refund successfully\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Path Parameter:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Parameter\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Required\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;namespace\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Namespace that payment order resides in\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;paymentOrderNo\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment order number\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;\u0026lt;/pre\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Request Body Parameters:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Parameter\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Required\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;description\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Refund description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;\u0026lt;/pre\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Request Body Example:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;code style=\u0026#39;overflow: auto\u0026#39;\u0026gt;{\r\n           \u0026#34;description\u0026#34;: \u0026#34;Repeated item.\u0026#34;\r\n}\u0026lt;/pre\u0026gt;\u0026lt;/code\u0026gt;\u0026lt;h4\u0026gt;Refund Notification:\u0026lt;/h4\u0026gt;\u0026lt;p\u0026gt;It will send notification to configured web hook after refund successfully, http status code should return 200 or 204 once you resolve notification successfully, otherwise payment system will retry notification in interval\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Refund notification parameter:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Parameter\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Required\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;payload\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Refund notification payload in json string \u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;sign\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;sha1 hex signature for payload and private key\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;\u0026lt;/pre\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Refund notification Example:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;code style=\u0026#39;overflow: auto\u0026#39;\u0026gt;{\r\n       \u0026#34;payload\u0026#34;: \u0026#34;{\n           \\\u0026#34;type\\\u0026#34;: \\\u0026#34;payment\\\u0026#34;,\n           \\\u0026#34;nonceStr\\\u0026#34;: \\\u0026#34;34c1dcf3eb58455eb161465bbfc0b590\\\u0026#34;,\n           \\\u0026#34;paymentOrderNo\\\u0026#34;: \\\u0026#34;18081239088\\\u0026#34;,\n           \\\u0026#34;namespace\\\u0026#34;: \\\u0026#34;accelbyte\\\u0026#34;,\n           \\\u0026#34;targetNamespace\\\u0026#34;: \\\u0026#34;game1\\\u0026#34;,\n           \\\u0026#34;targetUserId\\\u0026#34;: \\\u0026#34;94451623768940d58416ca33ca767ec3\\\u0026#34;,\n           \\\u0026#34;extOrderNo\\\u0026#34;: \\\u0026#34;123456789\\\u0026#34;,\n           \\\u0026#34;sku\\\u0026#34;: \\\u0026#34;sku\\\u0026#34;,\n           \\\u0026#34;extUserId\\\u0026#34;: \\\u0026#34;678\\\u0026#34;,\n           \\\u0026#34;price\\\u0026#34;: 100,\n           \\\u0026#34;paymentProvider\\\u0026#34;: \\\u0026#34;XSOLLA\\\u0026#34;,\n           \\\u0026#34;vat\\\u0026#34;: 0,\n           \\\u0026#34;salesTax\\\u0026#34;: 0,\n           \\\u0026#34;paymentProviderFee\\\u0026#34;: 0,\n           \\\u0026#34;paymentMethodFee\\\u0026#34;: 0,\n           \\\u0026#34;currency\\\u0026#34;: {\n                   \\\u0026#34;currencyCode\\\u0026#34;: \\\u0026#34;USD\\\u0026#34;,\n                   \\\u0026#34;currencySymbol\\\u0026#34;: \\\u0026#34;$\\\u0026#34;,\n                   \\\u0026#34;currencyType\\\u0026#34;: \\\u0026#34;REAL\\\u0026#34;,\n                   \\\u0026#34;namespace\\\u0026#34;: \\\u0026#34;accelbyte\\\u0026#34;,\n                   \\\u0026#34;decimals\\\u0026#34;: 2\n               },\n           \\\u0026#34;status\\\u0026#34;: \\\u0026#34;REFUNDED\\\u0026#34;,\n           \\\u0026#34;createdTime\\\u0026#34;: \\\u0026#34;2018-07-28T00:39:16.274Z\\\u0026#34;,\n           \\\u0026#34;chargedTime\\\u0026#34;: \\\u0026#34;2018-07-28T00:39:16.274Z\\\u0026#34;,\n           \\\u0026#34;refundedTime\\\u0026#34;: \\\u0026#34;2018-07-28T00:39:16.274Z\\\u0026#34;\n       }\u0026#34;,\r\n       \u0026#34;sign\u0026#34;:\u0026#34;e31fb92516cc9faaf50ad70343e1293acec6f3d5\u0026#34;\r\n}\u0026lt;/pre\u0026gt;\u0026lt;/code\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Refund notification payload parameter list:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Parameter\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Required\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Notification type: \u0026#39;payment\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;paymentOrderNo\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment system generated order number\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;extOrderNo\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;External order number that passed by invoker\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;namespace\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Namespace that related payment order resides in\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;targetNamespace\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;The game namespace\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;targetUserId\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;The user id in game namespace\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;sku\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Item identify, it will return if pass it when create payment\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;extUserId\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;External user id, can be character id, it will return if pass it when create payment\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;price\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;int\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Price of item\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;paymentProvider\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment provider: xsolla/alipay/wxpay/wallet\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;vat\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;int\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment order VAT\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;salesTax\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;int\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment order sales tax\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;paymentProviderFee\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;int\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment provider fee\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;paymentMethodFee\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;int\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment method fee\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;currency\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Map\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment order currency info\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;status\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment order status\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;statusReason\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Payment order refund status reason\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;createdTime\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Datetime\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;The time of the order created\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;chargedTime\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Datetime\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;The time of the order charged\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;refundedTime\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Datetime\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;The time of the order refunded\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;customParameters\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Map\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;custom parameters, will return if pass it when create payment\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;nonceStr\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Random string, max length is 32, \u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;\u0026lt;/pre\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Currency info parameter list:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Parameter\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Required\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;currencyCode\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Currency Code\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;currencySymbol\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Currency Symbol\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;currencyType\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Currency type(REAL/VIRTUAL)\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;namespace\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Currency namespace\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;decimals\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;int\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Currency decimals\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;\u0026lt;/pre\u0026gt;\u0026lt;h4\u0026gt;Encryption Rule:\u0026lt;/h4\u0026gt;\u0026lt;p\u0026gt;Concat payload json string and private key and then do sha1Hex.\u0026lt;/p\u0026gt;\u0026lt;h4\u0026gt;Other detail info:\u0026lt;/h4\u0026gt; \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Token type\u0026lt;/i\u0026gt;: client token\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:PAYMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;cross namespace allowed\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "refundPaymentOrderByDedicated",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOrderRefund"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderRefundResult"
            }
          },
          "204": {
            "description": "Refund successfully"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33141\u003c/td\u003e\u003ctd\u003ePayment Order [{paymentOrderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33172\u003c/td\u003e\u003ctd\u003ePayment order [{paymentOrderNo}] is not refundable\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Refund payment order by dedicated server",
        "tags": [
          "Payment(Dedicated)"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/payment/orders/{paymentOrderNo}/simulate-notification": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[TEST FACILITY ONLY] Forbidden in live environment. \u0026lt;/b\u0026gt; Simulate payment notification on sandbox payment order, usually for test usage to simulate real currency payment notification.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:PAYMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: notification process result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "simulatePaymentOrderNotification",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOrderNotifySimulation"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NotificationProcessResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33322\u003c/td\u003e\u003ctd\u003ePayment provider [{paymentProvider}] not supported\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33141\u003c/td\u003e\u003ctd\u003ePayment Order [{paymentOrderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Simulate payment notification",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/payment/orders/{paymentOrderNo}/status": {
      "get": {
        "description": "Get payment order charge status.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:PAYMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment order charge status\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getPaymentOrderChargeStatus",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderChargeStatus"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33141\u003c/td\u003e\u003ctd\u003ePayment Order [{paymentOrderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get payment order charge status",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/platforms/{platform}/wallet/config": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get platform wallet config list.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: wallet info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getPlatformWalletConfig",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "Epic",
              "GooglePlay",
              "IOS",
              "Nintendo",
              "Oculus",
              "Other",
              "Playstation",
              "Steam",
              "Xbox"
            ],
            "in": "path",
            "name": "platform",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlatformWalletConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get platform wallet config list",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update platform wallet config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: platform wallet config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updatePlatformWalletConfig",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "Epic",
              "GooglePlay",
              "IOS",
              "Nintendo",
              "Oculus",
              "Other",
              "Playstation",
              "Steam",
              "Xbox"
            ],
            "in": "path",
            "name": "platform",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlatformWalletConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlatformWalletConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update platform wallet config",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/platforms/{platform}/wallet/config/reset": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Reset platform wallet config to default config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: platform wallet config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "resetPlatformWalletConfig",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "Epic",
              "GooglePlay",
              "IOS",
              "Nintendo",
              "Oculus",
              "Other",
              "Playstation",
              "Steam",
              "Xbox"
            ],
            "in": "path",
            "name": "platform",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlatformWalletConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Reset platform wallet config",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/revocation/config": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete revocation config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:REVOCATION, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteRevocationConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete revocation config",
        "tags": [
          "Revocation"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:REVOCATION"
        }
      },
      "get": {
        "description": "Get revocation configuration.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:REVOCATION, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Revocation config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getRevocationConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RevocationConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33243\u003c/td\u003e\u003ctd\u003ePayment callback config for [{namespace}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get revocation configuration",
        "tags": [
          "Revocation"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:REVOCATION"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update revocation configuration.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:REVOCATION, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Revocation config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateRevocationConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RevocationConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RevocationConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update revocation configuration",
        "tags": [
          "Revocation"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:REVOCATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/revocation/history": {
      "get": {
        "description": "Query revocation histories in a namespace.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:REVOCATION, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: query revocation history\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryRevocationHistories",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZ",
            "in": "query",
            "name": "endTime",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "enum": [
              "DLC",
              "IAP",
              "ORDER",
              "OTHER"
            ],
            "in": "query",
            "name": "source",
            "required": false,
            "type": "string"
          },
          {
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZ",
            "in": "query",
            "name": "startTime",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "FAIL",
              "SUCCESS"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "transactionId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RevocationHistoryPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Query revocation histories",
        "tags": [
          "Revocation"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:REVOCATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/revocation/plugins/revocation": {
      "delete": {
        "description": "Delete service plugin config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:PLUGIN:REVOCATION, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteRevocationPluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete revocation plugin config",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:PLUGIN:REVOCATION"
        }
      },
      "get": {
        "description": "Get revocation plugin config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:PLUGIN:REVOCATION\u0026lt;/b\u0026gt;, action=2 \u0026lt;b\u0026gt;(READ)\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getRevocationPluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RevocationPluginConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get revocation plugin config",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PLUGIN:REVOCATION"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update revocation plugin config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:PLUGIN:REVOCATION, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated service plugin config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateRevocationPluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RevocationPluginConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RevocationPluginConfigInfo"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update revocation plugin config",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:PLUGIN:REVOCATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/revocation/plugins/revocation/revocation/customConfig/cert": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Upload revocation plugin custom config tls cert.Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:PLUGIN:REVOCATION, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated service plugin config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "uploadRevocationPluginConfigCert",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RevocationPluginConfigInfo"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Upload revocation plugin custom config tls cert",
        "tags": [
          "ServicePluginConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:PLUGIN:REVOCATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/rewards": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to create a reward.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:REWARD\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: created reward data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "createReward",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RewardCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34023\u003c/td\u003e\u003ctd\u003eReward Item [{itemId}] with item type [{itemType}] is not supported for duration or endDate\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34042\u003c/td\u003e\u003ctd\u003eReward item [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34071\u003c/td\u003e\u003ctd\u003eReward with code [{rewardCode}] already exists in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34072\u003c/td\u003e\u003ctd\u003eDuplicate reward condition [{rewardConditionName}] found in reward [{rewardCode}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34074\u003c/td\u003e\u003ctd\u003eReward Item [{itemId}] duration and end date can’t be set at the same time\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create a reward",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/rewards/byCriteria": {
      "get": {
        "description": "This API is used to query rewards by criteria.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:REWARD\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of rewards\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryRewards",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "eventTopic",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": [
              "namespace:asc",
              "rewardCode:asc"
            ],
            "description": "default is namespace:asc,rewardCode:asc, allow values: [namespace, namespace:asc, namespace:desc, rewardCode, rewardCode:asc, rewardCode:desc, createdAt:asc, createdAt:desc],and support sort group, eg: sortBy=namespace:asc,rewardCode:asc",
            "in": "query",
            "items": {
              "enum": [
                "namespace",
                "namespace:asc",
                "namespace:desc",
                "rewardCode",
                "rewardCode:asc",
                "rewardCode:desc"
              ],
              "type": "string"
            },
            "name": "sortBy",
            "required": false,
            "type": "array",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardPagingSlicedResult"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query rewards by criteria",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/rewards/export": {
      "get": {
        "description": "Export reward configurations for a given namespace into file. At current, only JSON file is supported.\u0026lt;p\u0026gt;Other detail info:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;*Required permission*: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:REWARD\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "exportRewards",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful export of reward configs",
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Export all reward configurations",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/rewards/import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Import reward configurations for a given namespace from file. At current, only JSON file is supported.\u0026lt;p\u0026gt;Other detail info:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;*Required permission*: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:REWARD\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "importRewards",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "replaceExisting",
            "in": "query",
            "name": "replaceExisting",
            "required": true,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful import of reward configs"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34021\u003c/td\u003e\u003ctd\u003eReward data for namespace [{namespace}] is invalid\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34023\u003c/td\u003e\u003ctd\u003eReward Item [{itemId}] with item type [{itemType}] is not supported for duration or endDate\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34074\u003c/td\u003e\u003ctd\u003eReward Item [{itemId}] duration and end date can’t be set at the same time\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Import reward configurations",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/rewards/{rewardId}": {
      "delete": {
        "description": "This API is used to delete a reward by reward Id. \u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:REWARD\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the deleted reward data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteReward",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "rewardId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34041\u003c/td\u003e\u003ctd\u003eReward [{rewardId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a reward",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      },
      "get": {
        "description": "This API is used to get reward by reward Id.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:REWARD\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: reward instance\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getReward",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "rewardId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34041\u003c/td\u003e\u003ctd\u003eReward [{rewardId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a reward",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to update a reward.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:REWARD\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: reward instance\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateReward",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "rewardId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RewardUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34023\u003c/td\u003e\u003ctd\u003eReward Item [{itemId}] with item type [{itemType}] is not supported for duration or endDate\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34041\u003c/td\u003e\u003ctd\u003eReward [{rewardId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34042\u003c/td\u003e\u003ctd\u003eReward item [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34072\u003c/td\u003e\u003ctd\u003eDuplicate reward condition [{rewardConditionName}] found in reward [{rewardCode}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34074\u003c/td\u003e\u003ctd\u003eReward Item [{itemId}] duration and end date can’t be set at the same time\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update a reward",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/rewards/{rewardId}/match": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[TEST FACILITY ONLY] Forbidden in live environment. \u0026lt;/b\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:REWARD\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: match result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "checkEventCondition",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "rewardId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConditionMatchResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34041\u003c/td\u003e\u003ctd\u003eReward [{rewardId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Check if event payload match reward condition",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/rewards/{rewardId}/record": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[TEST FACILITY ONLY] Forbidden in live environment. \u0026lt;/b\u0026gt; This API is used to delete a reward condition record by reward Id and condition Name (optional). \u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:REWARD\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: 204 No Content \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteRewardConditionRecord",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "rewardId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeleteRewardConditionRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete reward success"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a reward condition record",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/sections": {
      "get": {
        "description": "This API is used to query sections.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: paginated sections\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "querySections",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "section active range time end, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "end",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "section active range time start , using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "viewId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SectionPagingSlicedResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List sections",
        "tags": [
          "Section"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to create a section.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: created a section\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h2\u0026gt;Restrictions for section extension and localization extension\u0026lt;/h2\u0026gt;\n1. Cannot use \u0026lt;b\u0026gt;\u0026#34;.\u0026#34;\u0026lt;/b\u0026gt; as the key name\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;data.2\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;\n2. Cannot use \u0026lt;b\u0026gt;\u0026#34;$\u0026#34;\u0026lt;/b\u0026gt; as the prefix in key names\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;$data\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;",
        "operationId": "createSection",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SectionCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullSectionInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20027\u003c/td\u003e\u003ctd\u003eInvalid time range\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30021\u003c/td\u003e\u003ctd\u003eDefault language [{language}] required\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30023\u003c/td\u003e\u003ctd\u003eCatalog plugin grpc server address required\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30641\u003c/td\u003e\u003ctd\u003eView [{viewId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create a section",
        "tags": [
          "Section"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/sections/purge/expired": {
      "delete": {
        "description": "This API is used to purge expired section.\u0026lt;/b\u0026gt;\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "purgeExpiredSection",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "purge expired section successfully"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "purge expired section",
        "tags": [
          "Section"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/sections/{sectionId}": {
      "delete": {
        "description": "This API is used to delete s section.\u0026lt;/b\u0026gt;\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteSection",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sectionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete section successfully"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30741\u003c/td\u003e\u003ctd\u003eSection [{sectionId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a section",
        "tags": [
          "Section"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      },
      "get": {
        "description": "This API is used to get a section.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: section data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getSection",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sectionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullSectionInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30741\u003c/td\u003e\u003ctd\u003eSection [{sectionId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a section",
        "tags": [
          "Section"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to update s section.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated section data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h2\u0026gt;Restrictions for section extension and localization extension\u0026lt;/h2\u0026gt;\n1. Cannot use \u0026lt;b\u0026gt;\u0026#34;.\u0026#34;\u0026lt;/b\u0026gt; as the key name\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;data.2\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;\n2. Cannot use \u0026lt;b\u0026gt;\u0026#34;$\u0026#34;\u0026lt;/b\u0026gt; as the prefix in key names\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;$data\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;",
        "operationId": "updateSection",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sectionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SectionUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullSectionInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20027\u003c/td\u003e\u003ctd\u003eInvalid time range\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30021\u003c/td\u003e\u003ctd\u003eDefault language [{language}] required\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30023\u003c/td\u003e\u003ctd\u003eCatalog plugin grpc server address required\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30641\u003c/td\u003e\u003ctd\u003eView [{viewId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30741\u003c/td\u003e\u003ctd\u003eSection [{sectionId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update s section",
        "tags": [
          "Section"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores": {
      "get": {
        "description": "This API is used to list stores in a namespace.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of stores\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "listStores",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/StoreInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List stores",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to create a non published store in a namespace.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: created store data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "createStore",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StoreCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30174\u003c/td\u003e\u003ctd\u003eDraft store already exists in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/import": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "deprecated": true,
        "description": "This API is used to import a store.\u0026lt;p\u0026gt;This api has been deprecated, pls use /v2/admin/namespaces/{namespace}/stores/import to import store.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "importStore",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          },
          {
            "description": "default we will use published store id,and will create published store if it dose not exist",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30121\u003c/td\u003e\u003ctd\u003eStore data is invalid\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30122\u003c/td\u003e\u003ctd\u003eStore's meta mismatch\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e36141\u003c/td\u003e\u003ctd\u003eCurrency [{currencyCode}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30122\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30375\u003c/td\u003e\u003ctd\u003eItem id [{itemId}] of sku [{sku}] is duplicate with un-published deleted item in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37041\u003c/td\u003e\u003ctd\u003eTicket booth [{boothName}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Import a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/published": {
      "delete": {
        "description": "This API is used to delete published store including category and items before release to public.\u0026lt;p\u0026gt;\u0026lt;b\u0026gt;Warning: Please do not use this API once published to public user.\u0026lt;/b\u0026gt;\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deletePublishedStore",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete published store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      },
      "get": {
        "description": "This API is used to get a published store basic info, exclude category and item information.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: store data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getPublishedStore",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get published store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/published/backup": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to get a store\u0026#39;s backup. \u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: store backup info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getPublishedStoreBackup",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreBackupInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30143\u003c/td\u003e\u003ctd\u003ePublished store [{storeId}] backup does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a published store's backup",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/published/rollback": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to rollback a published store. \u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated store info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "rollbackPublishedStore",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30143\u003c/td\u003e\u003ctd\u003ePublished store [{storeId}] backup does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Rollback a published store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/{storeId}": {
      "delete": {
        "description": "This API is used to delete a store. Only non published store can be deleted.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: store\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteStore",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      },
      "get": {
        "description": "This API is used to get a store.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: store data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getStore",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to Update a store basic info.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated store data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateStore",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StoreUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30171\u003c/td\u003e\u003ctd\u003eStore [{store}] can't change default language to [{language}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30172\u003c/td\u003e\u003ctd\u003eStore [{store}] can't change default region to [{region}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/byCriteria": {
      "get": {
        "description": "This API is used to query changes .\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the pagination of changes\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryChanges",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "CREATE",
              "DELETE",
              "UPDATE"
            ],
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemSku",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "BUNDLE",
              "CODE",
              "COINS",
              "EXTENSION",
              "INGAMEITEM",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SEASON",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "itemType",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "selected",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": [
              "updatedAt:desc"
            ],
            "description": "default is updatedAt:desc, allow values: [createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc],and support sort group, eg: sortBy=title:asc,createdAt:desc. Make sure to always use more than one sort if the first sort is not an unique valuefor example, if you wish to sort by title, make sure to include other sort such as sku or createdAt after the first sort, eg: title:asc,updatedAt:desc",
            "in": "query",
            "items": {
              "enum": [
                "createdAt",
                "createdAt:asc",
                "createdAt:desc",
                "updatedAt",
                "updatedAt:asc",
                "updatedAt:desc"
              ],
              "type": "string"
            },
            "name": "sortBy",
            "required": false,
            "type": "array",
            "uniqueItems": true
          },
          {
            "default": "UNPUBLISHED",
            "description": "default is UNPUBLISHED",
            "enum": [
              "PUBLISHED",
              "UNPUBLISHED"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CATEGORY",
              "ITEM",
              "SECTION",
              "STORE",
              "VIEW"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "updated at end , using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "updatedAtEnd",
            "required": false,
            "type": "string"
          },
          {
            "description": "updated at start , using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "updatedAtStart",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CatalogChangePagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query catalog changes",
        "tags": [
          "CatalogChanges"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/publishAll": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to publish all unpublished changes.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: no content\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publishAll",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30122\u003c/td\u003e\u003ctd\u003eStore's meta mismatch\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Publish all unpublished changes",
        "tags": [
          "CatalogChanges"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/publishSelected": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to publish selected unpublished changes.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: no content\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publishSelected",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30122\u003c/td\u003e\u003ctd\u003eStore's meta mismatch\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30375\u003c/td\u003e\u003ctd\u003eItem id [{itemId}] of sku [{sku}] is duplicate with un-published deleted item in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Publish selected unpublished changes",
        "tags": [
          "CatalogChanges"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/selectAll": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Select all changes.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "selectAllRecords",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Select all changes",
        "tags": [
          "CatalogChanges"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/statistics": {
      "get": {
        "description": "This API is used to query catalog changes statistics .\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: catalog changes statistics changes\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getStatistic",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "CREATE",
              "DELETE",
              "UPDATE"
            ],
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemSku",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "BUNDLE",
              "CODE",
              "COINS",
              "EXTENSION",
              "INGAMEITEM",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SEASON",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "itemType",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CATEGORY",
              "ITEM",
              "SECTION",
              "STORE",
              "VIEW"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "updated at end , using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "updatedAtEnd",
            "required": false,
            "type": "string"
          },
          {
            "description": "updated at start , using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "updatedAtStart",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CatalogChangeStatistics"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get catalog changes statistics",
        "tags": [
          "CatalogChanges"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/unselectAll": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Unselect all change.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "unselectAllRecords",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Unselect all changes",
        "tags": [
          "CatalogChanges"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/{changeId}/select": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Select a change, it will be included when partial publish.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "selectRecord",
        "parameters": [
          {
            "in": "path",
            "name": "changeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30041\u003c/td\u003e\u003ctd\u003eChangelog [{changelogId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Select a change",
        "tags": [
          "CatalogChanges"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/{changeId}/unselect": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Unselect a change, it will not be included when partial publish.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "unselectRecord",
        "parameters": [
          {
            "in": "path",
            "name": "changeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30041\u003c/td\u003e\u003ctd\u003eChangelog [{changelogId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30071\u003c/td\u003e\u003ctd\u003eCan't unselect item [{itemId}] when the item which is bound to is already selected in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30072\u003c/td\u003e\u003ctd\u003eCan't unselect category [{categoryPath}] when item with this category is already selected in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30073\u003c/td\u003e\u003ctd\u003eCan't unselect store change\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30074\u003c/td\u003e\u003ctd\u003eCan't unselect subscription's content [{itemId}] when subscription is already selected in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Unselect a change",
        "tags": [
          "CatalogChanges"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/{storeId}/clone": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to clone a store. Usually clone a draft store to published store because published store can\u0026#39;t directly edit content.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: clone store info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "cloneStore",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store",
            "in": "query",
            "name": "targetStoreId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30122\u003c/td\u003e\u003ctd\u003eStore's meta mismatch\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Clone a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/stores/{storeId}/export": {
      "get": {
        "deprecated": true,
        "description": "This API is used to export a store.\u0026lt;p\u0026gt;This api has been deprecated, pls use /v2/admin/namespaces/{namespace}/stores/export to export store.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "exportStore",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/zip"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Export a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/subscriptions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Query subscriptions.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: paginated subscriptions\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "querySubscriptions",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "CHARGED",
              "CHARGE_FAILED",
              "NEVER",
              "RECURRING_CHARGING",
              "SETUP"
            ],
            "in": "query",
            "name": "chargeStatus",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "sku",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "ACTIVE",
              "CANCELLED",
              "EXPIRED",
              "INIT"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "PLATFORM",
              "USER"
            ],
            "in": "query",
            "name": "subscribedBy",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query subscriptions",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/subscriptions/{subscriptionId}/recurring": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[TEST FACILITY ONLY] Forbidden in live environment. \u0026lt;/b\u0026gt; Recurring charge subscription, it will trigger recurring charge if the USER subscription status is ACTIVE, nextBillingDate is before now and no fail recurring charge within X(default 12) hours.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: recurring charge result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "recurringChargeSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RecurringChargeResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Recurring charge subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/tickets/{boothName}": {
      "get": {
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; Get ticket(code/key) dynamic based on booth name.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:TICKET\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: ticket dynamic\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getTicketDynamic",
        "parameters": [
          {
            "in": "path",
            "name": "boothName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TicketDynamicInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37041\u003c/td\u003e\u003ctd\u003eTicket booth [{boothName}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:TICKET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get ticket dynamic",
        "tags": [
          "Ticket"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:TICKET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/tickets/{boothName}/decrement": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; Decrease ticket(code/key) sale if requested orderNo is already increased.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:TICKET\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "decreaseTicketSale",
        "parameters": [
          {
            "in": "path",
            "name": "boothName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TicketSaleDecrementRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Return item successfully"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37041\u003c/td\u003e\u003ctd\u003eTicket booth [{boothName}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:TICKET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Decrease ticket sale",
        "tags": [
          "Ticket"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:TICKET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/tickets/{boothName}/id": {
      "get": {
        "description": "Get ticket(code/key) booth ID.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:TICKET\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: ticket booth id\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getTicketBoothID",
        "parameters": [
          {
            "in": "path",
            "name": "boothName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TicketBoothID"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37041\u003c/td\u003e\u003ctd\u003eTicket booth [{boothName}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:TICKET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get ticket booth ID",
        "tags": [
          "Ticket"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:TICKET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/tickets/{boothName}/increment": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; increase ticket(code/key) sale.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:TICKET\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Ticket sale increment result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "increaseTicketSale",
        "parameters": [
          {
            "in": "path",
            "name": "boothName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TicketSaleIncrementRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TicketSaleIncrementResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37041\u003c/td\u003e\u003ctd\u003eTicket booth [{boothName}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:TICKET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Increase ticket sale",
        "tags": [
          "Ticket"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:TICKET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/trade/commit": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to create a chained operations\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:TRADE, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: chain action history\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h2\u0026gt;Restrictions for metadata\u0026lt;/h2\u0026gt;\n1. Cannot use \u0026lt;b\u0026gt;\u0026#34;.\u0026#34;\u0026lt;/b\u0026gt; as the key name\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;data.2\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;\n2. Cannot use \u0026lt;b\u0026gt;\u0026#34;$\u0026#34;\u0026lt;/b\u0026gt; as the prefix in key names\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;$data\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;",
        "operationId": "commit",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TradeChainedActionCommitRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TradeChainActionHistoryInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "commit a chain of actions or operations",
        "tags": [
          "TradeAction"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:TRADE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/trade/history/byCriteria": {
      "get": {
        "description": "This API is used to fetch trade history based on the provided criteria\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:TRADE, action=2 (REDA)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: trade history list based on criteria\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getTradeHistoryByCriteria",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Status of the trade (SUCCESS/FAIL)",
            "enum": [
              "FAILED",
              "INIT",
              "SUCCESS"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of the trade",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "User ID for which the trade history is queried",
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Retrieve trade history by criteria",
        "tags": [
          "TradeAction"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:TRADE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/trade/{transactionId}": {
      "get": {
        "description": "This API is used to fetch a specific trade history using transaction ID\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:TRADE, action=2 (REDA)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: trade history based on transaction ID\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getTradeHistoryByTransactionId",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Transaction ID to query the trade history",
            "in": "path",
            "name": "transactionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Retrieve trade history by transaction ID",
        "tags": [
          "TradeAction"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:TRADE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/achievement/steam": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to unlock steam achievement.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:USER:{userId}:ACHIEVEMENT, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "unlockSteamUserAchievement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SteamAchievementUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39244\u003c/td\u003e\u003ctd\u003eSteam config does not exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39245\u003c/td\u003e\u003ctd\u003eSteam app id does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Unlock steam achievement.",
        "tags": [
          "Achievement(Platform)"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ACHIEVEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/achievement/xbl": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to get xbox live user achievements(Only for test).\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:USER:{userId}:ACHIEVEMENT, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getXblUserAchievements",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "xboxUserId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/XblUserAchievements"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get xbox live user achievements.",
        "tags": [
          "Achievement(Platform)"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ACHIEVEMENT"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to update xbox live achievements.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:USER:{userId}:ACHIEVEMENT, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateXblUserAchievement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XblAchievementUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update xbox live achievements.",
        "tags": [
          "Achievement(Platform)"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ACHIEVEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/anonymization/campaign": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize campaign. At current it will only anonymize redeem history.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "anonymizeCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Anonymize campaign",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/anonymization/entitlements": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize entitlement. At current it will only anonymize entitlement, entitlement history.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "anonymizeEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize entitlement",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/anonymization/fulfillment": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize fulfillment. At current it will only anonymize fulfillment history.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "anonymizeFulfillment",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize fulfillment",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/anonymization/integrations": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize integrations. At current it will only anonymize iap histories.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "anonymizeIntegration",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize integrations",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/anonymization/orders": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize order. At current it will only anonymize order, order history.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "anonymizeOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize order",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/anonymization/payment": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize payment. At current it will only anonymize payment order, payment order history.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "anonymizePayment",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize payment",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/anonymization/revocation": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize revocation. At current it will only anonymize revocation history.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "anonymizeRevocation",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "anonymize revocation",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/anonymization/subscriptions": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize subscription. At current it will anonymize subscription, billing history and subscription activity.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "anonymizeSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize subscription",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/anonymization/wallets": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize wallet. At current it will only anonymize wallet, wallet transaction.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "anonymizeWallet",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize wallet",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/dlc": {
      "get": {
        "description": "Get user dlc by platform.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: user dlc\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserDLCByPlatform",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "EPICGAMES",
              "OCULUS",
              "PSN",
              "STEAM",
              "XBOX"
            ],
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserDLC"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user dlc by platform",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/dlc/records": {
      "get": {
        "description": "Get user dlc records.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: user dlc\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserDLC",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "EPICGAMES",
              "OCULUS",
              "PSN",
              "STEAM",
              "XBOX"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/UserDLCRecord"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user dlc records",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements": {
      "get": {
        "description": "Query entitlements for a specific user.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: entitlement list\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryUserEntitlements",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "entitlementName",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "features",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemId",
            "required": false,
            "type": "array"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query user entitlements",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Grant user entitlement.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: granted entitlement\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "grantUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/EntitlementGrant"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/StackableEntitlementInfo"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Grant user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/byAppId": {
      "get": {
        "description": "Get user app entitlement by appId.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserAppEntitlementByAppId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppEntitlementInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31142\u003c/td\u003e\u003ctd\u003eEntitlement with appId [{appId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user app entitlement by appId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/byAppType": {
      "get": {
        "description": "Query app entitlements by appType.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: app entitlement pagination\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryUserEntitlementsByAppType",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppEntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT []"
            ],
            "authorization": []
          }
        ],
        "summary": "Query app entitlements by appType",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/byItemId": {
      "get": {
        "description": "Get user entitlement by itemId.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserEntitlementByItemId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31144\u003c/td\u003e\u003ctd\u003eEntitlement with itemId [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement by itemId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/byItemIds": {
      "get": {
        "description": "Get user entitlements by itemIds.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserActiveEntitlementsByItemIds",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "ids",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/EntitlementInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlements by itemIds",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/bySku": {
      "get": {
        "description": "Get user entitlement by sku.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserEntitlementBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31143\u003c/td\u003e\u003ctd\u003eEntitlement with sku [{sku}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement by sku",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/any": {
      "get": {
        "description": "Exists any user active entitlement of specified itemIds, skus and appIds\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "existsAnyUserActiveEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "appIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "skus",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Exists any user active entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/anyOf": {
      "get": {
        "description": "Exists any user active entitlement of specified items.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "existsAnyUserActiveEntitlementByItemIds",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemIds",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Exists any user active entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/byAppId": {
      "get": {
        "description": "Get user app entitlement ownership by appId.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserAppEntitlementOwnershipByAppId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user app entitlement ownership by appId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/byItemId": {
      "get": {
        "description": "Get user entitlement ownership by itemId.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserEntitlementOwnershipByItemId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimedOwnership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement ownership by itemId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/byItemIds": {
      "get": {
        "description": "Get user entitlement ownership by itemIds.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserEntitlementOwnershipByItemIds",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "ids",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/EntitlementOwnership"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement ownership by itemIds",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/bySku": {
      "get": {
        "description": "Get user entitlement ownership by sku.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserEntitlementOwnershipBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimedOwnership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement ownership by sku",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/revoke": {
      "put": {
        "description": "Revoke all entitlements of a user (This API is for testing purpose only)\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: revoked entitlements count\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "revokeAllEntitlements",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BulkOperationResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Revoke all entitlements of a user (This API is for testing purpose only)",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/revoke/byIds": {
      "put": {
        "description": "Revoke user\u0026#39;s entitlements by ids.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: revoke entitlements count\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "revokeUserEntitlements",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "separate multiple value by commas parameter.",
            "in": "query",
            "name": "entitlementIds",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BulkOperationResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Revoke user's entitlements by ids",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}": {
      "get": {
        "description": "Get user entitlement.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: entitlement\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31141\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update user entitlement. If update CONSUMABLE entitlement useCount to 0, the status will be CONSUMED.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated entitlement\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitlementUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31141\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31171\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] already revoked\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/decrement": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Consume user entitlement. If the entitlement useCount is 0, the status will be CONSUMED.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: consumed entitlement\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "consumeUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitlementDecrement"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementDecrementResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31123\u003c/td\u003e\u003ctd\u003eUnable to acquire box item, box item [{itemId}] expired\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31141\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31171\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] already revoked\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31172\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] not active\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31173\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] is not consumable\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31174\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] already consumed\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31176\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] use count is insufficient\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31178\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] out of time range\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31180\u003c/td\u003e\u003ctd\u003eDuplicate request id: [{requestId}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Consume user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/disable": {
      "put": {
        "description": "Disable user entitlement if entitlement, only active entitlement can be disable, disabled entitlement can\u0026#39;t consume.\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;Like revoke, it will lose the entitlement ownership, except disabled entitlement can enable.\u0026lt;/b\u0026gt;\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: disable entitlement\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "disableUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31141\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31172\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] not active\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Disable user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/enable": {
      "put": {
        "description": "Enable user entitlement.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: enable entitlement\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "enableUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31141\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31171\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] already revoked\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31174\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] already consumed\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31177\u003c/td\u003e\u003ctd\u003ePermanent item already owned\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31179\u003c/td\u003e\u003ctd\u003eDuplicate entitlement exists\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Enable user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/history": {
      "get": {
        "description": "Get user entitlement histories.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: list of entitlement history\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserEntitlementHistories",
        "parameters": [
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/EntitlementHistoryInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement history",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/revoke": {
      "put": {
        "description": "Revoke user entitlement.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: revoke entitlement\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "revokeUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31141\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Revoke user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/revokeByUseCount": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Revoke specified use count of user entitlement.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: revoke entitlement\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "revokeUseCount",
        "parameters": [
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RevokeUseCountRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31141\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Revoke specified use count of user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/sell": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Sell user entitlement. If the entitlement is consumable, useCount is 0, the status will be CONSUMED. If the entitlement is durable, the status will be SOLD. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: entitlement\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "sellUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitlementSoldRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementSoldResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31141\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31171\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] already revoked\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31172\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] not active\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31174\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] already consumed\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31176\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] use count is insufficient\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31178\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] out of time range\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31180\u003c/td\u003e\u003ctd\u003eDuplicate request id: [{requestId}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31181\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] is not sellable\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31182\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] already sold\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Sell user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/fulfillment": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Fulfill item.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT\u0026#34;, action=1 (CREATED)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: fulfillment result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "fulfillItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FulfillmentRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38121\u003c/td\u003e\u003ctd\u003eDuplicate permanent item exists\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38122\u003c/td\u003e\u003ctd\u003eSubscription endDate required\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []"
            ],
            "authorization": []
          }
        ],
        "summary": "Fulfill item",
        "tags": [
          "Fulfillment"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/fulfillment/code": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Redeem campaign code.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT\u0026#34;, action=1 (CREATED)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: fulfillment result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "redeemCode",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FulfillCodeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38121\u003c/td\u003e\u003ctd\u003eDuplicate permanent item exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37142\u003c/td\u003e\u003ctd\u003eCode [{code}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37172\u003c/td\u003e\u003ctd\u003eCampaign [{campaignId}] is inactive in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37173\u003c/td\u003e\u003ctd\u003eCode [{code}] is inactive in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37174\u003c/td\u003e\u003ctd\u003eExceeded max redeem count per code [{maxCount}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37175\u003c/td\u003e\u003ctd\u003eExceeded max redeem count per code per user [{maxCount}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37177\u003c/td\u003e\u003ctd\u003eCode redemption not started\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37178\u003c/td\u003e\u003ctd\u003eCode redemption already ended\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31177\u003c/td\u003e\u003ctd\u003ePermanent item already owned\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []"
            ],
            "authorization": []
          }
        ],
        "summary": "Redeem campaign code",
        "tags": [
          "Fulfillment"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/fulfillment/rewards": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; Fulfill rewards.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT\u0026#34;, action=1 (CREATED)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: fulfillment result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "fulfillRewards",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RewardsRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "fulfill successfully"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38121\u003c/td\u003e\u003ctd\u003eDuplicate permanent item exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []"
            ],
            "authorization": []
          }
        ],
        "summary": "Fulfill rewards",
        "tags": [
          "Fulfillment"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/iap": {
      "get": {
        "description": "Query IAP orders.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: paginated iap orders\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryUserIAPOrders",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "endTime",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "productId",
            "required": false,
            "type": "string"
          },
          {
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "startTime",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "FAILED",
              "FULFILLED",
              "VERIFIED"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "APPLE",
              "EPICGAMES",
              "GOOGLE",
              "OCULUS",
              "PLAYSTATION",
              "STADIA",
              "STEAM",
              "TWITCH",
              "XBOX"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/IAPOrderPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query IAP orders",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/iap/all": {
      "get": {
        "description": "Query all user IAP orders.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: list of iap orders\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryAllUserIAPOrders",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/IAPOrderPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query all user IAP orders",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/iap/consume/history": {
      "get": {
        "description": "Query IAP consume history.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: paginated iap consume history\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryUserIAPConsumeHistory",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "endTime",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "startTime",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "FAIL",
              "PENDING",
              "SUCCESS"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "APPLE",
              "EPICGAMES",
              "GOOGLE",
              "OCULUS",
              "PLAYSTATION",
              "STADIA",
              "STEAM",
              "TWITCH",
              "XBOX"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/IAPConsumeHistoryPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query IAP consume history",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/iap/mock/receipt": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[TEST FACILITY ONLY] Forbidden in live environment. \u0026lt;/b\u0026gt; Mock fulfill iap item without validate receipt.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "mockFulfillIAPItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MockIAPReceipt"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Fulfill item successfully"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38121\u003c/td\u003e\u003ctd\u003eDuplicate permanent item exists\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38122\u003c/td\u003e\u003ctd\u003eSubscription endDate required\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Mock fulfill iap item.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/orders": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Query user orders.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: get order\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryUserOrders",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "enum": [
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "CHARGED",
              "CLOSED",
              "DELETED",
              "FULFILLED",
              "FULFILL_FAILED",
              "INIT",
              "REFUNDED",
              "REFUNDING",
              "REFUND_FAILED"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query user orders",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Admin Create an order. The result contains the checkout link and payment token. User with permission SANDBOX will create sandbox order that not real paid for xsolla/alipay and not validate price for wxpay.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;sandbox default value is \u0026lt;b\u0026gt;false\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;platform default value is \u0026lt;b\u0026gt;Other\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: created order\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h2\u0026gt;Restrictions for ext field\u0026lt;/h2\u0026gt;\n1. Cannot use \u0026lt;b\u0026gt;\u0026#34;.\u0026#34;\u0026lt;/b\u0026gt; as the key name\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;data.2\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;\n2. Cannot use \u0026lt;b\u0026gt;\u0026#34;$\u0026#34;\u0026lt;/b\u0026gt; as the prefix in key names\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;$data\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;",
        "operationId": "adminCreateUserOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AdminOrderCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32121\u003c/td\u003e\u003ctd\u003eOrder price mismatch\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32122\u003c/td\u003e\u003ctd\u003eItem type [{itemType}] does not support\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32123\u003c/td\u003e\u003ctd\u003eItem is not purchasable\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35124\u003c/td\u003e\u003ctd\u003eWallet [{currencyCode}] has insufficient balance\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32126\u003c/td\u003e\u003ctd\u003eSection ID is required for placing this order\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38121\u003c/td\u003e\u003ctd\u003eDuplicate permanent item exists\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32124\u003c/td\u003e\u003ctd\u003eInvalid currency namespace\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20016\u003c/td\u003e\u003ctd\u003eaction is banned\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e36141\u003c/td\u003e\u003ctd\u003eCurrency [{currencyCode}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e49147\u003c/td\u003e\u003ctd\u003ePublished season does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32175\u003c/td\u003e\u003ctd\u003eExceed item [{itemId}] max count [{maxCount}] per user\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32176\u003c/td\u003e\u003ctd\u003eExceed item [{itemId}] max count [{maxCount}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32178\u003c/td\u003e\u003ctd\u003eUser [{userId}] already owned all durable items in flexible bundle [{bundleId}], namespace: [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31177\u003c/td\u003e\u003ctd\u003ePermanent item already owned\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e49183\u003c/td\u003e\u003ctd\u003ePass item does not match published season pass\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e49184\u003c/td\u003e\u003ctd\u003eTier item does not match published season tier\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e49185\u003c/td\u003e\u003ctd\u003eSeason has not started\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e49186\u003c/td\u003e\u003ctd\u003ePass already owned\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e49187\u003c/td\u003e\u003ctd\u003eExceed max tier count\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin Create an order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/orders/countOfItem": {
      "get": {
        "description": "This API is used to get the count of purchased item which is the order target.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Item purchased count\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "countOfPurchasedItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PurchasedItemCount"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get the count of purchased item",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get an order.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: get order\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32141\u003c/td\u003e\u003ctd\u003eOrder [{orderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get an order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update order status.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated order\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateUserOrderStatus",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32141\u003c/td\u003e\u003ctd\u003eOrder [{orderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update order status",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/fulfill": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Fulfill an order if the order is charged but fulfill failed.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: fulfilled order\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "fulfillUserOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32141\u003c/td\u003e\u003ctd\u003eOrder [{orderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32172\u003c/td\u003e\u003ctd\u003eInvalid order status [{status}] for order [{orderNo}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Fulfill an order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/grant": {
      "get": {
        "description": "Get user order grant that fulfilled by this order.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: get order grant\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserOrderGrant",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderGrantInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user order grant",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/history": {
      "get": {
        "description": "Get user order history.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: get order history\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserOrderHistories",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/OrderHistoryInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user order histories",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/notifications": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; This API is used as a web hook for payment notification from justice payment service.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Process result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "processUserOrderNotification",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TradeNotification"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "process successfully"
          },
          "400": {
            "description": "process failed"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Web hook for payment notification",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/receipt.pdf": {
      "get": {
        "description": "Download user order receipt by orderNo.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: order receipt pdf\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "downloadUserOrderReceipt",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/pdf"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32141\u003c/td\u003e\u003ctd\u003eOrder [{orderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32173\u003c/td\u003e\u003ctd\u003eReceipt of order [{orderNo}] is not downloadable\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Download user order receipt",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/payment/orders": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; This API is used to create payment order from justice service. The result contains the payment station url.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;It will be forbidden while the user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: created order\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h2\u0026gt;Restrictions for custom parameters and meta data\u0026lt;/h2\u0026gt;\n1. Cannot use \u0026lt;b\u0026gt;\u0026#34;.\u0026#34;\u0026lt;/b\u0026gt; as the key name\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;data.2\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;\n2. Cannot use \u0026lt;b\u0026gt;\u0026#34;$\u0026#34;\u0026lt;/b\u0026gt; as the prefix in key names\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;$data\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;",
        "operationId": "createUserPaymentOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOrderCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33121\u003c/td\u003e\u003ctd\u003eRecurring payment failed with code: [{errorCode}] and message: [{errorMessage}] by provider: [{provider}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33122\u003c/td\u003e\u003ctd\u003eSubscription not match when create payment order\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20016\u003c/td\u003e\u003ctd\u003eaction is banned\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e36141\u003c/td\u003e\u003ctd\u003eCurrency [{currencyCode}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33141\u003c/td\u003e\u003ctd\u003ePayment Order [{paymentOrderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33145\u003c/td\u003e\u003ctd\u003eRecurring token not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser [{userId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create payment order",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/payment/orders/{paymentOrderNo}/refund": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; This API is used to refund order by paymentOrderNo from justice service.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "refundUserPaymentOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOrderRefund"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33141\u003c/td\u003e\u003ctd\u003ePayment Order [{paymentOrderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33172\u003c/td\u003e\u003ctd\u003ePayment order [{paymentOrderNo}] is not refundable\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Refund payment order",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/redemption": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; Redeem code. If the campaign which the code belongs to is INACTIVE, the code couldn\u0026#39;t be redeemed even if its status is ACTIVE.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:REDEMPTION\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Redeem result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "applyUserRedemption",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RedeemRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RedeemResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37142\u003c/td\u003e\u003ctd\u003eCode [{code}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37172\u003c/td\u003e\u003ctd\u003eCampaign [{campaignId}] is inactive in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37173\u003c/td\u003e\u003ctd\u003eCode [{code}] is inactive in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37174\u003c/td\u003e\u003ctd\u003eExceeded max redeem count per code [{maxCount}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37175\u003c/td\u003e\u003ctd\u003eExceeded max redeem count per code per user [{maxCount}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37177\u003c/td\u003e\u003ctd\u003eCode redemption not started\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37178\u003c/td\u003e\u003ctd\u003eCode redemption already ended\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:REDEMPTION [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Redeem code",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:REDEMPTION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/revocation": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Do revocation.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:USER:{userId}:REVOCATION, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: revocation results\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "doRevocation",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RevocationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RevocationResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Do revocation.",
        "tags": [
          "Revocation"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:REVOCATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/session/xbl": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to register/update a session on xbox.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=ADMIN:NAMESPACE:{namespace}:USER:{userId}:INTEGRATION, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "registerXblSessions",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XblUserSessionRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Register/Update a session",
        "tags": [
          "Session(Platform)"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:INTEGRATION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/subscriptions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Query user subscriptions.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: paginated subscription\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryUserSubscriptions",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "CHARGED",
              "CHARGE_FAILED",
              "NEVER",
              "RECURRING_CHARGING",
              "SETUP"
            ],
            "in": "query",
            "name": "chargeStatus",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "sku",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "ACTIVE",
              "CANCELLED",
              "EXPIRED",
              "INIT"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "PLATFORM",
              "USER"
            ],
            "in": "query",
            "name": "subscribedBy",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query user subscriptions",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/subscriptions/activities": {
      "get": {
        "description": "Get user subscription activity.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: paginated subscription activity\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserSubscriptionActivities",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "excludeSystem",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "subscriptionId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionActivityPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user subscription activity",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/subscriptions/platformSubscribe": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Free subscribe by platform, can used by other justice service to redeem/reward the subscription.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: result subscription\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "platformSubscribeSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlatformSubscribeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "201": {
            "description": "platform subscribe request processed"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40121\u003c/td\u003e\u003ctd\u003eItem type [{itemType}] does not support\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser [{userId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Free subscribe by platform",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/subscriptions/subscribable/byItemId": {
      "get": {
        "description": "Check user subscription subscribable by itemId, ACTIVE USER subscription can\u0026#39;t do subscribe again.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: subscribable info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "checkUserSubscriptionSubscribableByItemId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subscribable"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Check user subscription subscribable",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[TEST FACILITY ONLY] Forbidden in live environment. \u0026lt;/b\u0026gt; Delete user subscription.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteUserSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "delete user subscription successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete user subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get user subscription.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: subscription\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40141\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}/cancel": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Cancel a subscription, only ACTIVE subscription can be cancelled. \u0026lt;b\u0026gt;Ensure successfully cancel, recommend at least 1 day before current period ends, otherwise it may be charging or charged.\u0026lt;/b\u0026gt;\u0026lt;br\u0026gt;Set immediate true, the subscription will be terminated immediately, otherwise till the end of current billing cycle.\u0026lt;br\u0026gt;Set force true, will ignore the error if subscription is during recurring charging.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: cancelled subscription\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "cancelSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CancelRequest"
            }
          },
          {
            "default": false,
            "in": "query",
            "name": "force",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40141\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40171\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] is not active\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40172\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] is charging, waiting for payment notification\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Cancel a subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}/grant": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Grant days to a subscription, if grantDays is positive, it will add free days and push the next billing date by the amount of day.\u0026lt;br\u0026gt;if the grantDays is negative or zero, it only apply to active/cancelled subscription, remove days will decrease current period end, and move the next billing date closer.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated subscription\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "grantDaysToSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GrantSubscriptionDaysRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40141\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Grant days to a subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}/history": {
      "get": {
        "description": "Get user subscription billing histories.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: paginated subscription billing history\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserSubscriptionBillingHistories",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "excludeFree",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BillingHistoryPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user subscription billing histories",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}/notifications": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; This API is used as a web hook for payment notification from justice payment service.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Process result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "processUserSubscriptionNotification",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TradeNotification"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "process successfully"
          },
          "400": {
            "description": "process failed"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Web hook for payment notification",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/tickets/{boothName}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; Acquire ticket(code/key) based on booth name.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:TICKET\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: acquire result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "acquireUserTicket",
        "parameters": [
          {
            "in": "path",
            "name": "boothName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TicketAcquireRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TicketAcquireResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37041\u003c/td\u003e\u003ctd\u003eTicket booth [{boothName}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37071\u003c/td\u003e\u003ctd\u003eInsufficient ticket in booth [{boothName}] in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:TICKET [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Acquire ticket",
        "tags": [
          "Ticket"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:TICKET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/wallets/currencies/summary": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get user currency wallet summary.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: currency wallet summary\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryUserCurrencyWallets",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/CurrencyWallet"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user currency wallet summary",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/wallets/currencies/{currencyCode}/debit": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Debit a user wallet by currency code, default is debit system wallet.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "debitUserWalletByCurrencyCode",
        "parameters": [
          {
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DebitByCurrencyCodeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35124\u003c/td\u003e\u003ctd\u003eWallet [{currencyCode}] has insufficient balance\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Debit a user wallet by currency code",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/wallets/currencies/{currencyCode}/transactions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List user currency transactions ordered by create time desc.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: currency transaction info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "listUserCurrencyTransactions",
        "parameters": [
          {
            "description": "currencyCode",
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletTransactionPagingSlicedResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35141\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List user currency transactions",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/check": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; Check wallet by balance origin and currency code whether it\u0026#39;s inactive.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "checkWallet",
        "parameters": [
          {
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "Epic",
              "GooglePlay",
              "IOS",
              "Nintendo",
              "Oculus",
              "Other",
              "Playstation",
              "Steam",
              "System",
              "Twitch",
              "Xbox"
            ],
            "in": "query",
            "name": "origin",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "check successfully"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Check wallet by balance origin and currency code",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/credit": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Credit a user wallet by currency code and balance origin, if wallet not exists, it will create a new wallet.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "creditUserWallet",
        "parameters": [
          {
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreditRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Credit a user wallet by currency code and balance origin",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/debitByWalletPlatform": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Pay with user wallet by currency code and client platform.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h2\u0026gt;Restrictions for metadata\u0026lt;/h2\u0026gt;\n1. Cannot use \u0026lt;b\u0026gt;\u0026#34;.\u0026#34;\u0026lt;/b\u0026gt; as the key name\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;data.2\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;\n2. Cannot use \u0026lt;b\u0026gt;\u0026#34;$\u0026#34;\u0026lt;/b\u0026gt; as the prefix in key names\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;$data\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;",
        "operationId": "debitByWalletPlatform",
        "parameters": [
          {
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DebitByWalletPlatformRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlatformWallet"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35124\u003c/td\u003e\u003ctd\u003eWallet [{currencyCode}] has insufficient balance\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Pay with user wallet by currency code and client platform",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/payment": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Pay with user wallet by currency code and client platform.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "payWithUserWallet",
        "parameters": [
          {
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlatformWallet"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35124\u003c/td\u003e\u003ctd\u003eWallet [{currencyCode}] has insufficient balance\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Pay with user wallet by currency code and client platform",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "get a user wallet.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: wallet info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getUserWallet",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "walletId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35141\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a user wallet",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}/debit": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Debit a user wallet.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "debitUserWallet",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "walletId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DebitRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35124\u003c/td\u003e\u003ctd\u003eWallet [{currencyCode}] has insufficient balance\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35141\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Debit a user wallet",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}/disable": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "disable a user wallet.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "disableUserWallet",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "walletId",
            "in": "path",
            "name": "walletId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35141\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Disable a user wallet",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}/enable": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "enable a user wallet.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "enableUserWallet",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "walletId",
            "in": "path",
            "name": "walletId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35141\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Enable a user wallet",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}/transactions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "List user wallet transactions ordered by create time desc.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: wallet transaction info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "listUserWalletTransactions",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "walletId",
            "in": "path",
            "name": "walletId",
            "required": true,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DetailedWalletTransactionPagingSlicedResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35141\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List user wallet transactions",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/views": {
      "get": {
        "description": "This API is used to list all views.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of views\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "listViews",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/ListViewInfo"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List all views",
        "tags": [
          "View"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to create a view.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: created a view\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h2\u0026gt;Restrictions for localization extension\u0026lt;/h2\u0026gt;\n1. Cannot use \u0026lt;b\u0026gt;\u0026#34;.\u0026#34;\u0026lt;/b\u0026gt; as the key name\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;data.2\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;\n2. Cannot use \u0026lt;b\u0026gt;\u0026#34;$\u0026#34;\u0026lt;/b\u0026gt; as the prefix in key names\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;$data\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;",
        "operationId": "createView",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ViewCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullViewInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30021\u003c/td\u003e\u003ctd\u003eDefault language [{language}] required\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create a view",
        "tags": [
          "View"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/views/{viewId}": {
      "delete": {
        "description": "This API is used to delete a view.It will also delete all the related sections\u0026lt;/b\u0026gt;\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deleteView",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "viewId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete view successfully"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30641\u003c/td\u003e\u003ctd\u003eView [{viewId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a view",
        "tags": [
          "View"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      },
      "get": {
        "description": "This API is used to get a view.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: view data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getView",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "viewId",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullViewInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30641\u003c/td\u003e\u003ctd\u003eView [{viewId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a view",
        "tags": [
          "View"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to update a view.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated view data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h2\u0026gt;Restrictions for localization extension\u0026lt;/h2\u0026gt;\n1. Cannot use \u0026lt;b\u0026gt;\u0026#34;.\u0026#34;\u0026lt;/b\u0026gt; as the key name\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;data.2\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;\n2. Cannot use \u0026lt;b\u0026gt;\u0026#34;$\u0026#34;\u0026lt;/b\u0026gt; as the prefix in key names\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;$data\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;",
        "operationId": "updateView",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "viewId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ViewUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullViewInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30021\u003c/td\u003e\u003ctd\u003eDefault language [{language}] required\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30641\u003c/td\u003e\u003ctd\u003eView [{viewId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30173\u003c/td\u003e\u003ctd\u003ePublished store can't modify content\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update a view",
        "tags": [
          "View"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/wallets": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Query wallets.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:WALLET\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: paginated wallets info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryWallets",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "currencyCode",
            "in": "query",
            "name": "currencyCode",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "balance origin",
            "enum": [
              "Epic",
              "GooglePlay",
              "IOS",
              "Nintendo",
              "Oculus",
              "Other",
              "Playstation",
              "Steam",
              "System",
              "Twitch",
              "Xbox"
            ],
            "in": "query",
            "name": "origin",
            "required": false,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query wallets",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/wallets/credit": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Credit different users\u0026#39; wallets.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:WALLET\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: bulk credit result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "bulkCredit",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/BulkCreditRequest"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BulkCreditResult"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:WALLET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Credit different users' wallets",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/wallets/debit": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Debit different users\u0026#39; wallets.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:WALLET\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: bulk credit result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "bulkDebit",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/BulkDebitRequest"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BulkDebitResult"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:WALLET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Debit different users' wallets",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:WALLET"
        }
      }
    },
    "/platform/admin/namespaces/{namespace}/wallets/{walletId}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "get a wallet by wallet id.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:WALLET\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: wallet info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getWallet",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "walletId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35141\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a wallet by wallet id",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:WALLET"
        }
      }
    },
    "/platform/admin/orders": {
      "get": {
        "description": "Sync orders. If response contains nextEvaluatedKey, please use it as query param in the next call to fetch the next batch, a batch has 1000 elements or less.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: sync orders\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "syncOrders",
        "parameters": [
          {
            "description": "exclude ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "end",
            "required": true,
            "type": "string"
          },
          {
            "description": "include ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "start",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "nextEvaluatedKey",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderSyncResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync orders",
        "tags": [
          "Order(Dedicated)"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:ORDER"
        }
      }
    },
    "/platform/admin/payment/config/merchant/adyenconfig/test": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Test adyen configuration. \u0026lt;h4\u0026gt;Check List:\u0026lt;/h4\u0026gt; \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;apiKey\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;merchantAccount\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h4\u0026gt;Non-check list:\u0026lt;/h4\u0026gt;\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;notificationHmacKey\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;notificationUsername\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;notificationPassword\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;liveEndpointUrlPrefix\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;allowedPaymentMethods\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;blockedPaymentMethods\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;settings\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: test adyen config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "testAdyenConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AdyenConfig"
            }
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test adyen configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/alipayconfig/test": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Test AliPay configuration.Reference: \u0026lt;a href=\u0026#34;https://docs.open.alipay.com/270/alipay.trade.page.pay\u0026#34;\u0026gt;Alipay Document\u0026lt;/a\u0026gt;.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: test result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "testAliPayConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AliPayConfig"
            }
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test Alipay configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/checkoutconfig/test": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Test checkout.com configuration. \u0026lt;h4\u0026gt;Check List:\u0026lt;/h4\u0026gt; \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;publicKey\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;secretKey\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: test result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "testCheckoutConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CheckoutConfig"
            }
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test checkout.com configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/matched": {
      "get": {
        "description": "Debug matched payment merchant config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment merchant config info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "debugMatchedPaymentMerchantConfig",
        "parameters": [
          {
            "default": "*",
            "description": "namespace",
            "in": "query",
            "name": "namespace",
            "required": false,
            "type": "string"
          },
          {
            "default": "*",
            "description": "region",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Debug matched payment merchant config(internal)",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/paypalconfig/test": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Test PayPal configuration. \u0026lt;h4\u0026gt;Check List:\u0026lt;/h4\u0026gt; \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;clientID\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;clientSecret\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h4\u0026gt;Non-check list:\u0026lt;/h4\u0026gt;\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;webHookId\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: test result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "testPayPalConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PayPalConfig"
            }
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test PayPal configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/stripeconfig/test": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Test stripe configuration. \u0026lt;h4\u0026gt;Check List:\u0026lt;/h4\u0026gt; \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;secretKey\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;allowedPaymentMethodTypes\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h4\u0026gt;Non-check list:\u0026lt;/h4\u0026gt;\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;publishableKey\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;webhookSecret\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: test adyen config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "testStripeConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StripeConfig"
            }
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test stripe configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/wxpayconfig/test": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Test WxPay configuration. Reference: \u0026lt;a href=\u0026#34;https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1\u0026#34;\u0026gt;WxPay Document\u0026lt;/a\u0026gt;.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: test WxPay config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "testWxPayConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WxPayConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test wxPay configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/xsollaconfig/test": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Check xsolla configuration, Reference: \u0026lt;a href=\u0026#34;https://developers.xsolla.com/?#simple-checkout\u0026#34;\u0026gt;Xsolla Document\u0026lt;/a\u0026gt;.\u0026lt;h4\u0026gt;Check List:\u0026lt;/h4\u0026gt; \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;merchantId\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;projectId\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;apiKey\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h4\u0026gt;Non-check list:\u0026lt;/h4\u0026gt;\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;projectSecretKey\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: test result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "testXsollaConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XsollaConfig"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test xsolla configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}": {
      "get": {
        "description": "Get payment merchant config by id.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment merchant config info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getPaymentMerchantConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get payment merchant config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/adyenconfig": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update adyen config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated payment merchant config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateAdyenConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AdyenConfig"
            }
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": false,
            "in": "query",
            "name": "validate",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33221\u003c/td\u003e\u003ctd\u003eUpdate [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update adyen config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/adyenconfig/test": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Test adyen configuration in payment merchant config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: test adyen config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "testAdyenConfigById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test adyen configuration by id",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/alipayconfig": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update alipay configuration.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated payment merchant config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateAliPayConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AliPayConfig"
            }
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": false,
            "in": "query",
            "name": "validate",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33221\u003c/td\u003e\u003ctd\u003eUpdate [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update alipay configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/alipayconfig/test": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Test AliPay configuration in payment merchant config. Reference: \u0026lt;a href=\u0026#34;https://docs.open.alipay.com/270/alipay.trade.page.pay\u0026#34;\u0026gt;Alipay Document\u0026lt;/a\u0026gt;.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: test alipay config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "testAliPayConfigById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test Alipay configuration by id",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/checkoutconfig": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update checkout.com config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated payment merchant config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateCheckoutConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CheckoutConfig"
            }
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": false,
            "in": "query",
            "name": "validate",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33221\u003c/td\u003e\u003ctd\u003eUpdate [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update checkout.com config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/checkoutconfig/test": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Test checkout.com configuration in payment merchant config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: test result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "testCheckoutConfigById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test checkout.com configuration by id",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/paypalconfig": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update PayPal config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated payment merchant config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updatePayPalConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PayPalConfig"
            }
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": false,
            "in": "query",
            "name": "validate",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33221\u003c/td\u003e\u003ctd\u003eUpdate [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update PayPal config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/paypalconfig/test": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Test PayPal configuration in payment merchant config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: test result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "testPayPalConfigById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eNumericErrorCode\u003c/td\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33045\u003c/td\u003e\u003ctd\u003eerrors.net.accelbyte.platform.payment.payment_merchant_config_not_found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test PayPal configuration by id",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/stripeconfig": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update stripe config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated payment merchant config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateStripeConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StripeConfig"
            }
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": false,
            "in": "query",
            "name": "validate",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33221\u003c/td\u003e\u003ctd\u003eUpdate [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update stripe config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/stripeconfig/test": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Test stripe configuration in payment merchant config. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: test adyen config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "testStripeConfigById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test stripe configuration by id",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/wxpayconfig": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update wxpay configuration.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated payment merchant config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateWxPayConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WxPayConfigRequest"
            }
          },
          {
            "default": false,
            "in": "query",
            "name": "validate",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33221\u003c/td\u003e\u003ctd\u003eUpdate [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update wxpay configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/wxpayconfig/cert": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Upload wxpay cert file.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated payment merchant config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateWxPayConfigCert",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload wxpay cert file",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/wxpayconfig/test": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Test WxPay configuration in payment merchant config. Reference: \u0026lt;a href=\u0026#34;https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1\u0026#34;\u0026gt;WxPay Document\u0026lt;/a\u0026gt;.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: test WxPay config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "testWxPayConfigById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test wxPay configuration by id",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/xsollaconfig": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update xsolla configuration. Reference: \u0026lt;a href=\u0026#34;https://developers.xsolla.com/?#simple-checkout\u0026#34;\u0026gt;Xsolla Document\u0026lt;/a\u0026gt;.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated payment merchant config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateXsollaConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XsollaConfig"
            }
          },
          {
            "default": false,
            "in": "query",
            "name": "validate",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33221\u003c/td\u003e\u003ctd\u003eUpdate [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update xsolla configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/xsollaconfig/test": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Test xsolla configuration in payment merchant config. Reference: \u0026lt;a href=\u0026#34;https://developers.xsolla.com/?#simple-checkout\u0026#34;\u0026gt;Xsolla Document\u0026lt;/a\u0026gt;.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: test xsolla config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "testXsollaConfigById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test xsolla configuration by id",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/merchant/{id}/xsollauiconfig": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update xsolla UI configuration.Reference: \u0026lt;a href=\u0026#34;https://developers.xsolla.com/api.html#ui-integrations\u0026#34;\u0026gt;Xsolla Document\u0026lt;/a\u0026gt;.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated payment merchant config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateXsollaUIConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XsollaPaywallConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33242\u003c/td\u003e\u003ctd\u003ePayment merchant config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update xsolla UI configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/provider": {
      "get": {
        "description": "Query payment provider config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment provider config list\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryPaymentProviderConfig",
        "parameters": [
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "namespace",
            "in": "query",
            "name": "namespace",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "region",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query payment provider config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create payment provider config.\u0026lt;br\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Request Body Parameters:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Parameter\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Required\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;namespace\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;namespace, * indicates all namespace\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;region\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;region, * indicates all regions\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;aggregate\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;aggregate payment provider, such as XSOLLA, ADYEN, STRIPE\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;specials\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;List\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;special payment provider, such as ALIPAY, WXPAY\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;\u0026lt;/pre\u0026gt;payment provider applied has priority: \u0026lt;ol\u0026gt;\u0026lt;li\u0026gt;namespace and region match\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;namespace matches and region is *\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;region matches and namespace is *\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;namespace and region are *\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment provider config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "createPaymentProviderConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigEdit"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33221\u003c/td\u003e\u003ctd\u003eTaxJar api token required\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33271\u003c/td\u003e\u003ctd\u003ePayment provider config for namespace [{namespace}] and region [{region}] already exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create payment provider config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/provider/aggregate": {
      "get": {
        "description": "Get aggregate payment providers, such as XSOLLA, ADYEN.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment provider list\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getAggregatePaymentProviders",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "enum": [
                  "ADYEN",
                  "ALIPAY",
                  "CHECKOUT",
                  "PAYPAL",
                  "STRIPE",
                  "WALLET",
                  "WXPAY",
                  "XSOLLA"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get aggregate payment providers",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/provider/matched": {
      "get": {
        "description": "Debug matched payment provider config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment provider config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "debugMatchedPaymentProviderConfig",
        "parameters": [
          {
            "default": "*",
            "description": "namespace",
            "in": "query",
            "name": "namespace",
            "required": false,
            "type": "string"
          },
          {
            "default": "*",
            "description": "region",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33241\u003c/td\u003e\u003ctd\u003ePayment provider config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Debug matched payment provider config(internal)",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/provider/special": {
      "get": {
        "description": "Get special payment providers, such as ALIPAY, WXPAY.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment provider list\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getSpecialPaymentProviders",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "enum": [
                  "ADYEN",
                  "ALIPAY",
                  "CHECKOUT",
                  "PAYPAL",
                  "STRIPE",
                  "WALLET",
                  "WXPAY",
                  "XSOLLA"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get special payment providers",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/provider/{id}": {
      "delete": {
        "description": "Delete payment provider config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment provider config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "deletePaymentProviderConfig",
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33241\u003c/td\u003e\u003ctd\u003ePayment provider config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete payment provider config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update payment provider config.\u0026lt;br\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Request Body Parameters:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Parameter\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Required\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;namespace\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;namespace, * indicates all namespace\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;region\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;region, * indicates all regions\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;aggregate\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;aggregate payment provider, such as XSOLLA, ADYEN, STRIPE\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;specials\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;List\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;special payment provider, such as ALIPAY, WXPAY\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;\u0026lt;/pre\u0026gt;payment provider applied has priority: \u0026lt;ol\u0026gt;\u0026lt;li\u0026gt;namespace and region match\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;namespace matches and region is *\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;region matches and namespace is *\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;namespace and region are *\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment provider config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updatePaymentProviderConfig",
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigEdit"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33221\u003c/td\u003e\u003ctd\u003eTaxJar api token required\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33241\u003c/td\u003e\u003ctd\u003ePayment provider config [{id}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33271\u003c/td\u003e\u003ctd\u003ePayment provider config for namespace [{namespace}] and region [{region}] already exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update payment provider config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/config/tax": {
      "get": {
        "description": "Get payment global tax config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment provider list\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getPaymentTaxConfig",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentTaxConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get payment global tax config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update payment tax config.\u0026lt;br\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Request Body Parameters:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Parameter\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Required\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;taxJarEnabled\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Boolean\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;false\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;taxJarApiToken\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;false\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;required, when taxJarEnabled is true and there is no existing token\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;sandboxTaxJarApiToken\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;false\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;optional\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;taxJarProductCodesMapping\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Map\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;key is item type(APP|COINS|INGAMEITEM|BUNDLE|CODE|SUBSCRIPTION) and value is product tax code: https://developers.taxjar.com/api/reference/?ruby#get-list-tax-categories\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;\u0026lt;/pre\u0026gt;\u0026lt;/ol\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT:CONFIG\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: payment global tax config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updatePaymentTaxConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTaxConfigEdit"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentTaxConfigInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33221\u003c/td\u003e\u003ctd\u003eTaxJar api token required\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update payment global tax config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    },
    "/platform/admin/payment/orders": {
      "get": {
        "description": "Sync payment orders. If response contains nextEvaluatedKey, please use it as query param in the next call to fetch the next batch, a batch has 1000 elements or less.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:PAYMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: sync payment orders\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "syncPaymentOrders",
        "parameters": [
          {
            "description": "exclude ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "end",
            "required": true,
            "type": "string"
          },
          {
            "description": "include ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "start",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "nextEvaluatedKey",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderSyncResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync payment orders",
        "tags": [
          "Payment(Dedicated)"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/categories": {
      "get": {
        "description": "This API is used to get root categories.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store category)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1(CREATE) (user with this permission can view draft store category)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: root category data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetRootCategories",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/CategoryInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get Root Categories",
        "tags": [
          "Category"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/categories/download": {
      "get": {
        "description": "This API is used to download store\u0026#39;s structured categories.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store content)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1(CREATE) (user with this permission can view draft store content)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: structured categories\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "downloadCategories",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/HierarchicalCategoryInfo"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Download store's structured categories",
        "tags": [
          "Category"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/categories/{categoryPath}": {
      "get": {
        "description": "This API is used to get category by category path.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store category)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1 (CREATE)(user with this permission can view draft store category)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: category data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetCategory",
        "parameters": [
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CategoryInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30241\u003c/td\u003e\u003ctd\u003eCategory [{categoryPath}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get Category",
        "tags": [
          "Category"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/categories/{categoryPath}/children": {
      "get": {
        "description": "This API is used to get child categories by category path.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store category)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1(CREATE) (user with this permission can view draft store category)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: list of child categories data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetChildCategories",
        "parameters": [
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/CategoryInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get Child Categories",
        "tags": [
          "Category"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/categories/{categoryPath}/descendants": {
      "get": {
        "description": "This API is used to get descendant categories by category path.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store category)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1(CREATE) (user with this permission can view draft store category)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: list of descendant categories data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetDescendantCategories",
        "parameters": [
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/CategoryInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get Descendant Categories",
        "tags": [
          "Category"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/currencies": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List currencies of a namespace.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Currency List\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicListCurrencies",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "currencyType",
            "enum": [
              "REAL",
              "VIRTUAL"
            ],
            "in": "query",
            "name": "currencyType",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/CurrencyInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "list currencies",
        "tags": [
          "Currency"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/dlc/rewards/durable/map": {
      "get": {
        "description": "Get dlc reward simple map, only return the sku of durable item reward\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: Authorized user\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "geDLCDurableRewardShortMap",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "EPICGAMES",
              "OCULUS",
              "PSN",
              "STEAM",
              "XBOX"
            ],
            "in": "query",
            "name": "dlcType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DLCConfigRewardShortInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39442\u003c/td\u003e\u003ctd\u003eDLC item config cannot be found in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39441\u003c/td\u003e\u003ctd\u003ePlatform dlc config cannot be found in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get dlc durable reward simple map",
        "tags": [
          "DLC"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/iap/item/mapping": {
      "get": {
        "description": "Get iap item mapping.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getIAPItemMapping",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APPLE",
              "EPICGAMES",
              "GOOGLE",
              "OCULUS",
              "PLAYSTATION",
              "STADIA",
              "STEAM",
              "TWITCH",
              "XBOX"
            ],
            "in": "query",
            "name": "platform",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/IAPItemMappingInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39341\u003c/td\u003e\u003ctd\u003eIAP item config cannot be found in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get iap item mapping",
        "tags": [
          "IAP"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/items/byAppId": {
      "get": {
        "description": "This API is used to get item by appId.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store item)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1(CREATE) (user with this permission can view draft store item)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the item with that appId\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetItemByAppId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30342\u003c/td\u003e\u003ctd\u003eItem of appId [{appId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get item by appId",
        "tags": [
          "Item"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/items/byCriteria": {
      "get": {
        "description": "This API is used to query items by criteria within a store. If item not exist in specific region, default region item will return.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store item)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1(CREATE) (user with this permission can view draft store item)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of items\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicQueryItems",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "baseAppId",
            "required": false,
            "type": "string"
          },
          {
            "description": "category path",
            "in": "query",
            "name": "categoryPath",
            "required": false,
            "type": "string"
          },
          {
            "description": "features, separate multiple value by commas parameter",
            "in": "query",
            "name": "features",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "default is false, only available when search by category path, it will return all of the items(includes sub category path) under this category path",
            "in": "query",
            "name": "includeSubCategoryItem",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "enum": [
              "APP",
              "BUNDLE",
              "CODE",
              "COINS",
              "EXTENSION",
              "INGAMEITEM",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SEASON",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "itemType",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "default": [
              "name:asc",
              "displayOrder:asc"
            ],
            "description": "default is name:asc,displayOrder:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc. Make sure to always use more than one sort if the first sort is not an unique value for example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "in": "query",
            "items": {
              "enum": [
                "name",
                "name:asc",
                "name:desc",
                "createdAt",
                "createdAt:asc",
                "createdAt:desc",
                "updatedAt",
                "updatedAt:asc",
                "updatedAt:desc",
                "displayOrder",
                "displayOrder:asc",
                "displayOrder:desc"
              ],
              "type": "string"
            },
            "name": "sortBy",
            "required": false,
            "type": "array",
            "uniqueItems": true
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "tags, separate multiple value by commas parameter",
            "in": "query",
            "name": "tags",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemPagingSlicedResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Query items by criteria",
        "tags": [
          "Item"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/items/bySku": {
      "get": {
        "description": "This API is used to get the item by sku.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store item)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1(CREATE) (user with this permission can view draft store item)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the item with sku\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetItemBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30343\u003c/td\u003e\u003ctd\u003eItem of sku [{sku}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get item by sku",
        "tags": [
          "Item"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/items/estimatedPrice": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to get estimated prices of item",
        "operationId": "publicGetEstimatedPrice",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "commas separated item ids",
            "in": "query",
            "name": "itemIds",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "use published store id by default",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/EstimatedPriceInfo"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get estimated price",
        "tags": [
          "Item"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/items/locale/byIds": {
      "get": {
        "description": "This API is used to bulk get locale items. If item not exist in specific region, default region item will return.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store items)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1(CREATE) (user with this permission can view draft store items)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of items info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicBulkGetItems",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "commas separated item ids",
            "in": "query",
            "name": "itemIds",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/ItemInfo"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Bulk get locale items",
        "tags": [
          "Item"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/items/purchase/conditions/validate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to validate user item purchase condition",
        "operationId": "publicValidateItemPurchaseCondition",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemPurchaseConditionValidateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/ItemPurchaseConditionValidateResult"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Validate user item purchase condition",
        "tags": [
          "Item"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/items/search": {
      "get": {
        "description": "This API is used to search items by keyword in title, description and long description, It\u0026#39;s language constrained, also if item not exist in specific region, default region item will return.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store item)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1(CREATE) (user with this permission can view draft store item)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of items\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicSearchItems",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "keyword",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "BUNDLE",
              "CODE",
              "COINS",
              "EXTENSION",
              "INGAMEITEM",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SEASON",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "itemType",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemPagingSlicedResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Search items by keyword",
        "tags": [
          "Item"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/items/{itemId}/app/locale": {
      "get": {
        "description": "This API is used to get an app in locale. If app not exist in specific region, default region app will return.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store app)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1(CREATE) (user with this permission can view draft store app)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: app data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetApp",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get an app in locale",
        "tags": [
          "Item"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/items/{itemId}/dynamic": {
      "get": {
        "description": "Get item dynamic data for a published item.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: item dynamic data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetItemDynamicData",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemDynamicDataInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get item dynamic data",
        "tags": [
          "Item"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/items/{itemId}/locale": {
      "get": {
        "description": "This API is used to get an item in locale. If item not exist in specific region, default region item will return.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store item)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1(CREATE) (user with this permission can view draft store item)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: item data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetItem",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "whether populate bundled items if it's a bundle",
            "in": "query",
            "name": "populateBundle",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PopulatedItemInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get an item in locale",
        "tags": [
          "Item"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/payment/customization": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Get payment provider customization, at current only Adyen provide customization. This api has been deprecated, pls use /public/namespaces/{namespace}/payment/publicconfig to get adyen config\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: customization\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getPaymentCustomization",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "ADYEN",
              "ALIPAY",
              "CHECKOUT",
              "PAYPAL",
              "STRIPE",
              "WALLET",
              "WXPAY",
              "XSOLLA"
            ],
            "in": "query",
            "name": "paymentProvider",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customization"
            }
          }
        },
        "summary": "Get payment provider customization",
        "tags": [
          "PaymentStation"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/payment/link": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Get payment url.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Get payment link\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetPaymentUrl",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentUrlCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentUrl"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33321\u003c/td\u003e\u003ctd\u003ePayment provider [{paymentProvider}] not support currency [{currency}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33322\u003c/td\u003e\u003ctd\u003ePayment provider [{paymentProvider}] not supported\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33332\u003c/td\u003e\u003ctd\u003eAmount too small, please contact administrator\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20016\u003c/td\u003e\u003ctd\u003eaction is banned\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33141\u003c/td\u003e\u003ctd\u003ePayment Order [{paymentOrderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser [{userId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get payment url",
        "tags": [
          "PaymentStation"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/payment/methods": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get payment methods.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Payment method list\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetPaymentMethods",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/PaymentMethod"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33141\u003c/td\u003e\u003ctd\u003ePayment Order [{paymentOrderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get payment methods",
        "tags": [
          "PaymentStation"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/payment/orders/{paymentOrderNo}/info": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get payment order info.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Payment order details\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetUnpaidPaymentOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderDetails"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33141\u003c/td\u003e\u003ctd\u003ePayment Order [{paymentOrderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser [{userId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33171\u003c/td\u003e\u003ctd\u003eInvalid payment order status [{status}] for payment order [{paymentOrderNo}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get payment order info",
        "tags": [
          "PaymentStation"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/payment/orders/{paymentOrderNo}/pay": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Do payment(For now, this only support checkout.com).\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Payment process result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "pay",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          },
          {
            "default": "CHECKOUT",
            "description": "payment provider",
            "enum": [
              "ADYEN",
              "ALIPAY",
              "CHECKOUT",
              "PAYPAL",
              "STRIPE",
              "WALLET",
              "WXPAY",
              "XSOLLA"
            ],
            "in": "query",
            "name": "paymentProvider",
            "required": false,
            "type": "string"
          },
          {
            "description": "zip code",
            "in": "query",
            "name": "zipCode",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProcessResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33322\u003c/td\u003e\u003ctd\u003ePayment provider [{paymentProvider}] not supported\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33141\u003c/td\u003e\u003ctd\u003ePayment Order [{paymentOrderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33171\u003c/td\u003e\u003ctd\u003eInvalid payment order status [{status}] for payment order [{paymentOrderNo}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Do payment",
        "tags": [
          "PaymentStation"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/payment/orders/{paymentOrderNo}/status": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Check payment order paid status.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Payment order paid result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicCheckPaymentOrderPaidStatus",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderPaidResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33141\u003c/td\u003e\u003ctd\u003ePayment Order [{paymentOrderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Check payment order paid status",
        "tags": [
          "PaymentStation"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/payment/publicconfig": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get payment provider public config, at current only Strip provide public config.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Public config\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getPaymentPublicConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "ADYEN",
              "ALIPAY",
              "CHECKOUT",
              "PAYPAL",
              "STRIPE",
              "WALLET",
              "WXPAY",
              "XSOLLA"
            ],
            "in": "query",
            "name": "paymentProvider",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          }
        },
        "summary": "Get payment provider public config",
        "tags": [
          "PaymentStation"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/payment/qrcode": {
      "get": {
        "description": "Get qrcode.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: QRCode image stream\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetQRCode",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "code",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "image/png"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "summary": "Get qrcode",
        "tags": [
          "PaymentStation"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/payment/returnurl": {
      "get": {
        "description": "Normalize payment return url for payment provider\u0026lt;br\u0026gt;Payment response: \u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Field\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Type\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Required\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;orderNo\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;order no\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;paymentStatus\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;Yes\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;DONE: The payment was successfully completed.\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;CANCELLED: The payment was cancelled by the shopper before completion, or the shopper returned to the merchant\u0026#39;s site before completing the transaction.\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;PENDING: Inform the shopper that you\u0026#39;ve received their order, and are waiting for the payment to be completed.\n\nWhen the shopper has completed the payment you will receive a successful AUTHORISATION.\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;RECEIVED: Inform the shopper that you\u0026#39;ve received their order, and are waiting for the payment to clear.\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;UNKNOWN: An error occurred during the payment processing.\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;FAILED: Shopper paid failed because of various reasons.\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;reason\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;String\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;No\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;payment status reason\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;xsolla\u0026lt;/i\u0026gt;: parameters \u0026#39;user_id\u0026#39;, \u0026#39;foreinginvoice\u0026#39;, \u0026#39;invoice_id\u0026#39; and \u0026#39;status\u0026#39; will be automatically added to the link\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;adyen\u0026lt;/i\u0026gt;: https://docs.adyen.com/developers/checkout/web-sdk\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicNormalizePaymentReturnUrl",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform order no",
            "in": "query",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform payment order no",
            "in": "query",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform payment provider",
            "enum": [
              "ADYEN",
              "ALIPAY",
              "CHECKOUT",
              "PAYPAL",
              "STRIPE",
              "WALLET",
              "WXPAY",
              "XSOLLA"
            ],
            "in": "query",
            "name": "paymentProvider",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "returnUrl",
            "required": true,
            "type": "string"
          },
          {
            "description": "PayPal payer id",
            "in": "query",
            "name": "PayerID",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "foreinginvoice",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "invoice_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "adyen redirect session data for checkout sdk",
            "in": "query",
            "name": "payload",
            "required": false,
            "type": "string"
          },
          {
            "description": "adyen redirect session data for drop in",
            "in": "query",
            "name": "redirectResult",
            "required": false,
            "type": "string"
          },
          {
            "description": "adyen redirect resultCode from checkout sdk",
            "in": "query",
            "name": "resultCode",
            "required": false,
            "type": "string"
          },
          {
            "description": "adyen redirect session Id for drop in",
            "in": "query",
            "name": "sessionId",
            "required": false,
            "type": "string"
          },
          {
            "description": "paypal and xsolla will return this",
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "description": "PayPal token",
            "in": "query",
            "name": "token",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "no content.(if query param 'returnUrl' is empty)"
          },
          "307": {
            "description": "successful operation.(if query param 'returnUrl' is not empty)",
            "headers": {
              "Location": {
                "description": "The Location header",
                "format": "uri",
                "type": "string"
              }
            }
          }
        },
        "summary": "Normalize payment return url",
        "tags": [
          "PaymentStation"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/payment/tax": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Check and get a payment order\u0026#39;s should pay tax.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: tax result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getPaymentTaxValue",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "ADYEN",
              "ALIPAY",
              "CHECKOUT",
              "PAYPAL",
              "STRIPE",
              "WALLET",
              "WXPAY",
              "XSOLLA"
            ],
            "in": "query",
            "name": "paymentProvider",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "zipCode",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaxResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33123\u003c/td\u003e\u003ctd\u003eInvalid zipcode\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e33141\u003c/td\u003e\u003ctd\u003ePayment Order [{paymentOrderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "get tax result of a payment order",
        "tags": [
          "PaymentStation"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/rewards/byCode": {
      "get": {
        "description": "This API is used to get reward by reward code.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:REWARD\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: reward instance\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getRewardByCode",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "rewardCode",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34043\u003c/td\u003e\u003ctd\u003eReward with code [{rewardCode}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:REWARD [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a reward by code",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:REWARD"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/rewards/byCriteria": {
      "get": {
        "description": "This API is used to query rewards by criteria.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:REWARD\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of rewards\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryRewards_1",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "event topic",
            "in": "query",
            "name": "eventTopic",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": [
              "namespace:asc",
              "rewardCode:asc"
            ],
            "description": "default is namespace:asc,rewardCode:asc, allow values: [namespace, namespace:asc, namespace:desc, rewardCode, rewardCode:asc, rewardCode:desc],and support sort group, eg: sortBy=namespace:asc,rewardCode:asc",
            "in": "query",
            "items": {
              "enum": [
                "namespace",
                "namespace:asc",
                "namespace:desc",
                "rewardCode",
                "rewardCode:asc",
                "rewardCode:desc"
              ],
              "type": "string"
            },
            "name": "sortBy",
            "required": false,
            "type": "array",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardPagingSlicedResult"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:REWARD [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query rewards by criteria",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:REWARD"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/rewards/{rewardId}": {
      "get": {
        "description": "This API is used to get reward by reward Id.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:REWARD\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: reward instance\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getReward_1",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "rewardId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e34041\u003c/td\u003e\u003ctd\u003eReward [{rewardId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:REWARD [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a reward",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:REWARD"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/stores": {
      "get": {
        "description": "This API is used to list all stores in a namespace.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1(CREATE) (user with this permission can view draft store)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of stores\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicListStores",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/StoreInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "List all stores",
        "tags": [
          "Store"
        ]
      }
    },
    "/platform/public/namespaces/{namespace}/users/me/entitlements/ownership/any": {
      "get": {
        "description": "Exists any my active entitlement of specified itemIds, skus and appIds\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicExistsAnyMyActiveEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "appIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "skus",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Exists any my active entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/me/entitlements/ownership/byAppId": {
      "get": {
        "description": "Get my app entitlement ownership by appId.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Path\u0026#39;s namespace\u0026lt;/i\u0026gt; : \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;can be filled with \u0026lt;b\u0026gt;publisher namespace\u0026lt;/b\u0026gt; in order to get \u0026lt;b\u0026gt;publisher namespace app entitlement ownership\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetMyAppEntitlementOwnershipByAppId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get my app entitlement ownership by appId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/me/entitlements/ownership/byItemId": {
      "get": {
        "description": "Get my entitlement ownership by itemId.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Path\u0026#39;s namespace\u0026lt;/i\u0026gt; : \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;can be filled with \u0026lt;b\u0026gt;publisher namespace\u0026lt;/b\u0026gt; in order to get \u0026lt;b\u0026gt;publisher namespace entitlement ownership by sku\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;can be filled with \u0026lt;b\u0026gt;game namespace\u0026lt;/b\u0026gt; in order to get \u0026lt;b\u0026gt;game namespace entitlement ownership by sku\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetMyEntitlementOwnershipByItemId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimedOwnership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get my entitlement ownership by itemId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/me/entitlements/ownership/bySku": {
      "get": {
        "description": "Get my entitlement ownership by sku.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Path\u0026#39;s namespace\u0026lt;/i\u0026gt; : \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;can be filled with \u0026lt;b\u0026gt;publisher namespace\u0026lt;/b\u0026gt; in order to get \u0026lt;b\u0026gt;publisher namespace entitlement ownership by sku\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;can be filled with \u0026lt;b\u0026gt;game namespace\u0026lt;/b\u0026gt; in order to get \u0026lt;b\u0026gt;game namespace entitlement ownership by sku\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetMyEntitlementOwnershipBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimedOwnership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get my entitlement ownership by sku",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/me/entitlements/ownershipToken": {
      "get": {
        "description": "Gets an entitlement ownership token of specified itemIds, skus and appIds\u0026lt;p\u0026gt;The decoded ownership token header like below:\u0026lt;p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;{\r\n  \u0026#34;kid\u0026#34;: \u0026#34;9fd4cd5f991cebe3323605cd12d3b8bfdfc73fa4\u0026#34;,\r\n  \u0026#34;typ\u0026#34;: \u0026#34;JWT\u0026#34;,\r\n  \u0026#34;alg\u0026#34;: \u0026#34;RS256\u0026#34;\r\n}\r\n\u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt;That you can get the jwks by api \u0026lt;baseUrl\u0026gt;/platform/jwks, if the configured private key is same as IAM, \u0026lt;p\u0026gt;you can also get jwks from IAM endpoint. \u0026lt;p\u0026gt;The decoded ownership token payload like below:\u0026lt;p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;{\r\n \u0026#34;namespace\u0026#34;: \u0026#34;accelbyte\u0026#34;,\r\n \u0026#34;entitlements\u0026#34;: [\r\n  {\r\n    \u0026#34;itemId\u0026#34;: \u0026#34;4c1296291f604c199f7bb7f0ee02e5f8\u0026#34;,\r\n    \u0026#34;appType\u0026#34;: null,\r\n    \u0026#34;appId\u0026#34;: null,\r\n    \u0026#34;namespace\u0026#34;: \u0026#34;accelbyte\u0026#34;,\r\n    \u0026#34;itemNamespace\u0026#34;: \u0026#34;accelbyte\u0026#34;,\r\n    \u0026#34;sku\u0026#34;: \u0026#34;prime-plus\u0026#34;\r\n  },\r\n  {\r\n    \u0026#34;itemId\u0026#34;: \u0026#34;e8f4974cf45c4e1f8d4f0c6990c518bd\u0026#34;,\r\n    \u0026#34;appType\u0026#34;: \u0026#34;GAME\u0026#34;,\r\n    \u0026#34;appId\u0026#34;: \u0026#34;omeganebula\u0026#34;,\r\n    \u0026#34;namespace\u0026#34;: \u0026#34;accelbyte\u0026#34;,\r\n    \u0026#34;itemNamespace\u0026#34;: \u0026#34;accelbyte\u0026#34;,\r\n    \u0026#34;sku\u0026#34;: \u0026#34;APPG005ON\u0026#34;\r\n  }\r\n ],\r\n\u0026#34;sub\u0026#34;: \u0026#34;66459eb6a4e44e6fb0040bd20c1079a5\u0026#34;,\r\n\u0026#34;exp\u0026#34;: 1619624360,\r\n\u0026#34;iat\u0026#34;: 1619624060\r\n}\r\n\u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt;\u0026lt;b\u0026gt;if there\u0026#39;s no active entitlement for the specific params, the entitlements section will be omitted\u0026lt;/b\u0026gt;.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetEntitlementOwnershipToken",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "appIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "skus",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OwnershipToken"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Gets an entitlement ownership token",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/me/iap/twitch/sync": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Sync my game twitch drops entitlements.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=NAMESPACE:{namespace}:IAP, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "syncTwitchDropsEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TwitchSyncRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/TwitchSyncResult"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39125\u003c/td\u003e\u003ctd\u003eInvalid platform [{platformId}] user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39126\u003c/td\u003e\u003ctd\u003eUser id [{}] in namespace [{}] doesn't link platform [{}]\u003c/td\u003e\u003c/tr\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Sync my game twitch drops entitlements.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:IAP"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/me/wallets/{currencyCode}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "get my wallet by currency code and namespace.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:WALLET\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: wallet info\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Path\u0026#39;s namespace\u0026lt;/i\u0026gt; : \u0026lt;ul\u0026gt;   \u0026lt;li\u0026gt;can be filled with \u0026lt;b\u0026gt;publisher namespace\u0026lt;/b\u0026gt; in order to get \u0026lt;b\u0026gt;publisher user wallet\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;   \u0026lt;li\u0026gt;can be filled with \u0026lt;b\u0026gt;game namespace\u0026lt;/b\u0026gt; in order to get \u0026lt;b\u0026gt;game user wallet\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;   \u0026lt;/ul\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetMyWallet",
        "parameters": [
          {
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlatformWallet"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get my wallet by currency code and namespace",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:WALLET"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/dlc/epicgames/sync": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Sync epic games dlc items.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=NAMESPACE:{namespace}:USER:{userId}:DLC, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "syncEpicGameDLC",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EpicGamesDLCSyncRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39125\u003c/td\u003e\u003ctd\u003eInvalid platform [{platformId}] user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39126\u003c/td\u003e\u003ctd\u003eUser id [{}] in namespace [{}] doesn't link platform [{}]\u003c/td\u003e\u003c/tr\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Sync epic games dlc items",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:DLC"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/dlc/oculus/sync": {
      "put": {
        "description": "Sync oculus dlc.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=NAMESPACE:{namespace}:USER:{userId}:DLC, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "syncOculusDLC",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39124\u003c/td\u003e\u003ctd\u003eIAP request platform [{platformId}] user id is not linked with current user\u003c/td\u003e\u003c/tr\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Sync oculus dlc.",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:DLC"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/dlc/psn/sync": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Synchronize with dlc entitlements in PSN Store.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=NAMESPACE:{namespace}:USER:{userId}:DLC, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: result of synchronization\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicSyncPsnDlcInventory",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlayStationDLCSyncRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39125\u003c/td\u003e\u003ctd\u003eInvalid platform [{platformId}] user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39126\u003c/td\u003e\u003ctd\u003eUser id [{}] in namespace [{}] doesn't link platform [{}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39127\u003c/td\u003e\u003ctd\u003eInvalid service label [{serviceLabel}]\u003c/td\u003e\u003c/tr\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Synchronize with dlc entitlements in PSN Store.",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:DLC"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/dlc/psn/sync/multiServiceLabels": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Synchronize with dlc entitlements in PSN Store with multiple service labels.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=NAMESPACE:{namespace}:USER:{userId}:DLC, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: result of synchronization\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicSyncPsnDlcInventoryWithMultipleServiceLabels",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlayStationDLCSyncMultiServiceLabelsRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39125\u003c/td\u003e\u003ctd\u003eInvalid platform [{platformId}] user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39126\u003c/td\u003e\u003ctd\u003eUser id [{}] in namespace [{}] doesn't link platform [{}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39127\u003c/td\u003e\u003ctd\u003eInvalid service label [{serviceLabel}]\u003c/td\u003e\u003c/tr\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Synchronize with dlc entitlements in PSN Store with multiple service labels.",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:DLC"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/dlc/steam/sync": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Sync steam dlc.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=NAMESPACE:{namespace}:USER:{userId}:DLC, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "syncSteamDLC",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SteamDLCSyncRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39124\u003c/td\u003e\u003ctd\u003eIAP request platform [{platformId}] user id is not linked with current user\u003c/td\u003e\u003c/tr\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Sync steam dlc.",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:DLC"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/dlc/xbl/sync": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Sync Xbox inventory\u0026#39;s dlc items.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=NAMESPACE:{namespace}:USER:{userId}:DLC, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "syncXboxDLC",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XblDLCSyncRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39125\u003c/td\u003e\u003ctd\u003eInvalid platform [{platformId}] user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39126\u003c/td\u003e\u003ctd\u003eUser id [{}] in namespace [{}] doesn't link platform [{}]\u003c/td\u003e\u003c/tr\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Sync Xbox dlc items.",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:DLC"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/entitlements": {
      "get": {
        "description": "Query user entitlements for a specific user.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: entitlement list\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicQueryUserEntitlements",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "entitlementName",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "features",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemId",
            "required": false,
            "type": "array"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query user entitlements",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/byAppId": {
      "get": {
        "description": "Get user app entitlement by appId.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetUserAppEntitlementByAppId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppEntitlementInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31142\u003c/td\u003e\u003ctd\u003eEntitlement with appId [{appId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user app entitlement by appId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/byAppType": {
      "get": {
        "description": "Query app entitlements by appType.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: app entitlement pagination\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicQueryUserEntitlementsByAppType",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": true,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppEntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query app entitlements by appType",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/byItemId": {
      "get": {
        "description": "Get user entitlement by itemId.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetUserEntitlementByItemId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31144\u003c/td\u003e\u003ctd\u003eEntitlement with itemId [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement by itemId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/bySku": {
      "get": {
        "description": "Get user entitlement by sku.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetUserEntitlementBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31143\u003c/td\u003e\u003ctd\u003eEntitlement with sku [{sku}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement by sku",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/ownership/any": {
      "get": {
        "description": "Exists any user active entitlement of specified itemIds, skus and appIds\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicExistsAnyUserActiveEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "appIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "skus",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Exists any user active entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/ownership/byAppId": {
      "get": {
        "description": "Get user app entitlement ownership by appId.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetUserAppEntitlementOwnershipByAppId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user app entitlement ownership by appId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/ownership/byItemId": {
      "get": {
        "description": "Get user entitlement ownership by itemId.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetUserEntitlementOwnershipByItemId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimedOwnership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement ownership by itemId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/ownership/byItemIds": {
      "get": {
        "description": "Get user entitlement ownership by itemIds.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetUserEntitlementOwnershipByItemIds",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "ids",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/EntitlementOwnership"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement ownership by itemIds",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/ownership/bySku": {
      "get": {
        "description": "Get user entitlement ownership by sku.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetUserEntitlementOwnershipBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimedOwnership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement ownership by sku",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}": {
      "get": {
        "description": "Get user entitlement.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: entitlement\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31141\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/decrement": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Consume user entitlement. If the entitlement useCount is 0, the status will be CONSUMED. Client should pass item id in options if entitlement clazz is OPTIONBOX\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: consumed entitlement\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicConsumeUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitlementDecrement"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementDecrementResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31121\u003c/td\u003e\u003ctd\u003eOptionBox entitlement [{entitlementId}] use count is not 1\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31122\u003c/td\u003e\u003ctd\u003eOptionBox entitlement [{entitlementId}] options size is not 1\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31123\u003c/td\u003e\u003ctd\u003eUnable to acquire box item, box item [{itemId}] expired\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31141\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31145\u003c/td\u003e\u003ctd\u003eOption [{option}] doesn't exist in OptionBox entitlement [{entitlementId}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31171\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] already revoked\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31172\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] not active\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31173\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] is not consumable\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31174\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] already consumed\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31176\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] use count is insufficient\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31178\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] out of time range\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31180\u003c/td\u003e\u003ctd\u003eDuplicate request id: [{requestId}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Consume user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/sell": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Sell user entitlement. If the entitlement is consumable, useCount is 0, the status will be CONSUMED. If the entitlement is durable, the status will be SOLD. Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: entitlement\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicSellUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitlementSoldRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementSoldResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31141\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31171\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] already revoked\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31172\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] not active\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31174\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] already consumed\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31176\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] use count is insufficient\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31178\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] out of time range\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31180\u003c/td\u003e\u003ctd\u003eDuplicate request id: [{requestId}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31181\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] is not sellable\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31182\u003c/td\u003e\u003ctd\u003eEntitlement [{entitlementId}] already sold\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sell user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/fulfillment/code": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Redeem campaign code.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT\u0026#34;, action=1 (CREATED)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: fulfillment result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicRedeemCode",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FulfillCodeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38121\u003c/td\u003e\u003ctd\u003eDuplicate permanent item exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37142\u003c/td\u003e\u003ctd\u003eCode [{code}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37172\u003c/td\u003e\u003ctd\u003eCampaign [{campaignId}] is inactive in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37173\u003c/td\u003e\u003ctd\u003eCode [{code}] is inactive in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37174\u003c/td\u003e\u003ctd\u003eExceeded max redeem count per code [{maxCount}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37175\u003c/td\u003e\u003ctd\u003eExceeded max redeem count per code per user [{maxCount}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37177\u003c/td\u003e\u003ctd\u003eCode redemption not started\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e37178\u003c/td\u003e\u003ctd\u003eCode redemption already ended\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31177\u003c/td\u003e\u003ctd\u003ePermanent item already owned\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []"
            ],
            "authorization": []
          }
        ],
        "summary": "Redeem campaign code",
        "tags": [
          "Fulfillment"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/iap/apple/receipt": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Verify apple iap receipt and fulfill item.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicFulfillAppleIAPItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AppleIAPReceipt"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Fulfill item successfully"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39121\u003c/td\u003e\u003ctd\u003eApple iap receipt verify failed with status code [{statusCode}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38121\u003c/td\u003e\u003ctd\u003eDuplicate permanent item exists\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38122\u003c/td\u003e\u003ctd\u003eSubscription endDate required\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39141\u003c/td\u003e\u003ctd\u003eApple iap receipt of transaction [{transactionId}] for productId [{}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39171\u003c/td\u003e\u003ctd\u003eThe bundle id in namespace [{namespace}] expect [{expected}] but was [{actual}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Fulfill apple iap item.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/iap/epicgames/sync": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Sync epic games inventory\u0026#39;s items.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "syncEpicGamesInventory",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EpicGamesReconcileRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/EpicGamesReconcileResult"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39125\u003c/td\u003e\u003ctd\u003eInvalid platform [{platformId}] user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39126\u003c/td\u003e\u003ctd\u003eUser id [{}] in namespace [{}] doesn't link platform [{}]\u003c/td\u003e\u003c/tr\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync epic games inventory.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/iap/google/receipt": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Verify google iap receipt and fulfill item.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicFulfillGoogleIAPItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoogleIAPReceipt"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/GoogleReceiptResolveResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39122\u003c/td\u003e\u003ctd\u003eGoogle iap receipt is invalid with status code [{statusCode}] and error message [{message}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38121\u003c/td\u003e\u003ctd\u003eDuplicate permanent item exists\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38122\u003c/td\u003e\u003ctd\u003eSubscription endDate required\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39172\u003c/td\u003e\u003ctd\u003eThe order id in namespace [{namespace}] expect [{expected}] but was [{actual}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39173\u003c/td\u003e\u003ctd\u003eThe purchase status of google play order [{orderId}] in namespace [{namespace}] expect [{expected}] but was [{actual}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39174\u003c/td\u003e\u003ctd\u003eThe google iap purchase time of order [{orderId}] in namespace [{namespace}] expect [{expected}] but was [{actual}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Fulfill google iap item.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/iap/oculus/sync": {
      "put": {
        "description": "Sync Oculus entitlements.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "syncOculusConsumableEntitlements",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/OculusReconcileResult"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39126\u003c/td\u003e\u003ctd\u003eUser id [{}] in namespace [{}] doesn't link platform [{}]\u003c/td\u003e\u003c/tr\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync Oculus entitlements.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/iap/psn/sync": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Synchronize with entitlements in PSN Store.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: result of synchronization\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicReconcilePlayStationStore",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlayStationReconcileRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/PlayStationReconcileResult"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39125\u003c/td\u003e\u003ctd\u003eInvalid platform [{platformId}] user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39126\u003c/td\u003e\u003ctd\u003eUser id [{}] in namespace [{}] doesn't link platform [{}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39127\u003c/td\u003e\u003ctd\u003eInvalid service label [{serviceLabel}]\u003c/td\u003e\u003c/tr\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Synchronize with entitlements in PSN Store.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/iap/psn/sync/multiServiceLabels": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Synchronize with entitlements in PSN Store with multiple service labels.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: result of synchronization\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicReconcilePlayStationStoreWithMultipleServiceLabels",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlayStationMultiServiceLabelsReconcileRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/PlayStationReconcileResult"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39125\u003c/td\u003e\u003ctd\u003eInvalid platform [{platformId}] user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39126\u003c/td\u003e\u003ctd\u003eUser id [{}] in namespace [{}] doesn't link platform [{}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39127\u003c/td\u003e\u003ctd\u003eInvalid service label [{serviceLabel}]\u003c/td\u003e\u003c/tr\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Synchronize with entitlements in PSN Store with multiple service labels.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/iap/steam/sync": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Sync steam inventory\u0026#39;s items.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "syncSteamInventory",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SteamSyncRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39123\u003c/td\u003e\u003ctd\u003eIAP request is not in valid application\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39124\u003c/td\u003e\u003ctd\u003eIAP request platform [{platformId}] user id is not linked with current user\u003c/td\u003e\u003c/tr\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync steam inventory.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/iap/twitch/sync": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Sync twitch drops entitlements.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "syncTwitchDropsEntitlement_1",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TwitchSyncRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Sync Successful"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39125\u003c/td\u003e\u003ctd\u003eInvalid platform [{platformId}] user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39126\u003c/td\u003e\u003ctd\u003eUser id [{}] in namespace [{}] doesn't link platform [{}]\u003c/td\u003e\u003c/tr\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync twitch drops entitlements.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/iap/xbl/sync": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Sync Xbox inventory\u0026#39;s items.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:IAP\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: \u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "syncXboxInventory",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XblReconcileRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/XblReconcileResult"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39125\u003c/td\u003e\u003ctd\u003eInvalid platform [{platformId}] user token\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e39126\u003c/td\u003e\u003ctd\u003eUser id [{}] in namespace [{}] doesn't link platform [{}]\u003c/td\u003e\u003c/tr\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync Xbox inventory.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/orders": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Query user orders.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: get order\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicQueryUserOrders",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "enum": [
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "CHARGED",
              "CLOSED",
              "DELETED",
              "FULFILLED",
              "FULFILL_FAILED",
              "INIT",
              "REFUNDED",
              "REFUNDING",
              "REFUND_FAILED"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query user orders",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create an order. The result contains the checkout link and payment token. User with permission SANDBOX will create sandbox order that not real paid for xsolla/alipay and not validate price for wxpay.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission(user with this permission will create sandbox order)\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: created order\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;h2\u0026gt;Restrictions for ext field\u0026lt;/h2\u0026gt;\n1. Cannot use \u0026lt;b\u0026gt;\u0026#34;.\u0026#34;\u0026lt;/b\u0026gt; as the key name\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;data.2\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;\n2. Cannot use \u0026lt;b\u0026gt;\u0026#34;$\u0026#34;\u0026lt;/b\u0026gt; as the prefix in key names\n-\t\u0026lt;pre\u0026gt;{ \u0026#34;$data\u0026#34;: \u0026#34;value\u0026#34; }\u0026lt;/pre\u0026gt;",
        "operationId": "publicCreateUserOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32121\u003c/td\u003e\u003ctd\u003eOrder price mismatch\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32122\u003c/td\u003e\u003ctd\u003eItem type [{itemType}] does not support\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32123\u003c/td\u003e\u003ctd\u003eItem is not purchasable\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32125\u003c/td\u003e\u003ctd\u003eThe user does not meet the purchase conditions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32126\u003c/td\u003e\u003ctd\u003eSection ID is required for placing this order\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35124\u003c/td\u003e\u003ctd\u003eWallet [{currencyCode}] has insufficient balance\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38121\u003c/td\u003e\u003ctd\u003eDuplicate permanent item exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20016\u003c/td\u003e\u003ctd\u003eaction is banned\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e36141\u003c/td\u003e\u003ctd\u003eCurrency [{currencyCode}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e49147\u003c/td\u003e\u003ctd\u003ePublished season does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32175\u003c/td\u003e\u003ctd\u003eExceed item [{itemId}] max count [{maxCount}] per user\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32176\u003c/td\u003e\u003ctd\u003eExceed item [{itemId}] max count [{maxCount}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e31177\u003c/td\u003e\u003ctd\u003ePermanent item already owned\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32178\u003c/td\u003e\u003ctd\u003eUser [{userId}] already owned all durable items in flexible bundle [{bundleId}], namespace: [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e49183\u003c/td\u003e\u003ctd\u003ePass item does not match published season pass\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e49184\u003c/td\u003e\u003ctd\u003eTier item does not match published season tier\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e49185\u003c/td\u003e\u003ctd\u003eSeason has not started\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e49186\u003c/td\u003e\u003ctd\u003ePass already owned\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e49187\u003c/td\u003e\u003ctd\u003eExceed max tier count\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ORDER [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create an order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get user order.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: get order\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetUserOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32141\u003c/td\u003e\u003ctd\u003eOrder [{orderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}/cancel": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Cancel user order.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: cancelled order\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicCancelUserOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32141\u003c/td\u003e\u003ctd\u003eOrder [{orderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32177\u003c/td\u003e\u003ctd\u003eOrder [{orderNo}] is not cancelable\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Cancel user order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}/history": {
      "get": {
        "description": "Get user order histories.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: get order history\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetUserOrderHistories",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/OrderHistoryInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user order histories",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}/receipt.pdf": {
      "get": {
        "description": "Download user order receipt by orderNo.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:ORDER\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: order receipt pdf\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicDownloadUserOrderReceipt",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/pdf"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32141\u003c/td\u003e\u003ctd\u003eOrder [{orderNo}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e32173\u003c/td\u003e\u003ctd\u003eReceipt of order [{orderNo}] is not downloadable\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Download user order receipt",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/payment/accounts": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get payment accounts.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Payment account list\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetPaymentAccounts",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/PaymentAccount"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get payment accounts",
        "tags": [
          "PaymentAccount"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/payment/accounts/{type}/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete payment account.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;:\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicDeletePaymentAccount",
        "parameters": [
          {
            "description": "payment account id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "payment account type",
            "enum": [
              "card",
              "paypal"
            ],
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "delete a payment account successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete payment account",
        "tags": [
          "PaymentAccount"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/sections": {
      "get": {
        "description": "This API is used to list active section contents.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=NAMESPACE:{namespace}:USER:{userId}:STORE, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store sections)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1(CREATE) (user with this permission can view draft store sections)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: active section contents\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicListActiveSections",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "viewId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/SectionInfo"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List active section contents",
        "tags": [
          "Section"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:STORE"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/subscriptions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Query user subscriptions.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: paginated subscription\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicQueryUserSubscriptions",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "CHARGED",
              "CHARGE_FAILED",
              "NEVER",
              "RECURRING_CHARGING",
              "SETUP"
            ],
            "in": "query",
            "name": "chargeStatus",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "sku",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "ACTIVE",
              "CANCELLED",
              "EXPIRED",
              "INIT"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "PLATFORM",
              "USER"
            ],
            "in": "query",
            "name": "subscribedBy",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query user subscriptions",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Subscribe a subscription. Support both real and virtual payment. Need go through payment flow using the paymentOrderNo if paymentFlowRequired true.\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;ACTIVE USER subscription can\u0026#39;t do subscribe again.\u0026lt;/b\u0026gt;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;The next billing date will be X(default 4) hours before the current period ends if correctly subscribed.\u0026lt;/b\u0026gt;\u0026lt;br\u0026gt;User with permission SANDBOX will create sandbox subscription that not real paid.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission(user with this permission will create sandbox subscription)\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: created subscription\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicSubscribeSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SubscribeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "subscribe request processed"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40121\u003c/td\u003e\u003ctd\u003eItem type [{itemType}] does not support\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40122\u003c/td\u003e\u003ctd\u003eSubscription already been subscribed by user\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40123\u003c/td\u003e\u003ctd\u003eCurrency [{currencyCode}] does not support\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35124\u003c/td\u003e\u003ctd\u003eWallet [{currencyCode}] has insufficient balance\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20016\u003c/td\u003e\u003ctd\u003eaction is banned\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e36141\u003c/td\u003e\u003ctd\u003eCurrency [{currencyCode}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40172\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] is charging, waiting for payment notification\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40173\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] current currency [{currentCurrency}] not match request currency [{requestCurrency}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Subscribe a subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/subscriptions/subscribable/byItemId": {
      "get": {
        "description": "Check user subscription subscribable by itemId, ACTIVE USER subscription can\u0026#39;t do subscribe again.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: subscribable info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicCheckUserSubscriptionSubscribableByItemId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subscribable"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Check user subscription subscribable",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get user subscription.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: subscription\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetUserSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40141\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}/billingAccount": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Request to change a subscription billing account, this will guide user to payment station. The actual change will happen at the 0 payment notification successfully handled.\u0026lt;br\u0026gt;Only ACTIVE USER subscription with real currency billing account can be changed.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: updated subscription\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicChangeSubscriptionBillingAccount",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40125\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] has no real currency billing account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40141\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40171\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] is not active\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40172\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] is charging, waiting for payment notification\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Request to change a subscription billing account",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}/cancel": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Cancel a subscription, only ACTIVE subscription can be cancelled. \u0026lt;b\u0026gt;Ensure successfully cancel, recommend at least 1 day before current period ends, otherwise it may be charging or charged.\u0026lt;/b\u0026gt;\u0026lt;br\u0026gt;Set immediate true, the subscription will be terminated immediately, otherwise till the end of current billing cycle.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: cancelled subscription\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicCancelSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CancelRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40141\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] does not exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40171\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] is not active\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e40172\u003c/td\u003e\u003ctd\u003eSubscription [{subscriptionId}] is charging, waiting for payment notification\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Cancel a subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}/history": {
      "get": {
        "description": "Get user subscription billing histories.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: paginated subscription history\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetUserSubscriptionBillingHistories",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "excludeFree",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BillingHistoryPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user subscription billing histories",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/views": {
      "get": {
        "description": "This API is used to get all views.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=NAMESPACE:{namespace}:USER:{userId}:STORE, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;PREVIEW\u0026#34;, action=1(CREATE) (user with this permission can view draft store views)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Optional permission\u0026lt;/i\u0026gt;: resource=\u0026#34;SANDBOX\u0026#34;, action=1(CREATE) (user with this permission can view draft store views)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: all views\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicListViews",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/ViewInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get all views",
        "tags": [
          "View"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:STORE"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "get a wallet by currency code.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:WALLET\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: wallet info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicGetWallet",
        "parameters": [
          {
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlatformWallet"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a wallet by currency code",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    },
    "/platform/public/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/transactions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List wallet transactions by currency code ordered by create time desc.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;NAMESPACE:{namespace}:USER:{userId}:WALLET\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: currency transaction info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "publicListUserWalletTransactions",
        "parameters": [
          {
            "description": "currencyCode",
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletTransactionPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List wallet transactions by currency code",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    },
    "/platform/v2/admin/namespaces/{namespace}/items/byCriteria": {
      "get": {
        "description": "This API is used to query items by criteria within a store.\u0026lt;p\u0026gt;The behaviour for itemStatus query parameter:\u0026lt;li\u0026gt;TRUE: Show only ACTIVE items\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;FALSE: Show only INACTIVE items\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Not provided: show both ACTIVE and INACTIVE items\u0026lt;/li\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:ITEM\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: the list of items\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "queryItems_1",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": false,
            "type": "string"
          },
          {
            "description": "allowed format: \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z , filter date include(purchaseAt, expireAt)",
            "in": "query",
            "name": "availableDate",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "baseAppId",
            "required": false,
            "type": "string"
          },
          {
            "description": "category path",
            "in": "query",
            "name": "categoryPath",
            "required": false,
            "type": "string"
          },
          {
            "description": "features, separate multiple value by commas parameter",
            "in": "query",
            "name": "features",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "default is false, only available when search by category path, it will return all of the items(includes sub category path) under this category path",
            "in": "query",
            "name": "includeSubCategoryItem",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "itemName, fuzzy matching",
            "in": "query",
            "name": "itemName",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "in": "query",
            "name": "itemStatus",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "BUNDLE",
              "CODE",
              "COINS",
              "EXTENSION",
              "INGAMEITEM",
              "LOOTBOX",
              "MEDIA",
              "OPTIONBOX",
              "SEASON",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "itemType",
            "required": false,
            "type": "string"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "exist in region",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sectionExclusive",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": [
              "name:asc",
              "displayOrder:asc"
            ],
            "description": "default is name:asc,displayOrder:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc. Make sure to always use more than one sort if the first sort is not an unique valuefor example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "in": "query",
            "items": {
              "enum": [
                "name",
                "name:asc",
                "name:desc",
                "createdAt",
                "createdAt:asc",
                "createdAt:desc",
                "updatedAt",
                "updatedAt:asc",
                "updatedAt:desc",
                "displayOrder",
                "displayOrder:asc",
                "displayOrder:desc"
              ],
              "type": "string"
            },
            "name": "sortBy",
            "required": false,
            "type": "array",
            "uniqueItems": true
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "tags, separate multiple value by commas parameter",
            "in": "query",
            "name": "tags",
            "required": false,
            "type": "string"
          },
          {
            "description": "targetNamespace",
            "in": "query",
            "name": "targetNamespace",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "true means include total count of items in response body",
            "in": "query",
            "name": "withTotal",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemPagingResult"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30142\u003c/td\u003e\u003ctd\u003ePublished store does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query items by criteria",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    },
    "/platform/v2/admin/namespaces/{namespace}/stores/import": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "This API is used to import a store.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=4 (UPDATE)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "importStore_1",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          },
          {
            "description": "default we will use published store id,and will create published store if it dose not exist",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "default strict mode is true, if strict mode is false, will not do any validation.",
            "in": "query",
            "name": "strictMode",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ImportStoreResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30121\u003c/td\u003e\u003ctd\u003eStore data is invalid\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30122\u003c/td\u003e\u003ctd\u003eStore's meta mismatch\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Import a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/v2/admin/namespaces/{namespace}/stores/{storeId}/export": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to export a whole or partial store.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:STORE\u0026#34;, action=2 (READ)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "exportStore_1",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExportStoreRequest"
            }
          }
        ],
        "produces": [
          "application/zip"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30141\u003c/td\u003e\u003ctd\u003eStore [{storeId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Export a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    },
    "/platform/v2/admin/namespaces/{namespace}/users/{userId}/fulfillment/rewards": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;b\u0026gt;[SERVICE COMMUNICATION ONLY]\u0026lt;/b\u0026gt; Fulfill rewards.\u0026lt;br\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT\u0026#34;, action=1 (CREATED)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: fulfillment result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "fulfillRewardsV2",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RewardsRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e35123\u003c/td\u003e\u003ctd\u003eWallet [{walletId}] is inactive\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e38121\u003c/td\u003e\u003ctd\u003eDuplicate permanent item exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e30341\u003c/td\u003e\u003ctd\u003eItem [{itemId}] does not exist in namespace [{namespace}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20006\u003c/td\u003e\u003ctd\u003eoptimistic lock\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []"
            ],
            "authorization": []
          }
        ],
        "summary": "Fulfill rewards",
        "tags": [
          "Fulfillment"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT"
        }
      }
    }
  },
  "definitions": {
    "AchievementInfo": {
      "properties": {
        "id": {
          "description": "achievement id",
          "type": "string"
        },
        "name": {
          "description": "achievement display name",
          "type": "string"
        },
        "progressState": {
          "description": "achievement progress",
          "type": "string"
        },
        "progression": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "achievement progression",
          "type": "object"
        },
        "serviceConfigId": {
          "description": "service config id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Action": {
      "properties": {
        "operations": {
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "FAILED",
            "INIT",
            "SKIPPED",
            "SUCCESS"
          ],
          "type": "string"
        },
        "statusReason": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ActionRequest": {
      "description": "Represents the request to commit a chained trade action.",
      "properties": {
        "operations": {
          "example": "[\n    {\n        \"type\": \"DEBIT_WALLET\",\n        \"debitPayload\": {\n            \"currencyCode\": \"string\",\n            \"walletPlatform\": \"Other\",\n            \"count\": 1\n        }\n    },\n    {\n        \"type\": \"CREDIT_WALLET\",\n        \"creditPayload\": {\n            \"currencyCode\": \"string\",\n            \"expireAt\": null,\n            \"balanceOrigin\": \"System\",\n            \"count\": 1\n        }\n    },\n    {\n        \"type\": \"FULFILL_ITEM\",\n        \"fulFillItemPayload\": {\n            \"itemIdentityType\": \"ITEM_ID\",\n            \"itemIdentity\": \"string\",\n            \"count\": 1\n        }\n    },\n    {\n        \"type\": \"REVOKE_ENTITLEMENT\",\n        \"revokeEntitlementPayload\": {\n            \"entitlementId\": \"string\",\n            \"count\": 1\n        }\n    }\n]\n",
          "items": {
            "$ref": "#/definitions/OperationRequest"
          },
          "type": "array"
        },
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AdditionalData": {
      "properties": {
        "cardSummary": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AdditionalDataEntitlement": {
      "properties": {
        "clientTransaction": {
          "items": {
            "$ref": "#/definitions/ClientTransaction"
          },
          "type": "array"
        },
        "entitlementId": {
          "type": "string"
        },
        "usageCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AdminOrderCreate": {
      "properties": {
        "currencyCode": {
          "description": "currency code, should match currency code in item region data",
          "type": "string"
        },
        "currencyNamespace": {
          "description": "currency namespace, if options.skipPriceValidation is true, then this is required. If current namespace is publisher namespace, then currency namespace must be publisher namespace; if current is game namespace, currency namespace must be the same game namespace or publisher namespace",
          "type": "string"
        },
        "discountedPrice": {
          "description": "Discounted price of order, this should match (item_discounted_price * quantity) ifitem discounted price is available, otherwise it should equal to (item_price * quantity) if item is not flexible bundle, if item is flexible bundle, item discounted price should equal estimate discounted price.",
          "format": "int32",
          "type": "integer"
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "extra field to store external order information",
          "type": "object"
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "language": {
          "description": "language value from language tag, allowed format: en, en-US.\u003cp\u003eSupported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)\u003c/p\u003e",
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/OrderCreationOptions",
          "description": "Creation options"
        },
        "platform": {
          "description": "platform",
          "enum": [
            "Epic",
            "GooglePlay",
            "IOS",
            "Nintendo",
            "Oculus",
            "Other",
            "Playstation",
            "Steam",
            "Xbox"
          ],
          "type": "string"
        },
        "price": {
          "description": "Price of order, should match (item_price * quantity) if item is not flexible bundle, should use flexible estimate price if item is flexible bundle",
          "format": "int32",
          "type": "integer"
        },
        "quantity": {
          "description": "Quantity of item, min is 1, and will default use 1 and ignore this quantity field if item is flexible bundle",
          "format": "int32",
          "type": "integer"
        },
        "region": {
          "description": "country value from ISO countries",
          "type": "string"
        },
        "returnUrl": {
          "description": "custom return url for real payment, user will be redirected to this url once payment is finished",
          "type": "string"
        },
        "sandbox": {
          "description": "sandbox",
          "type": "boolean",
          "x-omitempty": false
        },
        "sectionId": {
          "description": "section Id, required if order consists of section item",
          "type": "string"
        }
      },
      "required": [
        "currencyCode",
        "discountedPrice",
        "itemId",
        "quantity",
        "region"
      ],
      "type": "object"
    },
    "AdyenConfig": {
      "description": "A DTO object for updating adyen config.",
      "properties": {
        "allowedPaymentMethods": {
          "description": "specifying the payment methods that are allowed to appear with the paymentMethod.type. paymentMethod.type of each payment method link: https://docs.adyen.com/developers/payment-methods",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "apiKey": {
          "description": "api key, max length is 4096",
          "type": "string"
        },
        "authoriseAsCapture": {
          "description": "authorise as capture means no separated capture event",
          "type": "boolean",
          "x-omitempty": false
        },
        "blockedPaymentMethods": {
          "description": "specifying the payment methods that are blocked with the paymentMethod.type. paymentMethod.type of each payment method link: https://docs.adyen.com/developers/payment-methods",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clientKey": {
          "description": "client key, max length is 4096",
          "type": "string"
        },
        "dropInSettings": {
          "description": "Adyen drop in settings json string",
          "type": "string"
        },
        "liveEndpointUrlPrefix": {
          "description": "Provide the unique live url prefix from the \"API URLs and Response\" menu in the Adyen Customer Area. Under sandbox env, please input random words.",
          "type": "string"
        },
        "merchantAccount": {
          "description": "merchant account, max length is 255",
          "type": "string"
        },
        "notificationHmacKey": {
          "description": "notification hmac key, max length is 4096",
          "type": "string"
        },
        "notificationPassword": {
          "description": "notification password, max length is 255",
          "type": "string"
        },
        "notificationUsername": {
          "description": "notification username, max length is 255",
          "type": "string"
        },
        "returnUrl": {
          "description": "return url, max length is 2000",
          "type": "string"
        },
        "settings": {
          "description": "Adyen settings json string(Deprecated, please use dropInSettings field) adyen settings docs: https://docs.adyen.com/checkout/web-sdk/customization/settings/",
          "example": "{\"autoFocusOnLoad\":true,\"consolidateCards\":true,\"initialPMCount\":5,\"translations\":{\"deliveryAddress\":{\"en_US\":\"Shipping Address\",\"nl_NL\":\"Verzendadres\"}},\"paymentMethods\":{\"card\":{\"sfStyles\":{\"base\":{\"color\":\"#000\",\"fontSize\":\"14px\",\"lineHeight\":\"14px\",\"fontSmoothing\":\"antialiased\"},\"error\":{\"color\":\"red\"},\"placeholder\":{\"color\":\"#d8d8d8\"},\"validated\":{\"color\":\"green\"}},\"separateDateInputs\":false,\"placeholders\":{\"encryptedCardNumber\":\"4111 1111 1111 1111\",\"encryptedExpiryDate\":\"08/18\",\"encryptedSecurityCode\":\"737\"}}}}",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AliPayConfig": {
      "description": "A DTO object for updating alipay config.",
      "properties": {
        "appId": {
          "description": "appId",
          "type": "string"
        },
        "privateKey": {
          "description": "privateKey",
          "type": "string"
        },
        "publicKey": {
          "description": "publicKey",
          "type": "string"
        },
        "returnUrl": {
          "description": "returnUrl",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AppConfig": {
      "properties": {
        "appName": {
          "description": "extend app name",
          "type": "string"
        }
      },
      "required": [
        "appName"
      ],
      "type": "object"
    },
    "AppEntitlementInfo": {
      "properties": {
        "appId": {
          "description": "appId for APP type entitlement",
          "type": "string"
        },
        "appType": {
          "description": "appType for APP type entitlement",
          "enum": [
            "DEMO",
            "DLC",
            "GAME",
            "SOFTWARE"
          ],
          "type": "string"
        },
        "endDate": {
          "description": "entitlement end date",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "grantedAt": {
          "description": "entitlement granted at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "itemSnapshot": {
          "$ref": "#/definitions/ItemSnapshot",
          "description": "itemSnapshot"
        },
        "namespace": {
          "description": "entitlement namespace",
          "type": "string"
        },
        "sku": {
          "description": "unique sku no for item",
          "type": "string"
        },
        "startDate": {
          "description": "entitlement start date",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "description": "entitlement status",
          "enum": [
            "ACTIVE",
            "CONSUMED",
            "INACTIVE",
            "REVOKED",
            "SOLD"
          ],
          "type": "string"
        },
        "storeId": {
          "description": "item store id, null if published store",
          "type": "string"
        },
        "userId": {
          "description": "entitlement owner",
          "type": "string"
        }
      },
      "required": [
        "grantedAt",
        "namespace",
        "status",
        "userId"
      ],
      "type": "object"
    },
    "AppEntitlementPagingSlicedResult": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/AppEntitlementInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "type": "object"
    },
    "AppInfo": {
      "properties": {
        "announcement": {
          "description": "announcement",
          "type": "string"
        },
        "carousel": {
          "description": "carousel",
          "items": {
            "$ref": "#/definitions/Slide"
          },
          "type": "array"
        },
        "developer": {
          "description": "developer",
          "type": "string"
        },
        "forumUrl": {
          "description": "forum url",
          "type": "string"
        },
        "genres": {
          "description": "genres",
          "items": {
            "enum": [
              "Action",
              "Adventure",
              "Casual",
              "FreeToPlay",
              "Indie",
              "MassivelyMultiplayer",
              "RPG",
              "Racing",
              "Simulation",
              "Sports",
              "Strategy"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "language": {
          "description": "language",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "platformRequirements": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/Requirement"
            },
            "type": "array"
          },
          "description": "platform requirements",
          "type": "object"
        },
        "platforms": {
          "description": "supported platforms",
          "items": {
            "enum": [
              "Android",
              "IOS",
              "Linux",
              "MacOS",
              "Windows"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "players": {
          "description": "players",
          "items": {
            "enum": [
              "Coop",
              "CrossPlatformMulti",
              "LocalCoop",
              "MMO",
              "Multi",
              "Single"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "primaryGenre": {
          "description": "primary genre",
          "enum": [
            "Action",
            "Adventure",
            "Casual",
            "FreeToPlay",
            "Indie",
            "MassivelyMultiplayer",
            "RPG",
            "Racing",
            "Simulation",
            "Sports",
            "Strategy"
          ],
          "type": "string"
        },
        "publisher": {
          "description": "publisher",
          "type": "string"
        },
        "region": {
          "description": "region",
          "type": "string"
        },
        "releaseDate": {
          "description": "release date",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "slogan": {
          "description": "slogan",
          "type": "string"
        },
        "websiteUrl": {
          "description": "website url",
          "type": "string"
        }
      },
      "required": [
        "itemId",
        "namespace"
      ],
      "type": "object"
    },
    "AppLocalization": {
      "properties": {
        "announcement": {
          "description": "announcement",
          "type": "string"
        },
        "slogan": {
          "description": "slogan",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AppUpdate": {
      "properties": {
        "carousel": {
          "description": "carousel",
          "items": {
            "$ref": "#/definitions/Slide"
          },
          "type": "array"
        },
        "developer": {
          "description": "developer, it should starts and ends with alphabets uppercase/lowercase or numeric, allowed separators, these symbols ',.-, and white-space, max length is 48",
          "type": "string"
        },
        "forumUrl": {
          "description": "forum url, max length 2000",
          "type": "string"
        },
        "genres": {
          "description": "genres",
          "items": {
            "enum": [
              "Action",
              "Adventure",
              "Casual",
              "FreeToPlay",
              "Indie",
              "MassivelyMultiplayer",
              "RPG",
              "Racing",
              "Simulation",
              "Sports",
              "Strategy"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "localizations": {
          "additionalProperties": {
            "$ref": "#/definitions/AppLocalization"
          },
          "description": "localizations",
          "type": "object"
        },
        "platformRequirements": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/Requirement"
            },
            "type": "array"
          },
          "description": "platform requirements",
          "type": "object"
        },
        "platforms": {
          "description": "supported platforms",
          "items": {
            "enum": [
              "Android",
              "IOS",
              "Linux",
              "MacOS",
              "Windows"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "players": {
          "description": "players",
          "items": {
            "enum": [
              "Coop",
              "CrossPlatformMulti",
              "LocalCoop",
              "MMO",
              "Multi",
              "Single"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "primaryGenre": {
          "description": "primary genre",
          "enum": [
            "Action",
            "Adventure",
            "Casual",
            "FreeToPlay",
            "Indie",
            "MassivelyMultiplayer",
            "RPG",
            "Racing",
            "Simulation",
            "Sports",
            "Strategy"
          ],
          "type": "string"
        },
        "publisher": {
          "description": "publisher, it should starts and ends with alphabets uppercase/lowercase or numeric, allowed separators, these symbols ',.-, and white-space, max length is 48",
          "type": "string"
        },
        "releaseDate": {
          "description": "release date in format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "websiteUrl": {
          "description": "website url, max length is 2000",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AppleIAPConfigInfo": {
      "properties": {
        "bundleId": {
          "description": "bundleId",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "password": {
          "description": "password",
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "AppleIAPConfigRequest": {
      "properties": {
        "bundleId": {
          "description": "bundleId",
          "type": "string"
        },
        "password": {
          "description": "password",
          "type": "string"
        }
      },
      "required": [
        "bundleId"
      ],
      "type": "object"
    },
    "AppleIAPReceipt": {
      "properties": {
        "excludeOldTransactions": {
          "description": "Only used for iOS7 style app receipts that contain auto-renewable or non-renewing subscriptions. If value is true, response includes only the latest renewal transaction for any subscriptions.",
          "type": "boolean",
          "x-omitempty": false
        },
        "language": {
          "description": "language value from language tag, allowed format: en, en-US.\u003cp\u003eSupported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)\u003c/p\u003e",
          "pattern": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$",
          "type": "string"
        },
        "productId": {
          "description": "The product identifier of the item that was purchased.",
          "type": "string"
        },
        "receiptData": {
          "description": "The base64 encoded receipt data.",
          "type": "string"
        },
        "region": {
          "description": "country value from ISO countries",
          "type": "string"
        },
        "transactionId": {
          "description": "The transaction identifier of the item that was purchased.",
          "type": "string"
        }
      },
      "required": [
        "productId",
        "receiptData",
        "transactionId"
      ],
      "type": "object"
    },
    "AvailableComparison": {
      "description": "available comparison object",
      "properties": {
        "comparison": {
          "description": "available comparison",
          "enum": [
            "excludes",
            "includes",
            "is",
            "isGreaterThan",
            "isGreaterThanOrEqual",
            "isLessThan",
            "isLessThanOrEqual",
            "isNot"
          ],
          "type": "string"
        },
        "text": {
          "description": "comparison text",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AvailablePredicate": {
      "description": "available predicate object",
      "properties": {
        "availableComparisons": {
          "description": "available comparison list",
          "items": {
            "$ref": "#/definitions/AvailableComparison"
          },
          "type": "array"
        },
        "predicateType": {
          "description": "available predicate type",
          "enum": [
            "EntitlementPredicate",
            "SeasonPassPredicate",
            "SeasonTierPredicate"
          ],
          "type": "string"
        },
        "showAnyOf": {
          "description": "whether show any of on config page",
          "type": "boolean",
          "x-omitempty": false
        },
        "valueType": {
          "description": "predicate value type",
          "enum": [
            "List",
            "Number",
            "String"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "AvailablePrice": {
      "properties": {
        "currencyCode": {
          "description": "currency code",
          "type": "string"
        },
        "currencyNamespace": {
          "description": "currency namespace",
          "type": "string"
        },
        "discountedPrice": {
          "description": "current available discounted price, only calc total discounted price with un-owned durable items if it's a flexible bundle item.",
          "format": "int32",
          "type": "integer"
        },
        "price": {
          "description": "current full price, only calc total price with un-owned durable items if it's a flexible bundle item.",
          "format": "int32",
          "type": "integer"
        },
        "priceDetails": {
          "description": "only have value when item is flexible bundle",
          "items": {
            "$ref": "#/definitions/SubItemAvailablePrice"
          },
          "type": "array"
        }
      },
      "required": [
        "currencyCode",
        "currencyNamespace",
        "discountedPrice",
        "price"
      ],
      "type": "object"
    },
    "BaseCustomConfig": {
      "properties": {
        "connectionType": {
          "description": "connect type: INSECURE, TLS, default is INSECURE",
          "enum": [
            "INSECURE",
            "TLS"
          ],
          "type": "string"
        },
        "grpcServerAddress": {
          "description": "plugin grpc server address: \u003chost\u003e:\u003cport\u003e",
          "type": "string"
        }
      },
      "required": [
        "connectionType",
        "grpcServerAddress"
      ],
      "type": "object"
    },
    "BaseTLSConfig": {
      "properties": {
        "rootCertFileName": {
          "description": "root cert file name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BasicCategoryInfo": {
      "properties": {
        "categoryPath": {
          "description": "Category path",
          "type": "string"
        },
        "createdAt": {
          "description": "Category created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "description": "Category namespace",
          "type": "string"
        },
        "parentCategoryPath": {
          "description": "Parent category path",
          "type": "string"
        },
        "root": {
          "type": "boolean",
          "x-omitempty": false
        },
        "updatedAt": {
          "description": "Category updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "categoryPath",
        "createdAt",
        "namespace",
        "parentCategoryPath",
        "updatedAt"
      ],
      "type": "object"
    },
    "BasicItem": {
      "properties": {
        "appId": {
          "description": "App id, required when itemType is APP",
          "type": "string"
        },
        "appType": {
          "description": "App type, required when itemType is APP",
          "enum": [
            "DEMO",
            "DLC",
            "GAME",
            "SOFTWARE"
          ],
          "type": "string"
        },
        "baseAppId": {
          "description": "Base app id",
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "entitlementType": {
          "description": "Entitlement type",
          "enum": [
            "CONSUMABLE",
            "DURABLE"
          ],
          "type": "string"
        },
        "features": {
          "description": "Features",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "itemId": {
          "description": "Item id",
          "type": "string"
        },
        "itemType": {
          "description": "Item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "namespace": {
          "description": "Item namespace",
          "type": "string"
        },
        "seasonType": {
          "description": "Season type, required while itemType is SEASON",
          "enum": [
            "PASS",
            "TIER"
          ],
          "type": "string"
        },
        "sku": {
          "description": "Sku",
          "type": "string"
        },
        "status": {
          "description": "Item status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "tags": {
          "description": "Tags",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "useCount": {
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "createdAt",
        "entitlementType",
        "itemId",
        "itemType",
        "name",
        "namespace",
        "status",
        "updatedAt"
      ],
      "type": "object"
    },
    "BillingAccount": {
      "properties": {
        "additionalData": {
          "$ref": "#/definitions/AdditionalData",
          "description": "payment addition data"
        },
        "paymentMethod": {
          "description": "payment method",
          "type": "string"
        },
        "paymentProvider": {
          "description": "payment provider",
          "enum": [
            "ADYEN",
            "ALIPAY",
            "CHECKOUT",
            "PAYPAL",
            "STRIPE",
            "WALLET",
            "WXPAY",
            "XSOLLA"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "BillingHistoryInfo": {
      "properties": {
        "amount": {
          "description": "charge amount",
          "format": "int32",
          "type": "integer"
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccount",
          "description": "billing account"
        },
        "changeBillingAccount": {
          "description": "Is this payment for billing account change",
          "type": "boolean",
          "x-omitempty": false
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "currency": {
          "$ref": "#/definitions/CurrencySummary",
          "description": "currency"
        },
        "description": {
          "description": "subscription description",
          "type": "string"
        },
        "extTxId": {
          "description": "external transaction id",
          "type": "string"
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "paymentOrderNo": {
          "description": "payment order No",
          "type": "string"
        },
        "recurringOrderNo": {
          "description": "Recurring order No for this billing",
          "type": "string"
        },
        "retryAttempted": {
          "description": "Already retry attempted No",
          "format": "int32",
          "type": "integer"
        },
        "sandbox": {
          "description": "sandbox",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "subscription sku",
          "type": "string"
        },
        "status": {
          "description": "billing history status",
          "enum": [
            "CHARGED",
            "CHARGE_FAILED",
            "INIT",
            "REFUNDED",
            "REFUND_FAILED"
          ],
          "type": "string"
        },
        "statusReason": {
          "description": "status reason",
          "type": "string"
        },
        "subscriptionId": {
          "description": "subscription id",
          "type": "string"
        },
        "subtotalPrice": {
          "description": "subtotal price",
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "description": "subscription title",
          "type": "string"
        },
        "totalPrice": {
          "description": "total price",
          "format": "int32",
          "type": "integer"
        },
        "totalTax": {
          "description": "total tax",
          "format": "int32",
          "type": "integer"
        },
        "txEndTime": {
          "description": "transaction end time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "userId": {
          "description": "user id",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "createdAt",
        "currency",
        "itemId",
        "namespace",
        "recurringOrderNo",
        "sandbox",
        "status",
        "subscriptionId",
        "title",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "BillingHistoryPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/BillingHistoryInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "BoxItem": {
      "description": "box item",
      "properties": {
        "count": {
          "description": "count",
          "format": "int32",
          "type": "integer"
        },
        "duration": {
          "description": "box item will be expired after this duration (in seconds). Only available for OptionBox. Supported item type(s): COINS",
          "format": "int32",
          "type": "integer"
        },
        "endDate": {
          "description": "box item will be expired after this time. Only available for OptionBox. Supported item type(s): COINS",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "itemSku": {
          "description": "item sku",
          "type": "string"
        },
        "itemType": {
          "description": "item type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BulkCreditRequest": {
      "properties": {
        "creditRequest": {
          "$ref": "#/definitions/CreditRequest"
        },
        "currencyCode": {
          "type": "string"
        },
        "userIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "BulkCreditResult": {
      "properties": {
        "failList": {
          "items": {
            "$ref": "#/definitions/CreditResult"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "FAIL",
            "PARTIAL_SUCCESS",
            "SUCCESS"
          ],
          "type": "string"
        },
        "successList": {
          "items": {
            "$ref": "#/definitions/CreditResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "BulkDebitRequest": {
      "properties": {
        "currencyCode": {
          "type": "string"
        },
        "request": {
          "$ref": "#/definitions/DebitByCurrencyCodeRequest"
        },
        "userIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "BulkDebitResult": {
      "properties": {
        "failList": {
          "items": {
            "$ref": "#/definitions/DebitResult"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "FAIL",
            "PARTIAL_SUCCESS",
            "SUCCESS"
          ],
          "type": "string"
        },
        "successList": {
          "items": {
            "$ref": "#/definitions/DebitResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "BulkEntitlementGrantRequest": {
      "description": "A DTO object for granting entitlement in bulk",
      "properties": {
        "entitlementGrantList": {
          "items": {
            "$ref": "#/definitions/EntitlementGrant"
          },
          "type": "array"
        },
        "userIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "BulkEntitlementGrantResult": {
      "properties": {
        "failList": {
          "items": {
            "$ref": "#/definitions/EntitlementGrantResult"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "FAIL",
            "PARTIAL_SUCCESS",
            "SUCCESS"
          ],
          "type": "string"
        },
        "successList": {
          "items": {
            "$ref": "#/definitions/EntitlementGrantResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "BulkEntitlementRevokeResult": {
      "properties": {
        "failList": {
          "items": {
            "$ref": "#/definitions/EntitlementRevokeResult"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "FAIL",
            "PARTIAL_SUCCESS",
            "SUCCESS"
          ],
          "type": "string"
        },
        "successList": {
          "items": {
            "$ref": "#/definitions/EntitlementRevokeResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "BulkOperationResult": {
      "properties": {
        "affected": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BulkRegionDataChangeRequest": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/RegionDataChange"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "BundledItemInfo": {
      "properties": {
        "appId": {
          "description": "App id, required when itemType is APP",
          "type": "string"
        },
        "appType": {
          "description": "App type, required when itemType is APP",
          "enum": [
            "DEMO",
            "DLC",
            "GAME",
            "SOFTWARE"
          ],
          "type": "string"
        },
        "baseAppId": {
          "description": "Base app id",
          "type": "string"
        },
        "boothName": {
          "description": "booth name to get tickets while it's item type is CODE",
          "type": "string"
        },
        "boundItemIds": {
          "description": "the items which this item being bounded to",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "bundledQty": {
          "format": "int32",
          "type": "integer"
        },
        "categoryPath": {
          "description": "Item category path",
          "type": "string"
        },
        "clazz": {
          "description": "customized item clazz",
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "description": {
          "description": "description info",
          "type": "string"
        },
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "entitlementType": {
          "description": "Entitlement type",
          "enum": [
            "CONSUMABLE",
            "DURABLE"
          ],
          "type": "string"
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "customized item properties",
          "type": "object"
        },
        "features": {
          "description": "Features",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "flexible": {
          "description": "whether flexible pricing applied, only applied if itemType is BUNDLE",
          "type": "boolean",
          "x-omitempty": false
        },
        "fresh": {
          "description": "fresh",
          "type": "boolean",
          "x-omitempty": false
        },
        "images": {
          "description": "images",
          "items": {
            "$ref": "#/definitions/Image"
          },
          "type": "array"
        },
        "itemId": {
          "description": "Item id",
          "type": "string"
        },
        "itemIds": {
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "itemQty": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "description": "itemQty, the quantity of item in itemIds, default 1, should be empty if item type is not \"BUNDLE\"",
          "type": "object"
        },
        "itemType": {
          "description": "Item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "language": {
          "description": "language",
          "type": "string"
        },
        "listable": {
          "description": "Whether can be visible in Store for public user",
          "type": "boolean",
          "x-omitempty": false
        },
        "localExt": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "longDescription": {
          "description": "long description info",
          "type": "string"
        },
        "lootBoxConfig": {
          "$ref": "#/definitions/LootBoxConfig",
          "description": "loot box config"
        },
        "maxCount": {
          "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE",
          "format": "int32",
          "type": "integer"
        },
        "maxCountPerUser": {
          "description": "Max count per user, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "namespace": {
          "description": "Item namespace",
          "type": "string"
        },
        "optionBoxConfig": {
          "$ref": "#/definitions/OptionBoxConfig",
          "description": "option box config"
        },
        "purchasable": {
          "description": "Whether can be purchased",
          "type": "boolean",
          "x-omitempty": false
        },
        "purchaseCondition": {
          "$ref": "#/definitions/PurchaseCondition",
          "description": "purchase condition"
        },
        "recurring": {
          "$ref": "#/definitions/Recurring",
          "description": "recurring for subscription"
        },
        "region": {
          "description": "region",
          "type": "string"
        },
        "regionData": {
          "description": "Region data",
          "items": {
            "$ref": "#/definitions/RegionDataItem"
          },
          "type": "array"
        },
        "saleConfig": {
          "$ref": "#/definitions/SaleConfig",
          "description": "sale config"
        },
        "seasonType": {
          "description": "Season type, required while itemType is SEASON",
          "enum": [
            "PASS",
            "TIER"
          ],
          "type": "string"
        },
        "sectionExclusive": {
          "description": "whether it is sold in section only",
          "type": "boolean",
          "x-omitempty": false
        },
        "sellable": {
          "description": "whether allow to sell back to store",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "Sku",
          "type": "string"
        },
        "stackable": {
          "description": "Whether stack the CONSUMABLE entitlement",
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "description": "Item status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "tags": {
          "description": "Tags",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "targetCurrencyCode": {
          "description": "Target currency code of coin item",
          "type": "string"
        },
        "targetItemId": {
          "description": "Target item id if this item is mapping from game namespace",
          "type": "string"
        },
        "targetNamespace": {
          "description": "The target namespace of a cross namespace item",
          "type": "string"
        },
        "thumbnailUrl": {
          "description": "thumbnail url",
          "type": "string"
        },
        "title": {
          "description": "title info",
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "useCount": {
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "categoryPath",
        "createdAt",
        "entitlementType",
        "itemId",
        "itemType",
        "language",
        "name",
        "namespace",
        "region",
        "status",
        "title",
        "updatedAt"
      ],
      "type": "object"
    },
    "CampaignCreate": {
      "description": "A DTO object for creating campaign API call.",
      "properties": {
        "description": {
          "description": "The description of the campaign, max length is 1024 characters",
          "type": "string"
        },
        "items": {
          "description": "Redeemable items",
          "items": {
            "$ref": "#/definitions/RedeemableItem"
          },
          "type": "array"
        },
        "maxRedeemCountPerCampaignPerUser": {
          "description": "The maximum redeem count per campaign per user, must equal or greater than -1, -1 means UNLIMITED, default is 1",
          "format": "int32",
          "type": "integer"
        },
        "maxRedeemCountPerCode": {
          "description": "The maximum redeem count per code, must equal or greater than -1, -1 means UNLIMITED, default is 1",
          "format": "int32",
          "type": "integer"
        },
        "maxRedeemCountPerCodePerUser": {
          "description": "The maximum redeem count per code per user, must equal or greater than -1, -1 means UNLIMITED, default is 1",
          "format": "int32",
          "type": "integer"
        },
        "maxSaleCount": {
          "description": "Max sale count, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "The name of the campaign, it should starts and ends with alphabets uppercase/lowercase or numeric\nAllowed separators ',.- and white-space, max length is 48",
          "type": "string"
        },
        "redeemEnd": {
          "description": "redeem end time in yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "redeemStart": {
          "description": "redeem start time in yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "redeemType": {
          "description": "Redeem Type. Allowed values: ITEM. ITEM for default",
          "enum": [
            "ITEM"
          ],
          "type": "string"
        },
        "status": {
          "description": "The status of the campaign, default ACTIVE",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "tags": {
          "description": "The tags of the campaign",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "Campaign type. Allowed values: REDEMPTION. REDEMPTION for default",
          "enum": [
            "REDEMPTION"
          ],
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "CampaignDynamicInfo": {
      "properties": {
        "availableSaleCount": {
          "description": "The available sale count, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "lastBatchNo": {
          "description": "The batch number marks the manually code generation",
          "format": "int32",
          "type": "integer"
        },
        "quantity": {
          "description": "The total quantity of this campaign has",
          "format": "int32",
          "type": "integer"
        },
        "remainder": {
          "description": "The remainder quantity of codes not been redeemed out",
          "format": "int32",
          "type": "integer"
        },
        "saleCount": {
          "description": "The sale count",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "availableSaleCount",
        "lastBatchNo",
        "quantity",
        "remainder",
        "saleCount"
      ],
      "type": "object"
    },
    "CampaignInfo": {
      "properties": {
        "boothName": {
          "description": "booth name",
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "description": {
          "description": "campaign description",
          "type": "string"
        },
        "id": {
          "description": "campaign id",
          "type": "string"
        },
        "items": {
          "description": "redeem items",
          "items": {
            "$ref": "#/definitions/RedeemableItem"
          },
          "type": "array"
        },
        "maxRedeemCountPerCampaignPerUser": {
          "description": "The maximum redeem count of a campaign per user, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "maxRedeemCountPerCode": {
          "description": "The maximum redeem count of a code, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "maxRedeemCountPerCodePerUser": {
          "description": "The maximum redeem count of a code per user, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "maxSaleCount": {
          "description": "The maximum sale count, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "campaign name",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "redeemEnd": {
          "description": "redeem end",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "redeemStart": {
          "description": "redeem start",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "redeemType": {
          "description": "redeem type",
          "enum": [
            "ITEM"
          ],
          "type": "string"
        },
        "status": {
          "description": "campaign status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "tags": {
          "description": "campaign tags",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "campaign type",
          "enum": [
            "REDEMPTION"
          ],
          "type": "string"
        },
        "updatedAt": {
          "description": "update at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "boothName",
        "createdAt",
        "id",
        "maxRedeemCountPerCampaignPerUser",
        "maxRedeemCountPerCode",
        "maxRedeemCountPerCodePerUser",
        "maxSaleCount",
        "name",
        "namespace",
        "redeemType",
        "status",
        "type",
        "updatedAt"
      ],
      "type": "object"
    },
    "CampaignPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/CampaignInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "CampaignUpdate": {
      "description": "A DTO object for updating campaign API call.",
      "properties": {
        "description": {
          "description": "The description of the campaign, max length is 1024 characters",
          "type": "string"
        },
        "items": {
          "description": "Redeemable Items",
          "items": {
            "$ref": "#/definitions/RedeemableItem"
          },
          "type": "array"
        },
        "maxRedeemCountPerCampaignPerUser": {
          "description": "The maximum redeem count per campaign per user, must equal or greater than -1, -1 means UNLIMITED, default is 1",
          "format": "int32",
          "type": "integer"
        },
        "maxRedeemCountPerCode": {
          "description": "The maximum redeems count per code, must equal or greater than -1, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "maxRedeemCountPerCodePerUser": {
          "description": "The maximum redeem count per code per user, must equal or greater than -1, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "maxSaleCount": {
          "description": "Max sale count, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "The name of the campaign, it should starts and ends with alphabets uppercase/lowercase or numeric\nAllowed separators ',.- and white-space, max length is 48",
          "type": "string"
        },
        "redeemEnd": {
          "description": "redeem end time in yyyy-MM-dd'T'HH:mm:ss.SSS'Z', will delete this value if pass null or not pass this field",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "redeemStart": {
          "description": "redeem start time in yyyy-MM-dd'T'HH:mm:ss.SSS'Z', will delete this value if pass null or not pass this field",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "redeemType": {
          "description": "Redeem Type. Allowed values: ITEM",
          "enum": [
            "ITEM"
          ],
          "type": "string"
        },
        "status": {
          "description": "The status of the campaign",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "tags": {
          "description": "The tags of the campaign",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "CancelRequest": {
      "properties": {
        "immediate": {
          "description": "immediate, default false",
          "type": "boolean",
          "x-omitempty": false
        },
        "reason": {
          "description": "cancel reason",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CatalogChangeInfo": {
      "properties": {
        "action": {
          "description": "change action",
          "enum": [
            "CREATE",
            "DELETE",
            "UPDATE"
          ],
          "type": "string"
        },
        "categoryPath": {
          "description": "category path id type Category",
          "type": "string"
        },
        "changeId": {
          "description": "change id",
          "type": "string"
        },
        "createdAt": {
          "description": "created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "description": {
          "description": "a description if this change is not directly caused by user action. eg: bundle item",
          "type": "string"
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "itemType": {
          "description": "item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "publishedAt": {
          "description": "publish time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "sectionId": {
          "description": "section id, only exists when change type is section",
          "type": "string"
        },
        "selected": {
          "description": "if it is selected for partial publish",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "item sku",
          "type": "string"
        },
        "status": {
          "description": "change status",
          "enum": [
            "PUBLISHED",
            "UNPUBLISHED"
          ],
          "type": "string"
        },
        "storeId": {
          "description": "store id",
          "type": "string"
        },
        "title": {
          "description": "store title or item's name",
          "type": "string"
        },
        "type": {
          "description": "change type",
          "enum": [
            "CATEGORY",
            "ITEM",
            "SECTION",
            "STORE",
            "VIEW"
          ],
          "type": "string"
        },
        "updatedAt": {
          "description": "updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "viewId": {
          "description": "view id, only exists when change type is view",
          "type": "string"
        }
      },
      "required": [
        "action",
        "changeId",
        "createdAt",
        "namespace",
        "selected",
        "status",
        "storeId",
        "updatedAt"
      ],
      "type": "object"
    },
    "CatalogChangePagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/CatalogChangeInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "CatalogChangeStatistics": {
      "properties": {
        "count": {
          "description": "all change count",
          "format": "int64",
          "type": "integer"
        },
        "selectedCount": {
          "description": "selected change count",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "count",
        "selectedCount"
      ],
      "type": "object"
    },
    "CategoryCreate": {
      "description": "A DTO object for creating category API call.",
      "properties": {
        "categoryPath": {
          "description": "Category Path, A path separated by \"/\", start with \"/\" and end with combination of case of letters and numbers, max length is 255, min length is 2",
          "example": "/games",
          "type": "string"
        },
        "localizationDisplayNames": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Display name, key is language, value is display name, value max length is 255",
          "type": "object"
        }
      },
      "required": [
        "categoryPath",
        "localizationDisplayNames"
      ],
      "type": "object"
    },
    "CategoryInfo": {
      "properties": {
        "categoryPath": {
          "description": "Category path",
          "type": "string"
        },
        "createdAt": {
          "description": "Category created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "displayName": {
          "description": "Category display name",
          "type": "string"
        },
        "namespace": {
          "description": "Category namespace",
          "type": "string"
        },
        "parentCategoryPath": {
          "description": "Parent category path",
          "type": "string"
        },
        "root": {
          "type": "boolean",
          "x-omitempty": false
        },
        "updatedAt": {
          "description": "Category updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "categoryPath",
        "createdAt",
        "displayName",
        "namespace",
        "parentCategoryPath",
        "updatedAt"
      ],
      "type": "object"
    },
    "CategoryUpdate": {
      "description": "A DTO object for updating category API call.",
      "properties": {
        "localizationDisplayNames": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Display name, key is language, value is display name, value max length is 255",
          "type": "object"
        }
      },
      "required": [
        "localizationDisplayNames"
      ],
      "type": "object"
    },
    "CheckoutConfig": {
      "description": "A DTO object for updating checkout.com config.",
      "properties": {
        "publicKey": {
          "description": "public key, max length is 4096",
          "type": "string"
        },
        "secretKey": {
          "description": "secret key, max length is 4096",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ClawbackInfo": {
      "properties": {
        "createdAt": {
          "description": "created at time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "dryRun": {
          "description": "Whether or not test event",
          "type": "boolean",
          "x-omitempty": false
        },
        "eventContent": {
          "description": "Source event content",
          "type": "object"
        },
        "eventId": {
          "description": "third-party Event id / notification id",
          "type": "string"
        },
        "eventType": {
          "description": "Event type",
          "type": "string"
        },
        "externalOrderId": {
          "description": "third-party order id",
          "type": "string"
        },
        "feedbackContent": {
          "description": "Feedback Content to third-party platform",
          "type": "object"
        },
        "feedbackStatus": {
          "description": "Feedback status",
          "enum": [
            "FAIL",
            "INIT",
            "SUCCESS"
          ],
          "type": "string"
        },
        "feedbackStatusReason": {
          "description": "Feedback status reason",
          "type": "string"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "platform": {
          "description": "third party platform name, currently only support PLAYSTATION",
          "type": "string"
        },
        "processId": {
          "description": "processId is fulfillment history id if event type is CHARGEBACK REVERSAL, and processId is revocation history id if event type is CHARGEBACK/REFUND",
          "type": "string"
        },
        "status": {
          "description": "Process status",
          "enum": [
            "FAIL",
            "IGNORED",
            "INIT",
            "SUCCESS"
          ],
          "type": "string"
        },
        "statusReason": {
          "description": "Process status reason",
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "description": "AGS user id",
          "type": "string"
        }
      },
      "required": [
        "id",
        "namespace"
      ],
      "type": "object"
    },
    "ClientRequestParameter": {
      "properties": {
        "currencyCode": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "price": {
          "format": "double",
          "type": "number"
        },
        "region": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ClientTransaction": {
      "properties": {
        "amountConsumed": {
          "format": "int32",
          "type": "integer"
        },
        "clientTransactionId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CodeCreate": {
      "description": "A DTO object for creating codes API call.",
      "properties": {
        "quantity": {
          "description": "The quantity of codes to generate",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "quantity"
      ],
      "type": "object"
    },
    "CodeCreateResult": {
      "properties": {
        "numCreated": {
          "description": "number created",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "numCreated"
      ],
      "type": "object"
    },
    "CodeInfo": {
      "properties": {
        "acquireOrderNo": {
          "description": "order No. that grant this code",
          "type": "string"
        },
        "acquireUserId": {
          "description": "user Id who get this code",
          "type": "string"
        },
        "batchNo": {
          "description": "batch No.",
          "format": "int32",
          "type": "integer"
        },
        "campaignId": {
          "description": "campaign id",
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "id": {
          "description": "code id",
          "type": "string"
        },
        "items": {
          "description": "redeem items",
          "items": {
            "$ref": "#/definitions/RedeemableItem"
          },
          "type": "array"
        },
        "maxRedeemCountPerCampaignPerUser": {
          "description": "The maximum redeem count of a campaign per user, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "maxRedeemCountPerCode": {
          "description": "The maximum redeem count of a code, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "maxRedeemCountPerCodePerUser": {
          "description": "The maximum redeem count of a code per user, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "redeemEnd": {
          "description": "redeem end",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "redeemStart": {
          "description": "redeem start",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "redeemType": {
          "description": "redeem type",
          "enum": [
            "ITEM"
          ],
          "type": "string"
        },
        "redeemedCount": {
          "description": "The total count of this code has been redeemed",
          "format": "int32",
          "type": "integer"
        },
        "remainder": {
          "description": "Redemption remainder, -1 means unlimited",
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "description": "code status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "type": {
          "description": "campaign type",
          "enum": [
            "REDEMPTION"
          ],
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "value": {
          "description": "code value",
          "type": "string"
        }
      },
      "required": [
        "batchNo",
        "campaignId",
        "createdAt",
        "id",
        "maxRedeemCountPerCampaignPerUser",
        "maxRedeemCountPerCode",
        "maxRedeemCountPerCodePerUser",
        "namespace",
        "redeemType",
        "redeemedCount",
        "remainder",
        "status",
        "type",
        "updatedAt",
        "value"
      ],
      "type": "object"
    },
    "CodeInfoPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/CodeInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "ConditionGroup": {
      "properties": {
        "operator": {
          "description": "predicate operator, default is and",
          "enum": [
            "and",
            "or"
          ],
          "type": "string"
        },
        "predicates": {
          "description": "predicate list",
          "items": {
            "$ref": "#/definitions/Predicate"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ConditionGroupValidateResult": {
      "properties": {
        "predicateValidateResults": {
          "description": "predicate validate details, list of predicate validate results",
          "items": {
            "$ref": "#/definitions/PredicateValidateResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ConditionMatchResult": {
      "properties": {
        "matched": {
          "type": "boolean",
          "x-omitempty": false
        },
        "matchedConditions": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "notMatchReason": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConsumableEntitlementRevocationConfig": {
      "properties": {
        "enabled": {
          "description": "will do revocation if enabled, otherwise will skip do revocation.",
          "type": "boolean",
          "x-omitempty": false
        },
        "strategy": {
          "description": "consumable entitlement revocation strategy",
          "enum": [
            "CUSTOM",
            "REVOKE_OR_REPORT"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConsumeItem": {
      "properties": {
        "extItemDefId": {
          "description": "third party item sku or def",
          "type": "string"
        },
        "extItemId": {
          "description": "third party item/entitlement id",
          "type": "string"
        },
        "itemIdentity": {
          "description": "AB item identity",
          "type": "string"
        },
        "itemIdentityType": {
          "description": "AB item identity type",
          "enum": [
            "ITEM_ID",
            "ITEM_SKU"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreditPayload": {
      "properties": {
        "balanceOrigin": {
          "enum": [
            "Epic",
            "GooglePlay",
            "IOS",
            "Nintendo",
            "Oculus",
            "Other",
            "Playstation",
            "Steam",
            "System",
            "Twitch",
            "Xbox"
          ],
          "type": "string"
        },
        "count": {
          "format": "int64",
          "type": "integer"
        },
        "currencyCode": {
          "type": "string"
        },
        "expireAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "count",
        "currencyCode"
      ],
      "type": "object"
    },
    "CreditRequest": {
      "description": "A DTO for wallet's credit",
      "properties": {
        "amount": {
          "description": "amount",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "expireAt": {
          "description": "this amount expire time, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "metadata": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "metadata for additional information",
          "type": "object"
        },
        "origin": {
          "description": "origin, balance origin decided on the type of wallet, default is System",
          "enum": [
            "Epic",
            "GooglePlay",
            "IOS",
            "Nintendo",
            "Oculus",
            "Other",
            "Playstation",
            "Steam",
            "System",
            "Twitch",
            "Xbox"
          ],
          "type": "string"
        },
        "reason": {
          "description": "reason, max length is 127",
          "type": "string"
        },
        "source": {
          "description": "source, default is OTHER",
          "enum": [
            "ACHIEVEMENT",
            "CONSUME_ENTITLEMENT",
            "DLC",
            "GIFT",
            "IAP",
            "IAP_CHARGEBACK_REVERSED",
            "OTHER",
            "PROMOTION",
            "PURCHASE",
            "REDEEM_CODE",
            "REFERRAL_BONUS",
            "REFUND",
            "REWARD",
            "SELL_BACK",
            "TRADE"
          ],
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "type": "object"
    },
    "CreditResult": {
      "properties": {
        "creditRequest": {
          "$ref": "#/definitions/CreditRequest"
        },
        "currencyCode": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreditRevocation": {
      "properties": {
        "amount": {
          "format": "int64",
          "type": "integer"
        },
        "balanceOrigin": {
          "type": "string"
        },
        "currencyCode": {
          "type": "string"
        },
        "customRevocation": {
          "type": "object"
        },
        "reason": {
          "type": "string"
        },
        "revocationStrategy": {
          "type": "string"
        },
        "skipped": {
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "enum": [
            "FAIL",
            "SUCCESS"
          ],
          "type": "string"
        },
        "walletId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreditSummary": {
      "properties": {
        "amount": {
          "description": "amount",
          "format": "int64",
          "type": "integer"
        },
        "currencyCode": {
          "description": "currency code",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "userId": {
          "description": "user id",
          "type": "string"
        },
        "walletId": {
          "description": "wallet id",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "namespace",
        "userId",
        "walletId"
      ],
      "type": "object"
    },
    "CurrencyConfig": {
      "description": "currency config",
      "properties": {
        "currencySymbol": {
          "description": "currency symbol",
          "type": "string"
        }
      },
      "required": [
        "currencySymbol"
      ],
      "type": "object"
    },
    "CurrencyCreate": {
      "description": "A DTO for creating currency",
      "properties": {
        "currencyCode": {
          "description": "currency code, accept alphabet uppercase and number, must start with alphabet uppercase",
          "type": "string"
        },
        "currencySymbol": {
          "description": "currency symbol, max length is 8",
          "type": "string"
        },
        "currencyType": {
          "enum": [
            "REAL",
            "VIRTUAL"
          ],
          "type": "string"
        },
        "decimals": {
          "description": "decimals, commonly set 2 if real currency or 0 if virtual currency",
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        },
        "localizationDescriptions": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Description, key is language, value is description max length is 255",
          "type": "object"
        }
      },
      "required": [
        "currencyCode"
      ],
      "type": "object"
    },
    "CurrencyInfo": {
      "properties": {
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "currencyCode": {
          "description": "currency code, accept alphabet uppercase and number, must start with alphabet uppercase",
          "type": "string"
        },
        "currencySymbol": {
          "description": "currency symbol, max length is 8",
          "type": "string"
        },
        "currencyType": {
          "description": "currency type",
          "enum": [
            "REAL",
            "VIRTUAL"
          ],
          "type": "string"
        },
        "decimals": {
          "description": "decimals",
          "format": "int32",
          "type": "integer"
        },
        "localizationDescriptions": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Description, key is language, value is description max length is 255",
          "type": "object"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "createdAt",
        "currencyCode",
        "currencySymbol",
        "currencyType",
        "decimals",
        "namespace",
        "updatedAt"
      ],
      "type": "object"
    },
    "CurrencySummary": {
      "properties": {
        "currencyCode": {
          "description": "currency code, accept alphabet uppercase and number, must start with alphabet uppercase",
          "type": "string"
        },
        "currencySymbol": {
          "description": "currency symbol, max length is 8",
          "type": "string"
        },
        "currencyType": {
          "description": "currency type",
          "enum": [
            "REAL",
            "VIRTUAL"
          ],
          "type": "string"
        },
        "decimals": {
          "description": "decimals",
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        }
      },
      "required": [
        "currencyCode",
        "currencySymbol",
        "currencyType",
        "decimals",
        "namespace"
      ],
      "type": "object"
    },
    "CurrencyUpdate": {
      "description": "A DTO for update currency",
      "properties": {
        "localizationDescriptions": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Description, key is language, value is description max length is 255",
          "type": "object"
        }
      },
      "type": "object"
    },
    "CurrencyWallet": {
      "properties": {
        "balance": {
          "description": "total balance, include time-limited balance",
          "format": "int64",
          "type": "integer"
        },
        "currencyCode": {
          "description": "currency code",
          "type": "string"
        },
        "currencySymbol": {
          "description": "currency symbol",
          "type": "string"
        },
        "namespace": {
          "description": "wallet namespace",
          "type": "string"
        },
        "totalPermanentBalance": {
          "description": "total permanent balance",
          "format": "int64",
          "type": "integer"
        },
        "totalTimeLimitedBalance": {
          "description": "total time limited balance",
          "format": "int64",
          "type": "integer"
        },
        "userId": {
          "description": "user id",
          "type": "string"
        },
        "walletInfos": {
          "description": "wallets balances info",
          "items": {
            "$ref": "#/definitions/WalletInfo"
          },
          "type": "array"
        }
      },
      "required": [
        "balance",
        "currencyCode",
        "currencySymbol",
        "namespace",
        "userId"
      ],
      "type": "object"
    },
    "Customization": {
      "properties": {
        "settings": {
          "description": "settings",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DLCConfigRewardShortInfo": {
      "properties": {
        "data": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "reward map, key is third-party platform DLC id, value is specific item sets",
          "type": "object"
        },
        "dlcType": {
          "description": "dlc type",
          "enum": [
            "EPICGAMES",
            "OCULUS",
            "PSN",
            "STEAM",
            "XBOX"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "DLCItem": {
      "properties": {
        "id": {
          "description": "dlc id",
          "type": "string"
        },
        "rewards": {
          "description": "reward list",
          "items": {
            "$ref": "#/definitions/PlatformReward"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DLCItemConfigInfo": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/DLCItem"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DLCItemConfigUpdate": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/DLCItem"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DLCRecord": {
      "properties": {
        "id": {
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "obtainedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "revocationResult": {
          "$ref": "#/definitions/RevocationResult"
        },
        "revokeResults": {
          "items": {
            "$ref": "#/definitions/RevokeResult"
          },
          "type": "array"
        },
        "revokedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "rewards": {
          "items": {
            "$ref": "#/definitions/PlatformReward"
          },
          "type": "array"
        },
        "sources": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "status": {
          "enum": [
            "FULFILLED",
            "REVOKED",
            "REVOKE_FAILED"
          ],
          "type": "string"
        },
        "transactionId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DebitByCurrencyCodeRequest": {
      "description": "A DTO for wallet's debit",
      "properties": {
        "allowOverdraft": {
          "description": "allow to debit wallet balance to negative value",
          "type": "boolean",
          "x-omitempty": false
        },
        "amount": {
          "description": "amount",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "balanceOrigin": {
          "description": "balance origin",
          "enum": [
            "Epic",
            "GooglePlay",
            "IOS",
            "Nintendo",
            "Oculus",
            "Other",
            "Playstation",
            "Steam",
            "System",
            "Twitch",
            "Xbox"
          ],
          "type": "string"
        },
        "balanceSource": {
          "description": "balance source, default is OTHER",
          "enum": [
            "DLC_REVOCATION",
            "EXPIRATION",
            "IAP_REVOCATION",
            "ORDER_REVOCATION",
            "OTHER",
            "PAYMENT",
            "TRADE"
          ],
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "metadata for additional wallet transaction detail",
          "type": "object"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "type": "object"
    },
    "DebitByWalletPlatformRequest": {
      "properties": {
        "amount": {
          "description": "amount",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "debitBalanceSource": {
          "description": "debitBalanceSource, default is OTHER",
          "enum": [
            "DLC_REVOCATION",
            "EXPIRATION",
            "IAP_REVOCATION",
            "ORDER_REVOCATION",
            "OTHER",
            "PAYMENT",
            "TRADE"
          ],
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "metadata for additional wallet transaction detail",
          "type": "object"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "walletPlatform": {
          "description": "walletPlatform source, default is OTHER",
          "enum": [
            "Epic",
            "GooglePlay",
            "IOS",
            "Nintendo",
            "Oculus",
            "Other",
            "Playstation",
            "Steam",
            "Xbox"
          ],
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "type": "object"
    },
    "DebitPayload": {
      "properties": {
        "count": {
          "format": "int64",
          "type": "integer"
        },
        "currencyCode": {
          "type": "string"
        },
        "walletPlatform": {
          "enum": [
            "Epic",
            "GooglePlay",
            "IOS",
            "Nintendo",
            "Oculus",
            "Other",
            "Playstation",
            "Steam",
            "Xbox"
          ],
          "type": "string"
        }
      },
      "required": [
        "count",
        "currencyCode",
        "walletPlatform"
      ],
      "type": "object"
    },
    "DebitRequest": {
      "description": "A DTO for wallet's debit",
      "properties": {
        "amount": {
          "description": "amount",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "balanceSource": {
          "description": "balance source, default is OTHER",
          "enum": [
            "DLC_REVOCATION",
            "EXPIRATION",
            "IAP_REVOCATION",
            "ORDER_REVOCATION",
            "OTHER",
            "PAYMENT",
            "TRADE"
          ],
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "metadata for additional wallet transaction detail",
          "type": "object"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "type": "object"
    },
    "DebitResult": {
      "properties": {
        "currencyCode": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "request": {
          "$ref": "#/definitions/DebitByCurrencyCodeRequest"
        },
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DeleteRewardConditionRequest": {
      "properties": {
        "conditionName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DetailedWalletTransactionInfo": {
      "properties": {
        "amount": {
          "description": "Transaction amount, it is absolute value.",
          "format": "int64",
          "type": "integer"
        },
        "balanceSource": {
          "description": "The source of credit",
          "type": "string"
        },
        "createdAt": {
          "description": "Transaction created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "currencyCode": {
          "description": "Transaction currency code",
          "type": "string"
        },
        "namespace": {
          "description": "Wallet namespace",
          "type": "string"
        },
        "operator": {
          "description": "Operator userId or ClientId",
          "type": "string"
        },
        "reason": {
          "description": "Reason of the transaction",
          "type": "string"
        },
        "updatedAt": {
          "description": "Transaction updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "userId": {
          "description": "Wallet owner's userId",
          "type": "string"
        },
        "walletAction": {
          "description": "Action type, remove expired limited time balance will not have wallet action.",
          "enum": [
            "CREDIT",
            "DEBIT",
            "PAYMENT"
          ],
          "type": "string"
        },
        "walletId": {
          "description": "wallet id",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "createdAt",
        "currencyCode",
        "namespace",
        "operator",
        "updatedAt",
        "userId",
        "walletId"
      ],
      "type": "object"
    },
    "DetailedWalletTransactionPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/DetailedWalletTransactionInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "DurableEntitlementRevocationConfig": {
      "properties": {
        "enabled": {
          "description": "will do revocation if enabled, otherwise will skip do revocation.",
          "type": "boolean",
          "x-omitempty": false
        },
        "strategy": {
          "description": "durable entitlement revocation strategy",
          "enum": [
            "CUSTOM",
            "REVOKE_OR_REPORT"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "EntitlementDecrement": {
      "description": "A DTO object for entitlement decrement.",
      "properties": {
        "options": {
          "description": "options, it is only available when entitlement clazz is OPTIONBOX and value should be item id.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requestId": {
          "description": "Request id(Optional), client should provide a unique request id to perform at most once execution, When a request id is resubmitted, it will return original successful response",
          "type": "string"
        },
        "useCount": {
          "description": "the count to decrease, 1 for default, option box entitlement only allow 1",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "EntitlementDecrementResult": {
      "properties": {
        "appId": {
          "description": "appId if entitlement is an app",
          "type": "string"
        },
        "appType": {
          "description": "appType if entitlement is an app",
          "enum": [
            "DEMO",
            "DLC",
            "GAME",
            "SOFTWARE"
          ],
          "type": "string"
        },
        "clazz": {
          "description": "entitlement class",
          "enum": [
            "APP",
            "CODE",
            "ENTITLEMENT",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "createdAt": {
          "description": "entitlement created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "endDate": {
          "description": "entitlement end date",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "features": {
          "description": "entitlement features",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "grantedAt": {
          "description": "entitlement granted at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "grantedCode": {
          "description": "grantedCode, the granted code",
          "type": "string"
        },
        "id": {
          "description": "entitlement id",
          "type": "string"
        },
        "itemId": {
          "description": "itemId of the entitlement",
          "type": "string"
        },
        "itemNamespace": {
          "description": "itemNamespace for the purchased item",
          "type": "string"
        },
        "itemSnapshot": {
          "$ref": "#/definitions/ItemSnapshot",
          "description": "itemSnapshot"
        },
        "name": {
          "description": "entitlement name",
          "type": "string"
        },
        "namespace": {
          "description": "entitlement namespace",
          "type": "string"
        },
        "replayed": {
          "description": "replayed, if true,the response is original successful response. This will not be included in response if client have not pass request id.",
          "type": "boolean",
          "x-omitempty": false
        },
        "requestId": {
          "description": "request id",
          "type": "string"
        },
        "rewards": {
          "description": "loot reward, only return when consume a loot box entitlement",
          "items": {
            "$ref": "#/definitions/EntitlementLootBoxReward"
          },
          "type": "array"
        },
        "sku": {
          "description": "sku for purchased item",
          "type": "string"
        },
        "source": {
          "description": "entitlement source",
          "enum": [
            "ACHIEVEMENT",
            "GIFT",
            "IAP",
            "OTHER",
            "PROMOTION",
            "PURCHASE",
            "REDEEM_CODE",
            "REFERRAL_BONUS",
            "REWARD"
          ],
          "type": "string"
        },
        "stackable": {
          "description": "Whether the CONSUMABLE entitlement is stackable",
          "type": "boolean",
          "x-omitempty": false
        },
        "startDate": {
          "description": "entitlement start date",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "description": "entitlement status",
          "enum": [
            "ACTIVE",
            "CONSUMED",
            "INACTIVE",
            "REVOKED",
            "SOLD"
          ],
          "type": "string"
        },
        "storeId": {
          "description": "storeId of the item, published store if omitted",
          "type": "string"
        },
        "type": {
          "description": "entitlement type",
          "enum": [
            "CONSUMABLE",
            "DURABLE"
          ],
          "type": "string"
        },
        "updatedAt": {
          "description": "entitlement updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "useCount": {
          "description": "useCount for entitlement",
          "format": "int32",
          "type": "integer"
        },
        "userId": {
          "description": "userId for this entitlement",
          "type": "string"
        }
      },
      "required": [
        "clazz",
        "createdAt",
        "grantedAt",
        "id",
        "itemId",
        "itemNamespace",
        "name",
        "namespace",
        "source",
        "status",
        "type",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "EntitlementGrant": {
      "description": "A DTO object for granting entitlement API call.",
      "properties": {
        "endDate": {
          "description": "entitlement end date time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "grantedCode": {
          "description": "grantedCode, the granted code",
          "type": "string"
        },
        "itemId": {
          "description": "itemId",
          "type": "string"
        },
        "itemNamespace": {
          "description": "itemNamespace",
          "type": "string"
        },
        "language": {
          "description": "language value from language tag, allowed format: en, en-US.\u003cp\u003eSupported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)\u003c/p\u003e",
          "pattern": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$",
          "type": "string"
        },
        "quantity": {
          "description": "quantity",
          "format": "int32",
          "type": "integer"
        },
        "region": {
          "description": "country value from ISO countries",
          "type": "string"
        },
        "source": {
          "description": "source",
          "enum": [
            "ACHIEVEMENT",
            "GIFT",
            "IAP",
            "OTHER",
            "PROMOTION",
            "PURCHASE",
            "REDEEM_CODE",
            "REFERRAL_BONUS",
            "REWARD"
          ],
          "type": "string"
        },
        "startDate": {
          "description": "entitlement start date time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "storeId": {
          "description": "storeId",
          "type": "string"
        }
      },
      "required": [
        "itemId",
        "itemNamespace",
        "quantity"
      ],
      "type": "object"
    },
    "EntitlementGrantResult": {
      "properties": {
        "entitlementGrants": {
          "$ref": "#/definitions/EntitlementGrant"
        },
        "reason": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EntitlementHistoryInfo": {
      "properties": {
        "action": {
          "description": "The action of entitlement, like GRANT, REVOKE",
          "enum": [
            "DECREMENT",
            "DISABLE",
            "ENABLE",
            "GRANT",
            "REVOKE",
            "SELL_BACK",
            "UPDATE"
          ],
          "type": "string"
        },
        "createdAt": {
          "description": "History create time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "entitlementId": {
          "description": "The id of entitlement",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of entitlement",
          "type": "string"
        },
        "operator": {
          "description": "The operator",
          "type": "string"
        },
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "updatedAt": {
          "description": "History update time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "useCount": {
          "description": "The reminder use count of a consumable entitlement.",
          "format": "int32",
          "type": "integer"
        },
        "useCountChange": {
          "description": "changed use count.",
          "format": "int32",
          "type": "integer"
        },
        "userId": {
          "description": "The owner id of entitlement",
          "type": "string"
        }
      },
      "required": [
        "action",
        "createdAt",
        "entitlementId",
        "namespace",
        "operator",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "EntitlementInfo": {
      "properties": {
        "appId": {
          "description": "appId if entitlement is an app",
          "type": "string"
        },
        "appType": {
          "description": "appType if entitlement is an app",
          "enum": [
            "DEMO",
            "DLC",
            "GAME",
            "SOFTWARE"
          ],
          "type": "string"
        },
        "clazz": {
          "description": "entitlement class",
          "enum": [
            "APP",
            "CODE",
            "ENTITLEMENT",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "createdAt": {
          "description": "entitlement created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "endDate": {
          "description": "entitlement end date",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "features": {
          "description": "entitlement features",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "grantedAt": {
          "description": "entitlement granted at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "grantedCode": {
          "description": "grantedCode, the granted code",
          "type": "string"
        },
        "id": {
          "description": "entitlement id",
          "type": "string"
        },
        "itemId": {
          "description": "itemId of the entitlement",
          "type": "string"
        },
        "itemNamespace": {
          "description": "itemNamespace for the purchased item",
          "type": "string"
        },
        "itemSnapshot": {
          "$ref": "#/definitions/ItemSnapshot",
          "description": "itemSnapshot"
        },
        "name": {
          "description": "entitlement name",
          "type": "string"
        },
        "namespace": {
          "description": "entitlement namespace",
          "type": "string"
        },
        "sku": {
          "description": "sku for purchased item",
          "type": "string"
        },
        "source": {
          "description": "entitlement source",
          "enum": [
            "ACHIEVEMENT",
            "GIFT",
            "IAP",
            "OTHER",
            "PROMOTION",
            "PURCHASE",
            "REDEEM_CODE",
            "REFERRAL_BONUS",
            "REWARD"
          ],
          "type": "string"
        },
        "stackable": {
          "description": "Whether the CONSUMABLE entitlement is stackable",
          "type": "boolean",
          "x-omitempty": false
        },
        "startDate": {
          "description": "entitlement start date",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "description": "entitlement status",
          "enum": [
            "ACTIVE",
            "CONSUMED",
            "INACTIVE",
            "REVOKED",
            "SOLD"
          ],
          "type": "string"
        },
        "storeId": {
          "description": "storeId of the item, published store if omitted",
          "type": "string"
        },
        "type": {
          "description": "entitlement type",
          "enum": [
            "CONSUMABLE",
            "DURABLE"
          ],
          "type": "string"
        },
        "updatedAt": {
          "description": "entitlement updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "useCount": {
          "description": "useCount for entitlement",
          "format": "int32",
          "type": "integer"
        },
        "userId": {
          "description": "userId for this entitlement",
          "type": "string"
        }
      },
      "required": [
        "clazz",
        "createdAt",
        "grantedAt",
        "id",
        "itemId",
        "itemNamespace",
        "name",
        "namespace",
        "source",
        "status",
        "type",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "EntitlementLootBoxReward": {
      "properties": {
        "count": {
          "description": "count",
          "format": "int32",
          "type": "integer"
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "itemSku": {
          "description": "item sku",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EntitlementOwnership": {
      "properties": {
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "owned": {
          "description": "ownership",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "owned"
      ],
      "type": "object"
    },
    "EntitlementPagingSlicedResult": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/EntitlementInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "type": "object"
    },
    "EntitlementRevocation": {
      "properties": {
        "customRevocation": {
          "type": "object"
        },
        "entitlementId": {
          "type": "string"
        },
        "itemId": {
          "type": "string"
        },
        "itemSku": {
          "type": "string"
        },
        "quantity": {
          "format": "int64",
          "type": "integer"
        },
        "reason": {
          "type": "string"
        },
        "revocationStrategy": {
          "type": "string"
        },
        "skipped": {
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "enum": [
            "FAIL",
            "SUCCESS"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "EntitlementRevocationConfig": {
      "properties": {
        "consumable": {
          "$ref": "#/definitions/ConsumableEntitlementRevocationConfig",
          "description": "consumable entitlement revocation config"
        },
        "durable": {
          "$ref": "#/definitions/DurableEntitlementRevocationConfig",
          "description": "durable entitlement revocation config"
        }
      },
      "type": "object"
    },
    "EntitlementRevokeResult": {
      "properties": {
        "entitlementId": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EntitlementSoldRequest": {
      "description": "A DTO object for sell entitlement.",
      "properties": {
        "requestId": {
          "description": "Request id(Optional), client should provide a unique request id to perform at most once execution, When a request id is resubmitted, it will return original successful response",
          "type": "string"
        },
        "useCount": {
          "description": "the use count to sell, 1 for default, durable entitlement only allow 1",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "EntitlementSoldResult": {
      "properties": {
        "creditSummaries": {
          "description": "creditSummaries, The money from the sale",
          "items": {
            "$ref": "#/definitions/CreditSummary"
          },
          "type": "array"
        },
        "entitlementInfo": {
          "$ref": "#/definitions/EntitlementInfo",
          "description": "The entitlement information after the sale"
        },
        "replayed": {
          "description": "replayed, if true,the response is original successful response. This will not be included in response if client have not pass request id.",
          "type": "boolean",
          "x-omitempty": false
        },
        "requestId": {
          "description": "request id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EntitlementSummary": {
      "properties": {
        "clazz": {
          "description": "entitlement class",
          "enum": [
            "APP",
            "CODE",
            "ENTITLEMENT",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "endDate": {
          "description": "end date time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "grantedCode": {
          "description": "granted code",
          "type": "string"
        },
        "id": {
          "description": "entitlement id",
          "type": "string"
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "name": {
          "description": "entitlement name. Most of the time entitlement name is the same as the item name.",
          "type": "string"
        },
        "namespace": {
          "description": "entitlement namespace",
          "type": "string"
        },
        "stackable": {
          "description": "Whether the CONSUMABLE entitlement is stackable",
          "type": "boolean",
          "x-omitempty": false
        },
        "stackedUseCount": {
          "description": "CONSUMABLE entitlement stacked use count",
          "format": "int32",
          "type": "integer"
        },
        "startDate": {
          "description": "start date time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "storeId": {
          "description": "item store id, null if published store",
          "type": "string"
        },
        "type": {
          "description": "entitlement type",
          "enum": [
            "CONSUMABLE",
            "DURABLE"
          ],
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "userId": {
          "description": "userId for this entitlement",
          "type": "string"
        }
      },
      "required": [
        "clazz",
        "createdAt",
        "id",
        "namespace",
        "type",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "EntitlementUpdate": {
      "description": "A DTO object for updating entitlement API call. Leave the field empty if don't want to update.",
      "properties": {
        "endDate": {
          "description": "end date of the entitlement. yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "nullFieldList": {
          "description": "nullFieldList",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "startDate": {
          "description": "start date of the entitlement. yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "description": "status",
          "enum": [
            "ACTIVE",
            "CONSUMED",
            "INACTIVE",
            "REVOKED",
            "SOLD"
          ],
          "type": "string"
        },
        "useCount": {
          "description": "useCount of a consumable entitlement",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "EpicGamesDLCSyncRequest": {
      "properties": {
        "epicGamesJwtToken": {
          "description": "epicGamesJwtToken",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EpicGamesIAPConfigInfo": {
      "properties": {
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "sandboxId": {
          "description": "epic games sandbox id",
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "EpicGamesIAPConfigRequest": {
      "properties": {
        "sandboxId": {
          "description": "sandboxId",
          "type": "string"
        }
      },
      "required": [
        "sandboxId"
      ],
      "type": "object"
    },
    "EpicGamesReconcileRequest": {
      "properties": {
        "epicGamesJwtToken": {
          "description": "epicGamesJwtToken",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EpicGamesReconcileResult": {
      "properties": {
        "epicGamesItemId": {
          "type": "string"
        },
        "itemId": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "status": {
          "enum": [
            "FAILED",
            "FULFILLED",
            "VERIFIED"
          ],
          "type": "string"
        },
        "transactionId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ErrorEntity": {
      "properties": {
        "devStackTrace": {
          "description": "internal server error stack trace in configured environment",
          "type": "string"
        },
        "errorCode": {
          "description": "numeric error code",
          "format": "int32",
          "type": "integer"
        },
        "errorMessage": {
          "description": "error message",
          "type": "string"
        },
        "messageVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "message variables",
          "type": "object"
        }
      },
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "type": "object"
    },
    "EstimatedPriceInfo": {
      "properties": {
        "estimatedPrices": {
          "description": "estimated prices in different currency under region, this field maybe null or empty if have not any available price at this time, Possible reason: This item is not yet for sale, or miss set correct region currency for flexible bundle item.",
          "items": {
            "$ref": "#/definitions/AvailablePrice"
          },
          "type": "array"
        },
        "itemId": {
          "description": "item Id",
          "type": "string"
        },
        "region": {
          "description": "price region",
          "type": "string"
        }
      },
      "required": [
        "itemId"
      ],
      "type": "object"
    },
    "EventAdditionalData": {
      "properties": {
        "entitlement": {
          "items": {
            "$ref": "#/definitions/AdditionalDataEntitlement"
          },
          "type": "array"
        },
        "purpose": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EventPayload": {
      "properties": {
        "payload": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "ExportStoreRequest": {
      "properties": {
        "itemIds": {
          "description": "item ids",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ExtensionFulfillmentSummary": {
      "properties": {
        "grantedAt": {
          "description": "grantedAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "itemClazz": {
          "description": "customized item sub type",
          "type": "string"
        },
        "itemExt": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "customized item properties",
          "type": "object"
        },
        "itemId": {
          "description": "itemId",
          "type": "string"
        },
        "itemType": {
          "description": "item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "customized external fulfillment results",
          "type": "object"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "quantity": {
          "description": "quantity",
          "format": "int32",
          "type": "integer"
        },
        "userId": {
          "description": "userId",
          "type": "string"
        }
      },
      "required": [
        "quantity"
      ],
      "type": "object"
    },
    "ExternalPaymentOrderCreate": {
      "properties": {
        "currencyCode": {
          "description": "currency code, default is USD",
          "type": "string"
        },
        "currencyNamespace": {
          "description": "currency namespace, default is publisher namespace",
          "type": "string"
        },
        "customParameters": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "custom parameters",
          "type": "object"
        },
        "description": {
          "description": "Order desc, max length 2000",
          "type": "string"
        },
        "extOrderNo": {
          "description": "External order id",
          "type": "string"
        },
        "extUserId": {
          "description": "optional, external user id, can be the character id",
          "type": "string"
        },
        "itemType": {
          "description": "item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "language": {
          "description": "language value from language tag, allowed format: en, en-US.\u003cp\u003eSupported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)\u003c/p\u003e",
          "pattern": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$",
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "metadata",
          "type": "object"
        },
        "notifyUrl": {
          "description": "custom notify url for real payment, send notification to this url once payment action is finished",
          "type": "string"
        },
        "omitNotification": {
          "description": "TEST PURPOSE, if set it will not send async notification to the API invoker, only can set true while this payment is sandbox",
          "type": "boolean",
          "x-omitempty": false
        },
        "platform": {
          "description": "platform",
          "type": "string"
        },
        "price": {
          "description": "Price of order",
          "format": "int32",
          "type": "integer"
        },
        "recurringPaymentOrderNo": {
          "description": "recurring payment order which has recurring token, will do recurring payment if present, otherwise start normal payment flow",
          "type": "string"
        },
        "region": {
          "description": "country value from ISO countries",
          "type": "string"
        },
        "returnUrl": {
          "description": "custom return url for real payment, user will be redirected to this url once payment is finished",
          "type": "string"
        },
        "sandbox": {
          "description": "TEST PURPOSE, sandbox(Active in real currency mode), default is false",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "optional, unique identity for the item",
          "type": "string"
        },
        "subscriptionId": {
          "description": "subscriptionId, payment token will be saved for recurring payment",
          "type": "string"
        },
        "targetNamespace": {
          "description": "The game namespace",
          "type": "string"
        },
        "targetUserId": {
          "description": "The user id in game namespace",
          "type": "string"
        },
        "title": {
          "description": "Order title",
          "type": "string"
        }
      },
      "required": [
        "description",
        "extOrderNo",
        "price",
        "targetNamespace",
        "targetUserId",
        "title"
      ],
      "type": "object"
    },
    "FieldValidationError": {
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorField": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "errorValue": {
          "type": "string"
        },
        "messageVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "FixedPeriodRotationConfig": {
      "properties": {
        "backfillType": {
          "description": "backfill type: NONE/CUSTOM, default is NONE",
          "enum": [
            "CUSTOM",
            "NONE"
          ],
          "type": "string"
        },
        "duration": {
          "description": "duration: rotation duration, unit is minutes, min duration is 1",
          "format": "int32",
          "type": "integer"
        },
        "itemCount": {
          "description": "returned item count, min is 1, default is 1",
          "format": "int32",
          "type": "integer"
        },
        "rule": {
          "description": "rotation rule: SEQUENCE, default is SEQUENCE",
          "enum": [
            "SEQUENCE"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "FulFillItemPayload": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "itemIdentity": {
          "type": "string"
        },
        "itemIdentityType": {
          "enum": [
            "ITEM_ID",
            "ITEM_SKU"
          ],
          "type": "string"
        }
      },
      "required": [
        "count",
        "itemIdentity",
        "itemIdentityType"
      ],
      "type": "object"
    },
    "FulfillCodeRequest": {
      "properties": {
        "code": {
          "description": "campaign code",
          "type": "string"
        },
        "language": {
          "description": "language value from language tag, allowed format: en, en-US.\u003cp\u003eSupported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)\u003c/p\u003e",
          "pattern": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$",
          "type": "string"
        },
        "region": {
          "description": "country value from ISO countries",
          "type": "string"
        }
      },
      "required": [
        "code"
      ],
      "type": "object"
    },
    "FulfillmentError": {
      "properties": {
        "code": {
          "description": "error code",
          "format": "int32",
          "type": "integer"
        },
        "httpStatus": {
          "description": "http status",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FulfillmentHistoryInfo": {
      "properties": {
        "code": {
          "description": "redeemed code",
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "creditSummaries": {
          "description": "credit granted",
          "items": {
            "$ref": "#/definitions/CreditSummary"
          },
          "type": "array"
        },
        "entitlementSummaries": {
          "description": "entitlement granted",
          "items": {
            "$ref": "#/definitions/EntitlementSummary"
          },
          "type": "array"
        },
        "extensionFulfillmentSummaries": {
          "description": "extension fulfillment granted",
          "items": {
            "$ref": "#/definitions/ExtensionFulfillmentSummary"
          },
          "type": "array"
        },
        "fulfillItems": {
          "description": "items should do fulfillment",
          "items": {
            "$ref": "#/definitions/FulfillmentItem"
          },
          "type": "array"
        },
        "fulfillmentError": {
          "$ref": "#/definitions/FulfillmentError",
          "description": "fulfillment error detail"
        },
        "grantedItemIds": {
          "description": "item ids already granted",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "orderNo": {
          "description": "orderNo",
          "type": "string"
        },
        "status": {
          "description": "fulfillment status",
          "enum": [
            "FAIL",
            "SUCCESS"
          ],
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "userId": {
          "description": "userId",
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "id",
        "namespace",
        "status",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "FulfillmentHistoryPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/FulfillmentHistoryInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "FulfillmentItem": {
      "properties": {
        "extraSubscriptionDays": {
          "description": "extra subscription days",
          "format": "int32",
          "type": "integer"
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "itemName": {
          "description": "item name",
          "type": "string"
        },
        "itemSku": {
          "description": "item sku",
          "type": "string"
        },
        "itemType": {
          "description": "item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "quantity": {
          "description": "quantity",
          "format": "int32",
          "type": "integer"
        },
        "storeId": {
          "description": "draft store id, published store if omitted",
          "type": "string"
        }
      },
      "required": [
        "quantity"
      ],
      "type": "object"
    },
    "FulfillmentRequest": {
      "description": "A DTO object for fulfillment request API call.",
      "properties": {
        "duration": {
          "description": "duration in seconds, ignored if the endDate is present",
          "format": "int32",
          "type": "integer"
        },
        "endDate": {
          "description": "end date time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "itemId": {
          "description": "itemId",
          "type": "string"
        },
        "itemSku": {
          "description": "itemSku",
          "type": "string"
        },
        "language": {
          "description": "language",
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "metadata",
          "type": "object"
        },
        "order": {
          "$ref": "#/definitions/OrderSummary",
          "description": "order summary for fulfillment scripts"
        },
        "orderNo": {
          "description": "orderNo",
          "type": "string"
        },
        "origin": {
          "description": "origin",
          "enum": [
            "Epic",
            "GooglePlay",
            "IOS",
            "Nintendo",
            "Oculus",
            "Other",
            "Playstation",
            "Steam",
            "System",
            "Twitch",
            "Xbox"
          ],
          "type": "string"
        },
        "overrideBundleItemQty": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "description": "overrideBundleItemQty",
          "type": "object"
        },
        "quantity": {
          "description": "quantity",
          "format": "int32",
          "type": "integer"
        },
        "region": {
          "description": "region",
          "type": "string"
        },
        "source": {
          "description": "source",
          "enum": [
            "ACHIEVEMENT",
            "CONSUME_ENTITLEMENT",
            "DLC",
            "EXPIRATION",
            "GIFT",
            "IAP",
            "IAP_CHARGEBACK_REVERSED",
            "ORDER_REVOCATION",
            "OTHER",
            "PAYMENT",
            "PROMOTION",
            "PURCHASE",
            "REDEEM_CODE",
            "REFERRAL_BONUS",
            "REWARD",
            "SELL_BACK"
          ],
          "type": "string"
        },
        "startDate": {
          "description": "start date time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "storeId": {
          "description": "storeId",
          "type": "string"
        }
      },
      "required": [
        "quantity"
      ],
      "type": "object"
    },
    "FulfillmentResult": {
      "properties": {
        "creditSummaries": {
          "description": "credit granted",
          "items": {
            "$ref": "#/definitions/CreditSummary"
          },
          "type": "array"
        },
        "entitlementSummaries": {
          "description": "entitlement granted",
          "items": {
            "$ref": "#/definitions/EntitlementSummary"
          },
          "type": "array"
        },
        "id": {
          "description": "fulfillment history id, only fulfill rewards will return this filed currently.",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "subscriptionSummaries": {
          "description": "affected subscriptions",
          "items": {
            "$ref": "#/definitions/SubscriptionSummary"
          },
          "type": "array"
        },
        "userId": {
          "description": "userId",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "userId"
      ],
      "type": "object"
    },
    "FulfillmentScriptCreate": {
      "properties": {
        "grantDays": {
          "description": "javascript script for grant days, expression expected to return integer, -1 means unlimited. It only execute while there's no endDate specified while do fulfillment",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FulfillmentScriptInfo": {
      "properties": {
        "grantDays": {
          "description": "javascript script for grant days, expression expected to return integer, -1 means unlimited. It only execute while there's no endDate specified while do fulfillment",
          "type": "string"
        },
        "id": {
          "description": "id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FulfillmentScriptUpdate": {
      "properties": {
        "grantDays": {
          "description": "javascript script for grant days, expression expected to return integer, -1 means unlimited. It only execute while there's no endDate specified while do fulfillment",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FullAppInfo": {
      "properties": {
        "carousel": {
          "description": "carousel",
          "items": {
            "$ref": "#/definitions/Slide"
          },
          "type": "array"
        },
        "developer": {
          "description": "developer",
          "type": "string"
        },
        "forumUrl": {
          "description": "forum url",
          "type": "string"
        },
        "genres": {
          "description": "genres",
          "items": {
            "enum": [
              "Action",
              "Adventure",
              "Casual",
              "FreeToPlay",
              "Indie",
              "MassivelyMultiplayer",
              "RPG",
              "Racing",
              "Simulation",
              "Sports",
              "Strategy"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "localizations": {
          "additionalProperties": {
            "$ref": "#/definitions/AppLocalization"
          },
          "description": "localizations",
          "type": "object"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "platformRequirements": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/Requirement"
            },
            "type": "array"
          },
          "description": "platform requirements",
          "type": "object"
        },
        "platforms": {
          "description": "supported platforms",
          "items": {
            "enum": [
              "Android",
              "IOS",
              "Linux",
              "MacOS",
              "Windows"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "players": {
          "description": "players",
          "items": {
            "enum": [
              "Coop",
              "CrossPlatformMulti",
              "LocalCoop",
              "MMO",
              "Multi",
              "Single"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "primaryGenre": {
          "description": "primary genre",
          "enum": [
            "Action",
            "Adventure",
            "Casual",
            "FreeToPlay",
            "Indie",
            "MassivelyMultiplayer",
            "RPG",
            "Racing",
            "Simulation",
            "Sports",
            "Strategy"
          ],
          "type": "string"
        },
        "publisher": {
          "description": "publisher",
          "type": "string"
        },
        "releaseDate": {
          "description": "release date",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "websiteUrl": {
          "description": "website url",
          "type": "string"
        }
      },
      "required": [
        "itemId",
        "namespace"
      ],
      "type": "object"
    },
    "FullCategoryInfo": {
      "properties": {
        "categoryPath": {
          "description": "Category path",
          "type": "string"
        },
        "createdAt": {
          "description": "Category created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "localizationDisplayNames": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Category localization display name",
          "type": "object"
        },
        "namespace": {
          "description": "Category namespace",
          "type": "string"
        },
        "parentCategoryPath": {
          "description": "Parent category path",
          "type": "string"
        },
        "root": {
          "type": "boolean",
          "x-omitempty": false
        },
        "updatedAt": {
          "description": "Category updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "categoryPath",
        "createdAt",
        "localizationDisplayNames",
        "namespace",
        "parentCategoryPath",
        "updatedAt"
      ],
      "type": "object"
    },
    "FullItemInfo": {
      "properties": {
        "appId": {
          "description": "App id, required when itemType is APP",
          "type": "string"
        },
        "appType": {
          "description": "App type, required when itemType is APP",
          "enum": [
            "DEMO",
            "DLC",
            "GAME",
            "SOFTWARE"
          ],
          "type": "string"
        },
        "baseAppId": {
          "description": "Base app id",
          "type": "string"
        },
        "boothName": {
          "description": "booth name to get tickets while it's item type is CODE",
          "type": "string"
        },
        "boundItemIds": {
          "description": "the items which this item being bounded to",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "categoryPath": {
          "description": "Item category path",
          "type": "string"
        },
        "clazz": {
          "description": "customized item clazz",
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "entitlementType": {
          "description": "Entitlement type",
          "enum": [
            "CONSUMABLE",
            "DURABLE"
          ],
          "type": "string"
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "customized item properties",
          "type": "object"
        },
        "features": {
          "description": "Features",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "flexible": {
          "description": "whether it supported flexible pricing",
          "type": "boolean",
          "x-omitempty": false
        },
        "images": {
          "description": "images",
          "items": {
            "$ref": "#/definitions/Image"
          },
          "type": "array"
        },
        "itemId": {
          "description": "Item id",
          "type": "string"
        },
        "itemIds": {
          "description": "Bundle item's item ids",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "itemQty": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "description": "itemQty, the quantity of item in itemIds, default 1, should be empty if item type is not \"BUNDLE\"",
          "type": "object"
        },
        "itemType": {
          "description": "Item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "listable": {
          "description": "Whether can be visible in Store for public user",
          "type": "boolean",
          "x-omitempty": false
        },
        "localizations": {
          "additionalProperties": {
            "$ref": "#/definitions/Localization"
          },
          "description": "Item localizations",
          "type": "object"
        },
        "lootBoxConfig": {
          "$ref": "#/definitions/LootBoxConfig",
          "description": "loot box config"
        },
        "maxCount": {
          "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE",
          "format": "int32",
          "type": "integer"
        },
        "maxCountPerUser": {
          "description": "Max count per user, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "namespace": {
          "description": "Item namespace",
          "type": "string"
        },
        "optionBoxConfig": {
          "$ref": "#/definitions/OptionBoxConfig",
          "description": "option box config"
        },
        "purchasable": {
          "description": "Whether can be purchased",
          "type": "boolean",
          "x-omitempty": false
        },
        "purchaseCondition": {
          "$ref": "#/definitions/PurchaseCondition",
          "description": "purchase condition"
        },
        "recurring": {
          "$ref": "#/definitions/Recurring",
          "description": "recurring for subscription"
        },
        "regionData": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/RegionDataItem"
            },
            "type": "array"
          },
          "description": "Item region data",
          "type": "object"
        },
        "saleConfig": {
          "$ref": "#/definitions/SaleConfig",
          "description": "saleConfig"
        },
        "seasonType": {
          "description": "Season type, required while itemType is SEASON",
          "enum": [
            "PASS",
            "TIER"
          ],
          "type": "string"
        },
        "sectionExclusive": {
          "description": "whether it is sold in section only",
          "type": "boolean",
          "x-omitempty": false
        },
        "sellable": {
          "description": "sellable",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "Sku",
          "type": "string"
        },
        "stackable": {
          "description": "Whether stack the CONSUMABLE entitlement",
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "description": "Item status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "tags": {
          "description": "Tags",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "targetCurrencyCode": {
          "description": "The target currency code of coin Item",
          "type": "string"
        },
        "targetItemId": {
          "description": "Target item id if this item is mapping from game namespace",
          "type": "string"
        },
        "targetNamespace": {
          "description": "The target namespace of a cross namespace item",
          "type": "string"
        },
        "thumbnailUrl": {
          "description": "thumbnail url",
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "useCount": {
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "createdAt",
        "entitlementType",
        "itemId",
        "itemType",
        "localizations",
        "name",
        "namespace",
        "regionData",
        "status",
        "updatedAt"
      ],
      "type": "object"
    },
    "FullItemPagingResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/FullItemInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        },
        "total": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "FullItemPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/FullItemInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "FullSectionInfo": {
      "properties": {
        "active": {
          "description": "active",
          "type": "boolean",
          "x-omitempty": false
        },
        "createdAt": {
          "description": "view created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "endDate": {
          "description": "end date",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "section extension",
          "type": "object"
        },
        "fixedPeriodRotationConfig": {
          "$ref": "#/definitions/FixedPeriodRotationConfig",
          "description": "fix period rotation config, don't allow null when rotation type is FIXED_PERIOD"
        },
        "itemNamings": {
          "description": "section item namings",
          "items": {
            "$ref": "#/definitions/ItemNaming"
          },
          "type": "array"
        },
        "items": {
          "description": "section items",
          "items": {
            "$ref": "#/definitions/SectionItem"
          },
          "type": "array"
        },
        "localizations": {
          "additionalProperties": {
            "$ref": "#/definitions/Localization"
          },
          "description": "Localization, key language, value localization content",
          "type": "object"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "rotationType": {
          "description": "rotation type, default is NONE",
          "enum": [
            "CUSTOM",
            "FIXED_PERIOD",
            "NONE"
          ],
          "type": "string"
        },
        "sectionId": {
          "description": "id",
          "type": "string"
        },
        "startDate": {
          "description": "start date",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "updatedAt": {
          "description": "view updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "viewId": {
          "description": "view id",
          "type": "string"
        },
        "viewName": {
          "description": "view name",
          "type": "string"
        }
      },
      "required": [
        "active",
        "createdAt",
        "endDate",
        "localizations",
        "name",
        "namespace",
        "sectionId",
        "startDate",
        "updatedAt"
      ],
      "type": "object"
    },
    "FullViewInfo": {
      "properties": {
        "createdAt": {
          "description": "view created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "localizations": {
          "additionalProperties": {
            "$ref": "#/definitions/Localization"
          },
          "description": "Localization, key language, value localization content",
          "type": "object"
        },
        "name": {
          "description": "view name",
          "type": "string"
        },
        "namespace": {
          "description": "view namespace",
          "type": "string"
        },
        "updatedAt": {
          "description": "view updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "viewId": {
          "description": "view id",
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "displayOrder",
        "localizations",
        "name",
        "namespace",
        "updatedAt",
        "viewId"
      ],
      "type": "object"
    },
    "GoogleIAPConfigInfo": {
      "properties": {
        "applicationName": {
          "description": "applicationName",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "p12FileName": {
          "description": "p12 file",
          "type": "string"
        },
        "serviceAccountId": {
          "description": "serviceAccountId",
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "GoogleIAPConfigRequest": {
      "properties": {
        "applicationName": {
          "description": "applicationName",
          "type": "string"
        },
        "serviceAccountId": {
          "description": "serviceAccountId",
          "type": "string"
        }
      },
      "required": [
        "applicationName",
        "serviceAccountId"
      ],
      "type": "object"
    },
    "GoogleIAPReceipt": {
      "properties": {
        "autoAck": {
          "description": "If invoke Google play's Acknowledge after sync \u0026 fulfill item",
          "type": "boolean",
          "x-omitempty": false
        },
        "language": {
          "description": "language value from language tag, allowed format: en, en-US.\u003cp\u003eSupported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)\u003c/p\u003e",
          "pattern": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$",
          "type": "string"
        },
        "orderId": {
          "description": "OrderId returned from google play",
          "type": "string"
        },
        "packageName": {
          "description": "App package name",
          "type": "string"
        },
        "productId": {
          "description": "Product id (SKU)",
          "type": "string"
        },
        "purchaseTime": {
          "description": "Purchase time returned from google play",
          "format": "int64",
          "type": "integer"
        },
        "purchaseToken": {
          "description": "Google play purchase token returned from google play",
          "type": "string"
        },
        "region": {
          "description": "country value from ISO countries",
          "type": "string"
        }
      },
      "required": [
        "orderId",
        "packageName",
        "productId",
        "purchaseTime",
        "purchaseToken"
      ],
      "type": "object"
    },
    "GoogleReceiptResolveResult": {
      "properties": {
        "needConsume": {
          "description": "if client side need consume this receipt's product by invoke Google Billing client's consumeAsync",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "GrantSubscriptionDaysRequest": {
      "properties": {
        "grantDays": {
          "description": "grant days",
          "format": "int32",
          "type": "integer"
        },
        "reason": {
          "description": "grant reason",
          "type": "string"
        }
      },
      "required": [
        "grantDays"
      ],
      "type": "object"
    },
    "GrpcServerInfo": {
      "properties": {
        "address": {
          "type": "string"
        },
        "connectionTypeEnum": {
          "enum": [
            "INSECURE",
            "TLS"
          ],
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "tlsConfig": {
          "$ref": "#/definitions/TLSConfig"
        }
      },
      "type": "object"
    },
    "HierarchicalCategoryInfo": {
      "properties": {
        "categoryPath": {
          "description": "Category path",
          "type": "string"
        },
        "childCategories": {
          "description": "Child category list",
          "items": {
            "$ref": "#/definitions/HierarchicalCategoryInfo"
          },
          "type": "array"
        },
        "createdAt": {
          "description": "Category created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "displayName": {
          "description": "Category display name",
          "type": "string"
        },
        "namespace": {
          "description": "Category namespace",
          "type": "string"
        },
        "parentCategoryPath": {
          "description": "Parent category path",
          "type": "string"
        },
        "root": {
          "type": "boolean",
          "x-omitempty": false
        },
        "updatedAt": {
          "description": "Category updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "categoryPath",
        "childCategories",
        "createdAt",
        "displayName",
        "namespace",
        "parentCategoryPath",
        "updatedAt"
      ],
      "type": "object"
    },
    "IAPClawbackPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/ClawbackInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "IAPConsumeHistoryInfo": {
      "properties": {
        "clientRequestParameter": {
          "$ref": "#/definitions/ClientRequestParameter"
        },
        "consumeItems": {
          "items": {
            "$ref": "#/definitions/ConsumeItem"
          },
          "type": "array"
        },
        "iapType": {
          "enum": [
            "APPLE",
            "EPICGAMES",
            "GOOGLE",
            "OCULUS",
            "PLAYSTATION",
            "STADIA",
            "STEAM",
            "TWITCH",
            "XBOX"
          ],
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "requestBody": {
          "type": "object"
        },
        "requestHistories": {
          "items": {
            "$ref": "#/definitions/RequestHistory"
          },
          "type": "array"
        },
        "requestUrl": {
          "type": "string"
        },
        "status": {
          "enum": [
            "FAIL",
            "PENDING",
            "SUCCESS"
          ],
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "IAPConsumeHistoryPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/IAPConsumeHistoryInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "IAPItemConfigInfo": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/IAPItemEntry"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "IAPItemConfigUpdate": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/IAPItemEntry"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "IAPItemEntry": {
      "properties": {
        "itemIdentity": {
          "description": "item id or sku",
          "type": "string"
        },
        "itemIdentityType": {
          "description": "item identity type",
          "enum": [
            "ITEM_ID",
            "ITEM_SKU"
          ],
          "type": "string"
        },
        "platformProductIdMap": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "IAP Platform production ids related item id",
          "type": "object"
        }
      },
      "type": "object"
    },
    "IAPItemFlatEntry": {
      "properties": {
        "itemIdentity": {
          "description": "item id or sku",
          "type": "string"
        },
        "itemIdentityType": {
          "description": "item identity type",
          "enum": [
            "ITEM_ID",
            "ITEM_SKU"
          ],
          "type": "string"
        },
        "platform": {
          "description": "iap platform",
          "enum": [
            "APPLE",
            "EPICGAMES",
            "GOOGLE",
            "OCULUS",
            "PLAYSTATION",
            "STADIA",
            "STEAM",
            "TWITCH",
            "XBOX"
          ],
          "type": "string"
        },
        "platformProductId": {
          "description": "IAP Platform production id related item id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IAPItemMappingInfo": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/IAPItemFlatEntry"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "IAPOrderInfo": {
      "properties": {
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "credits": {
          "description": "credit summary",
          "items": {
            "$ref": "#/definitions/CreditSummary"
          },
          "type": "array"
        },
        "currencyCode": {
          "description": "currency code",
          "type": "string"
        },
        "entitlements": {
          "description": "entitlement summary",
          "items": {
            "$ref": "#/definitions/EntitlementSummary"
          },
          "type": "array"
        },
        "fulfilledTime": {
          "description": "fulfill time if fulfilled",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "iapOrderNo": {
          "description": "iap order No",
          "type": "string"
        },
        "language": {
          "description": "language",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "price": {
          "description": "price",
          "format": "double",
          "type": "number"
        },
        "productId": {
          "description": "product id",
          "type": "string"
        },
        "quantity": {
          "description": "quantity",
          "format": "int32",
          "type": "integer"
        },
        "receiptData": {
          "description": "receipt data",
          "type": "string"
        },
        "region": {
          "description": "region",
          "type": "string"
        },
        "retryCount": {
          "description": "retry count",
          "format": "int32",
          "type": "integer"
        },
        "sandbox": {
          "description": "sandbox",
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "description": "status",
          "enum": [
            "FAILED",
            "FULFILLED",
            "VERIFIED"
          ],
          "type": "string"
        },
        "statusReason": {
          "description": "status reason",
          "type": "string"
        },
        "transactionId": {
          "description": "transaction id",
          "type": "string"
        },
        "type": {
          "description": "IAP type",
          "enum": [
            "APPLE",
            "EPICGAMES",
            "GOOGLE",
            "OCULUS",
            "PLAYSTATION",
            "STADIA",
            "STEAM",
            "TWITCH",
            "XBOX"
          ],
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "userId": {
          "description": "user id",
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "iapOrderNo",
        "namespace",
        "status",
        "type",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "IAPOrderPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/IAPOrderInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "Image": {
      "properties": {
        "as": {
          "description": "image for",
          "type": "string"
        },
        "caption": {
          "description": "image caption",
          "type": "string"
        },
        "height": {
          "description": "height",
          "format": "int32",
          "type": "integer"
        },
        "imageUrl": {
          "description": "imageUrl",
          "type": "string"
        },
        "smallImageUrl": {
          "description": "smallImageUrl",
          "type": "string"
        },
        "width": {
          "description": "width",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "height",
        "imageUrl",
        "smallImageUrl",
        "width"
      ],
      "type": "object"
    },
    "ImportErrorDetails": {
      "properties": {
        "errorCode": {
          "description": "error code",
          "format": "int32",
          "type": "integer"
        },
        "errorField": {
          "description": "error field, exists if constraint violated exception",
          "type": "string"
        },
        "errorMessage": {
          "description": "error message",
          "type": "string"
        },
        "errorValue": {
          "description": "error value, exists if constraint violated exception",
          "type": "string"
        },
        "messageVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "message variables",
          "type": "object"
        }
      },
      "type": "object"
    },
    "ImportStoreAppInfo": {
      "properties": {
        "itemId": {
          "description": "Item id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ImportStoreCategoryInfo": {
      "properties": {
        "categoryId": {
          "description": "category id",
          "type": "string"
        },
        "categoryPath": {
          "description": "category path",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ImportStoreError": {
      "properties": {
        "app": {
          "$ref": "#/definitions/ImportStoreAppInfo",
          "description": "app info"
        },
        "category": {
          "$ref": "#/definitions/ImportStoreCategoryInfo",
          "description": "category info"
        },
        "errors": {
          "description": "errors",
          "items": {
            "$ref": "#/definitions/ImportErrorDetails"
          },
          "type": "array"
        },
        "item": {
          "$ref": "#/definitions/ImportStoreItemInfo",
          "description": "item info"
        },
        "section": {
          "$ref": "#/definitions/ImportStoreSectionInfo",
          "description": "section info"
        },
        "type": {
          "description": "type",
          "enum": [
            "APP",
            "CATEGORY",
            "ITEM",
            "SECTION",
            "STORE",
            "VIEW"
          ],
          "type": "string"
        },
        "view": {
          "$ref": "#/definitions/ImportStoreViewInfo",
          "description": "view info"
        }
      },
      "type": "object"
    },
    "ImportStoreItemInfo": {
      "properties": {
        "categoryPath": {
          "description": "Item category path",
          "type": "string"
        },
        "itemId": {
          "description": "Item id",
          "type": "string"
        },
        "itemType": {
          "description": "Item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "localizations": {
          "additionalProperties": {
            "$ref": "#/definitions/Localization"
          },
          "description": "Item localizations",
          "type": "object"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "sku": {
          "description": "Sku",
          "type": "string"
        }
      },
      "required": [
        "itemType",
        "localizations"
      ],
      "type": "object"
    },
    "ImportStoreResult": {
      "properties": {
        "errors": {
          "description": "errors",
          "items": {
            "$ref": "#/definitions/ImportStoreError"
          },
          "type": "array"
        },
        "storeInfo": {
          "$ref": "#/definitions/StoreInfo",
          "description": "store info"
        },
        "success": {
          "description": "import result",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "ImportStoreSectionInfo": {
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "sectionId": {
          "description": "section id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ImportStoreViewInfo": {
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "viewId": {
          "description": "view id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "InGameItemSync": {
      "properties": {
        "categoryPath": {
          "description": "the new category path for the synced item, A path separated by \"/\", will not show in store if it set to blank",
          "example": "/games",
          "type": "string"
        },
        "targetItemId": {
          "description": "item id in game namespace",
          "type": "string"
        },
        "targetNamespace": {
          "description": "game namespace",
          "type": "string"
        }
      },
      "required": [
        "categoryPath",
        "targetItemId",
        "targetNamespace"
      ],
      "type": "object"
    },
    "InvoiceCurrencySummary": {
      "properties": {
        "currency": {
          "$ref": "#/definitions/CurrencySummary",
          "description": "currency"
        },
        "salesVolume": {
          "description": "sales volume",
          "format": "int64",
          "type": "integer"
        },
        "subtotalPrice": {
          "description": "subtotal price",
          "format": "int64",
          "type": "integer"
        },
        "totalPrice": {
          "description": "total price",
          "format": "int64",
          "type": "integer"
        },
        "totalTax": {
          "description": "total tax",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "currency",
        "salesVolume",
        "subtotalPrice",
        "totalPrice",
        "totalTax"
      ],
      "type": "object"
    },
    "InvoiceSummary": {
      "properties": {
        "invoiceCurrencySummary": {
          "description": "invoice currency summary",
          "items": {
            "$ref": "#/definitions/InvoiceCurrencySummary"
          },
          "type": "array"
        },
        "totalSalesVolume": {
          "description": "total sales volume",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "invoiceCurrencySummary",
        "totalSalesVolume"
      ],
      "type": "object"
    },
    "ItemAcquireRequest": {
      "properties": {
        "count": {
          "description": "acquire count",
          "format": "int32",
          "type": "integer"
        },
        "orderNo": {
          "description": "order no",
          "type": "string"
        }
      },
      "required": [
        "count",
        "orderNo"
      ],
      "type": "object"
    },
    "ItemAcquireResult": {
      "properties": {
        "maxCount": {
          "description": "max count",
          "format": "int32",
          "type": "integer"
        },
        "success": {
          "description": "acquire result",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "maxCount",
        "success"
      ],
      "type": "object"
    },
    "ItemCreate": {
      "description": "A DTO object for creating item API call.",
      "properties": {
        "appId": {
          "description": "appId, required if appType is present, alpha numeric, max length is 255",
          "type": "string"
        },
        "appType": {
          "description": "appType",
          "enum": [
            "DEMO",
            "DLC",
            "GAME",
            "SOFTWARE"
          ],
          "type": "string"
        },
        "baseAppId": {
          "description": "baseAppId, can set value of game appId if want to link to a game",
          "type": "string"
        },
        "boothName": {
          "description": "booth name to get tickets while ItemType is CODE, Campaign or KeyGroup should located in targetNamespace if targetNamespace not null",
          "type": "string"
        },
        "categoryPath": {
          "description": "Category Path, A path separated by \"/\", will not show in store if it set to blank, max length is 255",
          "example": "/games",
          "type": "string"
        },
        "clazz": {
          "description": "customized item clazz",
          "type": "string"
        },
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "entitlementType": {
          "description": "Entitlement Type",
          "enum": [
            "CONSUMABLE",
            "DURABLE"
          ],
          "type": "string"
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "customized item properties",
          "type": "object"
        },
        "features": {
          "description": "Features, allowed characters from a-zA-Z0-9_:- and start/end in alphanumeric with length range from 1 to 127",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "flexible": {
          "description": "whether flexible pricing applied, only applied if itemType is BUNDLE",
          "type": "boolean",
          "x-omitempty": false
        },
        "images": {
          "description": "images",
          "items": {
            "$ref": "#/definitions/Image"
          },
          "type": "array"
        },
        "itemIds": {
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "itemQty": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "description": "itemQty, the quantity of item in itemIds, default 1, should be empty if item type is not \"BUNDLE\"",
          "type": "object"
        },
        "itemType": {
          "description": "Item Type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "listable": {
          "description": "Whether can be visible in Store for public user",
          "type": "boolean",
          "x-omitempty": false
        },
        "localizations": {
          "additionalProperties": {
            "$ref": "#/definitions/Localization"
          },
          "description": "Localization, key language, value localization content",
          "type": "object"
        },
        "lootBoxConfig": {
          "$ref": "#/definitions/LootBoxConfig",
          "description": "loot box config, should be empty if item type is not \"LOOTBOX\""
        },
        "maxCount": {
          "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE",
          "format": "int32",
          "type": "integer"
        },
        "maxCountPerUser": {
          "description": "Max count per user, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name, max length is 127",
          "type": "string"
        },
        "optionBoxConfig": {
          "$ref": "#/definitions/OptionBoxConfig",
          "description": "option box config, should be empty if item type is not \"OPTIONBOX\""
        },
        "purchasable": {
          "description": "Whether can be purchased",
          "type": "boolean",
          "x-omitempty": false
        },
        "recurring": {
          "$ref": "#/definitions/Recurring",
          "description": "recurring for subscription"
        },
        "regionData": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/RegionDataItemDTO"
            },
            "type": "array"
          },
          "description": "region data map, key is region, value is region data list",
          "type": "object"
        },
        "saleConfig": {
          "$ref": "#/definitions/SaleConfig",
          "description": "sale config, required if sellable is true"
        },
        "seasonType": {
          "description": "seasonType",
          "enum": [
            "PASS",
            "TIER"
          ],
          "type": "string"
        },
        "sectionExclusive": {
          "description": "Whether this item is sold in section only",
          "type": "boolean",
          "x-omitempty": false
        },
        "sellable": {
          "description": "sellable, whether allow to sell back to store",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "sku, allowed characters from a-zA-Z0-9_:- and start/end in alphanumeric, max length is 127",
          "type": "string"
        },
        "stackable": {
          "description": "Whether to stack the entitlement when entitlement type is \"CONSUMABLE\"",
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "description": "status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "tags": {
          "description": "Tags, allowed characters from a-zA-Z0-9:_- with length range from 1 to 30, should start and end in upper/lowercase/number, an item has max 5 tags.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "targetCurrencyCode": {
          "description": "target currency code, required if item type is \"COINS\"",
          "type": "string"
        },
        "targetNamespace": {
          "description": "target namespace, require when sell a game's item on the publisher namespace",
          "type": "string"
        },
        "thumbnailUrl": {
          "description": "thumbnail Url",
          "type": "string"
        },
        "useCount": {
          "description": "Represent entitlement count when entitlement type is \"CONSUMABLE\", and represent coin count when itemType is \"COINS\"",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "categoryPath",
        "entitlementType",
        "itemType",
        "localizations",
        "name",
        "regionData",
        "status"
      ],
      "type": "object"
    },
    "ItemDynamicDataInfo": {
      "properties": {
        "availableCount": {
          "description": "the available count of this item, -1 means UNLIMITED, corresponding to maxCount",
          "format": "int32",
          "type": "integer"
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "namespace": {
          "description": "item namespace",
          "type": "string"
        },
        "userAvailableCount": {
          "description": "the available count of this item for current user, -1 means UNLIMITED, corresponding to maxCountPerUser",
          "format": "int64",
          "type": "integer"
        },
        "userPurchaseLimit": {
          "description": "the max count that user can do purchase, -1 means UNLIMITED",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "availableCount",
        "itemId",
        "namespace",
        "userAvailableCount",
        "userPurchaseLimit"
      ],
      "type": "object"
    },
    "ItemId": {
      "properties": {
        "itemId": {
          "description": "itemId",
          "type": "string"
        },
        "sku": {
          "description": "sku",
          "type": "string"
        },
        "status": {
          "description": "status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        }
      },
      "required": [
        "itemId"
      ],
      "type": "object"
    },
    "ItemInfo": {
      "properties": {
        "appId": {
          "description": "App id, required when itemType is APP",
          "type": "string"
        },
        "appType": {
          "description": "App type, required when itemType is APP",
          "enum": [
            "DEMO",
            "DLC",
            "GAME",
            "SOFTWARE"
          ],
          "type": "string"
        },
        "baseAppId": {
          "description": "Base app id",
          "type": "string"
        },
        "boothName": {
          "description": "booth name to get tickets while it's item type is CODE",
          "type": "string"
        },
        "boundItemIds": {
          "description": "the items which this item being bounded to",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "categoryPath": {
          "description": "Item category path",
          "type": "string"
        },
        "clazz": {
          "description": "customized item clazz",
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "description": {
          "description": "description info",
          "type": "string"
        },
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "entitlementType": {
          "description": "Entitlement type",
          "enum": [
            "CONSUMABLE",
            "DURABLE"
          ],
          "type": "string"
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "customized item properties",
          "type": "object"
        },
        "features": {
          "description": "Features",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "flexible": {
          "description": "whether flexible pricing applied, only applied if itemType is BUNDLE",
          "type": "boolean",
          "x-omitempty": false
        },
        "fresh": {
          "description": "fresh",
          "type": "boolean",
          "x-omitempty": false
        },
        "images": {
          "description": "images",
          "items": {
            "$ref": "#/definitions/Image"
          },
          "type": "array"
        },
        "itemId": {
          "description": "Item id",
          "type": "string"
        },
        "itemIds": {
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "itemQty": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "description": "itemQty, the quantity of item in itemIds, default 1, should be empty if item type is not \"BUNDLE\"",
          "type": "object"
        },
        "itemType": {
          "description": "Item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "language": {
          "description": "language",
          "type": "string"
        },
        "listable": {
          "description": "Whether can be visible in Store for public user",
          "type": "boolean",
          "x-omitempty": false
        },
        "localExt": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "longDescription": {
          "description": "long description info",
          "type": "string"
        },
        "lootBoxConfig": {
          "$ref": "#/definitions/LootBoxConfig",
          "description": "loot box config"
        },
        "maxCount": {
          "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE",
          "format": "int32",
          "type": "integer"
        },
        "maxCountPerUser": {
          "description": "Max count per user, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "namespace": {
          "description": "Item namespace",
          "type": "string"
        },
        "optionBoxConfig": {
          "$ref": "#/definitions/OptionBoxConfig",
          "description": "option box config"
        },
        "purchasable": {
          "description": "Whether can be purchased",
          "type": "boolean",
          "x-omitempty": false
        },
        "purchaseCondition": {
          "$ref": "#/definitions/PurchaseCondition",
          "description": "purchase condition"
        },
        "recurring": {
          "$ref": "#/definitions/Recurring",
          "description": "recurring for subscription"
        },
        "region": {
          "description": "region",
          "type": "string"
        },
        "regionData": {
          "description": "Region data",
          "items": {
            "$ref": "#/definitions/RegionDataItem"
          },
          "type": "array"
        },
        "saleConfig": {
          "$ref": "#/definitions/SaleConfig",
          "description": "sale config"
        },
        "seasonType": {
          "description": "Season type, required while itemType is SEASON",
          "enum": [
            "PASS",
            "TIER"
          ],
          "type": "string"
        },
        "sectionExclusive": {
          "description": "whether it is sold in section only",
          "type": "boolean",
          "x-omitempty": false
        },
        "sellable": {
          "description": "whether allow to sell back to store",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "Sku",
          "type": "string"
        },
        "stackable": {
          "description": "Whether stack the CONSUMABLE entitlement",
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "description": "Item status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "tags": {
          "description": "Tags",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "targetCurrencyCode": {
          "description": "Target currency code of coin item",
          "type": "string"
        },
        "targetItemId": {
          "description": "Target item id if this item is mapping from game namespace",
          "type": "string"
        },
        "targetNamespace": {
          "description": "The target namespace of a cross namespace item",
          "type": "string"
        },
        "thumbnailUrl": {
          "description": "thumbnail url",
          "type": "string"
        },
        "title": {
          "description": "title info",
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "useCount": {
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "categoryPath",
        "createdAt",
        "entitlementType",
        "itemId",
        "itemType",
        "language",
        "name",
        "namespace",
        "region",
        "status",
        "title",
        "updatedAt"
      ],
      "type": "object"
    },
    "ItemNaming": {
      "properties": {
        "categoryPath": {
          "description": "Category Path",
          "type": "string"
        },
        "itemId": {
          "description": "Item id",
          "type": "string"
        },
        "itemType": {
          "description": "Item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "namespace": {
          "description": "Item namespace",
          "type": "string"
        },
        "seasonType": {
          "description": "season type",
          "enum": [
            "PASS",
            "TIER"
          ],
          "type": "string"
        },
        "sku": {
          "description": "Sku",
          "type": "string"
        },
        "status": {
          "description": "status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        }
      },
      "required": [
        "itemId",
        "itemType",
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "ItemPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/ItemInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "ItemPurchaseConditionValidateRequest": {
      "properties": {
        "itemIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ItemPurchaseConditionValidateResult": {
      "properties": {
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "purchasable": {
          "description": "purchasable",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "item sku",
          "type": "string"
        },
        "validateDetails": {
          "description": "validate details: list of condition group validate result. index is same as purchase condition group.",
          "items": {
            "$ref": "#/definitions/ConditionGroupValidateResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ItemReturnRequest": {
      "properties": {
        "orderNo": {
          "description": "orderNo",
          "type": "string"
        }
      },
      "required": [
        "orderNo"
      ],
      "type": "object"
    },
    "ItemRevocation": {
      "properties": {
        "creditRevocations": {
          "items": {
            "$ref": "#/definitions/CreditRevocation"
          },
          "type": "array"
        },
        "customRevocation": {
          "type": "object"
        },
        "entitlementRevocations": {
          "items": {
            "$ref": "#/definitions/EntitlementRevocation"
          },
          "type": "array"
        },
        "itemId": {
          "type": "string"
        },
        "itemRevocations": {
          "items": {
            "$ref": "#/definitions/ItemRevocation"
          },
          "type": "array"
        },
        "itemSku": {
          "type": "string"
        },
        "itemType": {
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "quantity": {
          "format": "int64",
          "type": "integer"
        },
        "reason": {
          "type": "string"
        },
        "skipped": {
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "enum": [
            "FAIL",
            "SUCCESS"
          ],
          "type": "string"
        },
        "strategy": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ItemSnapshot": {
      "properties": {
        "appId": {
          "description": "App id, required when itemType is APP",
          "type": "string"
        },
        "appType": {
          "description": "App type, required when itemType is APP",
          "enum": [
            "DEMO",
            "DLC",
            "GAME",
            "SOFTWARE"
          ],
          "type": "string"
        },
        "baseAppId": {
          "description": "Base app Id",
          "type": "string"
        },
        "boothName": {
          "description": "booth name to get tickets while it's item type is CODE",
          "type": "string"
        },
        "createdAt": {
          "description": "createdAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "description": "description",
          "type": "string"
        },
        "entitlementType": {
          "description": "Entitlement type",
          "enum": [
            "CONSUMABLE",
            "DURABLE"
          ],
          "type": "string"
        },
        "features": {
          "description": "supported features",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "flexible": {
          "description": "whether flexible pricing applied, only applied if itemType is BUNDLE",
          "type": "boolean",
          "x-omitempty": false
        },
        "itemId": {
          "description": "Item id",
          "type": "string"
        },
        "itemIds": {
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "itemQty": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "description": "itemQty, the quantity of item in itemIds, default 1, should be empty if item type is not \"BUNDLE\"",
          "type": "object"
        },
        "itemType": {
          "description": "Item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "language": {
          "description": "language",
          "type": "string"
        },
        "listable": {
          "description": "Whether can be visible in Store for public user",
          "type": "boolean",
          "x-omitempty": false
        },
        "lootBoxConfig": {
          "$ref": "#/definitions/LootBoxConfig",
          "description": "loot box config"
        },
        "maxCount": {
          "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE",
          "format": "int32",
          "type": "integer"
        },
        "maxCountPerUser": {
          "description": "Max count per user, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "namespace": {
          "description": "Item's namespace",
          "type": "string"
        },
        "optionBoxConfig": {
          "$ref": "#/definitions/OptionBoxConfig",
          "description": "option box config"
        },
        "purchasable": {
          "description": "Whether can be purchased",
          "type": "boolean",
          "x-omitempty": false
        },
        "recurring": {
          "$ref": "#/definitions/Recurring",
          "description": "recurring for subscription"
        },
        "region": {
          "description": "region",
          "type": "string"
        },
        "regionDataItem": {
          "$ref": "#/definitions/RegionDataItem",
          "description": "Region data"
        },
        "saleConfig": {
          "$ref": "#/definitions/SaleConfig",
          "description": "sale config"
        },
        "seasonType": {
          "description": "Season type, required while itemType is SEASON",
          "enum": [
            "PASS",
            "TIER"
          ],
          "type": "string"
        },
        "sectionExclusive": {
          "description": "whether it is sold in section only",
          "type": "boolean",
          "x-omitempty": false
        },
        "sellable": {
          "description": "whether allow to sell back to store",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "Sku",
          "type": "string"
        },
        "stackable": {
          "description": "Whether stack the CONSUMABLE entitlement",
          "type": "boolean",
          "x-omitempty": false
        },
        "targetCurrencyCode": {
          "description": "Target currency code of coin item",
          "type": "string"
        },
        "targetItemId": {
          "description": "Target item id of mapping from game namespace to publisher namespace",
          "type": "string"
        },
        "targetNamespace": {
          "description": "The target namespace of a cross namespace item",
          "type": "string"
        },
        "thumbnailUrl": {
          "description": "thumbnail url",
          "type": "string"
        },
        "title": {
          "description": "title info",
          "type": "string"
        },
        "updatedAt": {
          "description": "updatedAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "useCount": {
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "entitlementType",
        "itemId",
        "itemType",
        "language",
        "name",
        "namespace",
        "region",
        "title"
      ],
      "type": "object"
    },
    "ItemTypeConfigCreate": {
      "description": "A DTO object for creating item type config API call.",
      "properties": {
        "clazz": {
          "description": "customized item clazz",
          "type": "string"
        },
        "dryRun": {
          "description": "mock workflow while set true, default false",
          "type": "boolean",
          "x-omitempty": false
        },
        "fulfillmentUrl": {
          "description": "url to send the fulfillment notification",
          "type": "string"
        },
        "itemType": {
          "description": "Item Type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "purchaseConditionUrl": {
          "description": "url to check if the item is purchasable",
          "type": "string"
        }
      },
      "required": [
        "fulfillmentUrl",
        "itemType"
      ],
      "type": "object"
    },
    "ItemTypeConfigInfo": {
      "properties": {
        "clazz": {
          "description": "customized item clazz",
          "type": "string"
        },
        "createdAt": {
          "description": "created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "dryRun": {
          "description": "mock workflow while set true, default false",
          "type": "boolean",
          "x-omitempty": false
        },
        "fulfillmentUrl": {
          "description": "url to send the fulfillment notification",
          "type": "string"
        },
        "id": {
          "description": "Item type config id",
          "type": "string"
        },
        "itemType": {
          "description": "Item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "purchaseConditionUrl": {
          "description": "url to check if the item is purchasable",
          "type": "string"
        },
        "updatedAt": {
          "description": "updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "createdAt",
        "fulfillmentUrl",
        "id",
        "itemType",
        "updatedAt"
      ],
      "type": "object"
    },
    "ItemTypeConfigUpdate": {
      "description": "A DTO object for updating item API call.",
      "properties": {
        "clazz": {
          "description": "customized item clazz",
          "type": "string"
        },
        "dryRun": {
          "description": "mock workflow while set true, default false",
          "type": "boolean",
          "x-omitempty": false
        },
        "fulfillmentUrl": {
          "description": "url to send the fulfillment notification",
          "type": "string"
        },
        "purchaseConditionUrl": {
          "description": "url to check if the item is purchasable",
          "type": "string"
        }
      },
      "required": [
        "fulfillmentUrl"
      ],
      "type": "object"
    },
    "ItemUpdate": {
      "description": "A DTO object for updating item API call.",
      "properties": {
        "appId": {
          "description": "appId, required if appType is present, alpha numeric, max length is 255",
          "type": "string"
        },
        "appType": {
          "description": "appType",
          "enum": [
            "DEMO",
            "DLC",
            "GAME",
            "SOFTWARE"
          ],
          "type": "string"
        },
        "baseAppId": {
          "description": "baseAppId, can set value of game appId if want to link to a game",
          "type": "string"
        },
        "boothName": {
          "description": "booth name to get tickets while ItemType is CODE, Campaign or KeyGroup should located in targetNamespace if targetNamespace not null",
          "type": "string"
        },
        "categoryPath": {
          "description": "Category Path, A path separated by \"/\", will not show in store if it set to blank, max length is 255",
          "example": "/games",
          "type": "string"
        },
        "clazz": {
          "description": "customized item clazz",
          "type": "string"
        },
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "entitlementType": {
          "description": "Entitlement Type",
          "enum": [
            "CONSUMABLE",
            "DURABLE"
          ],
          "type": "string"
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "customized item properties",
          "type": "object"
        },
        "features": {
          "description": "Features, allowed characters from a-zA-Z0-9_:- and start/end in alphanumeric with length range from 1 to 127",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "flexible": {
          "description": "whether flexible pricing applied, only applied if itemType is BUNDLE",
          "type": "boolean",
          "x-omitempty": false
        },
        "images": {
          "description": "images",
          "items": {
            "$ref": "#/definitions/Image"
          },
          "type": "array"
        },
        "itemIds": {
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "itemQty": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "description": "itemQty, the quantity of item in itemIds, default 1, should be empty if item type is not \"BUNDLE\"",
          "type": "object"
        },
        "itemType": {
          "description": "Item Type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "listable": {
          "description": "Whether can be visible in Store for public user",
          "type": "boolean",
          "x-omitempty": false
        },
        "localizations": {
          "additionalProperties": {
            "$ref": "#/definitions/Localization"
          },
          "description": "Localization, key language, value localization content",
          "type": "object"
        },
        "lootBoxConfig": {
          "$ref": "#/definitions/LootBoxConfig",
          "description": "loot box config, should be empty if item type is not \"LOOTBOX\""
        },
        "maxCount": {
          "description": "Max count, -1 means UNLIMITED, new value should \u003e= old value if both old value and new value is limited, unset when itemType is CODE",
          "format": "int32",
          "type": "integer"
        },
        "maxCountPerUser": {
          "description": "Max count per user, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "optionBoxConfig": {
          "$ref": "#/definitions/OptionBoxConfig",
          "description": "option box config, should be empty if item type is not \"OPTIONBOX\""
        },
        "purchasable": {
          "description": "Whether can be purchased",
          "type": "boolean",
          "x-omitempty": false
        },
        "recurring": {
          "$ref": "#/definitions/Recurring",
          "description": "recurring for subscription"
        },
        "regionData": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/RegionDataItemDTO"
            },
            "type": "array"
          },
          "description": "region data map, key is region, value is region data list",
          "type": "object"
        },
        "saleConfig": {
          "$ref": "#/definitions/SaleConfig",
          "description": "sale config, required if sellable is true"
        },
        "seasonType": {
          "description": "seasonType",
          "enum": [
            "PASS",
            "TIER"
          ],
          "type": "string"
        },
        "sectionExclusive": {
          "description": "Whether this item is sold in section only",
          "type": "boolean",
          "x-omitempty": false
        },
        "sellable": {
          "description": "sellable, whether allow to sell back to store",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "sku, allowed characters from a-zA-Z0-9_:- and start/end in alphanumeric, max length is 127",
          "type": "string"
        },
        "stackable": {
          "description": "Whether to stack the entitlement when entitlement type is \"CONSUMABLE\"",
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "description": "status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "tags": {
          "description": "Tags, allowed characters from a-zA-Z0-9:_- with length range from 1 to 30, should start and end in upper/lowercase/number, an item has max 5 tags.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "targetCurrencyCode": {
          "description": "target currency code, required if item type is \"COINS\"",
          "type": "string"
        },
        "targetNamespace": {
          "description": "target namespace, require when sell a game's item on the publisher namespace",
          "type": "string"
        },
        "thumbnailUrl": {
          "description": "thumbnail Url",
          "type": "string"
        },
        "useCount": {
          "description": "Represent entitlement count when entitlement type is \"CONSUMABLE\", and represent coin count when itemType is \"COINS\"",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "entitlementType",
        "itemType"
      ],
      "type": "object"
    },
    "KeyGroupCreate": {
      "description": "A DTO object for creating KeyGroup API call.",
      "properties": {
        "description": {
          "description": "The description of the KeyGroup, max length is 1024 characters",
          "type": "string"
        },
        "name": {
          "description": "The name of the KeyGroup, a-z0-9_ 120 max length",
          "type": "string"
        },
        "status": {
          "description": "The status of the KeyGroup, default ACTIVE",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "tags": {
          "description": "The tags of the KeyGroup",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "KeyGroupDynamicInfo": {
      "properties": {
        "availableSaleCount": {
          "description": "The available sale count, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "quantity": {
          "description": "The total quantity of this key group has",
          "format": "int32",
          "type": "integer"
        },
        "saleCount": {
          "description": "The sale count",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "availableSaleCount",
        "quantity",
        "saleCount"
      ],
      "type": "object"
    },
    "KeyGroupInfo": {
      "properties": {
        "boothName": {
          "description": "booth name",
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "description": {
          "description": "description",
          "type": "string"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "status": {
          "description": "status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "tags": {
          "description": "tags",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "boothName",
        "createdAt",
        "id",
        "name",
        "namespace",
        "status",
        "updatedAt"
      ],
      "type": "object"
    },
    "KeyGroupPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/KeyGroupInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "KeyGroupUpdate": {
      "description": "A DTO object for creating KeyGroup API call.",
      "properties": {
        "description": {
          "description": "The description of the KeyGroup, max length is 1024 characters",
          "type": "string"
        },
        "name": {
          "description": "The name of the KeyGroup, a-z0-9_ 120 max length",
          "type": "string"
        },
        "status": {
          "description": "The status of the KeyGroup",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "tags": {
          "description": "The tags of the KeyGroup",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "KeyInfo": {
      "properties": {
        "acquireOrderNo": {
          "description": "order No. that grant this key",
          "type": "string"
        },
        "acquireUserId": {
          "description": "user Id who get this key",
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "id": {
          "description": "key id",
          "type": "string"
        },
        "keyFile": {
          "description": "key upload file",
          "type": "string"
        },
        "keyGroupId": {
          "description": "key group id",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "status": {
          "description": "status",
          "enum": [
            "ACQUIRED",
            "ACTIVE"
          ],
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "value": {
          "description": "key value",
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "id",
        "keyFile",
        "keyGroupId",
        "namespace",
        "status",
        "updatedAt",
        "value"
      ],
      "type": "object"
    },
    "KeyPagingSliceResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/KeyInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "ListViewInfo": {
      "properties": {
        "createdAt": {
          "description": "view created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "view name",
          "type": "string"
        },
        "namespace": {
          "description": "view namespace",
          "type": "string"
        },
        "updatedAt": {
          "description": "view updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "viewId": {
          "description": "view id",
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "displayOrder",
        "name",
        "namespace",
        "updatedAt",
        "viewId"
      ],
      "type": "object"
    },
    "Localization": {
      "properties": {
        "description": {
          "description": "description info",
          "type": "string"
        },
        "localExt": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "longDescription": {
          "description": "long description info",
          "type": "string"
        },
        "title": {
          "description": "title info",
          "type": "string"
        }
      },
      "required": [
        "title"
      ],
      "type": "object"
    },
    "LootBoxConfig": {
      "properties": {
        "rewardCount": {
          "description": "reward count, default is 1",
          "format": "int32",
          "type": "integer"
        },
        "rewards": {
          "description": "rewards",
          "items": {
            "$ref": "#/definitions/LootBoxReward"
          },
          "type": "array"
        },
        "rollFunction": {
          "description": "roll function",
          "enum": [
            "CUSTOM",
            "DEFAULT"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "LootBoxPluginConfigInfo": {
      "properties": {
        "appConfig": {
          "$ref": "#/definitions/AppConfig",
          "description": "app config"
        },
        "customConfig": {
          "$ref": "#/definitions/PublicCustomConfigInfo",
          "description": "custom config"
        },
        "extendType": {
          "description": "extend type",
          "enum": [
            "APP",
            "CUSTOM"
          ],
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "LootBoxPluginConfigUpdate": {
      "properties": {
        "appConfig": {
          "$ref": "#/definitions/AppConfig",
          "description": "app config"
        },
        "customConfig": {
          "$ref": "#/definitions/BaseCustomConfig",
          "description": "custom config"
        },
        "extendType": {
          "description": "extend type",
          "enum": [
            "APP",
            "CUSTOM"
          ],
          "type": "string"
        }
      },
      "required": [
        "extendType"
      ],
      "type": "object"
    },
    "LootBoxReward": {
      "properties": {
        "lootBoxItems": {
          "description": "reward items, if type is PROBABILITY_GROUP, will random get one of items in it, if type is REWARD, will grant all items to user when roll this reward",
          "items": {
            "$ref": "#/definitions/BoxItem"
          },
          "type": "array"
        },
        "name": {
          "description": "reward name",
          "type": "string"
        },
        "odds": {
          "description": "odds, automatic calculation based on weights.",
          "format": "double",
          "type": "number"
        },
        "type": {
          "description": "reward type",
          "enum": [
            "PROBABILITY_GROUP",
            "REWARD",
            "REWARD_GROUP"
          ],
          "type": "string"
        },
        "weight": {
          "description": "reward weight",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MockIAPReceipt": {
      "properties": {
        "itemIdentityType": {
          "description": "The item identity type",
          "enum": [
            "ITEM_ID",
            "ITEM_SKU"
          ],
          "type": "string"
        },
        "language": {
          "description": "language value from language tag, allowed format: en, en-US.\u003cp\u003eSupported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)\u003c/p\u003e",
          "pattern": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$",
          "type": "string"
        },
        "productId": {
          "description": "The product identifier of the item that was purchased.",
          "type": "string"
        },
        "region": {
          "description": "country value from ISO countries",
          "type": "string"
        },
        "transactionId": {
          "description": "transactionId",
          "type": "string"
        },
        "type": {
          "description": "The IAP type.",
          "enum": [
            "APPLE",
            "EPICGAMES",
            "GOOGLE",
            "OCULUS",
            "PLAYSTATION",
            "STADIA",
            "STEAM",
            "TWITCH",
            "XBOX"
          ],
          "type": "string"
        }
      },
      "required": [
        "productId",
        "type"
      ],
      "type": "object"
    },
    "NotificationProcessResult": {
      "properties": {
        "code": {
          "type": "string"
        },
        "customParam": {
          "type": "object"
        },
        "severity": {
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "enum": [
            "ERROR",
            "IGNORED",
            "PROCESSED",
            "WARN"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "OculusIAPConfigInfo": {
      "properties": {
        "appId": {
          "description": "oculus api app id",
          "type": "string"
        },
        "appSecret": {
          "description": "oculus api app secret",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "OculusIAPConfigRequest": {
      "properties": {
        "appId": {
          "description": "oculus api app id, don't allow white space and *",
          "type": "string"
        },
        "appSecret": {
          "description": "oculus api app secret, don't allow white space and *",
          "type": "string"
        }
      },
      "required": [
        "appId"
      ],
      "type": "object"
    },
    "OculusReconcileResult": {
      "properties": {
        "iapOrderStatus": {
          "description": "AGS In App Purchase order status",
          "enum": [
            "FAILED",
            "FULFILLED",
            "VERIFIED"
          ],
          "type": "string"
        },
        "itemIdentity": {
          "description": "AGS item identity",
          "type": "string"
        },
        "itemIdentityType": {
          "description": "AGS item identity type",
          "enum": [
            "ITEM_ID",
            "ITEM_SKU"
          ],
          "type": "string"
        },
        "oculusItemSku": {
          "description": "Oculus item sku",
          "type": "string"
        },
        "transactionId": {
          "description": "AGS transaction id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Operation": {
      "properties": {
        "creditPayload": {
          "$ref": "#/definitions/CreditPayload"
        },
        "debitPayload": {
          "$ref": "#/definitions/DebitPayload"
        },
        "fulFillItemPayload": {
          "$ref": "#/definitions/FulFillItemPayload"
        },
        "resultId": {
          "type": "string"
        },
        "revokeEntitlementPayload": {
          "$ref": "#/definitions/RevokeEntitlementPayload"
        },
        "status": {
          "enum": [
            "FAILED",
            "INIT",
            "SKIPPED",
            "SUCCESS"
          ],
          "type": "string"
        },
        "statusReason": {
          "type": "string"
        },
        "type": {
          "enum": [
            "CREDIT_WALLET",
            "DEBIT_WALLET",
            "FULFILL_ITEM",
            "REVOKE_ENTITLEMENT"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "OperationRequest": {
      "description": "Represents a single operation request.",
      "properties": {
        "creditPayload": {
          "$ref": "#/definitions/CreditPayload"
        },
        "debitPayload": {
          "$ref": "#/definitions/DebitPayload"
        },
        "fulFillItemPayload": {
          "$ref": "#/definitions/FulFillItemPayload"
        },
        "revokeEntitlementPayload": {
          "$ref": "#/definitions/RevokeEntitlementPayload"
        },
        "type": {
          "enum": [
            "CREDIT_WALLET",
            "DEBIT_WALLET",
            "FULFILL_ITEM",
            "REVOKE_ENTITLEMENT"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "OptionBoxConfig": {
      "description": "Option box config.",
      "properties": {
        "boxItems": {
          "description": "Option box items",
          "items": {
            "$ref": "#/definitions/BoxItem"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Order": {
      "properties": {
        "chargebackReversedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "chargebackTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "charged": {
          "type": "boolean",
          "x-omitempty": false
        },
        "chargedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "countItemId": {
          "type": "string"
        },
        "countNamespace": {
          "type": "string"
        },
        "countUserId": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "createdTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "creationOptions": {
          "$ref": "#/definitions/OrderCreationOptions"
        },
        "currency": {
          "$ref": "#/definitions/CurrencySummary"
        },
        "discountedPrice": {
          "format": "int32",
          "type": "integer"
        },
        "expireTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "free": {
          "type": "boolean",
          "x-omitempty": false
        },
        "fulfilledTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "itemId": {
          "type": "string"
        },
        "itemSnapshot": {
          "$ref": "#/definitions/ItemSnapshot"
        },
        "language": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "orderBundleItemInfos": {
          "items": {
            "$ref": "#/definitions/OrderBundleItemInfo"
          },
          "type": "array"
        },
        "orderNo": {
          "type": "string"
        },
        "paymentMethod": {
          "type": "string"
        },
        "paymentMethodFee": {
          "format": "int32",
          "type": "integer"
        },
        "paymentOrderNo": {
          "type": "string"
        },
        "paymentProvider": {
          "enum": [
            "ADYEN",
            "ALIPAY",
            "CHECKOUT",
            "PAYPAL",
            "STRIPE",
            "WALLET",
            "WXPAY",
            "XSOLLA"
          ],
          "type": "string"
        },
        "paymentProviderFee": {
          "format": "int32",
          "type": "integer"
        },
        "paymentRemainSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "paymentStationUrl": {
          "type": "string"
        },
        "price": {
          "format": "int32",
          "type": "integer"
        },
        "quantity": {
          "format": "int32",
          "type": "integer"
        },
        "refundedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "region": {
          "type": "string"
        },
        "returnUrl": {
          "type": "string"
        },
        "rvn": {
          "format": "int32",
          "type": "integer"
        },
        "salesTax": {
          "format": "int32",
          "type": "integer"
        },
        "sandbox": {
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "enum": [
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "CHARGED",
            "CLOSED",
            "DELETED",
            "FULFILLED",
            "FULFILL_FAILED",
            "INIT",
            "REFUNDED",
            "REFUNDING",
            "REFUND_FAILED"
          ],
          "type": "string"
        },
        "statusReason": {
          "type": "string"
        },
        "subtotalPrice": {
          "format": "int32",
          "type": "integer"
        },
        "tax": {
          "format": "int32",
          "type": "integer"
        },
        "totalPrice": {
          "format": "int32",
          "type": "integer"
        },
        "totalTax": {
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "type": "string"
        },
        "vat": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrderBundleItemInfo": {
      "properties": {
        "discountedPrice": {
          "description": "current available discounted price per item",
          "format": "int32",
          "type": "integer"
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "itemName": {
          "description": "item name",
          "type": "string"
        },
        "itemSku": {
          "description": "item sku",
          "type": "string"
        },
        "price": {
          "description": "current available price per item",
          "format": "int32",
          "type": "integer"
        },
        "purchased": {
          "description": "Whether the item has been purchased in this order",
          "type": "boolean",
          "x-omitempty": false
        },
        "quantity": {
          "description": "quantity",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "discountedPrice",
        "itemId",
        "itemName",
        "itemSku",
        "price"
      ],
      "type": "object"
    },
    "OrderCreate": {
      "properties": {
        "currencyCode": {
          "description": "currency code, should match currency code in item region data",
          "type": "string"
        },
        "discountedPrice": {
          "description": "Discounted price of order, this should match (item_discounted_price * quantity) ifitem discounted price is available, otherwise it should equal to (item_price * quantity) if item is not flexible bundle, if item is flexible bundle, item discounted price should equal estimate discounted price.",
          "format": "int32",
          "type": "integer"
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "extra field to store external order information",
          "type": "object"
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "language": {
          "description": "language value from language tag, allowed format: en, en-US.\u003cp\u003eSupported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)\u003c/p\u003e",
          "pattern": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$",
          "type": "string"
        },
        "price": {
          "description": "Price of order, should match (item_price * quantity) if item is not flexible bundle, should use flexible estimate price if item is flexible bundle",
          "format": "int32",
          "type": "integer"
        },
        "quantity": {
          "description": "Quantity of item, min is 1, and will default use 1 and ignore this quantity field if item is flexible bundle",
          "format": "int32",
          "type": "integer"
        },
        "region": {
          "description": "country value from ISO countries",
          "type": "string"
        },
        "returnUrl": {
          "description": "custom return url for real payment, user will be redirected to this url once payment is finished",
          "type": "string"
        },
        "sectionId": {
          "description": "section Id, required if order consists of section item",
          "type": "string"
        }
      },
      "required": [
        "currencyCode",
        "discountedPrice",
        "itemId",
        "quantity"
      ],
      "type": "object"
    },
    "OrderCreationOptions": {
      "description": "A DTO object for order creation options",
      "properties": {
        "skipPriceValidation": {
          "description": "skip price validation",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "OrderGrantInfo": {
      "properties": {
        "credits": {
          "description": "Order credit list",
          "items": {
            "$ref": "#/definitions/CreditSummary"
          },
          "type": "array"
        },
        "entitlements": {
          "description": "Order entitlement list",
          "items": {
            "$ref": "#/definitions/EntitlementSummary"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OrderHistoryInfo": {
      "properties": {
        "action": {
          "description": "The action of the order",
          "enum": [
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "CHARGED",
            "CLOSE",
            "DELETED",
            "FULFILLED",
            "FULFILL_FAILED",
            "INIT",
            "REFUNDED",
            "REFUNDING",
            "REFUND_FAILED",
            "SET_STATUS"
          ],
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "description": "The namespace of this order",
          "type": "string"
        },
        "operator": {
          "description": "The operator to this order",
          "type": "string"
        },
        "orderNo": {
          "description": "The Order number",
          "type": "string"
        },
        "reason": {
          "description": "The reason of this operation",
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "userId": {
          "description": "The owner of the order",
          "type": "string"
        }
      },
      "required": [
        "action",
        "createdAt",
        "namespace",
        "operator",
        "orderNo",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "OrderInfo": {
      "properties": {
        "chargebackReversedTime": {
          "description": "The time of the order chargeback reversed",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "chargebackTime": {
          "description": "The time of the order chargeback",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "chargedTime": {
          "description": "The time of the order charged",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "createdAt": {
          "description": "createdAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "createdTime": {
          "description": "The time of the order created",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "creationOptions": {
          "$ref": "#/definitions/OrderCreationOptions",
          "description": "The creation options of this order"
        },
        "currency": {
          "$ref": "#/definitions/CurrencySummary",
          "description": "Order currency info"
        },
        "discountedPrice": {
          "description": "Order discounted price",
          "format": "int32",
          "type": "integer"
        },
        "expireTime": {
          "description": "payment expire time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "extra field to store external order information",
          "type": "object"
        },
        "fulfilledTime": {
          "description": "The time of the order fulfilled",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "itemId": {
          "description": "Item id",
          "type": "string"
        },
        "itemSnapshot": {
          "$ref": "#/definitions/ItemSnapshot",
          "description": "Item snapshot"
        },
        "language": {
          "description": "Order created language",
          "type": "string"
        },
        "namespace": {
          "description": "Order namespace",
          "type": "string"
        },
        "orderBundleItemInfos": {
          "description": "order information of flexible bundle item price details, include item owned info.",
          "items": {
            "$ref": "#/definitions/OrderBundleItemInfo"
          },
          "type": "array"
        },
        "orderNo": {
          "description": "Order number",
          "type": "string"
        },
        "paymentMethod": {
          "description": "Payment method",
          "type": "string"
        },
        "paymentMethodFee": {
          "description": "Payment method fee",
          "format": "int32",
          "type": "integer"
        },
        "paymentOrderNo": {
          "description": "Payment order number",
          "type": "string"
        },
        "paymentProvider": {
          "description": "Payment provider",
          "enum": [
            "ADYEN",
            "ALIPAY",
            "CHECKOUT",
            "PAYPAL",
            "STRIPE",
            "WALLET",
            "WXPAY",
            "XSOLLA"
          ],
          "type": "string"
        },
        "paymentProviderFee": {
          "description": "Payment provider fee",
          "format": "int32",
          "type": "integer"
        },
        "paymentRemainSeconds": {
          "description": "payment remain seconds",
          "format": "int32",
          "type": "integer"
        },
        "paymentStationUrl": {
          "description": "Payment url info",
          "type": "string"
        },
        "price": {
          "description": "Order price",
          "format": "int32",
          "type": "integer"
        },
        "quantity": {
          "description": "Order quantity",
          "format": "int32",
          "type": "integer"
        },
        "refundedTime": {
          "description": "The time of the order refunded",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "region": {
          "description": "Order created region",
          "type": "string"
        },
        "salesTax": {
          "description": "Order sales tax",
          "format": "int32",
          "type": "integer"
        },
        "sandbox": {
          "description": "isSandbox, indicate if order is sandbox",
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "description": "Order status",
          "enum": [
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "CHARGED",
            "CLOSED",
            "DELETED",
            "FULFILLED",
            "FULFILL_FAILED",
            "INIT",
            "REFUNDED",
            "REFUNDING",
            "REFUND_FAILED"
          ],
          "type": "string"
        },
        "statusReason": {
          "description": "Order status reason",
          "type": "string"
        },
        "subtotalPrice": {
          "description": "subtotal price",
          "format": "int32",
          "type": "integer"
        },
        "tax": {
          "description": "Order total tax",
          "format": "int32",
          "type": "integer"
        },
        "totalPrice": {
          "description": "total price",
          "format": "int32",
          "type": "integer"
        },
        "totalTax": {
          "description": "total tax",
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "description": "updatedAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "userId": {
          "description": "User id",
          "type": "string"
        },
        "vat": {
          "description": "Order VAT",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "createdAt",
        "currency",
        "discountedPrice",
        "itemId",
        "namespace",
        "orderNo",
        "paymentRemainSeconds",
        "price",
        "quantity",
        "sandbox",
        "status",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "OrderPagingResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/OrderInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        },
        "total": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "OrderPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/OrderInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "OrderRefundCreate": {
      "properties": {
        "description": {
          "description": "order refund description",
          "type": "string"
        }
      },
      "required": [
        "description"
      ],
      "type": "object"
    },
    "OrderStatistics": {
      "properties": {
        "statusCount": {
          "additionalProperties": {
            "format": "int64",
            "type": "integer"
          },
          "description": "Status count",
          "type": "object"
        },
        "total": {
          "description": "Total",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "statusCount",
        "total"
      ],
      "type": "object"
    },
    "OrderSummary": {
      "properties": {
        "currency": {
          "$ref": "#/definitions/CurrencySummary",
          "description": "purchase currency"
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "order custom properties",
          "type": "object"
        },
        "free": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "OrderSyncResult": {
      "properties": {
        "nextEvaluatedKey": {
          "type": "string"
        },
        "orders": {
          "items": {
            "$ref": "#/definitions/Order"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OrderUpdate": {
      "description": "A DTO object for updating order API call.",
      "properties": {
        "status": {
          "description": "status",
          "enum": [
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "CHARGED",
            "CLOSED",
            "DELETED",
            "FULFILLED",
            "FULFILL_FAILED",
            "INIT",
            "REFUNDED",
            "REFUNDING",
            "REFUND_FAILED"
          ],
          "type": "string"
        },
        "statusReason": {
          "description": "update status reason",
          "type": "string"
        }
      },
      "required": [
        "status",
        "statusReason"
      ],
      "type": "object"
    },
    "Ownership": {
      "properties": {
        "owned": {
          "description": "ownership",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "owned"
      ],
      "type": "object"
    },
    "OwnershipToken": {
      "properties": {
        "ownershipToken": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Paging": {
      "properties": {
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PayPalConfig": {
      "description": "A DTO object for updating PayPal config.",
      "properties": {
        "clientID": {
          "description": "client id",
          "type": "string"
        },
        "clientSecret": {
          "description": "client secret, max length is 4096",
          "type": "string"
        },
        "returnUrl": {
          "description": "return url, max length is 2048",
          "type": "string"
        },
        "webHookId": {
          "description": "web hook id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PaymentAccount": {
      "properties": {
        "id": {
          "description": "Payment account id",
          "type": "string"
        },
        "name": {
          "description": "Payment account name, generally mask credit card number",
          "type": "string"
        },
        "type": {
          "description": "Payment account type",
          "enum": [
            "card",
            "paypal"
          ],
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "type"
      ],
      "type": "object"
    },
    "PaymentCallbackConfigInfo": {
      "properties": {
        "dryRun": {
          "description": "mock workflow while set true, default false",
          "type": "boolean",
          "x-omitempty": false
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "notifyUrl": {
          "description": "notify url for ECommerce payment notification",
          "type": "string"
        },
        "privateKey": {
          "description": "private key to encode/decode ECommerce payload",
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "PaymentCallbackConfigUpdate": {
      "properties": {
        "dryRun": {
          "description": "mock workflow while set true, default false",
          "type": "boolean",
          "x-omitempty": false
        },
        "notifyUrl": {
          "description": "notify url for ECommerce payment notification",
          "type": "string"
        },
        "privateKey": {
          "description": "private key to encode/decode ECommerce payload",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PaymentMerchantConfigInfo": {
      "properties": {
        "adyenConfig": {
          "$ref": "#/definitions/AdyenConfig",
          "description": "adyenConfig"
        },
        "adyenSandboxConfig": {
          "$ref": "#/definitions/AdyenConfig",
          "description": "adyenSandboxConfig"
        },
        "aliPayConfig": {
          "$ref": "#/definitions/AliPayConfig",
          "description": "aliPayConfig"
        },
        "aliPaySandboxConfig": {
          "$ref": "#/definitions/AliPayConfig",
          "description": "aliPaySandboxConfig"
        },
        "checkoutConfig": {
          "$ref": "#/definitions/CheckoutConfig",
          "description": "checkoutConfig"
        },
        "checkoutSandboxConfig": {
          "$ref": "#/definitions/CheckoutConfig",
          "description": "checkoutSandboxConfig"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "payPalConfig": {
          "$ref": "#/definitions/PayPalConfig",
          "description": "payPalConfig"
        },
        "payPalSandboxConfig": {
          "$ref": "#/definitions/PayPalConfig",
          "description": "payPalSandboxConfig"
        },
        "stripeConfig": {
          "$ref": "#/definitions/StripeConfig",
          "description": "stripeConfig"
        },
        "stripeSandboxConfig": {
          "$ref": "#/definitions/StripeConfig",
          "description": "stripeSandboxConfig"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "wxPayConfig": {
          "$ref": "#/definitions/WxPayConfigInfo",
          "description": "wxPayConfig"
        },
        "xsollaConfig": {
          "$ref": "#/definitions/XsollaConfig",
          "description": "xsollaConfig"
        },
        "xsollaPaywallConfig": {
          "$ref": "#/definitions/XsollaPaywallConfig",
          "description": "xsollaPaywallConfig"
        }
      },
      "required": [
        "createdAt",
        "id",
        "updatedAt"
      ],
      "type": "object"
    },
    "PaymentMethod": {
      "properties": {
        "name": {
          "description": "name",
          "type": "string"
        },
        "paymentProvider": {
          "description": "payment provider",
          "enum": [
            "ADYEN",
            "ALIPAY",
            "CHECKOUT",
            "PAYPAL",
            "STRIPE",
            "WALLET",
            "WXPAY",
            "XSOLLA"
          ],
          "type": "string"
        }
      },
      "required": [
        "name",
        "paymentProvider"
      ],
      "type": "object"
    },
    "PaymentNotificationInfo": {
      "properties": {
        "createdAt": {
          "description": "createdAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "externalId": {
          "description": "external id",
          "type": "string"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "notification": {
          "description": "notification payload",
          "type": "object"
        },
        "notificationSource": {
          "description": "payment provider",
          "enum": [
            "ADYEN",
            "ALIPAY",
            "CHECKOUT",
            "PAYPAL",
            "STRIPE",
            "WALLET",
            "WXPAY",
            "XSOLLA"
          ],
          "type": "string"
        },
        "notificationType": {
          "description": "notification type",
          "type": "string"
        },
        "paymentOrderNo": {
          "description": "payment order No",
          "type": "string"
        },
        "status": {
          "description": "status",
          "enum": [
            "ERROR",
            "IGNORED",
            "PROCESSED",
            "WARN"
          ],
          "type": "string"
        },
        "statusReason": {
          "description": "status reason",
          "type": "string"
        },
        "updatedAt": {
          "description": "updatedAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "createdAt",
        "id",
        "namespace",
        "notification",
        "notificationSource",
        "notificationType",
        "paymentOrderNo",
        "status",
        "updatedAt"
      ],
      "type": "object"
    },
    "PaymentNotificationPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/PaymentNotificationInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "PaymentOrder": {
      "properties": {
        "authorisedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "channel": {
          "enum": [
            "EXTERNAL",
            "INTERNAL"
          ],
          "type": "string"
        },
        "chargebackReversedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "chargebackTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "chargedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "charging": {
          "type": "boolean",
          "x-omitempty": false
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "createdTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "currency": {
          "$ref": "#/definitions/CurrencySummary"
        },
        "customParameters": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "extOrderNo": {
          "type": "string"
        },
        "extUserId": {
          "type": "string"
        },
        "itemType": {
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "namespace": {
          "type": "string"
        },
        "notifyUrl": {
          "type": "string"
        },
        "omitNotification": {
          "type": "boolean",
          "x-omitempty": false
        },
        "paymentMethod": {
          "type": "string"
        },
        "paymentMethodFee": {
          "format": "int32",
          "type": "integer"
        },
        "paymentOrderNo": {
          "type": "string"
        },
        "paymentProvider": {
          "enum": [
            "ADYEN",
            "ALIPAY",
            "CHECKOUT",
            "PAYPAL",
            "STRIPE",
            "WALLET",
            "WXPAY",
            "XSOLLA"
          ],
          "type": "string"
        },
        "paymentProviderFee": {
          "format": "int32",
          "type": "integer"
        },
        "paymentStationUrl": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "price": {
          "format": "int32",
          "type": "integer"
        },
        "recurringPaymentOrderNo": {
          "type": "string"
        },
        "refundedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "region": {
          "type": "string"
        },
        "returnUrl": {
          "type": "string"
        },
        "rvn": {
          "format": "int32",
          "type": "integer"
        },
        "salesTax": {
          "format": "int32",
          "type": "integer"
        },
        "sandbox": {
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "status": {
          "enum": [
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "CHARGED",
            "CHARGE_FAILED",
            "DELETED",
            "INIT",
            "NOTIFICATION_OF_CHARGEBACK",
            "REFUNDED",
            "REFUNDING",
            "REFUND_FAILED",
            "REQUEST_FOR_INFORMATION"
          ],
          "type": "string"
        },
        "statusReason": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "subtotalPrice": {
          "format": "int32",
          "type": "integer"
        },
        "targetNamespace": {
          "type": "string"
        },
        "targetUserId": {
          "type": "string"
        },
        "tax": {
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "totalPrice": {
          "format": "int32",
          "type": "integer"
        },
        "totalTax": {
          "format": "int32",
          "type": "integer"
        },
        "transactions": {
          "items": {
            "$ref": "#/definitions/Transaction"
          },
          "type": "array"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "type": "string"
        },
        "vat": {
          "format": "int32",
          "type": "integer"
        },
        "zipCode": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PaymentOrderChargeRequest": {
      "properties": {
        "extTxId": {
          "description": "external transaction id",
          "type": "string"
        },
        "paymentMethod": {
          "description": "payment method",
          "type": "string"
        },
        "paymentProvider": {
          "description": "payment provider",
          "enum": [
            "ADYEN",
            "ALIPAY",
            "CHECKOUT",
            "PAYPAL",
            "STRIPE",
            "WALLET",
            "WXPAY",
            "XSOLLA"
          ],
          "type": "string"
        }
      },
      "required": [
        "paymentProvider"
      ],
      "type": "object"
    },
    "PaymentOrderChargeStatus": {
      "properties": {
        "charging": {
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "enum": [
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "CHARGED",
            "CHARGE_FAILED",
            "DELETED",
            "INIT",
            "NOTIFICATION_OF_CHARGEBACK",
            "REFUNDED",
            "REFUNDING",
            "REFUND_FAILED",
            "REQUEST_FOR_INFORMATION"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "PaymentOrderCreate": {
      "properties": {
        "currencyCode": {
          "description": "currency code, default is USD",
          "type": "string"
        },
        "currencyNamespace": {
          "description": "currency namespace, default is publisher namespace",
          "type": "string"
        },
        "customParameters": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "custom parameters",
          "type": "object"
        },
        "description": {
          "description": "Order desc, max length 2000",
          "type": "string"
        },
        "extOrderNo": {
          "description": "External order id",
          "type": "string"
        },
        "extUserId": {
          "description": "optional, external user id, can be the character id",
          "type": "string"
        },
        "itemType": {
          "description": "item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "language": {
          "description": "language value from language tag, allowed format: en, en-US.\u003cp\u003eSupported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)\u003c/p\u003e",
          "pattern": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$",
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "metadata",
          "type": "object"
        },
        "notifyUrl": {
          "description": "custom notify url for real payment, send notification to this url once payment action is finished",
          "type": "string"
        },
        "omitNotification": {
          "description": "TEST PURPOSE, if set it will not send async notification to the API invoker, only can set true while this payment is sandbox",
          "type": "boolean",
          "x-omitempty": false
        },
        "platform": {
          "description": "platform",
          "type": "string"
        },
        "price": {
          "description": "Price of order",
          "format": "int32",
          "type": "integer"
        },
        "recurringPaymentOrderNo": {
          "description": "recurring payment order which has recurring token, will do recurring payment if present, otherwise start normal payment flow",
          "type": "string"
        },
        "region": {
          "description": "country value from ISO countries",
          "type": "string"
        },
        "returnUrl": {
          "description": "custom return url for real payment, user will be redirected to this url once payment is finished",
          "type": "string"
        },
        "sandbox": {
          "description": "TEST PURPOSE, sandbox(Active in real currency mode), default is false",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "optional, unique identity for the item",
          "type": "string"
        },
        "subscriptionId": {
          "description": "subscriptionId, payment token will be saved for recurring payment",
          "type": "string"
        },
        "title": {
          "description": "Order title",
          "type": "string"
        }
      },
      "required": [
        "description",
        "extOrderNo",
        "price",
        "title"
      ],
      "type": "object"
    },
    "PaymentOrderCreateResult": {
      "properties": {
        "createdTime": {
          "description": "The time of the order created",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "description": "Payment order namespace",
          "type": "string"
        },
        "paymentOrderNo": {
          "description": "Payment order number",
          "type": "string"
        },
        "paymentStationUrl": {
          "description": "Payment url",
          "type": "string"
        },
        "status": {
          "description": "Payment order status",
          "enum": [
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "CHARGED",
            "CHARGE_FAILED",
            "DELETED",
            "INIT",
            "NOTIFICATION_OF_CHARGEBACK",
            "REFUNDED",
            "REFUNDING",
            "REFUND_FAILED",
            "REQUEST_FOR_INFORMATION"
          ],
          "type": "string"
        },
        "targetNamespace": {
          "description": "Game namespace",
          "type": "string"
        },
        "targetUserId": {
          "description": "User id in game namespace",
          "type": "string"
        }
      },
      "required": [
        "createdTime",
        "namespace",
        "paymentOrderNo",
        "status"
      ],
      "type": "object"
    },
    "PaymentOrderDetails": {
      "properties": {
        "charging": {
          "description": "charging",
          "type": "boolean",
          "x-omitempty": false
        },
        "currencyCode": {
          "description": "currency code",
          "type": "string"
        },
        "currencySymbol": {
          "description": "currency symbol",
          "type": "string"
        },
        "description": {
          "description": "Order description",
          "type": "string"
        },
        "displayName": {
          "description": "Payment user display name",
          "type": "string"
        },
        "price": {
          "description": "Payment order price",
          "type": "string"
        },
        "region": {
          "description": "Payment user region",
          "type": "string"
        },
        "sandbox": {
          "description": "isSandbox, indicate if order is sandbox",
          "type": "boolean",
          "x-omitempty": false
        },
        "title": {
          "description": "Order title",
          "type": "string"
        }
      },
      "required": [
        "charging",
        "currencyCode",
        "currencySymbol",
        "price",
        "sandbox",
        "title"
      ],
      "type": "object"
    },
    "PaymentOrderInfo": {
      "properties": {
        "authorisedTime": {
          "description": "The time of the order authorised",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "channel": {
          "description": "Payment order channel: EXTERNAL or INTERNAL",
          "enum": [
            "EXTERNAL",
            "INTERNAL"
          ],
          "type": "string"
        },
        "chargebackReversedTime": {
          "description": "The time of the order chargeback reversed time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "chargebackTime": {
          "description": "The time of the order chargeback time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "chargedTime": {
          "description": "The time of the order charged",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "charging": {
          "description": "if charging is true, means user have finished transaction, platform is waiting for payment notification",
          "type": "boolean",
          "x-omitempty": false
        },
        "createdAt": {
          "description": "createdAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "createdTime": {
          "description": "The time of the order created",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "currency": {
          "$ref": "#/definitions/CurrencySummary",
          "description": "Payment order currency info"
        },
        "customParameters": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "User custom parameters",
          "type": "object"
        },
        "description": {
          "description": "Order description",
          "type": "string"
        },
        "extOrderNo": {
          "description": "External order number",
          "type": "string"
        },
        "extUserId": {
          "description": "optional, external user id, can be the character id",
          "type": "string"
        },
        "itemType": {
          "description": "Order item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "language": {
          "description": "Payment user language",
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "metadata",
          "type": "object"
        },
        "namespace": {
          "description": "Payment order namespace",
          "type": "string"
        },
        "notifyUrl": {
          "description": "The notify url if customized",
          "type": "string"
        },
        "omitNotification": {
          "description": "TEST PURPOSE, if set it will not send async notification to the API invoker, only can set true while this payment is sandbox",
          "type": "boolean",
          "x-omitempty": false
        },
        "paymentMethod": {
          "description": "Payment method",
          "type": "string"
        },
        "paymentMethodFee": {
          "description": "Payment method fee",
          "format": "int32",
          "type": "integer"
        },
        "paymentOrderNo": {
          "description": "Payment order number",
          "type": "string"
        },
        "paymentProvider": {
          "description": "Payment provider",
          "enum": [
            "ADYEN",
            "ALIPAY",
            "CHECKOUT",
            "PAYPAL",
            "STRIPE",
            "WALLET",
            "WXPAY",
            "XSOLLA"
          ],
          "type": "string"
        },
        "paymentProviderFee": {
          "description": "Payment provider fee",
          "format": "int32",
          "type": "integer"
        },
        "paymentStationUrl": {
          "description": "Payment url",
          "type": "string"
        },
        "price": {
          "description": "Payment order price",
          "format": "int32",
          "type": "integer"
        },
        "recurringPaymentOrderNo": {
          "description": "recurring payment order which has recurring token, will do recurring payment if present, otherwise start normal payment flow",
          "type": "string"
        },
        "refundedTime": {
          "description": "The time of the order refunded",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "region": {
          "description": "Payment user region",
          "type": "string"
        },
        "returnUrl": {
          "description": "The return url if customized",
          "type": "string"
        },
        "salesTax": {
          "description": "Payment order sales tax",
          "format": "int32",
          "type": "integer"
        },
        "sandbox": {
          "description": "isSandbox, indicate if order is sandbox",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "optional, unique identity for the item",
          "type": "string"
        },
        "status": {
          "description": "Payment order status",
          "enum": [
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "CHARGED",
            "CHARGE_FAILED",
            "DELETED",
            "INIT",
            "NOTIFICATION_OF_CHARGEBACK",
            "REFUNDED",
            "REFUNDING",
            "REFUND_FAILED",
            "REQUEST_FOR_INFORMATION"
          ],
          "type": "string"
        },
        "statusReason": {
          "description": "Payment order status reason",
          "type": "string"
        },
        "subscriptionId": {
          "description": "subscriptionId, payment token will be saved for recurring payment",
          "type": "string"
        },
        "subtotalPrice": {
          "description": "subtotal price",
          "format": "int32",
          "type": "integer"
        },
        "targetNamespace": {
          "description": "The game namespace if it's an external in-game-purchase that resides in publisher namespace",
          "type": "string"
        },
        "targetUserId": {
          "description": "The user id in game namespace if it's an external in-game-purchase that resides in publisher namespace",
          "type": "string"
        },
        "tax": {
          "description": "Payment total tax",
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "description": "Order title",
          "type": "string"
        },
        "totalPrice": {
          "description": "total price",
          "format": "int32",
          "type": "integer"
        },
        "totalTax": {
          "description": "total tax",
          "format": "int32",
          "type": "integer"
        },
        "transactions": {
          "description": "Payment order transactions",
          "items": {
            "$ref": "#/definitions/Transaction"
          },
          "type": "array"
        },
        "updatedAt": {
          "description": "updatedAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "userId": {
          "description": "User id",
          "type": "string"
        },
        "vat": {
          "description": "Payment order VAT",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "channel",
        "createdAt",
        "currency",
        "extOrderNo",
        "namespace",
        "paymentOrderNo",
        "price",
        "sandbox",
        "status",
        "title",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "PaymentOrderNotifySimulation": {
      "properties": {
        "amount": {
          "description": "amount",
          "format": "int32",
          "type": "integer"
        },
        "currencyCode": {
          "description": "currency code",
          "type": "string"
        },
        "notifyType": {
          "description": "notify type",
          "enum": [
            "CHARGE",
            "REFUND"
          ],
          "type": "string"
        },
        "paymentProvider": {
          "description": "payment provider",
          "enum": [
            "ADYEN",
            "ALIPAY",
            "CHECKOUT",
            "PAYPAL",
            "STRIPE",
            "WALLET",
            "WXPAY",
            "XSOLLA"
          ],
          "type": "string"
        },
        "salesTax": {
          "description": "salesTax for xsolla",
          "format": "int32",
          "type": "integer"
        },
        "vat": {
          "description": "vat for xsolla",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "currencyCode",
        "notifyType",
        "paymentProvider"
      ],
      "type": "object"
    },
    "PaymentOrderPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/PaymentOrderInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "PaymentOrderPaidResult": {
      "properties": {
        "charging": {
          "description": "charging",
          "type": "boolean",
          "x-omitempty": false
        },
        "success": {
          "description": "success",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "charging",
        "success"
      ],
      "type": "object"
    },
    "PaymentOrderRefund": {
      "properties": {
        "description": {
          "description": "order refund description",
          "type": "string"
        }
      },
      "required": [
        "description"
      ],
      "type": "object"
    },
    "PaymentOrderRefundResult": {
      "properties": {
        "createdTime": {
          "description": "The time of the order created",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "description": "Payment order namespace",
          "type": "string"
        },
        "paymentOrderNo": {
          "description": "Payment order number",
          "type": "string"
        },
        "refundedTime": {
          "description": "The time of the order refunded",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "description": "Payment order status",
          "enum": [
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "CHARGED",
            "CHARGE_FAILED",
            "DELETED",
            "INIT",
            "NOTIFICATION_OF_CHARGEBACK",
            "REFUNDED",
            "REFUNDING",
            "REFUND_FAILED",
            "REQUEST_FOR_INFORMATION"
          ],
          "type": "string"
        },
        "targetNamespace": {
          "description": "Game namespace",
          "type": "string"
        },
        "targetUserId": {
          "description": "User id in game namespace",
          "type": "string"
        }
      },
      "required": [
        "createdTime",
        "namespace",
        "paymentOrderNo",
        "status"
      ],
      "type": "object"
    },
    "PaymentOrderSyncResult": {
      "properties": {
        "nextEvaluatedKey": {
          "type": "string"
        },
        "paymentOrders": {
          "items": {
            "$ref": "#/definitions/PaymentOrder"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PaymentProcessResult": {
      "properties": {
        "pending": {
          "description": "payment request process is pending",
          "type": "boolean",
          "x-omitempty": false
        },
        "reason": {
          "description": "failed reason",
          "type": "string"
        },
        "redirectUrl": {
          "description": "redirect url, exists when pending is true",
          "type": "string"
        },
        "success": {
          "description": "payment request process result",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "pending",
        "success"
      ],
      "type": "object"
    },
    "PaymentProviderConfigEdit": {
      "description": "A DTO object for creating/updating payment provider config",
      "properties": {
        "aggregate": {
          "description": "aggregate payment provider, allow empty value",
          "enum": [
            "ADYEN",
            "XSOLLA"
          ],
          "type": "string"
        },
        "namespace": {
          "description": "namespace, * indicates all namespace",
          "type": "string"
        },
        "region": {
          "description": "region, * indicates all regions",
          "type": "string"
        },
        "sandboxTaxJarApiToken": {
          "description": "sandbox taxjar api token",
          "type": "string"
        },
        "specials": {
          "description": "special payment providers = ['ALIPAY', 'WXPAY'], allow empty value",
          "items": {
            "enum": [
              "ADYEN",
              "ALIPAY",
              "CHECKOUT",
              "PAYPAL",
              "STRIPE",
              "WALLET",
              "WXPAY",
              "XSOLLA"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "taxJarApiToken": {
          "description": "taxjar api token, required when taxJarEnabled=true and useGlobalTaxJarApiToken=false",
          "type": "string"
        },
        "taxJarEnabled": {
          "description": "taxjar api integration enable",
          "type": "boolean",
          "x-omitempty": false
        },
        "useGlobalTaxJarApiToken": {
          "description": "only works when taxJarEnabled=true, and if useGlobalTaxJarApiToken is true, we will reset the taxJarApiToken as null",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "namespace",
        "region"
      ],
      "type": "object"
    },
    "PaymentProviderConfigInfo": {
      "properties": {
        "aggregate": {
          "description": "aggregate payment provider, allow empty value",
          "enum": [
            "ADYEN",
            "CHECKOUT",
            "STRIPE",
            "XSOLLA"
          ],
          "type": "string"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "paymentMerchantConfigId": {
          "description": "paymentMerchantConfigId",
          "type": "string"
        },
        "region": {
          "description": "region",
          "type": "string"
        },
        "sandboxTaxJarApiToken": {
          "description": "sandbox taxjar api token",
          "type": "string"
        },
        "specials": {
          "description": "special payment providers = ['ALIPAY', 'WXPAY'], allow empty value",
          "items": {
            "enum": [
              "ADYEN",
              "ALIPAY",
              "CHECKOUT",
              "PAYPAL",
              "STRIPE",
              "WALLET",
              "WXPAY",
              "XSOLLA"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "taxJarApiToken": {
          "description": "taxjar api token, required when taxJarEnabled=true and useGlobalTaxJarApiToken=false",
          "type": "string"
        },
        "taxJarEnabled": {
          "description": "taxjar integration enabled",
          "type": "boolean",
          "x-omitempty": false
        },
        "useGlobalTaxJarApiToken": {
          "description": "if use global taxjar token",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "id",
        "namespace",
        "region"
      ],
      "type": "object"
    },
    "PaymentProviderConfigPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/PaymentProviderConfigInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "PaymentRequest": {
      "description": "A DTO for wallet's payment",
      "properties": {
        "amount": {
          "description": "amount",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "metadata": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "additional fulfillment information",
          "type": "object"
        },
        "walletPlatform": {
          "description": "wallet platform, base on platform wallet rule to payment wallet",
          "enum": [
            "Epic",
            "GooglePlay",
            "IOS",
            "Nintendo",
            "Oculus",
            "Other",
            "Playstation",
            "Steam",
            "Xbox"
          ],
          "type": "string"
        }
      },
      "required": [
        "amount"
      ],
      "type": "object"
    },
    "PaymentTaxConfigEdit": {
      "description": "A DTO object for updating payment tax config",
      "properties": {
        "sandboxTaxJarApiToken": {
          "description": "sandbox taxJar API token",
          "type": "string"
        },
        "taxJarApiToken": {
          "description": "taxJar API token",
          "type": "string"
        },
        "taxJarEnabled": {
          "description": "if taxJar integration is enabled",
          "type": "boolean",
          "x-omitempty": false
        },
        "taxJarProductCodesMapping": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "taxJar product codes mappings, allow item types: APP, COINS, INGAMEITEM, BUNDLE, CODE, SUBSCRIPTION",
          "type": "object"
        }
      },
      "type": "object"
    },
    "PaymentTaxConfigInfo": {
      "properties": {
        "sandboxTaxJarApiToken": {
          "description": "sandbox taxJar API token",
          "type": "string"
        },
        "taxJarApiToken": {
          "description": "taxJar API token",
          "type": "string"
        },
        "taxJarEnabled": {
          "description": "if taxJar integration is enabled",
          "type": "boolean",
          "x-omitempty": false
        },
        "taxJarProductCodesMapping": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "taxJar product codes mappings",
          "type": "object"
        }
      },
      "type": "object"
    },
    "PaymentToken": {
      "properties": {
        "token": {
          "description": "payment token(for checkout.com, this is card token)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PaymentUrl": {
      "properties": {
        "paymentProvider": {
          "description": "payment provider",
          "enum": [
            "ADYEN",
            "ALIPAY",
            "CHECKOUT",
            "PAYPAL",
            "STRIPE",
            "WALLET",
            "WXPAY",
            "XSOLLA"
          ],
          "type": "string"
        },
        "paymentType": {
          "description": "payment type",
          "enum": [
            "LINK",
            "QR_CODE"
          ],
          "type": "string"
        },
        "paymentUrl": {
          "description": "payment url",
          "type": "string"
        },
        "returnUrl": {
          "description": "return url",
          "type": "string"
        },
        "sessionData": {
          "description": "adyen session data",
          "type": "string"
        },
        "sessionId": {
          "description": "adyen session id",
          "type": "string"
        }
      },
      "required": [
        "paymentProvider",
        "paymentType"
      ],
      "type": "object"
    },
    "PaymentUrlCreate": {
      "properties": {
        "paymentOrderNo": {
          "description": "payment order number",
          "type": "string"
        },
        "paymentProvider": {
          "description": "payment provider",
          "enum": [
            "ADYEN",
            "ALIPAY",
            "CHECKOUT",
            "PAYPAL",
            "STRIPE",
            "WALLET",
            "WXPAY",
            "XSOLLA"
          ],
          "type": "string"
        },
        "returnUrl": {
          "description": "returnUrl",
          "type": "string"
        },
        "ui": {
          "description": "ui, custom json string, ignore if payment provider not support or invalid setting.",
          "example": "{\"theme\":\"dark\",\"size\":\"medium\",\"version\":\"desktop\",\"desktop\":{\"header\":{\"close_button\": false}}}",
          "type": "string"
        },
        "zipCode": {
          "description": "payment zipCode",
          "type": "string"
        }
      },
      "required": [
        "paymentOrderNo",
        "paymentProvider"
      ],
      "type": "object"
    },
    "PlatformDLCConfigInfo": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/PlatformDlcEntry"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PlatformDLCConfigUpdate": {
      "properties": {
        "data": {
          "description": "platform dlc config list",
          "items": {
            "$ref": "#/definitions/PlatformDlcEntry"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PlatformDlcEntry": {
      "properties": {
        "platform": {
          "description": "platform: PSN, STEAM, XBOX, EPICGAMES, OCULUS",
          "enum": [
            "EPICGAMES",
            "OCULUS",
            "PSN",
            "STEAM",
            "XBOX"
          ],
          "type": "string"
        },
        "platformDlcIdMap": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "key is platform product id, value is dlc id",
          "type": "object"
        }
      },
      "type": "object"
    },
    "PlatformReward": {
      "properties": {
        "currency": {
          "$ref": "#/definitions/PlatformRewardCurrency",
          "description": "required if type is CURRENCY"
        },
        "item": {
          "$ref": "#/definitions/PlatformRewardItem",
          "description": "required if type is ITEM, can be fulfilled by itemId or itemSku"
        },
        "quantity": {
          "description": "quantity if type is ITEM, amount if type is CURRENCY",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "reward type",
          "enum": [
            "CURRENCY",
            "ITEM"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "PlatformRewardCurrency": {
      "properties": {
        "currencyCode": {
          "description": "currency code, alphabet uppercase",
          "type": "string"
        },
        "namespace": {
          "description": "namespace, allowed values: game namespace or publisher namespace",
          "type": "string"
        }
      },
      "required": [
        "currencyCode",
        "namespace"
      ],
      "type": "object"
    },
    "PlatformRewardItem": {
      "properties": {
        "itemId": {
          "type": "string"
        },
        "itemSku": {
          "type": "string"
        },
        "itemType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PlatformSubscribeRequest": {
      "properties": {
        "grantDays": {
          "description": "grant days",
          "format": "int32",
          "type": "integer"
        },
        "itemId": {
          "description": "subscription item id",
          "type": "string"
        },
        "language": {
          "description": "language",
          "type": "string"
        },
        "reason": {
          "description": "subscribe reason",
          "type": "string"
        },
        "region": {
          "description": "region",
          "type": "string"
        },
        "source": {
          "description": "source",
          "type": "string"
        }
      },
      "required": [
        "grantDays",
        "itemId"
      ],
      "type": "object"
    },
    "PlatformWallet": {
      "properties": {
        "balance": {
          "description": "total balance, include effective time-limited balance",
          "format": "int64",
          "type": "integer"
        },
        "currencyCode": {
          "description": "currency code",
          "type": "string"
        },
        "currencySymbol": {
          "description": "currency symbol",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "description": "platform wallet namespace",
          "type": "string"
        },
        "status": {
          "description": "status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "userId": {
          "description": "user id",
          "type": "string"
        },
        "walletInfos": {
          "description": "wallets balances info",
          "items": {
            "$ref": "#/definitions/WalletInfo"
          },
          "type": "array"
        },
        "walletStatus": {
          "description": "wallet status will be deprecated in the feature, pls use status field.",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        }
      },
      "required": [
        "balance",
        "currencyCode",
        "currencySymbol",
        "namespace",
        "userId"
      ],
      "type": "object"
    },
    "PlatformWalletConfigInfo": {
      "properties": {
        "allowedBalanceOrigins": {
          "description": "allowed balance origin, sorted list",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "config id",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "platform": {
          "description": "platform",
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "allowedBalanceOrigins",
        "namespace",
        "platform"
      ],
      "type": "object"
    },
    "PlatformWalletConfigUpdate": {
      "description": "A DTO object for updating item API call.",
      "properties": {
        "allowedBalanceOrigins": {
          "items": {
            "enum": [
              "Epic",
              "GooglePlay",
              "IOS",
              "Nintendo",
              "Oculus",
              "Other",
              "Playstation",
              "Steam",
              "System",
              "Twitch",
              "Xbox"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PlayStationDLCSyncMultiServiceLabelsRequest": {
      "properties": {
        "serviceLabels": {
          "description": "service labels",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "PlayStationDLCSyncRequest": {
      "properties": {
        "serviceLabel": {
          "description": "service label",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PlayStationIAPConfigInfo": {
      "properties": {
        "backOfficeServerClientId": {
          "description": "back office server clientId",
          "type": "string"
        },
        "backOfficeServerClientSecret": {
          "description": "back office server client secret",
          "type": "string"
        },
        "enableStreamJob": {
          "description": "enable PSN stream event job, will enable stream event job to sync PSN refund charge back etc event if it's true",
          "type": "boolean",
          "x-omitempty": false
        },
        "environment": {
          "description": "environment",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "streamName": {
          "description": "stream name",
          "type": "string"
        },
        "streamPartnerName": {
          "description": "stream partner name",
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "PlayStationMultiServiceLabelsReconcileRequest": {
      "properties": {
        "currencyCode": {
          "description": "product price currency",
          "type": "string"
        },
        "price": {
          "description": "product price",
          "format": "double",
          "type": "number"
        },
        "productId": {
          "description": "productId",
          "type": "string"
        },
        "serviceLabels": {
          "description": "service labels",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "PlayStationReconcileRequest": {
      "properties": {
        "currencyCode": {
          "description": "product price currency",
          "type": "string"
        },
        "price": {
          "description": "product price",
          "format": "double",
          "type": "number"
        },
        "productId": {
          "description": "productId",
          "type": "string"
        },
        "serviceLabel": {
          "description": "service label",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PlayStationReconcileResult": {
      "properties": {
        "itemId": {
          "type": "string"
        },
        "psnItemId": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "status": {
          "enum": [
            "FAILED",
            "FULFILLED",
            "VERIFIED"
          ],
          "type": "string"
        },
        "transactionId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PlaystationIAPConfigRequest": {
      "properties": {
        "backOfficeServerClientId": {
          "description": "back office server clientId",
          "type": "string"
        },
        "backOfficeServerClientSecret": {
          "description": "back office server client secret",
          "type": "string"
        },
        "enableStreamJob": {
          "description": "enable PSN stream event job, will enable stream event job to sync PSN refund chargeback etc event if it's true",
          "type": "boolean",
          "x-omitempty": false
        },
        "environment": {
          "description": "environment",
          "type": "string"
        },
        "streamName": {
          "description": "stream name",
          "type": "string"
        },
        "streamPartnerName": {
          "description": "stream partner name",
          "type": "string"
        }
      },
      "required": [
        "environment"
      ],
      "type": "object"
    },
    "PopulatedItemInfo": {
      "properties": {
        "appId": {
          "description": "App id, required when itemType is APP",
          "type": "string"
        },
        "appType": {
          "description": "App type, required when itemType is APP",
          "enum": [
            "DEMO",
            "DLC",
            "GAME",
            "SOFTWARE"
          ],
          "type": "string"
        },
        "baseAppId": {
          "description": "Base app id",
          "type": "string"
        },
        "boothName": {
          "description": "booth name to get tickets while it's item type is CODE",
          "type": "string"
        },
        "boundItemIds": {
          "description": "the items which this item being bounded to",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "categoryPath": {
          "description": "Item category path",
          "type": "string"
        },
        "clazz": {
          "description": "customized item clazz",
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "description": {
          "description": "description info",
          "type": "string"
        },
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "entitlementType": {
          "description": "Entitlement type",
          "enum": [
            "CONSUMABLE",
            "DURABLE"
          ],
          "type": "string"
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "customized item properties",
          "type": "object"
        },
        "features": {
          "description": "Features",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "flexible": {
          "description": "whether flexible pricing applied, only applied if itemType is BUNDLE",
          "type": "boolean",
          "x-omitempty": false
        },
        "fresh": {
          "description": "fresh",
          "type": "boolean",
          "x-omitempty": false
        },
        "images": {
          "description": "images",
          "items": {
            "$ref": "#/definitions/Image"
          },
          "type": "array"
        },
        "itemId": {
          "description": "Item id",
          "type": "string"
        },
        "itemIds": {
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "itemQty": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "description": "itemQty, the quantity of item in itemIds, default 1, should be empty if item type is not \"BUNDLE\"",
          "type": "object"
        },
        "itemType": {
          "description": "Item type",
          "enum": [
            "APP",
            "BUNDLE",
            "CODE",
            "COINS",
            "EXTENSION",
            "INGAMEITEM",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SEASON",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "items": {
          "description": "bundle items, only has value when item is bundle or optionbox and is populated",
          "items": {
            "$ref": "#/definitions/BundledItemInfo"
          },
          "type": "array"
        },
        "language": {
          "description": "language",
          "type": "string"
        },
        "listable": {
          "description": "Whether can be visible in Store for public user",
          "type": "boolean",
          "x-omitempty": false
        },
        "localExt": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "longDescription": {
          "description": "long description info",
          "type": "string"
        },
        "lootBoxConfig": {
          "$ref": "#/definitions/LootBoxConfig",
          "description": "loot box config"
        },
        "maxCount": {
          "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE",
          "format": "int32",
          "type": "integer"
        },
        "maxCountPerUser": {
          "description": "Max count per user, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "namespace": {
          "description": "Item namespace",
          "type": "string"
        },
        "optionBoxConfig": {
          "$ref": "#/definitions/OptionBoxConfig",
          "description": "option box config"
        },
        "purchasable": {
          "description": "Whether can be purchased",
          "type": "boolean",
          "x-omitempty": false
        },
        "purchaseCondition": {
          "$ref": "#/definitions/PurchaseCondition",
          "description": "purchase condition"
        },
        "recurring": {
          "$ref": "#/definitions/Recurring",
          "description": "recurring for subscription"
        },
        "region": {
          "description": "region",
          "type": "string"
        },
        "regionData": {
          "description": "Region data",
          "items": {
            "$ref": "#/definitions/RegionDataItem"
          },
          "type": "array"
        },
        "saleConfig": {
          "$ref": "#/definitions/SaleConfig",
          "description": "sale config"
        },
        "seasonType": {
          "description": "Season type, required while itemType is SEASON",
          "enum": [
            "PASS",
            "TIER"
          ],
          "type": "string"
        },
        "sectionExclusive": {
          "description": "whether it is sold in section only",
          "type": "boolean",
          "x-omitempty": false
        },
        "sellable": {
          "description": "whether allow to sell back to store",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "Sku",
          "type": "string"
        },
        "stackable": {
          "description": "Whether stack the CONSUMABLE entitlement",
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "description": "Item status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "tags": {
          "description": "Tags",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "targetCurrencyCode": {
          "description": "Target currency code of coin item",
          "type": "string"
        },
        "targetItemId": {
          "description": "Target item id if this item is mapping from game namespace",
          "type": "string"
        },
        "targetNamespace": {
          "description": "The target namespace of a cross namespace item",
          "type": "string"
        },
        "thumbnailUrl": {
          "description": "thumbnail url",
          "type": "string"
        },
        "title": {
          "description": "title info",
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "useCount": {
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "categoryPath",
        "createdAt",
        "entitlementType",
        "itemId",
        "itemType",
        "language",
        "name",
        "namespace",
        "region",
        "status",
        "title",
        "updatedAt"
      ],
      "type": "object"
    },
    "Predicate": {
      "description": "predicate object",
      "properties": {
        "anyOf": {
          "description": "anyOf, only available if comparison is includes or excludes",
          "format": "int32",
          "type": "integer"
        },
        "comparison": {
          "description": "comparison",
          "enum": [
            "excludes",
            "includes",
            "is",
            "isGreaterThan",
            "isGreaterThanOrEqual",
            "isLessThan",
            "isLessThanOrEqual",
            "isNot"
          ],
          "type": "string"
        },
        "name": {
          "description": "predicate name",
          "type": "string"
        },
        "predicateType": {
          "description": "predicate type",
          "enum": [
            "EntitlementPredicate",
            "SeasonPassPredicate",
            "SeasonTierPredicate"
          ],
          "type": "string"
        },
        "value": {
          "description": "value, pass check value when predicateType is SeasonTierPredicate",
          "type": "string"
        },
        "values": {
          "description": "values, pass check value when predicateType is EntitlementPredicate or SeasonPassPredicateEntitlementPredicate requires item sku list, SeasonPassPredicate requires pass code list",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "PredicateValidateResult": {
      "properties": {
        "matched": {
          "description": "matched value list",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "predicateName": {
          "description": "predicate name",
          "type": "string"
        },
        "unmatched": {
          "description": "unmatched value list",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "validated": {
          "description": "is validated",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "PublicCustomConfigInfo": {
      "properties": {
        "connectionType": {
          "description": "connect type: INSECURE, TLS, default is INSECURE",
          "enum": [
            "INSECURE",
            "TLS"
          ],
          "type": "string"
        },
        "grpcServerAddress": {
          "description": "plugin grpc server address: \u003chost\u003e:\u003cport\u003e",
          "type": "string"
        },
        "tlsConfig": {
          "$ref": "#/definitions/BaseTLSConfig"
        }
      },
      "required": [
        "connectionType",
        "grpcServerAddress"
      ],
      "type": "object"
    },
    "PurchaseCondition": {
      "properties": {
        "conditionGroups": {
          "description": "condition groups, the operator for condition group is 'or'",
          "items": {
            "$ref": "#/definitions/ConditionGroup"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PurchaseConditionUpdate": {
      "description": "A DTO object for creating/updating item purchase condition",
      "properties": {
        "purchaseCondition": {
          "$ref": "#/definitions/PurchaseCondition",
          "description": "purchase condition"
        }
      },
      "type": "object"
    },
    "PurchasedItemCount": {
      "properties": {
        "count": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Recurring": {
      "properties": {
        "cycle": {
          "description": "recurring cycle",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "WEEKLY",
            "YEARLY"
          ],
          "type": "string"
        },
        "fixedFreeDays": {
          "description": "fixed free days, 0 means not set",
          "format": "int32",
          "type": "integer"
        },
        "fixedTrialCycles": {
          "description": "fixed trial cycles, 0 means not set",
          "format": "int32",
          "type": "integer"
        },
        "graceDays": {
          "description": "recurring grace days, retry recurring charge within configured days if charge fail, default 7",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "cycle",
        "fixedFreeDays",
        "fixedTrialCycles",
        "graceDays"
      ],
      "type": "object"
    },
    "RecurringChargeResult": {
      "properties": {
        "code": {
          "description": "code for fail to trigger",
          "type": "string"
        },
        "detail": {
          "description": "detail for fail to trigger",
          "type": "string"
        },
        "triggered": {
          "description": "triggered or not",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "triggered"
      ],
      "type": "object"
    },
    "RedeemHistoryInfo": {
      "properties": {
        "campaignId": {
          "description": "campaign id",
          "type": "string"
        },
        "code": {
          "description": "code value",
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "orderNo": {
          "description": "order No",
          "type": "string"
        },
        "redeemedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "userId": {
          "description": "redeem user id",
          "type": "string"
        }
      },
      "required": [
        "campaignId",
        "code",
        "createdAt",
        "id",
        "namespace",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "RedeemHistoryPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/RedeemHistoryInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "RedeemRequest": {
      "properties": {
        "code": {
          "description": "The code for campaign",
          "type": "string"
        },
        "orderNo": {
          "description": "order No",
          "type": "string"
        }
      },
      "required": [
        "code"
      ],
      "type": "object"
    },
    "RedeemResult": {
      "properties": {
        "items": {
          "description": "redeemed items",
          "items": {
            "$ref": "#/definitions/RedeemableItem"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RedeemableItem": {
      "properties": {
        "extraSubscriptionDays": {
          "description": "Extra subscription days if the item is a subscription, 0 by default",
          "format": "int32",
          "type": "integer"
        },
        "itemId": {
          "description": "The redeemable item id",
          "type": "string"
        },
        "itemName": {
          "description": "The redeemable item name",
          "type": "string"
        },
        "quantity": {
          "description": "The redeemable item quantity, 1 for default",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "itemId",
        "itemName"
      ],
      "type": "object"
    },
    "RegionDataChange": {
      "properties": {
        "itemIdentities": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "itemIdentityType": {
          "description": "Item Identity Type",
          "enum": [
            "ITEM_ID",
            "ITEM_SKU"
          ],
          "type": "string"
        },
        "regionData": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/RegionDataItem"
            },
            "type": "array"
          },
          "description": "region data map, key is region, value is region data list (This map will override existing keys instead of entire map)",
          "type": "object"
        }
      },
      "required": [
        "itemIdentityType"
      ],
      "type": "object"
    },
    "RegionDataItem": {
      "description": "Region data",
      "properties": {
        "currencyCode": {
          "description": "currency code",
          "example": "USD",
          "type": "string"
        },
        "currencyNamespace": {
          "description": "currency namespace",
          "type": "string"
        },
        "currencyType": {
          "description": "currency type",
          "enum": [
            "REAL",
            "VIRTUAL"
          ],
          "type": "string"
        },
        "discountAmount": {
          "description": "Discount amount, min is 0, max is price",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "discountExpireAt": {
          "description": "Discount expire date time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "discountPercentage": {
          "description": "Discount percentage，default is 0, if this value is not 0, it will override the discountAmount",
          "format": "int32",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "discountPurchaseAt": {
          "description": "DiscountPurchaseAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "discountedPrice": {
          "format": "int32",
          "type": "integer"
        },
        "expireAt": {
          "description": "ExpireAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "price": {
          "description": "price value, set to 0 if it's free, if it's -1 means it's dynamic price and need to call getEstimatedPrices endpoint to get price.",
          "format": "int32",
          "type": "integer"
        },
        "purchaseAt": {
          "description": "PurchaseAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "trialPrice": {
          "description": "trial price, required while fixedTrialCycles set, should \u003e=0 and \u003c= price, default same as trialPrice",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "currencyCode",
        "currencyNamespace",
        "currencyType"
      ],
      "type": "object"
    },
    "RegionDataItemDTO": {
      "description": "Region data DTO Object, it's used when create/update item",
      "properties": {
        "currencyCode": {
          "description": "currency code",
          "example": "USD",
          "type": "string"
        },
        "currencyNamespace": {
          "description": "currency namespace",
          "type": "string"
        },
        "currencyType": {
          "description": "currency type",
          "enum": [
            "REAL",
            "VIRTUAL"
          ],
          "type": "string"
        },
        "discountAmount": {
          "description": "Discount amount, min is 0, max is price",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "discountExpireAt": {
          "description": "Discount expire date time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "discountPercentage": {
          "description": "Discount percentage，default is 0, if this value is not 0, it will override the discountAmount",
          "format": "int32",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "discountPurchaseAt": {
          "description": "DiscountPurchaseAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "expireAt": {
          "description": "ExpireAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "price": {
          "description": "price value, set to 0 if it's free, if it's -1 means it's dynamic price and need to call getEstimatedPrices endpoint to get price.",
          "format": "int32",
          "type": "integer"
        },
        "purchaseAt": {
          "description": "PurchaseAt",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "trialPrice": {
          "description": "trial price, required while fixedTrialCycles set, should \u003e=0 and \u003c= price, default same as trialPrice",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "currencyCode",
        "currencyNamespace",
        "currencyType",
        "price"
      ],
      "type": "object"
    },
    "RequestHistory": {
      "properties": {
        "requestTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "responseBody": {
          "type": "object"
        },
        "responseTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "enum": [
            "FAIL",
            "PENDING",
            "SUCCESS"
          ],
          "type": "string"
        },
        "statusCode": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Requirement": {
      "properties": {
        "additionals": {
          "description": "other requirement, max length is 255",
          "type": "string"
        },
        "directXVersion": {
          "description": "directX version, max length is 255",
          "type": "string"
        },
        "diskSpace": {
          "description": "disk space, max length is 255",
          "type": "string"
        },
        "graphics": {
          "description": "graphics, max length is 255",
          "type": "string"
        },
        "label": {
          "description": "label, value can be:minimum,recommended",
          "type": "string"
        },
        "osVersion": {
          "description": "OS version, max length is 255",
          "type": "string"
        },
        "processor": {
          "description": "processor, max length is 255",
          "type": "string"
        },
        "ram": {
          "description": "RAM, max length is 255",
          "type": "string"
        },
        "soundCard": {
          "description": "sound card, max length is 255",
          "type": "string"
        }
      },
      "required": [
        "label"
      ],
      "type": "object"
    },
    "RevocationConfigInfo": {
      "properties": {
        "entitlement": {
          "$ref": "#/definitions/EntitlementRevocationConfig"
        },
        "namespace": {
          "type": "string"
        },
        "wallet": {
          "$ref": "#/definitions/WalletRevocationConfig"
        }
      },
      "type": "object"
    },
    "RevocationConfigUpdate": {
      "properties": {
        "entitlement": {
          "$ref": "#/definitions/EntitlementRevocationConfig",
          "description": "entitlement revocation config"
        },
        "wallet": {
          "$ref": "#/definitions/WalletRevocationConfig",
          "description": "wallet revocation config"
        }
      },
      "type": "object"
    },
    "RevocationError": {
      "properties": {
        "code": {
          "description": "error code",
          "format": "int32",
          "type": "integer"
        },
        "httpStatus": {
          "description": "http status",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RevocationHistoryInfo": {
      "properties": {
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "creditRevocations": {
          "description": "credit revocations",
          "items": {
            "$ref": "#/definitions/CreditRevocation"
          },
          "type": "array"
        },
        "entitlementRevocations": {
          "description": "entitlement revocations",
          "items": {
            "$ref": "#/definitions/EntitlementRevocation"
          },
          "type": "array"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "itemRevocations": {
          "description": "item revocations",
          "items": {
            "$ref": "#/definitions/ItemRevocation"
          },
          "type": "array"
        },
        "meta": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "meta",
          "type": "object"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "revocationErrors": {
          "description": "revocation errors",
          "items": {
            "$ref": "#/definitions/RevocationError"
          },
          "type": "array"
        },
        "revokeEntries": {
          "description": "revoke entries",
          "items": {
            "$ref": "#/definitions/RevokeEntry"
          },
          "type": "array"
        },
        "source": {
          "description": "source",
          "type": "string"
        },
        "status": {
          "description": "status",
          "enum": [
            "FAIL",
            "SUCCESS"
          ],
          "type": "string"
        },
        "transactionId": {
          "description": "transactionId, Order No, DLC Order No.",
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "description": "userId",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RevocationHistoryPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/RevocationHistoryInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "RevocationPluginConfigInfo": {
      "properties": {
        "appConfig": {
          "$ref": "#/definitions/AppConfig",
          "description": "app config"
        },
        "customConfig": {
          "$ref": "#/definitions/PublicCustomConfigInfo",
          "description": "custom config"
        },
        "extendType": {
          "description": "extend type",
          "enum": [
            "APP",
            "CUSTOM"
          ],
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "RevocationPluginConfigUpdate": {
      "properties": {
        "appConfig": {
          "$ref": "#/definitions/AppConfig",
          "description": "app config"
        },
        "customConfig": {
          "$ref": "#/definitions/BaseCustomConfig",
          "description": "custom config"
        },
        "extendType": {
          "description": "extend type",
          "enum": [
            "APP",
            "CUSTOM"
          ],
          "type": "string"
        }
      },
      "required": [
        "extendType"
      ],
      "type": "object"
    },
    "RevocationRequest": {
      "properties": {
        "meta": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "source meta info, like DLC transaction id, order no.",
          "type": "object"
        },
        "revokeEntries": {
          "description": "revoke entries",
          "items": {
            "$ref": "#/definitions/RevokeEntry"
          },
          "type": "array"
        },
        "source": {
          "description": "revoke source",
          "enum": [
            "DLC",
            "IAP",
            "ORDER",
            "OTHER"
          ],
          "type": "string"
        },
        "transactionId": {
          "description": "transaction id: DLC Order No, Order No.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RevocationResult": {
      "properties": {
        "creditRevocations": {
          "description": "credit revocations",
          "items": {
            "$ref": "#/definitions/CreditRevocation"
          },
          "type": "array"
        },
        "entitlementRevocations": {
          "description": "entitlement revocations",
          "items": {
            "$ref": "#/definitions/EntitlementRevocation"
          },
          "type": "array"
        },
        "id": {
          "description": "revocation history id",
          "type": "string"
        },
        "itemRevocations": {
          "description": "item revocations",
          "items": {
            "$ref": "#/definitions/ItemRevocation"
          },
          "type": "array"
        },
        "status": {
          "description": "revocation status",
          "enum": [
            "FAIL",
            "SUCCESS"
          ],
          "type": "string"
        }
      },
      "required": [
        "id",
        "status"
      ],
      "type": "object"
    },
    "RevokeCurrency": {
      "properties": {
        "balanceOrigin": {
          "description": "balance origin",
          "enum": [
            "Epic",
            "GooglePlay",
            "IOS",
            "Nintendo",
            "Oculus",
            "Other",
            "Playstation",
            "Steam",
            "System",
            "Twitch",
            "Xbox"
          ],
          "type": "string"
        },
        "currencyCode": {
          "description": "currency code",
          "type": "string"
        },
        "namespace": {
          "description": "currency namespace",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RevokeEntitlement": {
      "properties": {
        "entitlementId": {
          "description": "entitlement id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RevokeEntitlementPayload": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "entitlementId": {
          "type": "string"
        }
      },
      "required": [
        "entitlementId"
      ],
      "type": "object"
    },
    "RevokeEntry": {
      "properties": {
        "currency": {
          "$ref": "#/definitions/RevokeCurrency",
          "description": "revoke currency"
        },
        "entitlement": {
          "$ref": "#/definitions/RevokeEntitlement",
          "description": "revoke entitlement"
        },
        "item": {
          "$ref": "#/definitions/RevokeItem",
          "description": "revoke item"
        },
        "quantity": {
          "description": "revoke quantity",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "revoke entry type",
          "enum": [
            "CURRENCY",
            "ENTITLEMENT",
            "ITEM"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "RevokeItem": {
      "properties": {
        "itemIdentity": {
          "description": "item identity",
          "type": "string"
        },
        "itemIdentityType": {
          "description": "item identity type",
          "enum": [
            "ITEM_ID",
            "ITEM_SKU"
          ],
          "type": "string"
        },
        "origin": {
          "description": "balance origin, it is used to debit the wallet of the specified balance origin, only available in COINS item",
          "enum": [
            "Epic",
            "GooglePlay",
            "IOS",
            "Nintendo",
            "Oculus",
            "Other",
            "Playstation",
            "Steam",
            "System",
            "Twitch",
            "Xbox"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "RevokeItemSummary": {
      "properties": {
        "itemId": {
          "type": "string"
        },
        "itemSku": {
          "type": "string"
        },
        "itemType": {
          "type": "string"
        },
        "revokeStatus": {
          "enum": [
            "COMPLETED",
            "SKIPPED"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "RevokeResult": {
      "properties": {
        "revokeItemSummaries": {
          "items": {
            "$ref": "#/definitions/RevokeItemSummary"
          },
          "type": "array"
        },
        "reward": {
          "$ref": "#/definitions/PlatformReward"
        },
        "status": {
          "enum": [
            "COMPLETED",
            "SKIPPED"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "RevokeUseCountRequest": {
      "properties": {
        "reason": {
          "description": "reason",
          "type": "string"
        },
        "useCount": {
          "description": "use count",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RewardCondition": {
      "properties": {
        "condition": {
          "type": "string"
        },
        "conditionName": {
          "type": "string"
        },
        "eventName": {
          "type": "string"
        },
        "rewardItems": {
          "items": {
            "$ref": "#/definitions/RewardItem"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RewardCreate": {
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "eventTopic": {
          "description": "event topic to listen to",
          "type": "string"
        },
        "maxAwarded": {
          "description": "Max awarded",
          "format": "int32",
          "type": "integer"
        },
        "maxAwardedPerUser": {
          "description": "Max awarded per user",
          "format": "int32",
          "type": "integer"
        },
        "namespaceExpression": {
          "description": " The path to get namespace from event payload, if not present, will use default value \"$.[0].namespace\"",
          "type": "string"
        },
        "rewardCode": {
          "description": "Reward code",
          "type": "string"
        },
        "rewardConditions": {
          "description": "list of reward condition",
          "items": {
            "$ref": "#/definitions/RewardCondition"
          },
          "type": "array"
        },
        "userIdExpression": {
          "description": "The path to get userId from event payload, if not present, will use default value \"$.[0].userId\"",
          "type": "string"
        }
      },
      "required": [
        "eventTopic",
        "rewardCode"
      ],
      "type": "object"
    },
    "RewardInfo": {
      "properties": {
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "eventTopic": {
          "description": "event topic to listen to",
          "type": "string"
        },
        "maxAwarded": {
          "description": "Max awarded",
          "format": "int32",
          "type": "integer"
        },
        "maxAwardedPerUser": {
          "description": "Max awarded per user",
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "description": "Reward namespace",
          "type": "string"
        },
        "namespaceExpression": {
          "description": " The path to get namespace from event payload, if not present, will use default value",
          "type": "string"
        },
        "rewardCode": {
          "description": "Reward code",
          "type": "string"
        },
        "rewardConditions": {
          "description": "list of reward condition",
          "items": {
            "$ref": "#/definitions/RewardCondition"
          },
          "type": "array"
        },
        "rewardId": {
          "description": "Reward id",
          "type": "string"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "userIdExpression": {
          "description": "The path to get userId from event payload, if not present, will use default value",
          "type": "string"
        }
      },
      "required": [
        "eventTopic",
        "namespace",
        "rewardId"
      ],
      "type": "object"
    },
    "RewardItem": {
      "properties": {
        "duration": {
          "format": "int32",
          "type": "integer"
        },
        "endDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "itemId": {
          "type": "string"
        },
        "quantity": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RewardPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/RewardInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "RewardUpdate": {
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "eventTopic": {
          "description": "event topic to listen to",
          "type": "string"
        },
        "maxAwarded": {
          "description": "Max awarded",
          "format": "int32",
          "type": "integer"
        },
        "maxAwardedPerUser": {
          "description": "Max awarded per user",
          "format": "int32",
          "type": "integer"
        },
        "namespaceExpression": {
          "description": " The path to get namespace from event payload, if not present, will use default value \"$.[0].namespace\"",
          "type": "string"
        },
        "rewardCode": {
          "description": "rewardCode",
          "type": "string"
        },
        "rewardConditions": {
          "description": "list of reward condition",
          "items": {
            "$ref": "#/definitions/RewardCondition"
          },
          "type": "array"
        },
        "userIdExpression": {
          "description": "The path to get userId from event payload, if not present, will use default value \"$.[0].userId\"",
          "type": "string"
        }
      },
      "required": [
        "eventTopic",
        "rewardCode"
      ],
      "type": "object"
    },
    "RewardsRequest": {
      "description": "A DTO object for rewards request API call.",
      "properties": {
        "metadata": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "additional fulfillment information",
          "type": "object"
        },
        "origin": {
          "description": "origin, if rewards contains item icon, it will credit into related origin wallet. if not set, it will be credit into System wallet",
          "enum": [
            "Epic",
            "GooglePlay",
            "IOS",
            "Nintendo",
            "Oculus",
            "Other",
            "Playstation",
            "Steam",
            "System",
            "Twitch",
            "Xbox"
          ],
          "type": "string"
        },
        "rewards": {
          "description": "reward",
          "items": {
            "$ref": "#/definitions/PlatformReward"
          },
          "type": "array"
        },
        "source": {
          "description": "source",
          "enum": [
            "ACHIEVEMENT",
            "CONSUME_ENTITLEMENT",
            "DLC",
            "EXPIRATION",
            "GIFT",
            "IAP",
            "IAP_CHARGEBACK_REVERSED",
            "ORDER_REVOCATION",
            "OTHER",
            "PAYMENT",
            "PROMOTION",
            "PURCHASE",
            "REDEEM_CODE",
            "REFERRAL_BONUS",
            "REWARD",
            "SELL_BACK"
          ],
          "type": "string"
        },
        "transactionId": {
          "description": "transaction id",
          "type": "string"
        }
      },
      "required": [
        "rewards"
      ],
      "type": "object"
    },
    "SaleConfig": {
      "properties": {
        "currencyCode": {
          "description": "currency code, only allow to use current namespace virtual currency",
          "type": "string"
        },
        "price": {
          "description": "price value",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "currencyCode",
        "price"
      ],
      "type": "object"
    },
    "SectionCreate": {
      "description": "A DTO object for creating section API call.",
      "properties": {
        "active": {
          "description": "active, default true",
          "type": "boolean",
          "x-omitempty": false
        },
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "endDate": {
          "description": "end date",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "section extension",
          "type": "object"
        },
        "fixedPeriodRotationConfig": {
          "$ref": "#/definitions/FixedPeriodRotationConfig",
          "description": "fix period rotation config, don't allow null when rotation type is FIXED_PERIOD"
        },
        "items": {
          "description": "item ids",
          "items": {
            "$ref": "#/definitions/SectionItem"
          },
          "type": "array"
        },
        "localizations": {
          "additionalProperties": {
            "$ref": "#/definitions/Localization"
          },
          "description": "Localization, key language, value localization content",
          "type": "object"
        },
        "name": {
          "description": "section name",
          "type": "string"
        },
        "rotationType": {
          "description": "rotation type, default is NONE",
          "enum": [
            "CUSTOM",
            "FIXED_PERIOD",
            "NONE"
          ],
          "type": "string"
        },
        "startDate": {
          "description": "start date",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "viewId": {
          "description": "view id",
          "type": "string"
        }
      },
      "required": [
        "endDate",
        "localizations",
        "name",
        "startDate"
      ],
      "type": "object"
    },
    "SectionInfo": {
      "properties": {
        "active": {
          "description": "active",
          "type": "boolean",
          "x-omitempty": false
        },
        "createdAt": {
          "description": "created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "currentRotationExpireAt": {
          "description": "only exists when rotation type is FIX_PERIOD or CUSTOM",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "currentRotationItems": {
          "description": "current rotation item infos",
          "items": {
            "$ref": "#/definitions/ItemInfo"
          },
          "type": "array"
        },
        "description": {
          "description": "description info",
          "type": "string"
        },
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "endDate": {
          "description": "end date",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "customized section properties",
          "type": "object"
        },
        "localExt": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "longDescription": {
          "description": "long description info",
          "type": "string"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "sectionId": {
          "description": "id",
          "type": "string"
        },
        "startDate": {
          "description": "start date",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "title": {
          "description": "title info",
          "type": "string"
        },
        "updatedAt": {
          "description": "updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "viewId": {
          "description": "view id",
          "type": "string"
        }
      },
      "required": [
        "active",
        "createdAt",
        "endDate",
        "name",
        "namespace",
        "sectionId",
        "startDate",
        "title",
        "updatedAt",
        "viewId"
      ],
      "type": "object"
    },
    "SectionItem": {
      "properties": {
        "id": {
          "description": "item id",
          "type": "string"
        },
        "sku": {
          "description": "item sku",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "SectionPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/FullSectionInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "SectionPluginConfigInfo": {
      "properties": {
        "appConfig": {
          "$ref": "#/definitions/AppConfig",
          "description": "app config"
        },
        "customConfig": {
          "$ref": "#/definitions/PublicCustomConfigInfo",
          "description": "custom config"
        },
        "extendType": {
          "description": "extend type",
          "enum": [
            "APP",
            "CUSTOM"
          ],
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "SectionPluginConfigUpdate": {
      "properties": {
        "appConfig": {
          "$ref": "#/definitions/AppConfig",
          "description": "app config"
        },
        "customConfig": {
          "$ref": "#/definitions/BaseCustomConfig",
          "description": "custom config"
        },
        "extendType": {
          "description": "extend type",
          "enum": [
            "APP",
            "CUSTOM"
          ],
          "type": "string"
        }
      },
      "required": [
        "extendType"
      ],
      "type": "object"
    },
    "SectionUpdate": {
      "description": "A DTO object for updating section API call.",
      "properties": {
        "active": {
          "description": "active, default true",
          "type": "boolean",
          "x-omitempty": false
        },
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "endDate": {
          "description": "end date",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "ext": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "section extension",
          "type": "object"
        },
        "fixedPeriodRotationConfig": {
          "$ref": "#/definitions/FixedPeriodRotationConfig",
          "description": "fix period rotation config, don't allow null when rotation type is FIXED_PERIOD"
        },
        "items": {
          "description": "items",
          "items": {
            "$ref": "#/definitions/SectionItem"
          },
          "type": "array"
        },
        "localizations": {
          "additionalProperties": {
            "$ref": "#/definitions/Localization"
          },
          "description": "Localization, key language, value localization content",
          "type": "object"
        },
        "name": {
          "description": "section name",
          "type": "string"
        },
        "rotationType": {
          "description": "rotation type, default is NONE",
          "enum": [
            "CUSTOM",
            "FIXED_PERIOD",
            "NONE"
          ],
          "type": "string"
        },
        "startDate": {
          "description": "start date",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "viewId": {
          "description": "view id",
          "type": "string"
        }
      },
      "required": [
        "endDate",
        "localizations",
        "name",
        "startDate"
      ],
      "type": "object"
    },
    "ServicePluginConfigInfo": {
      "properties": {
        "grpcServerAddress": {
          "description": "plugin grpc server address: \u003chost\u003e:\u003cport\u003e",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServicePluginConfigUpdate": {
      "properties": {
        "grpcServerAddress": {
          "description": "plugin grpc server address: \u003chost\u003e:\u003cport\u003e",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Slide": {
      "properties": {
        "alt": {
          "description": "alt",
          "type": "string"
        },
        "previewUrl": {
          "description": "preview url",
          "type": "string"
        },
        "thumbnailUrl": {
          "description": "thumbnail url",
          "type": "string"
        },
        "type": {
          "description": "slide type",
          "enum": [
            "image",
            "video"
          ],
          "type": "string"
        },
        "url": {
          "description": "url",
          "type": "string"
        },
        "videoSource": {
          "description": "video source",
          "enum": [
            "generic",
            "vimeo",
            "youtube"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "StackableEntitlementInfo": {
      "properties": {
        "appId": {
          "description": "appId if entitlement is an app",
          "type": "string"
        },
        "appType": {
          "description": "appType if entitlement is an app",
          "enum": [
            "DEMO",
            "DLC",
            "GAME",
            "SOFTWARE"
          ],
          "type": "string"
        },
        "clazz": {
          "description": "entitlement class",
          "enum": [
            "APP",
            "CODE",
            "ENTITLEMENT",
            "LOOTBOX",
            "MEDIA",
            "OPTIONBOX",
            "SUBSCRIPTION"
          ],
          "type": "string"
        },
        "createdAt": {
          "description": "entitlement created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "endDate": {
          "description": "entitlement end date",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "features": {
          "description": "entitlement features",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "grantedAt": {
          "description": "entitlement granted at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "grantedCode": {
          "description": "grantedCode, the granted code",
          "type": "string"
        },
        "id": {
          "description": "entitlement id",
          "type": "string"
        },
        "itemId": {
          "description": "itemId of the entitlement",
          "type": "string"
        },
        "itemNamespace": {
          "description": "itemNamespace for the purchased item",
          "type": "string"
        },
        "itemSnapshot": {
          "$ref": "#/definitions/ItemSnapshot",
          "description": "itemSnapshot"
        },
        "name": {
          "description": "entitlement name",
          "type": "string"
        },
        "namespace": {
          "description": "entitlement namespace",
          "type": "string"
        },
        "sku": {
          "description": "sku for purchased item",
          "type": "string"
        },
        "source": {
          "description": "entitlement source",
          "enum": [
            "ACHIEVEMENT",
            "GIFT",
            "IAP",
            "OTHER",
            "PROMOTION",
            "PURCHASE",
            "REDEEM_CODE",
            "REFERRAL_BONUS",
            "REWARD"
          ],
          "type": "string"
        },
        "stackable": {
          "description": "whether the CONSUMABLE entitlement is stackable",
          "type": "boolean",
          "x-omitempty": false
        },
        "stackedUseCount": {
          "description": "CONSUMABLE entitlement stacked use count",
          "format": "int32",
          "type": "integer"
        },
        "startDate": {
          "description": "entitlement start date",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "description": "entitlement status",
          "enum": [
            "ACTIVE",
            "CONSUMED",
            "INACTIVE",
            "REVOKED",
            "SOLD"
          ],
          "type": "string"
        },
        "storeId": {
          "description": "storeId of the item, published store if omitted",
          "type": "string"
        },
        "type": {
          "description": "entitlement type",
          "enum": [
            "CONSUMABLE",
            "DURABLE"
          ],
          "type": "string"
        },
        "updatedAt": {
          "description": "entitlement updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "useCount": {
          "description": "useCount for entitlement",
          "format": "int32",
          "type": "integer"
        },
        "userId": {
          "description": "userId for this entitlement",
          "type": "string"
        }
      },
      "required": [
        "clazz",
        "createdAt",
        "grantedAt",
        "id",
        "itemId",
        "itemNamespace",
        "name",
        "namespace",
        "source",
        "status",
        "type",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "SteamAchievement": {
      "description": "steam achievement request",
      "properties": {
        "id": {
          "type": "string"
        },
        "value": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SteamAchievementUpdateRequest": {
      "description": "A DTO object for unlock steam achievement API",
      "properties": {
        "achievements": {
          "description": "achievements to be updated",
          "items": {
            "$ref": "#/definitions/SteamAchievement"
          },
          "type": "array"
        },
        "steamUserId": {
          "description": "steam user id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SteamDLCSyncRequest": {
      "properties": {
        "appId": {
          "description": "Steam app id, this field is deprecated",
          "type": "string"
        },
        "steamId": {
          "description": "Steam ID of the user",
          "type": "string"
        }
      },
      "required": [
        "steamId"
      ],
      "type": "object"
    },
    "SteamIAPConfig": {
      "properties": {
        "appId": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "namespace": {
          "type": "string"
        },
        "publisherAuthenticationKey": {
          "type": "string"
        },
        "rvn": {
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "SteamIAPConfigInfo": {
      "properties": {
        "appId": {
          "description": "steam app id",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "publisherAuthenticationKey": {
          "description": "steam publisher authentication key",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "publisherAuthenticationKey"
      ],
      "type": "object"
    },
    "SteamIAPConfigRequest": {
      "properties": {
        "appId": {
          "description": "appId",
          "type": "string"
        },
        "publisherAuthenticationKey": {
          "description": "publisherAuthenticationKey",
          "type": "string"
        }
      },
      "required": [
        "appId"
      ],
      "type": "object"
    },
    "SteamSyncRequest": {
      "properties": {
        "appId": {
          "description": "Steam app id",
          "type": "string"
        },
        "currencyCode": {
          "description": "product price currency",
          "type": "string"
        },
        "language": {
          "description": "language value from language tag, allowed format: en, en-US.\u003cp\u003eSupported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)\u003c/p\u003e",
          "pattern": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$",
          "type": "string"
        },
        "price": {
          "description": "product price",
          "format": "double",
          "type": "number"
        },
        "productId": {
          "description": "steamdefid",
          "type": "string"
        },
        "region": {
          "description": "country value from ISO countries",
          "type": "string"
        },
        "steamId": {
          "description": "Steam ID of the user",
          "type": "string"
        }
      },
      "required": [
        "appId",
        "steamId"
      ],
      "type": "object"
    },
    "StoreBackupInfo": {
      "properties": {
        "autoBackup": {
          "description": "Is auto backup",
          "type": "boolean",
          "x-omitempty": false
        },
        "createdAt": {
          "description": "Backup created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "id": {
          "description": "Backup id",
          "type": "string"
        },
        "name": {
          "description": "Backup name",
          "type": "string"
        },
        "storeId": {
          "description": "Backup store id",
          "type": "string"
        },
        "updatedAt": {
          "description": "Backup updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "autoBackup",
        "createdAt",
        "id",
        "name",
        "storeId",
        "updatedAt"
      ],
      "type": "object"
    },
    "StoreCreate": {
      "description": "A DTO object for creating store API call.",
      "properties": {
        "defaultLanguage": {
          "description": "Default language, BCP 47 language tag, default is en",
          "type": "string"
        },
        "defaultRegion": {
          "description": "Default region, should be ISO3166-1 alpha-2 two letter, default is US",
          "type": "string"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "supportedLanguages": {
          "description": "Languages, BCP 47 language tag",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "supportedRegions": {
          "description": "Store supported regions, should be ISO3166-1 alpha-2 two letter",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "description": "Title, it should starts and ends with alphabets uppercase/lowercase or numeric, allowed separators ',.- and white-space, max length is 127",
          "type": "string"
        }
      },
      "required": [
        "title"
      ],
      "type": "object"
    },
    "StoreInfo": {
      "properties": {
        "createdAt": {
          "description": "Store created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "defaultLanguage": {
          "description": "Default language",
          "type": "string"
        },
        "defaultRegion": {
          "description": "Default region",
          "type": "string"
        },
        "description": {
          "description": "Store description",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace",
          "type": "string"
        },
        "published": {
          "description": "If Store is published",
          "type": "boolean",
          "x-omitempty": false
        },
        "publishedTime": {
          "description": "Store published time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "storeId": {
          "description": "Store id",
          "type": "string"
        },
        "supportedLanguages": {
          "description": "Store supported language",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "supportedRegions": {
          "description": "Store supported regions",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "description": "Store title",
          "type": "string"
        },
        "updatedAt": {
          "description": "Store updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "createdAt",
        "defaultLanguage",
        "defaultRegion",
        "namespace",
        "published",
        "storeId",
        "supportedLanguages",
        "supportedRegions",
        "title",
        "updatedAt"
      ],
      "type": "object"
    },
    "StoreUpdate": {
      "description": "A DTO object for updating store API call.",
      "properties": {
        "defaultLanguage": {
          "description": "Default language, BCP 47 language tag",
          "type": "string"
        },
        "defaultRegion": {
          "description": "Default region, should be ISO3166-1 alpha-2 two letter",
          "type": "string"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "supportedLanguages": {
          "description": "Languages, BCP 47 language tag",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "supportedRegions": {
          "description": "Store supported regions, should be ISO3166-1 alpha-2 two letter",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "description": "Title, it should starts and ends with alphabets uppercase/lowercase or numeric, allowed separators ',.- and white-space, max length is 127",
          "type": "string"
        }
      },
      "required": [
        "title"
      ],
      "type": "object"
    },
    "StreamEvent": {
      "properties": {
        "body": {
          "$ref": "#/definitions/StreamEventBody"
        },
        "eventDomain": {
          "type": "string"
        },
        "eventSource": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "eventVersion": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "StreamEventBody": {
      "properties": {
        "account": {
          "type": "string"
        },
        "additionalData": {
          "$ref": "#/definitions/EventAdditionalData"
        },
        "originalTitleName": {
          "type": "string"
        },
        "paymentProductSKU": {
          "type": "string"
        },
        "purchaseDate": {
          "type": "string"
        },
        "sourceOrderItemId": {
          "type": "string"
        },
        "titleName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "StripeConfig": {
      "description": "A DTO object for updating stripe config.",
      "properties": {
        "allowedPaymentMethodTypes": {
          "description": "specifying the payment methods that are allowed to create payment intent. ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "publishableKey": {
          "description": "publishable key, max length is 4096",
          "type": "string"
        },
        "secretKey": {
          "description": "secret key, max length is 4096",
          "type": "string"
        },
        "webhookSecret": {
          "description": "webhook secret max length is 4096",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SubItemAvailablePrice": {
      "properties": {
        "discountedPrice": {
          "description": "current discounted price per item",
          "format": "int32",
          "type": "integer"
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "itemName": {
          "description": "item name",
          "type": "string"
        },
        "itemSku": {
          "description": "item sku",
          "type": "string"
        },
        "owned": {
          "description": "whether owns this durable item id, consumable item is always false or null.",
          "type": "boolean",
          "x-omitempty": false
        },
        "price": {
          "description": "full price per item",
          "format": "int32",
          "type": "integer"
        },
        "quantity": {
          "description": "quantity",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "discountedPrice",
        "itemId",
        "itemName",
        "itemSku",
        "price"
      ],
      "type": "object"
    },
    "Subscribable": {
      "properties": {
        "subscribable": {
          "description": "subscribable",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "subscribable"
      ],
      "type": "object"
    },
    "SubscribeRequest": {
      "properties": {
        "currencyCode": {
          "description": "currency code, should match currency code in item region data",
          "type": "string"
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "language": {
          "description": "language value from language tag, allowed format: en, en-US.\u003cp\u003eSupported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)\u003c/p\u003e",
          "pattern": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$",
          "type": "string"
        },
        "region": {
          "description": "country value from ISO countries",
          "type": "string"
        },
        "returnUrl": {
          "description": "custom return url for real payment, user will be redirected to this url once payment is finished",
          "type": "string"
        },
        "source": {
          "description": "subscription source",
          "type": "string"
        }
      },
      "required": [
        "currencyCode",
        "itemId"
      ],
      "type": "object"
    },
    "SubscriptionActivityInfo": {
      "properties": {
        "action": {
          "description": "subscription action",
          "enum": [
            "CANCEL",
            "CHANGE_BILLING_ACCOUNT",
            "GRANT_DAYS",
            "IMMEDIATE_CANCEL",
            "RESUBSCRIBE",
            "SUBSCRIBE"
          ],
          "type": "string"
        },
        "chargedCycles": {
          "description": "subscription already charged cycle",
          "format": "int32",
          "type": "integer"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "currentCycle": {
          "description": "subscription current cycle number",
          "format": "int32",
          "type": "integer"
        },
        "grantDays": {
          "description": "subscription grant days, negative indicates decrease",
          "format": "int32",
          "type": "integer"
        },
        "inFixedCycleTrial": {
          "description": "Subscription in fixed cycle trial or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "inFixedFreeDays": {
          "description": "Subscription in fixed free days or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "namespace": {
          "description": "Subscription namespace",
          "type": "string"
        },
        "operator": {
          "description": "operator",
          "type": "string"
        },
        "reason": {
          "description": "subscription action reason",
          "type": "string"
        },
        "subscribedBy": {
          "description": "subscription subscribed by",
          "enum": [
            "PLATFORM",
            "USER"
          ],
          "type": "string"
        },
        "subscriptionId": {
          "description": "Subscription id",
          "type": "string"
        },
        "trialedCycles": {
          "description": "Subscription already trialed cycles if exist",
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "userId": {
          "description": "Subscription user id",
          "type": "string"
        }
      },
      "required": [
        "action",
        "chargedCycles",
        "createdAt",
        "currentCycle",
        "namespace",
        "operator",
        "subscribedBy",
        "subscriptionId",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "SubscriptionActivityPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/SubscriptionActivityInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "SubscriptionInfo": {
      "properties": {
        "billingAccount": {
          "$ref": "#/definitions/BillingAccount",
          "description": "saved billing account"
        },
        "chargeStatus": {
          "description": "charge status",
          "enum": [
            "CHARGED",
            "CHARGE_FAILED",
            "NEVER",
            "RECURRING_CHARGING",
            "SETUP"
          ],
          "type": "string"
        },
        "chargedCycles": {
          "description": "already charged cycles",
          "format": "int32",
          "type": "integer"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "currency": {
          "$ref": "#/definitions/CurrencySummary",
          "description": "currency"
        },
        "currentCycle": {
          "description": "current cycle in",
          "format": "int32",
          "type": "integer"
        },
        "currentPeriodEnd": {
          "description": "current period end",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "currentPeriodStart": {
          "description": "current period start",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "description": "description",
          "type": "string"
        },
        "end": {
          "description": "end date time if exist, at current it's not used",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "entitlements": {
          "description": "granted entitlement summary",
          "items": {
            "$ref": "#/definitions/EntitlementSummary"
          },
          "type": "array"
        },
        "firstSubscribe": {
          "description": "is first subscribe, will enjoy trial if trial available if it's first time subscribe",
          "type": "boolean",
          "x-omitempty": false
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "inFixedCycleTrial": {
          "description": "whether in fixed cycle trial",
          "type": "boolean",
          "x-omitempty": false
        },
        "inFixedFreeDays": {
          "description": "whether in fixed free days",
          "type": "boolean",
          "x-omitempty": false
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "itemSnapshot": {
          "$ref": "#/definitions/ItemSnapshot",
          "description": "item snapshot"
        },
        "language": {
          "description": "created language",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "nextBillingDate": {
          "description": "next billing date",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "paid": {
          "description": "whether user paid from the subscription start",
          "type": "boolean",
          "x-omitempty": false
        },
        "paymentFlowRequired": {
          "description": "whether need to go to payment station for payment",
          "type": "boolean",
          "x-omitempty": false
        },
        "paymentOrderNo": {
          "description": "current payment order no",
          "type": "string"
        },
        "paymentStationUrl": {
          "description": "payment station url",
          "type": "string"
        },
        "price": {
          "description": "normal price",
          "format": "int32",
          "type": "integer"
        },
        "recurring": {
          "$ref": "#/definitions/Recurring",
          "description": "recurring"
        },
        "region": {
          "description": "created region",
          "type": "string"
        },
        "retryAttempted": {
          "description": "payment retry attempted",
          "format": "int32",
          "type": "integer"
        },
        "returnUrl": {
          "description": "payment returnUrl for payment station",
          "type": "string"
        },
        "sandbox": {
          "description": "is sandbox mode",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "sku",
          "type": "string"
        },
        "source": {
          "description": "source",
          "type": "string"
        },
        "start": {
          "description": "start date time, it will record the first time subscribed",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "description": "status",
          "enum": [
            "ACTIVE",
            "CANCELLED",
            "EXPIRED",
            "INIT"
          ],
          "type": "string"
        },
        "subscribedAt": {
          "description": "subscribed date time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "subscribedBy": {
          "description": "subscribed by PLATFORM(system granted) or USER(subscribed by userself)",
          "enum": [
            "PLATFORM",
            "USER"
          ],
          "type": "string"
        },
        "title": {
          "description": "title",
          "type": "string"
        },
        "trialPrice": {
          "description": "trial price",
          "format": "int32",
          "type": "integer"
        },
        "trialedCycles": {
          "description": "already trialed cycles if exist fixedCycleTrial",
          "format": "int32",
          "type": "integer"
        },
        "unsubscribeReason": {
          "description": "unsubscribe reason",
          "type": "string"
        },
        "unsubscribedAt": {
          "description": "unsubscribed date time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "userId": {
          "description": "user id",
          "type": "string"
        }
      },
      "required": [
        "chargeStatus",
        "createdAt",
        "id",
        "inFixedCycleTrial",
        "inFixedFreeDays",
        "itemId",
        "namespace",
        "paymentFlowRequired",
        "recurring",
        "status",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "SubscriptionPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/SubscriptionInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "SubscriptionSummary": {
      "properties": {
        "currentPeriodEnd": {
          "description": "current period end",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "currentPeriodStart": {
          "description": "current period start",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "subscription id",
          "type": "string"
        },
        "itemId": {
          "description": "item id",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "sku": {
          "description": "sku",
          "type": "string"
        },
        "status": {
          "description": "status",
          "enum": [
            "ACTIVE",
            "CANCELLED",
            "EXPIRED",
            "INIT"
          ],
          "type": "string"
        },
        "subscribedBy": {
          "description": "subscribed by PLATFORM(system granted) or USER(subscribed by userself)",
          "enum": [
            "PLATFORM",
            "USER"
          ],
          "type": "string"
        },
        "userId": {
          "description": "user id",
          "type": "string"
        }
      },
      "required": [
        "id",
        "itemId",
        "namespace",
        "status",
        "userId"
      ],
      "type": "object"
    },
    "TLSConfig": {
      "properties": {
        "rootCertFileBytes": {
          "description": "root cert file bytes",
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "rootCertFileName": {
          "description": "root cert file name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaxResult": {
      "properties": {
        "enableTax": {
          "description": "if enable tax",
          "type": "boolean",
          "x-omitempty": false
        },
        "formattedTax": {
          "description": "formattedTax",
          "type": "string"
        },
        "state": {
          "description": "state",
          "type": "string"
        },
        "tax": {
          "description": "tax",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TestResult": {
      "properties": {
        "msg": {
          "description": "error message",
          "type": "string"
        },
        "success": {
          "description": "success",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "success"
      ],
      "type": "object"
    },
    "TicketAcquireRequest": {
      "properties": {
        "count": {
          "description": "acquire count",
          "format": "int32",
          "type": "integer"
        },
        "orderNo": {
          "description": "order no",
          "type": "string"
        }
      },
      "required": [
        "count",
        "orderNo"
      ],
      "type": "object"
    },
    "TicketAcquireResult": {
      "properties": {
        "values": {
          "description": "acquired values",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TicketBoothID": {
      "properties": {
        "id": {
          "description": "id",
          "type": "string"
        },
        "type": {
          "description": "type",
          "enum": [
            "CAMPAIGN",
            "KEYGROUP"
          ],
          "type": "string"
        }
      },
      "required": [
        "id",
        "type"
      ],
      "type": "object"
    },
    "TicketDynamicInfo": {
      "properties": {
        "availableSaleCount": {
          "description": "The available sale count, -1 means UNLIMITED",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "availableSaleCount"
      ],
      "type": "object"
    },
    "TicketSaleDecrementRequest": {
      "properties": {
        "orderNo": {
          "description": "orderNo",
          "type": "string"
        }
      },
      "required": [
        "orderNo"
      ],
      "type": "object"
    },
    "TicketSaleIncrementRequest": {
      "properties": {
        "count": {
          "description": "increment",
          "format": "int32",
          "type": "integer"
        },
        "orderNo": {
          "description": "order No",
          "type": "string"
        }
      },
      "required": [
        "count",
        "orderNo"
      ],
      "type": "object"
    },
    "TicketSaleIncrementResult": {
      "properties": {
        "maxSaleCount": {
          "description": "max sale count",
          "format": "int32",
          "type": "integer"
        },
        "success": {
          "description": "operation result",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "maxSaleCount",
        "success"
      ],
      "type": "object"
    },
    "TimeLimitedBalance": {
      "properties": {
        "balance": {
          "description": "balance",
          "format": "int64",
          "type": "integer"
        },
        "balanceSource": {
          "description": "balance source",
          "type": "string"
        },
        "expireAt": {
          "description": "balance expire time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "TimedOwnership": {
      "properties": {
        "endDate": {
          "description": "end date",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "owned": {
          "description": "ownership",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "owned"
      ],
      "type": "object"
    },
    "TradeChainActionHistoryInfo": {
      "properties": {
        "actions": {
          "description": "chained actions",
          "items": {
            "$ref": "#/definitions/Action"
          },
          "type": "array"
        },
        "metadata": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "metadata",
          "type": "object"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "status": {
          "description": "status of the whole chained actions",
          "enum": [
            "FAILED",
            "INIT",
            "SUCCESS"
          ],
          "type": "string"
        },
        "statusReason": {
          "description": "failed reason",
          "type": "string"
        },
        "transactionId": {
          "description": "transaction Id provided by submitter",
          "type": "string"
        },
        "type": {
          "description": "type defined by submitted",
          "type": "string"
        },
        "userIds": {
          "description": "user Ids involved",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TradeChainedActionCommitRequest": {
      "description": "Represents the request to commit a chained trade action.",
      "properties": {
        "actions": {
          "items": {
            "$ref": "#/definitions/ActionRequest"
          },
          "type": "array"
        },
        "metadata": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "needPreCheck": {
          "type": "boolean",
          "x-omitempty": false
        },
        "transactionId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TradeNotification": {
      "properties": {
        "additionalData": {
          "$ref": "#/definitions/AdditionalData",
          "description": "additional data"
        },
        "authorisedTime": {
          "description": "The time of the order authorised",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "chargebackReversedTime": {
          "description": "The time of the order chargeback reversed",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "chargebackTime": {
          "description": "The time of the order chargeback",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "chargedTime": {
          "description": "The time of the order charged",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "createdTime": {
          "description": "The time of the order created",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "currency": {
          "$ref": "#/definitions/CurrencySummary",
          "description": "Payment order currency info"
        },
        "customParameters": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "User custom parameters",
          "type": "object"
        },
        "extOrderNo": {
          "description": "Order number",
          "type": "string"
        },
        "extTxId": {
          "description": "External transaction id",
          "type": "string"
        },
        "extUserId": {
          "description": "optional, external user id, can be the character id",
          "type": "string"
        },
        "issuedAt": {
          "description": "event issued at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "metadata",
          "type": "object"
        },
        "namespace": {
          "description": "namespace which event issues from",
          "type": "string"
        },
        "nonceStr": {
          "description": "Random string",
          "type": "string"
        },
        "paymentMethod": {
          "description": "Payment method",
          "type": "string"
        },
        "paymentMethodFee": {
          "description": "Payment method fee",
          "format": "int32",
          "type": "integer"
        },
        "paymentOrderNo": {
          "description": "Payment order number",
          "type": "string"
        },
        "paymentProvider": {
          "description": "Payment provider",
          "enum": [
            "ADYEN",
            "ALIPAY",
            "CHECKOUT",
            "PAYPAL",
            "STRIPE",
            "WALLET",
            "WXPAY",
            "XSOLLA"
          ],
          "type": "string"
        },
        "paymentProviderFee": {
          "description": "Payment provider fee",
          "format": "int32",
          "type": "integer"
        },
        "paymentStationUrl": {
          "description": "Payment station url",
          "type": "string"
        },
        "price": {
          "description": "Payment order price",
          "format": "int32",
          "type": "integer"
        },
        "refundedTime": {
          "description": "The time of the order refunded",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "salesTax": {
          "description": "Payment order sales tax",
          "format": "int32",
          "type": "integer"
        },
        "sandbox": {
          "description": "isSandbox, indicate if order is sandbox",
          "type": "boolean",
          "x-omitempty": false
        },
        "sku": {
          "description": "optional, unique identity for the item",
          "type": "string"
        },
        "status": {
          "description": "Payment order status",
          "enum": [
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "CHARGED",
            "CHARGE_FAILED",
            "DELETED",
            "INIT",
            "NOTIFICATION_OF_CHARGEBACK",
            "REFUNDED",
            "REFUNDING",
            "REFUND_FAILED",
            "REQUEST_FOR_INFORMATION"
          ],
          "type": "string"
        },
        "statusReason": {
          "description": "Payment order status reason",
          "type": "string"
        },
        "subscriptionId": {
          "description": "Subscription id if exist",
          "type": "string"
        },
        "subtotalPrice": {
          "description": "subtotal price",
          "format": "int32",
          "type": "integer"
        },
        "targetNamespace": {
          "description": "target namespace, usually it's the game namespace",
          "type": "string"
        },
        "targetUserId": {
          "description": "target user id, usually it's the user id in game namespace",
          "type": "string"
        },
        "tax": {
          "description": "Payment total tax",
          "format": "int32",
          "type": "integer"
        },
        "totalPrice": {
          "description": "total price",
          "format": "int32",
          "type": "integer"
        },
        "totalTax": {
          "description": "total tax",
          "format": "int32",
          "type": "integer"
        },
        "txEndTime": {
          "description": "Transaction end date time",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "description": "notification type: payment",
          "type": "string"
        },
        "userId": {
          "description": "user id in namespace, will be null if there's targetUserId",
          "type": "string"
        },
        "vat": {
          "description": "Payment order VAT",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "currency",
        "extOrderNo",
        "issuedAt",
        "namespace",
        "nonceStr",
        "paymentOrderNo",
        "paymentProvider",
        "price",
        "sandbox",
        "status",
        "type"
      ],
      "type": "object"
    },
    "Transaction": {
      "properties": {
        "additionalData": {
          "$ref": "#/definitions/AdditionalData"
        },
        "amount": {
          "format": "int32",
          "type": "integer"
        },
        "currency": {
          "$ref": "#/definitions/CurrencySummary"
        },
        "extMessage": {
          "type": "string"
        },
        "extStatusCode": {
          "type": "string"
        },
        "extTxId": {
          "type": "string"
        },
        "merchantId": {
          "type": "string"
        },
        "notified": {
          "type": "boolean",
          "x-omitempty": false
        },
        "paymentMethod": {
          "type": "string"
        },
        "paymentMethodFee": {
          "format": "int32",
          "type": "integer"
        },
        "paymentProviderFee": {
          "format": "int32",
          "type": "integer"
        },
        "provider": {
          "enum": [
            "ADYEN",
            "ALIPAY",
            "CHECKOUT",
            "PAYPAL",
            "STRIPE",
            "WALLET",
            "WXPAY",
            "XSOLLA"
          ],
          "type": "string"
        },
        "salesTax": {
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "enum": [
            "FAILED",
            "FINISHED"
          ],
          "type": "string"
        },
        "tax": {
          "format": "int32",
          "type": "integer"
        },
        "txEndTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "txId": {
          "type": "string"
        },
        "type": {
          "enum": [
            "AUTHORISATION",
            "CHARGE",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REFUND",
            "REFUND_FAILED",
            "REQUEST_FOR_INFORMATION"
          ],
          "type": "string"
        },
        "vat": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TransactionAmountDetails": {
      "properties": {
        "amount": {
          "format": "int64",
          "type": "integer"
        },
        "expireAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "origin": {
          "type": "string"
        },
        "walletId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TwitchIAPConfigInfo": {
      "properties": {
        "clientId": {
          "description": "twitch client id",
          "type": "string"
        },
        "clientSecret": {
          "description": "twitch client secret",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "organizationId": {
          "description": "twitch organization Id",
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "TwitchIAPConfigRequest": {
      "properties": {
        "clientId": {
          "description": "twitch client id",
          "type": "string"
        },
        "clientSecret": {
          "description": "twitch client secret",
          "type": "string"
        },
        "organizationId": {
          "description": "twitch organization Id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TwitchSyncRequest": {
      "properties": {
        "gameId": {
          "description": "game id",
          "type": "string"
        },
        "language": {
          "description": "language value from language tag, allowed format: en, en-US.\u003cp\u003eSupported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)\u003c/p\u003e",
          "pattern": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$",
          "type": "string"
        },
        "region": {
          "description": "country value from ISO countries",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TwitchSyncResult": {
      "properties": {
        "iapOrderStatus": {
          "description": "order status",
          "enum": [
            "FAILED",
            "FULFILLED",
            "VERIFIED"
          ],
          "type": "string"
        },
        "itemSku": {
          "description": "Item sku",
          "type": "string"
        },
        "transactionId": {
          "description": "Twitch entitlement id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserDLC": {
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "dlcs": {
          "items": {
            "$ref": "#/definitions/DLCRecord"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "platform": {
          "enum": [
            "EPICGAMES",
            "OCULUS",
            "PSN",
            "STEAM",
            "XBOX"
          ],
          "type": "string"
        },
        "rvn": {
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserDLCRecord": {
      "properties": {
        "id": {
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "obtainedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "platform": {
          "description": "platform",
          "enum": [
            "EPICGAMES",
            "OCULUS",
            "PSN",
            "STEAM",
            "XBOX"
          ],
          "type": "string"
        },
        "revocationResult": {
          "$ref": "#/definitions/RevocationResult"
        },
        "revokeResults": {
          "items": {
            "$ref": "#/definitions/RevokeResult"
          },
          "type": "array"
        },
        "revokedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "rewards": {
          "items": {
            "$ref": "#/definitions/PlatformReward"
          },
          "type": "array"
        },
        "sources": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "status": {
          "enum": [
            "FULFILLED",
            "REVOKED",
            "REVOKE_FAILED"
          ],
          "type": "string"
        },
        "transactionId": {
          "type": "string"
        },
        "userId": {
          "description": "userId",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ValidationErrorEntity": {
      "properties": {
        "errorCode": {
          "description": "numeric error code",
          "format": "int32",
          "type": "integer"
        },
        "errorMessage": {
          "description": "error message",
          "type": "string"
        },
        "errors": {
          "items": {
            "$ref": "#/definitions/FieldValidationError"
          },
          "type": "array"
        }
      },
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "type": "object"
    },
    "ViewCreate": {
      "description": "A DTO object for creating view API call.",
      "properties": {
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "localizations": {
          "additionalProperties": {
            "$ref": "#/definitions/Localization"
          },
          "description": "Localization, key language, value localization content",
          "type": "object"
        },
        "name": {
          "description": "view name",
          "type": "string"
        }
      },
      "required": [
        "displayOrder",
        "localizations",
        "name"
      ],
      "type": "object"
    },
    "ViewInfo": {
      "properties": {
        "createdAt": {
          "description": "view created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "description": {
          "description": "description info",
          "type": "string"
        },
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "localExt": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "longDescription": {
          "description": "long description info",
          "type": "string"
        },
        "name": {
          "description": "view name",
          "type": "string"
        },
        "namespace": {
          "description": "view namespace",
          "type": "string"
        },
        "title": {
          "description": "title info",
          "type": "string"
        },
        "updatedAt": {
          "description": "view updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "viewId": {
          "description": "view id",
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "displayOrder",
        "name",
        "namespace",
        "title",
        "updatedAt",
        "viewId"
      ],
      "type": "object"
    },
    "ViewUpdate": {
      "description": "A DTO object for updating view API call.",
      "properties": {
        "displayOrder": {
          "description": "display order",
          "format": "int32",
          "type": "integer"
        },
        "localizations": {
          "additionalProperties": {
            "$ref": "#/definitions/Localization"
          },
          "description": "Localization, key language, value localization content",
          "type": "object"
        },
        "name": {
          "description": "view name",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "WalletInfo": {
      "properties": {
        "balance": {
          "description": "total balance, include effective time-limited balance",
          "format": "int64",
          "type": "integer"
        },
        "balanceOrigin": {
          "description": "origin of balance",
          "type": "string"
        },
        "createdAt": {
          "description": "created at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "currencyCode": {
          "description": "currency code",
          "type": "string"
        },
        "currencySymbol": {
          "description": "currency symbol",
          "type": "string"
        },
        "id": {
          "description": "wallet id",
          "type": "string"
        },
        "namespace": {
          "description": "wallet namespace",
          "type": "string"
        },
        "status": {
          "description": "status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string"
        },
        "timeLimitedBalances": {
          "description": "time-limited balances info",
          "items": {
            "$ref": "#/definitions/TimeLimitedBalance"
          },
          "type": "array"
        },
        "totalPermanentBalance": {
          "description": "total permanent balance",
          "format": "int64",
          "type": "integer"
        },
        "totalTimeLimitedBalance": {
          "description": "total time limited balance",
          "format": "int64",
          "type": "integer"
        },
        "updatedAt": {
          "description": "updated at",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "userId": {
          "description": "user id",
          "type": "string"
        }
      },
      "required": [
        "balance",
        "balanceOrigin",
        "createdAt",
        "currencyCode",
        "currencySymbol",
        "id",
        "namespace",
        "status",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "WalletPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/WalletInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "WalletRevocationConfig": {
      "properties": {
        "enabled": {
          "description": "will do revocation if enabled, otherwise will skip do revocation.",
          "type": "boolean",
          "x-omitempty": false
        },
        "strategy": {
          "description": "wallet revocation strategy",
          "enum": [
            "ALWAYS_REVOKE",
            "CUSTOM",
            "REVOKE_OR_REPORT"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "WalletTransactionInfo": {
      "properties": {
        "amount": {
          "description": "Transaction amount, it is absolute value.",
          "format": "int64",
          "type": "integer"
        },
        "balanceSource": {
          "description": "The source of credit",
          "type": "string"
        },
        "createdAt": {
          "description": "Transaction created time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "currencyCode": {
          "description": "Transaction currency code",
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "wallet transaction metadata",
          "type": "object"
        },
        "namespace": {
          "description": "Wallet namespace",
          "type": "string"
        },
        "operator": {
          "description": "Operator userId or ClientId",
          "type": "string"
        },
        "reason": {
          "description": "Reason of the transaction",
          "type": "string"
        },
        "transactionAmountDetails": {
          "description": "Transaction amount details",
          "items": {
            "$ref": "#/definitions/TransactionAmountDetails"
          },
          "type": "array"
        },
        "updatedAt": {
          "description": "Transaction updated time",
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "userId": {
          "description": "Wallet owner's userId",
          "type": "string"
        },
        "walletAction": {
          "description": "Action type, remove expired limited time balance will not have wallet action.",
          "enum": [
            "CREDIT",
            "DEBIT",
            "PAYMENT"
          ],
          "type": "string"
        }
      },
      "required": [
        "amount",
        "createdAt",
        "currencyCode",
        "namespace",
        "operator",
        "updatedAt",
        "userId"
      ],
      "type": "object"
    },
    "WalletTransactionPagingSlicedResult": {
      "properties": {
        "data": {
          "description": "data",
          "items": {
            "$ref": "#/definitions/WalletTransactionInfo"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "WxPayConfigInfo": {
      "description": "A DTO object for wxpay config.",
      "properties": {
        "appId": {
          "description": "wxpay appId",
          "type": "string"
        },
        "certPath": {
          "description": "wxpay cert file name",
          "type": "string"
        },
        "key": {
          "description": "wxpay key",
          "type": "string"
        },
        "mchid": {
          "description": "wxpay mchid",
          "type": "string"
        },
        "returnUrl": {
          "description": "return url",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WxPayConfigRequest": {
      "description": "A DTO object for updating wxpay config.",
      "properties": {
        "appId": {
          "description": "wxpay appId",
          "type": "string"
        },
        "key": {
          "description": "wxpay key",
          "type": "string"
        },
        "mchid": {
          "description": "wxpay mchid",
          "type": "string"
        },
        "returnUrl": {
          "description": "return url",
          "type": "string"
        }
      },
      "type": "object"
    },
    "XblAchievementUpdateRequest": {
      "description": "A DTO object for update xbox achievement complete percentage API",
      "properties": {
        "achievements": {
          "description": "achievements to be updated",
          "items": {
            "$ref": "#/definitions/XboxAchievement"
          },
          "type": "array"
        },
        "serviceConfigId": {
          "type": "string"
        },
        "titleId": {
          "type": "string"
        },
        "xboxUserId": {
          "description": "xbox live user id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "XblDLCSyncRequest": {
      "properties": {
        "xstsToken": {
          "description": "xstsToken",
          "type": "string"
        }
      },
      "type": "object"
    },
    "XblIAPConfigInfo": {
      "properties": {
        "businessPartnerCertFileName": {
          "description": "businessPartnerCertFileName",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "password": {
          "description": "password",
          "type": "string"
        },
        "relyingPartyCert": {
          "description": "deprecated - relyingPartyCert",
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "XblIAPConfigRequest": {
      "properties": {
        "relyingPartyCert": {
          "description": "deprecated - relyingPartyCert",
          "type": "string"
        }
      },
      "required": [
        "relyingPartyCert"
      ],
      "type": "object"
    },
    "XblReconcileRequest": {
      "properties": {
        "currencyCode": {
          "description": "product price currency",
          "type": "string"
        },
        "price": {
          "description": "product price",
          "format": "double",
          "type": "number"
        },
        "productId": {
          "description": "productId",
          "type": "string"
        },
        "xstsToken": {
          "description": "xstsToken",
          "type": "string"
        }
      },
      "type": "object"
    },
    "XblReconcileResult": {
      "properties": {
        "iapOrderStatus": {
          "enum": [
            "FAILED",
            "FULFILLED",
            "VERIFIED"
          ],
          "type": "string"
        },
        "itemId": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "transactionId": {
          "type": "string"
        },
        "xboxProductId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "XblUserAchievements": {
      "description": "A DTO object for querying xbox user achievements",
      "properties": {
        "achievements": {
          "description": "user achievements, including unlocked and in progress",
          "items": {
            "$ref": "#/definitions/AchievementInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "XblUserSessionRequest": {
      "description": "A DTO object for xbl user session",
      "properties": {
        "gameSessionId": {
          "description": "game session id",
          "type": "string"
        },
        "payload": {
          "description": "session objects",
          "type": "object"
        },
        "scid": {
          "description": "service config id",
          "type": "string"
        },
        "sessionTemplateName": {
          "description": "session template name",
          "type": "string"
        }
      },
      "required": [
        "gameSessionId",
        "payload",
        "scid",
        "sessionTemplateName"
      ],
      "type": "object"
    },
    "XboxAchievement": {
      "description": "xbox achievement request",
      "properties": {
        "id": {
          "description": "achievement id",
          "type": "string"
        },
        "percentComplete": {
          "description": "complete percentage",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "XsollaConfig": {
      "description": "A DTO object for updating xsolla config.",
      "properties": {
        "apiKey": {
          "description": "api key, max length is 4096",
          "type": "string"
        },
        "flowCompletionUrl": {
          "description": "flow completion url, max length is 2000",
          "type": "string"
        },
        "merchantId": {
          "description": "merchant id",
          "format": "int32",
          "type": "integer"
        },
        "projectId": {
          "description": "project id",
          "format": "int32",
          "type": "integer"
        },
        "projectSecretKey": {
          "description": "project secret key, max length is 4096",
          "type": "string"
        }
      },
      "type": "object"
    },
    "XsollaPaywallConfig": {
      "properties": {
        "device": {
          "description": "device",
          "enum": [
            "DESKTOP",
            "MOBILE"
          ],
          "type": "string"
        },
        "showCloseButton": {
          "description": "showCloseButton",
          "type": "boolean",
          "x-omitempty": false
        },
        "size": {
          "description": "size",
          "enum": [
            "LARGE",
            "MEDIUM",
            "SMALL"
          ],
          "type": "string"
        },
        "theme": {
          "description": "theme",
          "enum": [
            "DARK",
            "DEFAULT",
            "DEFAULT_DARK"
          ],
          "type": "string"
        }
      },
      "required": [
        "device",
        "showCloseButton",
        "size",
        "theme"
      ],
      "type": "object"
    },
    "XsollaPaywallConfigRequest": {
      "properties": {
        "device": {
          "description": "Payment UI device type, DESKTOP for default",
          "enum": [
            "DESKTOP",
            "MOBILE"
          ],
          "type": "string"
        },
        "showCloseButton": {
          "description": "Whether to show a Close button in pay station. false by default",
          "type": "boolean",
          "x-omitempty": false
        },
        "size": {
          "description": "Payment UI size, MEDIUM for default.",
          "enum": [
            "LARGE",
            "MEDIUM",
            "SMALL"
          ],
          "type": "string"
        },
        "theme": {
          "description": "Payment UI theme, DEFAULT for default.",
          "enum": [
            "DARK",
            "DEFAULT",
            "DEFAULT_DARK"
          ],
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "x-docs": {
    "alias": "platform",
    "host": "https://demo.accelbyte.io",
    "path": "/platform/swagger.json"
  },
  "x-version": {
    "buildBy": "Gradle 6.9.1",
    "buildDate": "2023-12-01T11:05:22+00:00",
    "buildID": "4.41.0",
    "buildJDK": "1.8.0_232 (Eclipse OpenJ9 openj9-0.17.0)",
    "buildOS": "Linux amd64 5.13.0-1021-aws",
    "gitBranchName": "release-candidate",
    "gitHash": "1d897dcab8",
    "gitTag": "4.41.0",
    "name": "justice-platform-service",
    "realm": "demo",
    "version": "4.41.0",
    "version-roles-seeding": "1.0.3"
  }
}