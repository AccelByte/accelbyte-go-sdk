// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"strings"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// PublicGetUserBanHistoryV3Reader is a Reader for the PublicGetUserBanHistoryV3 structure.
type PublicGetUserBanHistoryV3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PublicGetUserBanHistoryV3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPublicGetUserBanHistoryV3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPublicGetUserBanHistoryV3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPublicGetUserBanHistoryV3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPublicGetUserBanHistoryV3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPublicGetUserBanHistoryV3NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewPublicGetUserBanHistoryV3InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /iam/v3/public/namespaces/{namespace}/users/{userId}/bans returns an error %d: %s", response.Code(), string(data))
	}
}

// NewPublicGetUserBanHistoryV3OK creates a PublicGetUserBanHistoryV3OK with default headers values
func NewPublicGetUserBanHistoryV3OK() *PublicGetUserBanHistoryV3OK {
	return &PublicGetUserBanHistoryV3OK{}
}

/*PublicGetUserBanHistoryV3OK handles this case with default header values.

  OK
*/
type PublicGetUserBanHistoryV3OK struct {
	Payload *iamclientmodels.ModelGetUserBanV3Response
}

func (o *PublicGetUserBanHistoryV3OK) Error() string {
	return fmt.Sprintf("[GET /iam/v3/public/namespaces/{namespace}/users/{userId}/bans][%d] publicGetUserBanHistoryV3OK  %+v", 200, o.ToJSONString())
}

func (o *PublicGetUserBanHistoryV3OK) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *PublicGetUserBanHistoryV3OK) GetPayload() *iamclientmodels.ModelGetUserBanV3Response {
	return o.Payload
}

func (o *PublicGetUserBanHistoryV3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	o.Payload = new(iamclientmodels.ModelGetUserBanV3Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicGetUserBanHistoryV3BadRequest creates a PublicGetUserBanHistoryV3BadRequest with default headers values
func NewPublicGetUserBanHistoryV3BadRequest() *PublicGetUserBanHistoryV3BadRequest {
	return &PublicGetUserBanHistoryV3BadRequest{}
}

/*PublicGetUserBanHistoryV3BadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>
*/
type PublicGetUserBanHistoryV3BadRequest struct {
}

func (o *PublicGetUserBanHistoryV3BadRequest) Error() string {
	return fmt.Sprintf("[GET /iam/v3/public/namespaces/{namespace}/users/{userId}/bans][%d] publicGetUserBanHistoryV3BadRequest ", 400)
}

func (o *PublicGetUserBanHistoryV3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}

// NewPublicGetUserBanHistoryV3Unauthorized creates a PublicGetUserBanHistoryV3Unauthorized with default headers values
func NewPublicGetUserBanHistoryV3Unauthorized() *PublicGetUserBanHistoryV3Unauthorized {
	return &PublicGetUserBanHistoryV3Unauthorized{}
}

/*PublicGetUserBanHistoryV3Unauthorized handles this case with default header values.

  Unauthorized access
*/
type PublicGetUserBanHistoryV3Unauthorized struct {
}

func (o *PublicGetUserBanHistoryV3Unauthorized) Error() string {
	return fmt.Sprintf("[GET /iam/v3/public/namespaces/{namespace}/users/{userId}/bans][%d] publicGetUserBanHistoryV3Unauthorized ", 401)
}

func (o *PublicGetUserBanHistoryV3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}

// NewPublicGetUserBanHistoryV3Forbidden creates a PublicGetUserBanHistoryV3Forbidden with default headers values
func NewPublicGetUserBanHistoryV3Forbidden() *PublicGetUserBanHistoryV3Forbidden {
	return &PublicGetUserBanHistoryV3Forbidden{}
}

/*PublicGetUserBanHistoryV3Forbidden handles this case with default header values.

  Forbidden
*/
type PublicGetUserBanHistoryV3Forbidden struct {
}

func (o *PublicGetUserBanHistoryV3Forbidden) Error() string {
	return fmt.Sprintf("[GET /iam/v3/public/namespaces/{namespace}/users/{userId}/bans][%d] publicGetUserBanHistoryV3Forbidden ", 403)
}

func (o *PublicGetUserBanHistoryV3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}

// NewPublicGetUserBanHistoryV3NotFound creates a PublicGetUserBanHistoryV3NotFound with default headers values
func NewPublicGetUserBanHistoryV3NotFound() *PublicGetUserBanHistoryV3NotFound {
	return &PublicGetUserBanHistoryV3NotFound{}
}

/*PublicGetUserBanHistoryV3NotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>
*/
type PublicGetUserBanHistoryV3NotFound struct {
}

func (o *PublicGetUserBanHistoryV3NotFound) Error() string {
	return fmt.Sprintf("[GET /iam/v3/public/namespaces/{namespace}/users/{userId}/bans][%d] publicGetUserBanHistoryV3NotFound ", 404)
}

func (o *PublicGetUserBanHistoryV3NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}

// NewPublicGetUserBanHistoryV3InternalServerError creates a PublicGetUserBanHistoryV3InternalServerError with default headers values
func NewPublicGetUserBanHistoryV3InternalServerError() *PublicGetUserBanHistoryV3InternalServerError {
	return &PublicGetUserBanHistoryV3InternalServerError{}
}

/*PublicGetUserBanHistoryV3InternalServerError handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>
*/
type PublicGetUserBanHistoryV3InternalServerError struct {
}

func (o *PublicGetUserBanHistoryV3InternalServerError) Error() string {
	return fmt.Sprintf("[GET /iam/v3/public/namespaces/{namespace}/users/{userId}/bans][%d] publicGetUserBanHistoryV3InternalServerError ", 500)
}

func (o *PublicGetUserBanHistoryV3InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// handle file responses
	contentDisposition := response.GetHeader("Content-Disposition")
	if strings.Contains(strings.ToLower(contentDisposition), "filename=") {
		consumer = runtime.ByteStreamConsumer()
	}

	return nil
}
