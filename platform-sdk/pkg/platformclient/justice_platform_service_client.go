// Code generated by go-swagger; DO NOT EDIT.

package platformclient

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strings"
	"time"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/anonymization"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/campaign"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/category"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/currency"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/entitlement"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/fulfillment"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/fulfillment_script"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/i_a_p"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/integration"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/item"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/key_group"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/order"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/order_dedicated"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/payment"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/payment_account"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/payment_config"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/payment_dedicated"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/payment_station"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/reward"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/store"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/subscription"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/ticket"
	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclient/wallet"
)

// Default justice platform service HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/platform"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new justice platform service HTTP client.
func NewHTTPClient(formats strfmt.Registry) *JusticePlatformService {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new justice platform service HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *JusticePlatformService {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new justice platform service client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *JusticePlatformService {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(JusticePlatformService)
	cli.Transport = transport
	cli.Anonymization = anonymization.New(transport, formats)
	cli.Campaign = campaign.New(transport, formats)
	cli.Category = category.New(transport, formats)
	cli.Currency = currency.New(transport, formats)
	cli.Entitlement = entitlement.New(transport, formats)
	cli.Fulfillment = fulfillment.New(transport, formats)
	cli.FulfillmentScript = fulfillment_script.New(transport, formats)
	cli.Iap = i_a_p.New(transport, formats)
	cli.Integration = integration.New(transport, formats)
	cli.Item = item.New(transport, formats)
	cli.KeyGroup = key_group.New(transport, formats)
	cli.Order = order.New(transport, formats)
	cli.OrderDedicated = order_dedicated.New(transport, formats)
	cli.Payment = payment.New(transport, formats)
	cli.PaymentAccount = payment_account.New(transport, formats)
	cli.PaymentConfig = payment_config.New(transport, formats)
	cli.PaymentDedicated = payment_dedicated.New(transport, formats)
	cli.PaymentStation = payment_station.New(transport, formats)
	cli.Reward = reward.New(transport, formats)
	cli.Store = store.New(transport, formats)
	cli.Subscription = subscription.New(transport, formats)
	cli.Ticket = ticket.New(transport, formats)
	cli.Wallet = wallet.New(transport, formats)
	return cli
}

func NewDateTime(t time.Time) strfmt.DateTime {
	return strfmt.DateTime(t)
}

func NewClientWithBasePath(url string, endpoint string) *JusticePlatformService {
	schemes := []string{"http"}
	if strings.HasSuffix(url, ":443") {
		schemes = []string{"https"}
	}

	transport := httptransport.New(url, endpoint, schemes)
	return New(transport, strfmt.Default)
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// JusticePlatformService is a client for justice platform service
type JusticePlatformService struct {
	Anonymization anonymization.ClientService

	Campaign campaign.ClientService

	Category category.ClientService

	Currency currency.ClientService

	Entitlement entitlement.ClientService

	Fulfillment fulfillment.ClientService

	FulfillmentScript fulfillment_script.ClientService

	Iap i_a_p.ClientService

	Integration integration.ClientService

	Item item.ClientService

	KeyGroup key_group.ClientService

	Order order.ClientService

	OrderDedicated order_dedicated.ClientService

	Payment payment.ClientService

	PaymentAccount payment_account.ClientService

	PaymentConfig payment_config.ClientService

	PaymentDedicated payment_dedicated.ClientService

	PaymentStation payment_station.ClientService

	Reward reward.ClientService

	Store store.ClientService

	Subscription subscription.ClientService

	Ticket ticket.ClientService

	Wallet wallet.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *JusticePlatformService) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Anonymization.SetTransport(transport)
	c.Campaign.SetTransport(transport)
	c.Category.SetTransport(transport)
	c.Currency.SetTransport(transport)
	c.Entitlement.SetTransport(transport)
	c.Fulfillment.SetTransport(transport)
	c.FulfillmentScript.SetTransport(transport)
	c.Iap.SetTransport(transport)
	c.Integration.SetTransport(transport)
	c.Item.SetTransport(transport)
	c.KeyGroup.SetTransport(transport)
	c.Order.SetTransport(transport)
	c.OrderDedicated.SetTransport(transport)
	c.Payment.SetTransport(transport)
	c.PaymentAccount.SetTransport(transport)
	c.PaymentConfig.SetTransport(transport)
	c.PaymentDedicated.SetTransport(transport)
	c.PaymentStation.SetTransport(transport)
	c.Reward.SetTransport(transport)
	c.Store.SetTransport(transport)
	c.Subscription.SetTransport(transport)
	c.Ticket.SetTransport(transport)
	c.Wallet.SetTransport(transport)
}
