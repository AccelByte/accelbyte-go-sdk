// Code generated by go-swagger; DO NOT EDIT.

package notification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/lobby-sdk/pkg/lobbyclientmodels"
)

// GetLocalizationTemplateReader is a Reader for the GetLocalizationTemplate structure.
type GetLocalizationTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLocalizationTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLocalizationTemplateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLocalizationTemplateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetLocalizationTemplateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetLocalizationTemplateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetLocalizationTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /notification/namespaces/{namespace}/templates/{templateSlug}/languages/{templateLanguage} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewGetLocalizationTemplateOK creates a GetLocalizationTemplateOK with default headers values
func NewGetLocalizationTemplateOK() *GetLocalizationTemplateOK {
	return &GetLocalizationTemplateOK{}
}

/*GetLocalizationTemplateOK handles this case with default header values.

  OK
*/
type GetLocalizationTemplateOK struct {
	Payload *lobbyclientmodels.ModelTemplateLocalization
}

func (o *GetLocalizationTemplateOK) Error() string {
	return fmt.Sprintf("[GET /notification/namespaces/{namespace}/templates/{templateSlug}/languages/{templateLanguage}][%d] getLocalizationTemplateOK  %+v", 200, o.Payload)
}

func (o *GetLocalizationTemplateOK) GetPayload() *lobbyclientmodels.ModelTemplateLocalization {
	return o.Payload
}

func (o *GetLocalizationTemplateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.ModelTemplateLocalization)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocalizationTemplateBadRequest creates a GetLocalizationTemplateBadRequest with default headers values
func NewGetLocalizationTemplateBadRequest() *GetLocalizationTemplateBadRequest {
	return &GetLocalizationTemplateBadRequest{}
}

/*GetLocalizationTemplateBadRequest handles this case with default header values.

  Bad Request
*/
type GetLocalizationTemplateBadRequest struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *GetLocalizationTemplateBadRequest) Error() string {
	return fmt.Sprintf("[GET /notification/namespaces/{namespace}/templates/{templateSlug}/languages/{templateLanguage}][%d] getLocalizationTemplateBadRequest  %+v", 400, o.Payload)
}

func (o *GetLocalizationTemplateBadRequest) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *GetLocalizationTemplateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocalizationTemplateUnauthorized creates a GetLocalizationTemplateUnauthorized with default headers values
func NewGetLocalizationTemplateUnauthorized() *GetLocalizationTemplateUnauthorized {
	return &GetLocalizationTemplateUnauthorized{}
}

/*GetLocalizationTemplateUnauthorized handles this case with default header values.

  Unauthorized
*/
type GetLocalizationTemplateUnauthorized struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *GetLocalizationTemplateUnauthorized) Error() string {
	return fmt.Sprintf("[GET /notification/namespaces/{namespace}/templates/{templateSlug}/languages/{templateLanguage}][%d] getLocalizationTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLocalizationTemplateUnauthorized) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *GetLocalizationTemplateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocalizationTemplateForbidden creates a GetLocalizationTemplateForbidden with default headers values
func NewGetLocalizationTemplateForbidden() *GetLocalizationTemplateForbidden {
	return &GetLocalizationTemplateForbidden{}
}

/*GetLocalizationTemplateForbidden handles this case with default header values.

  Forbidden
*/
type GetLocalizationTemplateForbidden struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *GetLocalizationTemplateForbidden) Error() string {
	return fmt.Sprintf("[GET /notification/namespaces/{namespace}/templates/{templateSlug}/languages/{templateLanguage}][%d] getLocalizationTemplateForbidden  %+v", 403, o.Payload)
}

func (o *GetLocalizationTemplateForbidden) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *GetLocalizationTemplateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocalizationTemplateNotFound creates a GetLocalizationTemplateNotFound with default headers values
func NewGetLocalizationTemplateNotFound() *GetLocalizationTemplateNotFound {
	return &GetLocalizationTemplateNotFound{}
}

/*GetLocalizationTemplateNotFound handles this case with default header values.

  Not Found
*/
type GetLocalizationTemplateNotFound struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *GetLocalizationTemplateNotFound) Error() string {
	return fmt.Sprintf("[GET /notification/namespaces/{namespace}/templates/{templateSlug}/languages/{templateLanguage}][%d] getLocalizationTemplateNotFound  %+v", 404, o.Payload)
}

func (o *GetLocalizationTemplateNotFound) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *GetLocalizationTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
