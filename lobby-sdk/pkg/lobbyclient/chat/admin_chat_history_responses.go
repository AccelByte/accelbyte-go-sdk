// Code generated by go-swagger; DO NOT EDIT.

package chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/lobby-sdk/pkg/lobbyclientmodels"
)

// AdminChatHistoryReader is a Reader for the AdminChatHistory structure.
type AdminChatHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminChatHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminChatHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminChatHistoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminChatHistoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAdminChatHistoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAdminChatHistoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewAdminChatHistoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /lobby/v1/admin/chat/namespaces/{namespace}/users/{userId}/friends/{friendId} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminChatHistoryOK creates a AdminChatHistoryOK with default headers values
func NewAdminChatHistoryOK() *AdminChatHistoryOK {
	return &AdminChatHistoryOK{}
}

/*AdminChatHistoryOK handles this case with default header values.

  OK
*/
type AdminChatHistoryOK struct {
	Payload []*lobbyclientmodels.ModelChatMessageResponse
}

func (o *AdminChatHistoryOK) Error() string {
	return fmt.Sprintf("[GET /lobby/v1/admin/chat/namespaces/{namespace}/users/{userId}/friends/{friendId}][%d] adminChatHistoryOK  %+v", 200, o.Payload)
}

func (o *AdminChatHistoryOK) GetPayload() []*lobbyclientmodels.ModelChatMessageResponse {
	return o.Payload
}

func (o *AdminChatHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminChatHistoryBadRequest creates a AdminChatHistoryBadRequest with default headers values
func NewAdminChatHistoryBadRequest() *AdminChatHistoryBadRequest {
	return &AdminChatHistoryBadRequest{}
}

/*AdminChatHistoryBadRequest handles this case with default header values.

  Bad Request
*/
type AdminChatHistoryBadRequest struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminChatHistoryBadRequest) Error() string {
	return fmt.Sprintf("[GET /lobby/v1/admin/chat/namespaces/{namespace}/users/{userId}/friends/{friendId}][%d] adminChatHistoryBadRequest  %+v", 400, o.Payload)
}

func (o *AdminChatHistoryBadRequest) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminChatHistoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminChatHistoryUnauthorized creates a AdminChatHistoryUnauthorized with default headers values
func NewAdminChatHistoryUnauthorized() *AdminChatHistoryUnauthorized {
	return &AdminChatHistoryUnauthorized{}
}

/*AdminChatHistoryUnauthorized handles this case with default header values.

  Unauthorized
*/
type AdminChatHistoryUnauthorized struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminChatHistoryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /lobby/v1/admin/chat/namespaces/{namespace}/users/{userId}/friends/{friendId}][%d] adminChatHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *AdminChatHistoryUnauthorized) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminChatHistoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminChatHistoryForbidden creates a AdminChatHistoryForbidden with default headers values
func NewAdminChatHistoryForbidden() *AdminChatHistoryForbidden {
	return &AdminChatHistoryForbidden{}
}

/*AdminChatHistoryForbidden handles this case with default header values.

  Forbidden
*/
type AdminChatHistoryForbidden struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminChatHistoryForbidden) Error() string {
	return fmt.Sprintf("[GET /lobby/v1/admin/chat/namespaces/{namespace}/users/{userId}/friends/{friendId}][%d] adminChatHistoryForbidden  %+v", 403, o.Payload)
}

func (o *AdminChatHistoryForbidden) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminChatHistoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminChatHistoryNotFound creates a AdminChatHistoryNotFound with default headers values
func NewAdminChatHistoryNotFound() *AdminChatHistoryNotFound {
	return &AdminChatHistoryNotFound{}
}

/*AdminChatHistoryNotFound handles this case with default header values.

  Not Found
*/
type AdminChatHistoryNotFound struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminChatHistoryNotFound) Error() string {
	return fmt.Sprintf("[GET /lobby/v1/admin/chat/namespaces/{namespace}/users/{userId}/friends/{friendId}][%d] adminChatHistoryNotFound  %+v", 404, o.Payload)
}

func (o *AdminChatHistoryNotFound) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminChatHistoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminChatHistoryInternalServerError creates a AdminChatHistoryInternalServerError with default headers values
func NewAdminChatHistoryInternalServerError() *AdminChatHistoryInternalServerError {
	return &AdminChatHistoryInternalServerError{}
}

/*AdminChatHistoryInternalServerError handles this case with default header values.

  Internal Server Error
*/
type AdminChatHistoryInternalServerError struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *AdminChatHistoryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /lobby/v1/admin/chat/namespaces/{namespace}/users/{userId}/friends/{friendId}][%d] adminChatHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *AdminChatHistoryInternalServerError) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *AdminChatHistoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
