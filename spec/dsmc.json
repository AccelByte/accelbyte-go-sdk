{
  "host": "demo.accelbyte.io",
  "info": {
    "description": "Justice DSM Controller Service",
    "title": "justice-dsm-controller-service",
    "version": "3.2.1"
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "HasPermission": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]": "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]": "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]": "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]",
        "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]": "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:DSM:SERVER [DELETE]": "ADMIN:NAMESPACE:{namespace}:DSM:SERVER [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]": "ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]",
        "ADMIN:NAMESPACE:{namespace}:DSM:SESSION [DELETE]": "ADMIN:NAMESPACE:{namespace}:DSM:SESSION [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:DSM:SESSION [READ]": "ADMIN:NAMESPACE:{namespace}:DSM:SESSION [READ]",
        "NAMESPACE:{namespace}:DSM:CONFIG [READ]": "NAMESPACE:{namespace}:DSM:CONFIG [READ]",
        "NAMESPACE:{namespace}:DSM:SERVER [UPDATE]": "NAMESPACE:{namespace}:DSM:SERVER [UPDATE]",
        "NAMESPACE:{namespace}:DSM:SESSION [CREATE]": "NAMESPACE:{namespace}:DSM:SESSION [CREATE]",
        "NAMESPACE:{namespace}:DSM:SESSION [READ]": "NAMESPACE:{namespace}:DSM:SESSION [READ]",
        "NAMESPACE:{namespace}:DSM:SESSION [UPDATE]": "NAMESPACE:{namespace}:DSM:SESSION [UPDATE]"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "HasScope": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "social": "social"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "paths": {
    "/dsmcontroller/admin/configs": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint lists all of dedicated servers configs.",
        "operationId": "ListConfig",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "configs listed",
            "schema": {
              "$ref": "#/definitions/models.ListConfigResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "List all configs",
        "tags": [
          "Config"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE] \nRequired scope: social\n\nThis endpoint adds/modifies config. When there are ready servers and \nthe server version is updated, those servers will be replaced with newer version.\n\nPort is where your game listens for incoming UDP connection, if empty it\u0026#39;ll be set to 15000\n\nCPU and Memory limit / request are formatted with Kubernetes format, \ne.g. CPU of 1000m is 1 core, and Memory of 512Mi is 512 MB.\n\nThe creation/claim/session/unreachable/heartbeat timeouts are all in seconds. \nCreation timeout is time limit for DS to startup until registers itself. \nClaim timeout is time limit for game session manager to claim its ready DS. \nSession timeout is time limit for match session before deleted.\nUnreachable timeout is time limit for DS in UNREACHABLE state before deleted.\nHeartbeat timeout is time limit for DS to give heartbeat before marked as UNREACHABLE.\n\nSample config:\n{\n\t\u0026#34;namespace\u0026#34;: \u0026#34;accelbyte\u0026#34;,\n\t\u0026#34;providers\u0026#34;: [\n\t\u0026#34;aws\u0026#34;\n\t],\n\t\u0026#34;port\u0026#34;: 7777,\n\t\u0026#34;protocol\u0026#34;: \u0026#34;udp\u0026#34;,\n\t\u0026#34;creation_timeout\u0026#34;: 120,\n\t\u0026#34;claim_timeout\u0026#34;: 60,\n\t\u0026#34;session_timeout\u0026#34;: 1800,\n\t\u0026#34;heartbeat_timeout\u0026#34;: 30,\n\t\u0026#34;unreachable_timeout\u0026#34;: 30,\n\t\u0026#34;image_version_mapping\u0026#34;: {\n\t\t\u0026#34;1.4.0\u0026#34;: \u0026#34;accelbyte/sample-ds-go:1.4.0\u0026#34;\n\t},\n\t\u0026#34;default_version\u0026#34;: \u0026#34;1.4.0\u0026#34;,\n\t\u0026#34;cpu_limit\u0026#34;: \u0026#34;100\u0026#34;,\n\t\u0026#34;mem_limit\u0026#34;: \u0026#34;64\u0026#34;,\n\t\u0026#34;params\u0026#34;: \u0026#34;\u0026#34;,\n\t\u0026#34;min_count\u0026#34;: 0,\n\t\u0026#34;max_count\u0026#34;: 0,\n\t\u0026#34;buffer_count\u0026#34;: 0,\n\t\u0026#34;configurations\u0026#34;: {\n\t\t\u0026#34;1player\u0026#34;: {\n\t\t\t\u0026#34;cpu_limit\u0026#34;: \u0026#34;100\u0026#34;,\n\t\t\t\u0026#34;mem_limit\u0026#34;: \u0026#34;64\u0026#34;,\n\t\t\t\u0026#34;params\u0026#34;: \u0026#34;-gamemode 1p\u0026#34;,\n\t\t},\n\t\t\u0026#34;50players\u0026#34;: {\n\t\t\t\u0026#34;cpu_limit\u0026#34;: \u0026#34;200\u0026#34;,\n\t\t\t\u0026#34;mem_limit\u0026#34;: \u0026#34;512\u0026#34;,\n\t\t\t\u0026#34;params\u0026#34;: \u0026#34;-gamemode 50p\u0026#34;,\n\t\t}\n\t},\n\t\u0026#34;deployments\u0026#34;: {\n\t\t\u0026#34;global-1p\u0026#34;: {\n\t\t\t\u0026#34;game_version\u0026#34;: \u0026#34;1.4.0\u0026#34;\u0026#34;,\n\t\t\t\u0026#34;regions\u0026#34;: [\u0026#34;us-west\u0026#34;, \u0026#34;ap-southeast\u0026#34;],\n\t\t\t\u0026#34;configuration\u0026#34;: \u0026#34;1player\u0026#34;,\n\t\t\t\u0026#34;min_count\u0026#34;: 0,\n\t\t\t\u0026#34;max_count\u0026#34;: 0,\n\t\t\t\u0026#34;buffer_count\u0026#34;: 2\n\t\t},\n\t\t\u0026#34;us-50p\u0026#34;: {\n\t\t\t\u0026#34;game_version\u0026#34;: \u0026#34;1.4.0\u0026#34;\u0026#34;,\n\t\t\t\u0026#34;regions\u0026#34;: [\u0026#34;us-west\u0026#34;],\n\t\t\t\u0026#34;configuration\u0026#34;: \u0026#34;50players\u0026#34;,\n\t\t\t\u0026#34;min_count\u0026#34;: 0,\n\t\t\t\u0026#34;max_count\u0026#34;: 0,\n\t\t\t\u0026#34;buffer_count\u0026#34;: 5\n\t\t},\n\t},\n}\n```",
        "operationId": "SaveConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.DSMConfigRecord"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "config added/updated"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Save config",
        "tags": [
          "Config"
        ]
      }
    },
    "/dsmcontroller/admin/images": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE] \nRequired scope: social\n\nThis endpoint will create image.\n\nSample image:\n{\n\t\u0026#34;namespace\u0026#34;:\u0026#34;dewa\u0026#34;,\n\t\u0026#34;version\u0026#34;:\u0026#34;1.0.0\u0026#34;,\n\t\u0026#34;image\u0026#34;:\u0026#34;144436415367.dkr.ecr.us-west-2.amazonaws.com/dewa:1.0.0\u0026#34;,\n\t\u0026#34;persistent\u0026#34;:false\n}\n```",
        "operationId": "CreateImage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateImageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "image created"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "conflict. duplicate image version record",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create image",
        "tags": [
          "Image Config"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE] \nRequired scope: social\n\nThis endpoint will update an image name and/or image persistent flag.\n\nSample image:\n{\n\t\u0026#34;namespace\u0026#34;:\u0026#34;dewa\u0026#34;,\n\t\u0026#34;version\u0026#34;:\u0026#34;1.0.0\u0026#34;,\n\t\u0026#34;image\u0026#34;:\u0026#34;144436415367.dkr.ecr.us-west-2.amazonaws.com/dewa:1.0.0\u0026#34;,\n\t\u0026#34;persistent\u0026#34;:false\n}\n```",
        "operationId": "UpdateImage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ImageRecordUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "image updated"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Update image",
        "tags": [
          "Image Config"
        ]
      }
    },
    "/dsmcontroller/admin/images/import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\t\nRequired scope: social\n\t\nThis endpoint import a dedicated servers images in a namespace.\n\t\nThe image will be upsert. Existing version will be replaced with imported image, will create new one if not found.\n\nExample data inside imported file\n[\n  {\n\t\u0026#34;namespace\u0026#34;: \u0026#34;dewa\u0026#34;,\n\t\u0026#34;image\u0026#34;: \u0026#34;123456789.dkr.ecr.us-west-2.amazonaws.com/ds-dewa:0.0.1-alpha\u0026#34;,\n\t\u0026#34;version\u0026#34;: \u0026#34;0.0.1\u0026#34;,\n\t\u0026#34;persistent\u0026#34;: true\n  }\n]\n",
        "operationId": "ImportImages",
        "parameters": [
          {
            "description": "imported file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "images imported",
            "schema": {
              "$ref": "#/definitions/models.ImportResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "unauthorized access",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "forbidden access",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "import images for a namespace",
        "tags": [
          "Image Config"
        ]
      }
    },
    "/dsmcontroller/admin/images/patches": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE] \nRequired scope: social\n\nThis endpoint will create image patch.\n\nSample image:\n{\n\t\u0026#34;namespace\u0026#34;:\u0026#34;dewa\u0026#34;,\n\t\u0026#34;version\u0026#34;:\u0026#34;1.0.0\u0026#34;,\n\t\u0026#34;patchVersion\u0026#34;:\u0026#34;1.0.0-patch\u0026#34;,\n\t\u0026#34;image\u0026#34;:\u0026#34;144436415367.dkr.ecr.us-west-2.amazonaws.com/dewa:1.0.0-patch\u0026#34;,\n\t\u0026#34;persistent\u0026#34;:false\n}\n```",
        "operationId": "CreateImagePatch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateImagePatchRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "image patch created"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "conflict. duplicate image patch version record",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create image patch",
        "tags": [
          "Image Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE] \nRequired scope: social\n\nThis endpoint removes config. When there are ready servers, \nthose servers will be removed.\n```",
        "operationId": "DeleteConfig",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "config deleted"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete config",
        "tags": [
          "Config"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get a dedicated servers config in a namespace.",
        "operationId": "GetConfig",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "config retrieved",
            "schema": {
              "$ref": "#/definitions/models.DSMConfigRecord"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get config for a namespace",
        "tags": [
          "Config"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE] \nRequired scope: social\n\nThis endpoint modifies config. When there are ready servers and \nthe server version is updated, those servers will be replaced with newer version.\n\nPort is where your game listens for incoming UDP connection, if empty it\u0026#39;ll be set to 15000\n\nCPU and Memory limit / request are formatted with Kubernetes format, \ne.g. CPU of 1000m is 1 core, and Memory of 512Mi is 512 MB.\n\nThe creation/claim/session/unreachable/heartbeat timeouts are all in seconds. \nCreation timeout is time limit for DS to startup until registers itself. \nClaim timeout is time limit for game session manager to claim its ready DS. \nSession timeout is time limit for match session before deleted.\nUnreachable timeout is time limit for DS in UNREACHABLE state before deleted.\nHeartbeat timeout is time limit for DS to give heartbeat before marked as UNREACHABLE.\n\nSample config:\n{\n\t\u0026#34;namespace\u0026#34;: \u0026#34;accelbyte\u0026#34;,\n\t\u0026#34;providers\u0026#34;: [\n\t\u0026#34;aws\u0026#34;\n\t],\n\t\u0026#34;port\u0026#34;: 7777,\n\t\u0026#34;protocol\u0026#34;: \u0026#34;udp\u0026#34;,\n\t\u0026#34;creation_timeout\u0026#34;: 120,\n\t\u0026#34;claim_timeout\u0026#34;: 60,\n\t\u0026#34;session_timeout\u0026#34;: 1800,\n\t\u0026#34;heartbeat_timeout\u0026#34;: 30,\n\t\u0026#34;unreachable_timeout\u0026#34;: 30,\n}\n```",
        "operationId": "UpdateConfig",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateDSMConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "config updated",
            "schema": {
              "$ref": "#/definitions/models.DSMConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Update config",
        "tags": [
          "Config"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE] \nRequired scope: social\n\nThis endpoint creates config.\n\nPort is where your game listens for incoming UDP connection, if empty it\u0026#39;ll be set to 15000\n\nCPU and Memory limit / request are formatted with Kubernetes format, \ne.g. CPU of 1000m is 1 core, and Memory of 512Mi is 512 MB.\n\nThe creation/claim/session/unreachable/heartbeat timeouts are all in seconds. \nCreation timeout is time limit for DS to startup until registers itself. \nClaim timeout is time limit for game session manager to claim its ready DS. \nSession timeout is time limit for match session before deleted.\nUnreachable timeout is time limit for DS in UNREACHABLE state before deleted.\nHeartbeat timeout is time limit for DS to give heartbeat before marked as UNREACHABLE.\n\nSample config:\n{\n\t\u0026#34;namespace\u0026#34;: \u0026#34;accelbyte\u0026#34;,\n\t\u0026#34;providers\u0026#34;: [\n\t\u0026#34;aws\u0026#34;\n\t],\n\t\u0026#34;port\u0026#34;: 7777,\n\t\u0026#34;protocol\u0026#34;: \u0026#34;udp\u0026#34;,\n\t\u0026#34;creation_timeout\u0026#34;: 120,\n\t\u0026#34;claim_timeout\u0026#34;: 60,\n\t\u0026#34;session_timeout\u0026#34;: 1800,\n\t\u0026#34;heartbeat_timeout\u0026#34;: 30,\n\t\u0026#34;unreachable_timeout\u0026#34;: 30,\n}\n```",
        "operationId": "CreateConfig",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateDSMConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "config created",
            "schema": {
              "$ref": "#/definitions/models.DSMConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create config",
        "tags": [
          "Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/cache": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint clears config cache in a namespace",
        "operationId": "ClearCache",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "ok"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Clear config cache",
        "tags": [
          "Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/deployments": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get a all deployments in a namespace",
        "operationId": "GetAllDeployment",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the deployment",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "offset from list to query from",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "how many items to return",
            "in": "query",
            "name": "count",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.ListDeploymentResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get All Deployments",
        "tags": [
          "Deployment Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/deployments/{deployment}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint delete a dedicated server deployment in a namespace",
        "operationId": "DeleteDeployment",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "ok"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Deployment",
        "tags": [
          "Deployment Config"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get a dedicated server deployment in a namespace",
        "operationId": "GetDeployment",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Deployment",
        "tags": [
          "Deployment Config"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint update a dedicated servers deployment in a namespace.",
        "operationId": "UpdateDeployment",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateDeploymentRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment updated",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Update deployment",
        "tags": [
          "Deployment Config"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint create a dedicated servers deployment in a namespace.",
        "operationId": "CreateDeployment",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateDeploymentRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "deployment created",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "deployment already exists",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create deployment",
        "tags": [
          "Deployment Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/deployments/{deployment}/overrides/regions/{region}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint delete a dedicated server deployment override in a namespace in a region for root deployment",
        "operationId": "DeleteRootRegionOverride",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "region",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment region override deleted",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Region Override",
        "tags": [
          "Deployment Config"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint update a dedicated servers deployment override in a namespace in a region for root deployment.",
        "operationId": "UpdateRootRegionOverride",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "region",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateRegionOverrideRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment region override updated",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Update region override",
        "tags": [
          "Deployment Config"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint creates a dedicated servers deployment override in a namespace in a region for root deployment.",
        "operationId": "CreateRootRegionOverride",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment of the game",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "region",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateRegionOverrideRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "region override created",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "deployment already has region override",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create region override",
        "tags": [
          "Deployment Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/deployments/{deployment}/overrides/version/{version}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint create a dedicated servers deployment override in a namespace.",
        "operationId": "CreateDeploymentOverride",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment of the game",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateDeploymentOverrideRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "deployment override created",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "deployment override already exists",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create deployment override",
        "tags": [
          "Deployment Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/deployments/{deployment}/overrides/versions/{version}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint delete a dedicated server deployment override in a namespace",
        "operationId": "DeleteDeploymentOverride",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment override deleted",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Deployment Override",
        "tags": [
          "Deployment Config"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint update a dedicated servers deployment override in a namespace.",
        "operationId": "UpdateDeploymentOverride",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateDeploymentOverrideRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment override updated",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Update deployment override",
        "tags": [
          "Deployment Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/deployments/{deployment}/overrides/versions/{version}/regions/{region}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint delete a dedicated server deployment override in a namespace in a region for deployment overrides",
        "operationId": "DeleteOverrideRegionOverride",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "region",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment region override deleted",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment  not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete region override for deployment override",
        "tags": [
          "Deployment Config"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint update a dedicated servers deployment override in a namespace in a region for deployment overrides.",
        "operationId": "UpdateOverrideRegionOverride",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "region",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateRegionOverrideRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "deployment region override updated",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Update region override for deployment override",
        "tags": [
          "Deployment Config"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint creates a dedicated servers deployment override in a namespace in a region for deployment overrides.",
        "operationId": "CreateOverrideRegionOverride",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment of the game",
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          },
          {
            "description": "version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "region",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateRegionOverrideRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "region override created",
            "schema": {
              "$ref": "#/definitions/models.DeploymentWithOverride"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "deployment not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "deployment already has region override",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create region override for deployment override",
        "tags": [
          "Deployment Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/pods": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get a all pod configs in a namespace\n\nParameter Offset and Count is Required",
        "operationId": "GetAllPodConfig",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "offset from list to query from",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          },
          {
            "description": "how many items to return",
            "in": "query",
            "name": "count",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.ListPodConfigResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get all pod configs",
        "tags": [
          "Pod Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/pods/{name}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint delete a dedicated server pod config in a namespace",
        "operationId": "DeletePodConfig",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "pod name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "pod config deleted"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "pod config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "pod config in use",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete pod config",
        "tags": [
          "Pod Config"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get a dedicated server pod config in a namespace",
        "operationId": "GetPodConfig",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "pod name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.PodConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "pod name not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Pod Config",
        "tags": [
          "Pod Config"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint update a dedicated servers pod config in a namespace.",
        "operationId": "UpdatePodConfig",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "pod name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdatePodConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "pod config updated",
            "schema": {
              "$ref": "#/definitions/models.PodConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "pod config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "pod config with same name already exist",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Update pod config",
        "tags": [
          "Pod Config"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint create a dedicated servers pod config in a namespace.",
        "operationId": "CreatePodConfig",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "pod name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreatePodConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "pod config created",
            "schema": {
              "$ref": "#/definitions/models.PodConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "pod config already exists",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create pod config",
        "tags": [
          "Pod Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/configs/ports/{name}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]\n\nRequired scope: social\n\nThis endpoint delete a dedicated server port config in a namespace",
        "operationId": "DeletePort",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "port name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.DSMConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "port config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete port config",
        "tags": [
          "Config"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint update a dedicated servers port config in a namespace.",
        "operationId": "UpdatePort",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "port name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdatePortRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "pod config updated",
            "schema": {
              "$ref": "#/definitions/models.DSMConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "port config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Update port config",
        "tags": [
          "Config"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint create a dedicated servers port config in a namespace.",
        "operationId": "AddPort",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "port name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreatePortRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "pod config created",
            "schema": {
              "$ref": "#/definitions/models.DSMConfigRecord"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "port config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "port config already exists",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create port config",
        "tags": [
          "Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/images": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint will delete an image that specified in the request parameter",
        "operationId": "DeleteImage",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "registry image URI that will be deleted",
            "in": "query",
            "name": "imageURI",
            "required": true,
            "type": "string"
          },
          {
            "description": "image version that will be deleted",
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "image deleted"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete an image",
        "tags": [
          "Image Config"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint lists all of dedicated servers images.",
        "operationId": "ListImages",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "image name or image version. In UI this is from search text box",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "description": "offset from list to query from",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "how many items to return",
            "in": "query",
            "name": "count",
            "type": "integer"
          },
          {
            "default": "createdAt",
            "description": "sort by a specific field",
            "enum": [
              "createdAt",
              "updatedAt",
              "version"
            ],
            "in": "query",
            "name": "sortBy",
            "type": "string"
          },
          {
            "default": "asc",
            "description": "sort direction",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "sortDirection",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "configs listed",
            "schema": {
              "$ref": "#/definitions/models.ListImageResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "List all DS images",
        "tags": [
          "Image Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/images/export": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\t\t\t\t\nThis endpoint export a dedicated servers images in a namespace.\n",
        "operationId": "ExportImages",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "images exported",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.ImageRecord"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "unauthorized access",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "forbidden access",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "images not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "export DSM Controller images for a namespace",
        "tags": [
          "Image Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/images/limit": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get ds image limit for specific namespace",
        "operationId": "GetImageLimit",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.GetImageLimitResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "DS Image Limit",
        "tags": [
          "Image Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/images/patches": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]\n\nRequired scope: social\n\nThis endpoint will delete an image patch that specified in the request parameter",
        "operationId": "DeleteImagePatch",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "registry image patch URI that will be deleted",
            "in": "query",
            "name": "imageURI",
            "required": true,
            "type": "string"
          },
          {
            "description": "image version that will be deleted",
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "image patch version that will be deleted",
            "in": "query",
            "name": "versionPatch",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "image deleted"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete an image patch",
        "tags": [
          "Image Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/images/versions/{version}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get specific version of dedicated servers images.",
        "operationId": "GetImageDetail",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "version of the image",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.GetImageDetailResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "image version not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "DS Image Detail",
        "tags": [
          "Image Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/images/versions/{version}/patches": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get image patches by version.",
        "operationId": "GetImagePatches",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "version of the ds",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.ListImagePatchesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get All Image Patches by Version",
        "tags": [
          "Image Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/images/versions/{version}/patches/{versionPatch}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get specific image patch version of dedicated servers version.",
        "operationId": "GetImagePatchDetail",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "version of the game",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "version of the image patch",
            "in": "path",
            "name": "versionPatch",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.GetImagePatchDetailResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "image version not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "DS Image patch Detail",
        "tags": [
          "Image Config"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/servers": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]\n\nRequired scope: social\n\nThis endpoint lists all of dedicated servers in a namespace managed by this service.",
        "operationId": "ListServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "region where DS server is located. if not specified it will list all servers.",
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "description": "offset from list to query from",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "how many items to return, default: 50",
            "in": "query",
            "name": "count",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "servers listed",
            "schema": {
              "$ref": "#/definitions/models.ListServerResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "List all managed servers in a region",
        "tags": [
          "Admin"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/servers/count": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]\n\nRequired scope: social\n\nThis endpoint counts all of dedicated servers in a namespace managed by this service.",
        "operationId": "CountServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "servers listed",
            "schema": {
              "$ref": "#/definitions/models.CountServerResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Count all managed servers",
        "tags": [
          "Admin"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/servers/count/detailed": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]\n\nRequired scope: social\n\nThis endpoint counts all of dedicated servers in a region managed by this service.",
        "operationId": "CountServerDetailed",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "region where DS server is located.",
            "in": "query",
            "name": "region",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "servers listed",
            "schema": {
              "$ref": "#/definitions/models.DetailedCountServerResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get detailed count of managed servers in a region",
        "tags": [
          "Admin"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/servers/local": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]\n\nRequired scope: social\n\nThis endpoint lists all of local dedicated servers in a namespace managed by this service.",
        "operationId": "ListLocalServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "servers listed",
            "schema": {
              "$ref": "#/definitions/models.ListServerResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "List all managed local servers",
        "tags": [
          "Admin"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/servers/local/{name}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [DELETE]\n\nRequired scope: social\n\nThis endpoint deletes a specified local dedicated server from DB.\nNote that DSM has no ability to shutdown local DS.",
        "operationId": "DeleteLocalServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the DS",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "server deleted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:SERVER [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a local server",
        "tags": [
          "Admin"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/servers/{podName}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [DELETE]\n\nRequired scope: social\n\nThis endpoint deletes a specified dedicated server from DB and terminates the DS pod.",
        "operationId": "DeleteServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the DS pod",
            "in": "path",
            "name": "podName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "server deleted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:SERVER [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a server in a region",
        "tags": [
          "Admin"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]\n\nRequired scope: social\n\nThis endpoint queries a specified dedicated server from DB.",
        "operationId": "GetServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the DS pod",
            "in": "path",
            "name": "podName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "server queried",
            "schema": {
              "$ref": "#/definitions/models.Server"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Query a server in a region",
        "tags": [
          "Admin"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/servers/{podName}/logs": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]\n\nRequired scope: social\n\nThis endpoint queries a specified dedicated server\u0026#39;s logs.",
        "operationId": "getServerLogs",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "name of the DS pod",
            "in": "path",
            "name": "podName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "server logs queried",
            "schema": {
              "$ref": "#/definitions/models.ServerLogs"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:SERVER [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Queries server logs",
        "tags": [
          "Admin"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/sessions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SESSION [READ]\n\nRequired scope: social\n\nThis endpoint lists all of sessions in a namespace managed by this service.",
        "operationId": "ListSession",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "region where session is located. if not specified it will list all sessions.",
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "description": "offset from list to query from",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "how many items to return, default: 50",
            "in": "query",
            "name": "count",
            "type": "integer"
          },
          {
            "description": "append server info to session or not",
            "in": "query",
            "name": "withServer",
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "sessions listed",
            "schema": {
              "$ref": "#/definitions/models.ListSessionResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:SESSION [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "List all managed sessions in a region",
        "tags": [
          "Admin"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/sessions/count": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SESSION [READ]\n\nRequired scope: social\n\nThis endpoint count all of sessions in a namespace managed by this service.",
        "operationId": "CountSession",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "region where session is located. if not specified it will count all sessions.",
            "in": "query",
            "name": "region",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "sessions listed",
            "schema": {
              "$ref": "#/definitions/models.CountSessionResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:SESSION [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Count all sessions",
        "tags": [
          "Admin"
        ]
      }
    },
    "/dsmcontroller/admin/namespaces/{namespace}/sessions/{sessionID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:SESSION [DELETE]\n\nRequired scope: social\n\nThis endpoint deletes a specified session and its corresponding match result from DB.",
        "operationId": "DeleteSession",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "session to be deleted",
            "in": "path",
            "name": "sessionID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "session deleted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:SESSION [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a session in a region",
        "tags": [
          "Admin"
        ]
      }
    },
    "/dsmcontroller/admin/v1/namespaces/{namespace}/configs/export": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\t\t\t\t\nThis endpoint export a dedicated servers config in a namespace.\n",
        "operationId": "exportConfigV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "config exported",
            "schema": {
              "$ref": "#/definitions/models.DSMConfigExport"
            }
          },
          "401": {
            "description": "unauthorized access",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "forbidden access",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "export DSM Controller configuration for a namespace",
        "tags": [
          "Config"
        ]
      }
    },
    "/dsmcontroller/admin/v1/namespaces/{namespace}/configs/import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]\n\nRequired scope: social\n\nThis endpoint import a dedicated servers config in a namespace.\n\nIf there is an existing configuration, the configuration would be replaced.\n",
        "operationId": "importConfigV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "imported file",
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "config imported",
            "schema": {
              "$ref": "#/definitions/models.ImportResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "unauthorized access",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "forbidden access",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "config not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DSM:CONFIG [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "import config for a namespace",
        "tags": [
          "Config"
        ]
      }
    },
    "/dsmcontroller/namespaces/{namespace}/images/versions/{version}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:CONFIG [READ]\n\nRequired scope: social\n\nThis endpoint get specific version of dedicated servers images.",
        "operationId": "ImageDetailClient",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "version of the image",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.GetImageDetailResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "image version not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:DSM:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "DS Image Detail Client",
        "tags": [
          "Image Config"
        ]
      }
    },
    "/dsmcontroller/namespaces/{namespace}/servers/local/deregister": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]\nRequired scope: social\n\nThis endpoint is intended to be called by local dedicated server \nto let DSM know that it is shutting down.\n\nCalling this will remove the server records from DB.```",
        "operationId": "DeregisterLocalServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.DeregisterLocalServerRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "server removed"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:DSM:SERVER [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Deregister local DS",
        "tags": [
          "Server"
        ]
      }
    },
    "/dsmcontroller/namespaces/{namespace}/servers/local/register": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]\nRequired scope: social\n\nUse the alternative GET of the same endpoint to upgrade DS connection to DSM via websocket.\n\nThis endpoint is intended to be called by local dedicated server to let DSM know that it is ready for use.\nUse local DS only for development purposes since DSM wouldn\u0026#39;t be able to properly manage local DS in production.\nThis MUST be called by DS after it is ready to accept match data and incoming client connections.\n\nUpon successfully calling this endpoint, the dedicated \nserver is listed under READY local servers.```",
        "operationId": "RegisterLocalServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.RegisterLocalServerRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "server registered",
            "schema": {
              "$ref": "#/definitions/models.Server"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "server with same name already registered",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:DSM:SERVER [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Register a local DS",
        "tags": [
          "Server"
        ]
      }
    },
    "/dsmcontroller/namespaces/{namespace}/servers/register": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]\nRequired scope: social\n\nThis endpoint is intended to be called by dedicated server to let DSM know that it is ready for use.\nThis MUST be called by DS after it is ready to accept match data and incoming client connections.\n\nUpon successfully calling this endpoint, the dedicated \nserver is listed under READY servers.```",
        "operationId": "RegisterServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.RegisterServerRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "server registered",
            "schema": {
              "$ref": "#/definitions/models.Server"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "server with same name already registered",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:DSM:SERVER [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Register a DS",
        "tags": [
          "Server"
        ]
      }
    },
    "/dsmcontroller/namespaces/{namespace}/servers/shutdown": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]\n\nRequired scope: social\n\nThis endpoint is intended to be called by dedicated server to let DSM know that it is shutting down. Calling this will remove the server and session records from DB.Set \u0026#39;kill_me\u0026#39; in request to \u0026#39;true\u0026#39; if the DS cannot shut itself down.",
        "operationId": "ShutdownServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ShutdownServerRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "server removed"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:DSM:SERVER [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Mark a DS is shutting down",
        "tags": [
          "Server"
        ]
      }
    },
    "/dsmcontroller/namespaces/{namespace}/servers/{podName}/session": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "```\nRequired permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]\nRequired scope: social\n\nThis endpoint is intended to be called by dedicated server \nto query its session ID.\nDS should call this when it first receive player connection,\nto see if it is actually claimed```",
        "operationId": "GetServerSession",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "DS name",
            "in": "path",
            "name": "podName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "session found",
            "schema": {
              "$ref": "#/definitions/models.ServerSessionResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "server not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:DSM:SERVER [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Session ID",
        "tags": [
          "Server"
        ]
      }
    },
    "/dsmcontroller/namespaces/{namespace}/sessions": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:SESSION [CREATE]\n\nRequired scope: social\n\nThis endpoint is intended to be called by game session manager (matchmaker, lobby, etc.) to get a dedicated server for a game session.\n\nIf a dedicated server is available, it will respond with a dedicated server details ready to be used.\n\nOtherwise it will trigger new dedicated server creation and respond with a server status CREATING. The game session manager then expected to wait and query the server readiness with GET /namespaces/{namespace}/sessions/{sessionID} endpoint until the serverstatus is READY\n\nSpecify pod_name with name of local DS in the request to create a session using the registered local DS",
        "operationId": "CreateSession",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateSessionRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "session created",
            "schema": {
              "$ref": "#/definitions/models.SessionResponse"
            }
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "local server not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "session already exists",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "503": {
            "description": "server count is at max",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:DSM:SESSION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Register a new game session",
        "tags": [
          "Session"
        ]
      }
    },
    "/dsmcontroller/namespaces/{namespace}/sessions/claim": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:SESSION [UPDATE]\n\nRequired scope: social\n\nThis endpoint is intended to be called by game session manager (matchmaker, lobby, etc.) to claim a dedicated server. The dedicated server cannot be claimed unless the status is READY",
        "operationId": "ClaimServer",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ClaimSessionRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "DS claimed for session"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "session not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "DS is already claimed",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "425": {
            "description": "DS is not ready to be claimed",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "503": {
            "description": "DS is unreachable",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:DSM:SESSION [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Claim a DS for a game session",
        "tags": [
          "Session"
        ]
      }
    },
    "/dsmcontroller/namespaces/{namespace}/sessions/{sessionID}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: NAMESPACE:{namespace}:DSM:SESSION [READ]\n\nRequired scope: social\n\nThis endpoint is intended to be called by game session manager (matchmaker, lobby, etc.) to query the status of dedicated server that is created for the session.\n\nThe server is ready to use when the status is READY. At which point, the game session manager can claim the server using the GET /namespaces/{namespace}/sessions/{sessionID}/claim endpoint",
        "operationId": "GetSession",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "session ID",
            "in": "path",
            "name": "sessionID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "session queried",
            "schema": {
              "$ref": "#/definitions/models.SessionResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "session not found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:DSM:SESSION [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Query specified session",
        "tags": [
          "Session"
        ]
      }
    },
    "/dsmcontroller/public/provider/default": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoints returns the default provider.",
        "operationId": "GetDefaultProvider",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Default provider got",
            "schema": {
              "$ref": "#/definitions/models.DefaultProvider"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get default provider",
        "tags": [
          "Public"
        ]
      }
    },
    "/dsmcontroller/public/providers": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoints returns list of supported providers. Armada is the default provider.",
        "operationId": "ListProviders",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Providers listed",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List all supported providers",
        "tags": [
          "Public"
        ]
      }
    },
    "/dsmcontroller/public/providers/regions/{region}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoint returns the providers by region.",
        "operationId": "ListProvidersByRegion",
        "parameters": [
          {
            "description": "region of the providers",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Default providers got",
            "schema": {
              "$ref": "#/definitions/models.DefaultProvider"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List providers by region",
        "tags": [
          "Public"
        ]
      }
    },
    "/dsmcontroller/v1/messages": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "get the list of messages.",
        "operationId": "publicGetMessages",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "messages returned",
            "schema": {
              "items": {
                "$ref": "#/definitions/log.AppMessageDeclaration"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "get service messages",
        "tags": [
          "Dsmc Operations"
        ]
      }
    }
  },
  "definitions": {
    "log.AppMessageDeclaration": {
      "properties": {
        "Attributes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Code": {
          "type": "string"
        },
        "CodeName": {
          "type": "string"
        },
        "Section": {
          "type": "string"
        },
        "Service": {
          "type": "string"
        },
        "Text": {
          "type": "string"
        }
      },
      "required": [
        "Attributes",
        "Code",
        "CodeName",
        "Section",
        "Service",
        "Text"
      ]
    },
    "models.ClaimSessionRequest": {
      "properties": {
        "session_id": {
          "type": "string"
        }
      },
      "required": [
        "session_id"
      ]
    },
    "models.CountServerResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "count"
      ]
    },
    "models.CountSessionResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "count"
      ]
    },
    "models.CreateDSMConfigRequest": {
      "properties": {
        "claim_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "creation_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "default_version": {
          "type": "string",
          "x-nullable": false
        },
        "port": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "ports": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object",
          "x-nullable": false
        },
        "protocol": {
          "type": "string",
          "x-nullable": false
        },
        "providers": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": false
        },
        "session_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "unreachable_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        }
      },
      "required": [
        "claim_timeout",
        "creation_timeout",
        "default_version",
        "port",
        "ports",
        "protocol",
        "providers",
        "session_timeout",
        "unreachable_timeout"
      ]
    },
    "models.CreateDeploymentOverrideRequest": {
      "properties": {
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "configuration": {
          "type": "string"
        },
        "enable_region_overrides": {
          "type": "boolean",
          "x-omitempty": false
        },
        "game_version": {
          "type": "string"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "region_overrides": {
          "additionalProperties": {
            "$ref": "#/definitions/models.PodCountConfigOverride"
          },
          "type": "object"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "buffer_count",
        "buffer_percent",
        "configuration",
        "enable_region_overrides",
        "game_version",
        "max_count",
        "min_count",
        "region_overrides",
        "regions",
        "use_buffer_percent"
      ]
    },
    "models.CreateDeploymentRequest": {
      "properties": {
        "allow_version_override": {
          "type": "boolean",
          "x-omitempty": false
        },
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "configuration": {
          "type": "string"
        },
        "enable_region_overrides": {
          "type": "boolean",
          "x-omitempty": false
        },
        "game_version": {
          "type": "string"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "overrides": {
          "additionalProperties": {
            "$ref": "#/definitions/models.DeploymentConfigOverride"
          },
          "type": "object"
        },
        "region_overrides": {
          "additionalProperties": {
            "$ref": "#/definitions/models.PodCountConfigOverride"
          },
          "type": "object"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "allow_version_override",
        "buffer_count",
        "buffer_percent",
        "configuration",
        "enable_region_overrides",
        "game_version",
        "max_count",
        "min_count",
        "overrides",
        "region_overrides",
        "regions",
        "use_buffer_percent"
      ]
    },
    "models.CreateImagePatchRequest": {
      "properties": {
        "artifactPath": {
          "type": "string"
        },
        "dockerPath": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "patchVersion": {
          "type": "string"
        },
        "persistent": {
          "type": "boolean",
          "x-omitempty": false
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "artifactPath",
        "dockerPath",
        "image",
        "namespace",
        "patchVersion",
        "persistent",
        "version"
      ]
    },
    "models.CreateImageRequest": {
      "properties": {
        "artifactPath": {
          "type": "string"
        },
        "dockerPath": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "persistent": {
          "type": "boolean",
          "x-omitempty": false
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "artifactPath",
        "dockerPath",
        "image",
        "namespace",
        "persistent",
        "version"
      ]
    },
    "models.CreatePodConfigRequest": {
      "properties": {
        "cpu_limit": {
          "format": "int32",
          "type": "integer"
        },
        "mem_limit": {
          "format": "int32",
          "type": "integer"
        },
        "params": {
          "type": "string"
        }
      },
      "required": [
        "cpu_limit",
        "mem_limit",
        "params"
      ]
    },
    "models.CreatePortRequest": {
      "properties": {
        "port": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "port"
      ]
    },
    "models.CreateRegionOverrideRequest": {
      "properties": {
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "buffer_count",
        "buffer_percent",
        "max_count",
        "min_count",
        "use_buffer_percent"
      ]
    },
    "models.CreateSessionRequest": {
      "properties": {
        "client_version": {
          "type": "string"
        },
        "configuration": {
          "type": "string"
        },
        "deployment": {
          "type": "string"
        },
        "game_mode": {
          "type": "string"
        },
        "matching_allies": {
          "items": {
            "$ref": "#/definitions/models.RequestMatchingAlly"
          },
          "type": "array"
        },
        "namespace": {
          "type": "string"
        },
        "notification_payload": {
          "$ref": "#/definitions/models.MatchResult.notification_payload"
        },
        "pod_name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "session_id": {
          "type": "string"
        }
      },
      "required": [
        "client_version",
        "configuration",
        "deployment",
        "game_mode",
        "matching_allies",
        "namespace",
        "pod_name",
        "region",
        "session_id"
      ]
    },
    "models.DSMConfigExport": {
      "properties": {
        "claim_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "creation_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "default_version": {
          "type": "string"
        },
        "deployments": {
          "items": {
            "$ref": "#/definitions/models.DeploymentWithOverride"
          },
          "type": "array"
        },
        "images": {
          "items": {
            "$ref": "#/definitions/models.ImageRecord"
          },
          "type": "array"
        },
        "namespace": {
          "type": "string"
        },
        "pod_configs": {
          "items": {
            "$ref": "#/definitions/models.PodConfigRecord"
          },
          "type": "array"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        },
        "ports": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object"
        },
        "protocol": {
          "type": "string"
        },
        "providers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "session_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "unreachable_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "claim_timeout",
        "createdAt",
        "creation_timeout",
        "default_version",
        "deployments",
        "images",
        "namespace",
        "pod_configs",
        "port",
        "ports",
        "protocol",
        "providers",
        "session_timeout",
        "unreachable_timeout",
        "updatedAt"
      ]
    },
    "models.DSMConfigRecord": {
      "properties": {
        "claim_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "creation_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "default_version": {
          "type": "string",
          "x-nullable": false
        },
        "modifiedBy": {
          "type": "string"
        },
        "namespace": {
          "type": "string",
          "x-nullable": false
        },
        "port": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "ports": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object",
          "x-nullable": false
        },
        "protocol": {
          "type": "string",
          "x-nullable": false
        },
        "providers": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": false
        },
        "session_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "unreachable_timeout": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "claim_timeout",
        "createdAt",
        "creation_timeout",
        "default_version",
        "modifiedBy",
        "namespace",
        "port",
        "ports",
        "protocol",
        "providers",
        "session_timeout",
        "unreachable_timeout",
        "updatedAt"
      ]
    },
    "models.DefaultProvider": {
      "properties": {
        "provider_name": {
          "type": "string"
        }
      },
      "required": [
        "provider_name"
      ]
    },
    "models.DeploymentConfigOverride": {
      "properties": {
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "configuration": {
          "type": "string"
        },
        "enable_region_overrides": {
          "type": "boolean",
          "x-omitempty": false
        },
        "game_version": {
          "type": "string"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "region_overrides": {
          "additionalProperties": {
            "$ref": "#/definitions/models.PodCountConfigOverride"
          },
          "type": "object"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "buffer_count",
        "buffer_percent",
        "configuration",
        "enable_region_overrides",
        "game_version",
        "max_count",
        "min_count",
        "name",
        "region_overrides",
        "regions",
        "use_buffer_percent"
      ]
    },
    "models.DeploymentWithOverride": {
      "properties": {
        "allow_version_override": {
          "type": "boolean",
          "x-omitempty": false
        },
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "configuration": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "enable_region_overrides": {
          "type": "boolean",
          "x-omitempty": false
        },
        "game_version": {
          "type": "string"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "modifiedBy": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "overrides": {
          "additionalProperties": {
            "$ref": "#/definitions/models.DeploymentConfigOverride"
          },
          "type": "object"
        },
        "region_overrides": {
          "additionalProperties": {
            "$ref": "#/definitions/models.PodCountConfigOverride"
          },
          "type": "object"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "allow_version_override",
        "buffer_count",
        "buffer_percent",
        "configuration",
        "createdAt",
        "enable_region_overrides",
        "game_version",
        "max_count",
        "min_count",
        "modifiedBy",
        "name",
        "namespace",
        "overrides",
        "region_overrides",
        "regions",
        "updatedAt",
        "use_buffer_percent"
      ]
    },
    "models.DeregisterLocalServerRequest": {
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "models.DetailedCountServerResponse": {
      "properties": {
        "busy_count": {
          "format": "int32",
          "type": "integer"
        },
        "creating_count": {
          "format": "int32",
          "type": "integer"
        },
        "ready_count": {
          "format": "int32",
          "type": "integer"
        },
        "unreachable_count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "busy_count",
        "creating_count",
        "ready_count",
        "unreachable_count"
      ]
    },
    "models.GetImageDetailResponse": {
      "properties": {
        "data": {
          "$ref": "#/definitions/models.ImageRecord"
        }
      },
      "required": [
        "data"
      ]
    },
    "models.GetImageLimitResponse": {
      "properties": {
        "data": {
          "$ref": "#/definitions/models.GetImageLimitResponseData"
        }
      },
      "required": [
        "data"
      ]
    },
    "models.GetImageLimitResponseData": {
      "properties": {
        "image_count": {
          "format": "int32",
          "type": "integer"
        },
        "image_limit": {
          "format": "int32",
          "type": "integer"
        },
        "non_persistent_image_number": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "image_count",
        "image_limit",
        "non_persistent_image_number"
      ]
    },
    "models.GetImagePatchDetailResponse": {
      "properties": {
        "data": {
          "$ref": "#/definitions/models.PatchImageRecord"
        }
      },
      "required": [
        "data"
      ]
    },
    "models.ImageRecord": {
      "properties": {
        "artifactPath": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "dockerPath": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "modifiedBy": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "persistent": {
          "type": "boolean",
          "x-omitempty": false
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "artifactPath",
        "createdAt",
        "dockerPath",
        "image",
        "modifiedBy",
        "namespace",
        "persistent",
        "updatedAt",
        "version"
      ]
    },
    "models.ImageRecordUpdate": {
      "properties": {
        "artifactPath": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "persistent": {
          "type": "boolean",
          "x-omitempty": false
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "artifactPath",
        "image",
        "namespace",
        "persistent",
        "version"
      ]
    },
    "models.ImportResponse": {
      "properties": {
        "affected": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "failed": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "affected",
        "failed"
      ]
    },
    "models.ListConfigResponse": {
      "properties": {
        "configs": {
          "items": {
            "$ref": "#/definitions/models.DSMConfigRecord"
          },
          "type": "array"
        }
      },
      "required": [
        "configs"
      ]
    },
    "models.ListDeploymentResponse": {
      "properties": {
        "deployments": {
          "items": {
            "$ref": "#/definitions/models.DeploymentWithOverride"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      },
      "required": [
        "deployments",
        "paging"
      ]
    },
    "models.ListImagePatchesResponse": {
      "properties": {
        "images": {
          "items": {
            "$ref": "#/definitions/models.PatchImageRecord"
          },
          "type": "array"
        }
      },
      "required": [
        "images"
      ]
    },
    "models.ListImageResponse": {
      "properties": {
        "images": {
          "items": {
            "$ref": "#/definitions/models.ImageRecord"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      },
      "required": [
        "images",
        "paging"
      ]
    },
    "models.ListPodConfigResponse": {
      "properties": {
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        },
        "pod_configs": {
          "items": {
            "$ref": "#/definitions/models.PodConfigRecord"
          },
          "type": "array"
        }
      },
      "required": [
        "paging",
        "pod_configs"
      ]
    },
    "models.ListServerResponse": {
      "properties": {
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        },
        "servers": {
          "items": {
            "$ref": "#/definitions/models.Server"
          },
          "type": "array"
        }
      },
      "required": [
        "paging",
        "servers"
      ]
    },
    "models.ListSessionResponse": {
      "properties": {
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        },
        "sessions": {
          "items": {
            "$ref": "#/definitions/models.Session"
          },
          "type": "array"
        }
      },
      "required": [
        "paging",
        "sessions"
      ]
    },
    "models.MatchResult.notification_payload": {},
    "models.PagingCursor": {
      "properties": {
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      },
      "required": [
        "next",
        "previous"
      ]
    },
    "models.PatchImageRecord": {
      "properties": {
        "artifactPath": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "dockerPath": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "modifiedBy": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "patchVersion": {
          "type": "string"
        },
        "persistent": {
          "type": "boolean",
          "x-omitempty": false
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "artifactPath",
        "createdAt",
        "dockerPath",
        "image",
        "modifiedBy",
        "namespace",
        "patchVersion",
        "persistent",
        "updatedAt",
        "version"
      ]
    },
    "models.PodConfigRecord": {
      "properties": {
        "cpu_limit": {
          "format": "int32",
          "type": "integer"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "mem_limit": {
          "format": "int32",
          "type": "integer"
        },
        "modifiedBy": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "params": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "cpu_limit",
        "createdAt",
        "mem_limit",
        "modifiedBy",
        "name",
        "namespace",
        "params",
        "updatedAt"
      ]
    },
    "models.PodCountConfigOverride": {
      "properties": {
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "buffer_count",
        "buffer_percent",
        "max_count",
        "min_count",
        "name",
        "use_buffer_percent"
      ]
    },
    "models.RegisterLocalServerRequest": {
      "properties": {
        "custom_attribute": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "custom_attribute",
        "ip",
        "name",
        "port"
      ]
    },
    "models.RegisterServerRequest": {
      "properties": {
        "custom_attribute": {
          "type": "string"
        },
        "pod_name": {
          "type": "string"
        }
      },
      "required": [
        "custom_attribute",
        "pod_name"
      ]
    },
    "models.RequestMatchMember": {
      "properties": {
        "user_id": {
          "type": "string"
        }
      },
      "required": [
        "user_id"
      ]
    },
    "models.RequestMatchParty": {
      "properties": {
        "party_attributes": {
          "type": "object"
        },
        "party_id": {
          "type": "string"
        },
        "party_members": {
          "items": {
            "$ref": "#/definitions/models.RequestMatchMember"
          },
          "type": "array"
        }
      },
      "required": [
        "party_attributes",
        "party_id",
        "party_members"
      ]
    },
    "models.RequestMatchingAlly": {
      "properties": {
        "matching_parties": {
          "items": {
            "$ref": "#/definitions/models.RequestMatchParty"
          },
          "type": "array"
        }
      },
      "required": [
        "matching_parties"
      ]
    },
    "models.Server": {
      "properties": {
        "allocation_id": {
          "type": "string"
        },
        "alternate_ips": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cpu_limit": {
          "format": "int32",
          "type": "integer"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "custom_attribute": {
          "type": "string"
        },
        "deployment": {
          "type": "string"
        },
        "game_version": {
          "type": "string"
        },
        "image_version": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "is_override_game_version": {
          "type": "boolean",
          "x-omitempty": false
        },
        "job_id": {
          "type": "string"
        },
        "last_update": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "mem_limit": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "params": {
          "type": "string"
        },
        "pod_name": {
          "type": "string"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        },
        "ports": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object"
        },
        "protocol": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "session_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "status_history": {
          "items": {
            "$ref": "#/definitions/models.StatusHistory"
          },
          "type": "array"
        }
      },
      "required": [
        "allocation_id",
        "alternate_ips",
        "cpu_limit",
        "created_at",
        "custom_attribute",
        "deployment",
        "game_version",
        "image_version",
        "ip",
        "is_override_game_version",
        "job_id",
        "last_update",
        "mem_limit",
        "namespace",
        "params",
        "pod_name",
        "port",
        "ports",
        "protocol",
        "provider",
        "region",
        "session_id",
        "status",
        "status_history"
      ]
    },
    "models.ServerLogs": {
      "properties": {
        "logs": {
          "type": "string"
        }
      },
      "required": [
        "logs"
      ]
    },
    "models.ServerSessionResponse": {
      "properties": {
        "session_id": {
          "type": "string"
        }
      },
      "required": [
        "session_id"
      ]
    },
    "models.Session": {
      "properties": {
        "Server": {
          "$ref": "#/definitions/models.Server"
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      },
      "required": [
        "Server",
        "id",
        "namespace",
        "provider",
        "region"
      ]
    },
    "models.SessionResponse": {
      "properties": {
        "session": {
          "$ref": "#/definitions/models.Session"
        }
      },
      "required": [
        "session"
      ]
    },
    "models.ShutdownServerRequest": {
      "properties": {
        "kill_me": {
          "type": "boolean",
          "x-omitempty": false
        },
        "pod_name": {
          "type": "string"
        }
      },
      "required": [
        "kill_me",
        "pod_name"
      ]
    },
    "models.StatusHistory": {
      "properties": {
        "status": {
          "type": "string"
        },
        "time_stamp": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "status",
        "time_stamp"
      ]
    },
    "models.UpdateDSMConfigRequest": {
      "properties": {
        "claim_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "creation_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "default_version": {
          "type": "string"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "type": "string"
        },
        "providers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "session_timeout": {
          "format": "int32",
          "type": "integer"
        },
        "unreachable_timeout": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "claim_timeout",
        "creation_timeout",
        "default_version",
        "port",
        "protocol",
        "providers",
        "session_timeout",
        "unreachable_timeout"
      ]
    },
    "models.UpdateDeploymentOverrideRequest": {
      "properties": {
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "configuration": {
          "type": "string"
        },
        "enable_region_overrides": {
          "type": "boolean",
          "x-omitempty": false
        },
        "game_version": {
          "type": "string"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "buffer_count",
        "buffer_percent",
        "configuration",
        "enable_region_overrides",
        "game_version",
        "max_count",
        "min_count",
        "regions",
        "use_buffer_percent"
      ]
    },
    "models.UpdateDeploymentRequest": {
      "properties": {
        "allow_version_override": {
          "type": "boolean",
          "x-omitempty": false
        },
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "configuration": {
          "type": "string"
        },
        "enable_region_overrides": {
          "type": "boolean",
          "x-omitempty": false
        },
        "game_version": {
          "type": "string"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "allow_version_override",
        "buffer_count",
        "buffer_percent",
        "configuration",
        "enable_region_overrides",
        "game_version",
        "max_count",
        "min_count",
        "regions",
        "use_buffer_percent"
      ]
    },
    "models.UpdatePodConfigRequest": {
      "properties": {
        "cpu_limit": {
          "format": "int32",
          "type": "integer"
        },
        "mem_limit": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "params": {
          "type": "string"
        }
      },
      "required": [
        "cpu_limit",
        "mem_limit",
        "name",
        "params"
      ]
    },
    "models.UpdatePortRequest": {
      "properties": {
        "name": {
          "type": "string"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "port"
      ]
    },
    "models.UpdateRegionOverrideRequest": {
      "properties": {
        "buffer_count": {
          "format": "int32",
          "type": "integer"
        },
        "buffer_percent": {
          "format": "int32",
          "type": "integer"
        },
        "max_count": {
          "format": "int32",
          "type": "integer"
        },
        "min_count": {
          "format": "int32",
          "type": "integer"
        },
        "use_buffer_percent": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "buffer_count",
        "buffer_percent",
        "max_count",
        "min_count",
        "use_buffer_percent"
      ]
    },
    "response.Error": {
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "required": [
        "errorCode",
        "errorMessage"
      ]
    }
  }
}