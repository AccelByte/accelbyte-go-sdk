// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FulfillmentResult fulfillment result
//
// swagger:model FulfillmentResult
type FulfillmentResult struct {

	// credit granted
	CreditSummaries []*CreditSummary `json:"creditSummaries"`

	// entitlement granted
	EntitlementSummaries []*EntitlementSummary `json:"entitlementSummaries"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// affected subscriptions
	SubscriptionSummaries []*SubscriptionSummary `json:"subscriptionSummaries"`

	// userId
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this fulfillment result
func (m *FulfillmentResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreditSummaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntitlementSummaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionSummaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentResult) validateCreditSummaries(formats strfmt.Registry) error {

	if swag.IsZero(m.CreditSummaries) { // not required
		return nil
	}

	for i := 0; i < len(m.CreditSummaries); i++ {
		if swag.IsZero(m.CreditSummaries[i]) { // not required
			continue
		}

		if m.CreditSummaries[i] != nil {
			if err := m.CreditSummaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("creditSummaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FulfillmentResult) validateEntitlementSummaries(formats strfmt.Registry) error {

	if swag.IsZero(m.EntitlementSummaries) { // not required
		return nil
	}

	for i := 0; i < len(m.EntitlementSummaries); i++ {
		if swag.IsZero(m.EntitlementSummaries[i]) { // not required
			continue
		}

		if m.EntitlementSummaries[i] != nil {
			if err := m.EntitlementSummaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entitlementSummaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FulfillmentResult) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *FulfillmentResult) validateSubscriptionSummaries(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionSummaries) { // not required
		return nil
	}

	for i := 0; i < len(m.SubscriptionSummaries); i++ {
		if swag.IsZero(m.SubscriptionSummaries[i]) { // not required
			continue
		}

		if m.SubscriptionSummaries[i] != nil {
			if err := m.SubscriptionSummaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subscriptionSummaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FulfillmentResult) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FulfillmentResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FulfillmentResult) UnmarshalBinary(b []byte) error {
	var res FulfillmentResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
