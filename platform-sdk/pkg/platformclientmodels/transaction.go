// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Transaction transaction
//
// swagger:model Transaction
type Transaction struct {

	// additional data
	AdditionalData *AdditionalData `json:"additionalData,omitempty"`

	// amount
	Amount int32 `json:"amount,omitempty"`

	// currency
	Currency *CurrencySummary `json:"currency,omitempty"`

	// ext message
	ExtMessage string `json:"extMessage,omitempty"`

	// ext status code
	ExtStatusCode string `json:"extStatusCode,omitempty"`

	// ext tx Id
	ExtTxID string `json:"extTxId,omitempty"`

	// merchant Id
	MerchantID string `json:"merchantId,omitempty"`

	// notified
	Notified bool `json:"notified"`

	// payment method
	PaymentMethod string `json:"paymentMethod,omitempty"`

	// payment method fee
	PaymentMethodFee int32 `json:"paymentMethodFee,omitempty"`

	// payment provider fee
	PaymentProviderFee int32 `json:"paymentProviderFee,omitempty"`

	// provider
	// Enum: [WALLET XSOLLA ADYEN STRIPE CHECKOUT ALIPAY WXPAY PAYPAL]
	Provider string `json:"provider,omitempty"`

	// sales tax
	SalesTax int32 `json:"salesTax,omitempty"`

	// status
	// Enum: [FINISHED FAILED]
	Status string `json:"status,omitempty"`

	// tax
	Tax int32 `json:"tax,omitempty"`

	// tx end time
	// Format: date-time
	TxEndTime *strfmt.DateTime `json:"txEndTime,omitempty"`

	// tx Id
	TxID string `json:"txId,omitempty"`

	// type
	// Enum: [AUTHORISATION CHARGE CHARGE_FAILED NOTIFICATION_OF_CHARGEBACK REQUEST_FOR_INFORMATION CHARGEBACK CHARGEBACK_REVERSED REFUND REFUND_FAILED]
	Type string `json:"type,omitempty"`

	// vat
	Vat int32 `json:"vat,omitempty"`
}

// Validate validates this transaction
func (m *Transaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) validateAdditionalData(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalData) { // not required
		return nil
	}

	if m.AdditionalData != nil {
		if err := m.AdditionalData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additionalData")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

var transactionTypeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WALLET","XSOLLA","ADYEN","STRIPE","CHECKOUT","ALIPAY","WXPAY","PAYPAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionTypeProviderPropEnum = append(transactionTypeProviderPropEnum, v)
	}
}

const (

	// TransactionProviderWALLET captures enum value "WALLET"
	TransactionProviderWALLET string = "WALLET"

	// TransactionProviderXSOLLA captures enum value "XSOLLA"
	TransactionProviderXSOLLA string = "XSOLLA"

	// TransactionProviderADYEN captures enum value "ADYEN"
	TransactionProviderADYEN string = "ADYEN"

	// TransactionProviderSTRIPE captures enum value "STRIPE"
	TransactionProviderSTRIPE string = "STRIPE"

	// TransactionProviderCHECKOUT captures enum value "CHECKOUT"
	TransactionProviderCHECKOUT string = "CHECKOUT"

	// TransactionProviderALIPAY captures enum value "ALIPAY"
	TransactionProviderALIPAY string = "ALIPAY"

	// TransactionProviderWXPAY captures enum value "WXPAY"
	TransactionProviderWXPAY string = "WXPAY"

	// TransactionProviderPAYPAL captures enum value "PAYPAL"
	TransactionProviderPAYPAL string = "PAYPAL"
)

// prop value enum
func (m *Transaction) validateProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, transactionTypeProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Transaction) validateProvider(formats strfmt.Registry) error {

	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderEnum("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

var transactionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FINISHED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionTypeStatusPropEnum = append(transactionTypeStatusPropEnum, v)
	}
}

const (

	// TransactionStatusFINISHED captures enum value "FINISHED"
	TransactionStatusFINISHED string = "FINISHED"

	// TransactionStatusFAILED captures enum value "FAILED"
	TransactionStatusFAILED string = "FAILED"
)

// prop value enum
func (m *Transaction) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, transactionTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Transaction) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateTxEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.TxEndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("txEndTime", "body", "date-time", m.TxEndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var transactionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTHORISATION","CHARGE","CHARGE_FAILED","NOTIFICATION_OF_CHARGEBACK","REQUEST_FOR_INFORMATION","CHARGEBACK","CHARGEBACK_REVERSED","REFUND","REFUND_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionTypeTypePropEnum = append(transactionTypeTypePropEnum, v)
	}
}

const (

	// TransactionTypeAUTHORISATION captures enum value "AUTHORISATION"
	TransactionTypeAUTHORISATION string = "AUTHORISATION"

	// TransactionTypeCHARGE captures enum value "CHARGE"
	TransactionTypeCHARGE string = "CHARGE"

	// TransactionTypeCHARGEFAILED captures enum value "CHARGE_FAILED"
	TransactionTypeCHARGEFAILED string = "CHARGE_FAILED"

	// TransactionTypeNOTIFICATIONOFCHARGEBACK captures enum value "NOTIFICATION_OF_CHARGEBACK"
	TransactionTypeNOTIFICATIONOFCHARGEBACK string = "NOTIFICATION_OF_CHARGEBACK"

	// TransactionTypeREQUESTFORINFORMATION captures enum value "REQUEST_FOR_INFORMATION"
	TransactionTypeREQUESTFORINFORMATION string = "REQUEST_FOR_INFORMATION"

	// TransactionTypeCHARGEBACK captures enum value "CHARGEBACK"
	TransactionTypeCHARGEBACK string = "CHARGEBACK"

	// TransactionTypeCHARGEBACKREVERSED captures enum value "CHARGEBACK_REVERSED"
	TransactionTypeCHARGEBACKREVERSED string = "CHARGEBACK_REVERSED"

	// TransactionTypeREFUND captures enum value "REFUND"
	TransactionTypeREFUND string = "REFUND"

	// TransactionTypeREFUNDFAILED captures enum value "REFUND_FAILED"
	TransactionTypeREFUNDFAILED string = "REFUND_FAILED"
)

// prop value enum
func (m *Transaction) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, transactionTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Transaction) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Transaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transaction) UnmarshalBinary(b []byte) error {
	var res Transaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
