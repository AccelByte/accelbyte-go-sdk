// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package devices_v4

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// AdminGetUserDeviceBansV4Reader is a Reader for the AdminGetUserDeviceBansV4 structure.
type AdminGetUserDeviceBansV4Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminGetUserDeviceBansV4Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminGetUserDeviceBansV4OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminGetUserDeviceBansV4Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAdminGetUserDeviceBansV4NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewAdminGetUserDeviceBansV4InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /iam/v4/admin/namespaces/{namespace}/devices/bans returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminGetUserDeviceBansV4OK creates a AdminGetUserDeviceBansV4OK with default headers values
func NewAdminGetUserDeviceBansV4OK() *AdminGetUserDeviceBansV4OK {
	return &AdminGetUserDeviceBansV4OK{}
}

/*AdminGetUserDeviceBansV4OK handles this case with default header values.

  Operation succeeded
*/
type AdminGetUserDeviceBansV4OK struct {
	Payload *iamclientmodels.ModelDeviceBansResponseV4
}

func (o *AdminGetUserDeviceBansV4OK) Error() string {
	return fmt.Sprintf("[GET /iam/v4/admin/namespaces/{namespace}/devices/bans][%d] adminGetUserDeviceBansV4OK  %+v", 200, o.ToJSONString())
}

func (o *AdminGetUserDeviceBansV4OK) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminGetUserDeviceBansV4OK) GetPayload() *iamclientmodels.ModelDeviceBansResponseV4 {
	return o.Payload
}

func (o *AdminGetUserDeviceBansV4OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.ModelDeviceBansResponseV4)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminGetUserDeviceBansV4Unauthorized creates a AdminGetUserDeviceBansV4Unauthorized with default headers values
func NewAdminGetUserDeviceBansV4Unauthorized() *AdminGetUserDeviceBansV4Unauthorized {
	return &AdminGetUserDeviceBansV4Unauthorized{}
}

/*AdminGetUserDeviceBansV4Unauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>
*/
type AdminGetUserDeviceBansV4Unauthorized struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminGetUserDeviceBansV4Unauthorized) Error() string {
	return fmt.Sprintf("[GET /iam/v4/admin/namespaces/{namespace}/devices/bans][%d] adminGetUserDeviceBansV4Unauthorized  %+v", 401, o.ToJSONString())
}

func (o *AdminGetUserDeviceBansV4Unauthorized) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminGetUserDeviceBansV4Unauthorized) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminGetUserDeviceBansV4Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminGetUserDeviceBansV4NotFound creates a AdminGetUserDeviceBansV4NotFound with default headers values
func NewAdminGetUserDeviceBansV4NotFound() *AdminGetUserDeviceBansV4NotFound {
	return &AdminGetUserDeviceBansV4NotFound{}
}

/*AdminGetUserDeviceBansV4NotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10139</td><td>platform account not found</td></tr></table>
*/
type AdminGetUserDeviceBansV4NotFound struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminGetUserDeviceBansV4NotFound) Error() string {
	return fmt.Sprintf("[GET /iam/v4/admin/namespaces/{namespace}/devices/bans][%d] adminGetUserDeviceBansV4NotFound  %+v", 404, o.ToJSONString())
}

func (o *AdminGetUserDeviceBansV4NotFound) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminGetUserDeviceBansV4NotFound) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminGetUserDeviceBansV4NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminGetUserDeviceBansV4InternalServerError creates a AdminGetUserDeviceBansV4InternalServerError with default headers values
func NewAdminGetUserDeviceBansV4InternalServerError() *AdminGetUserDeviceBansV4InternalServerError {
	return &AdminGetUserDeviceBansV4InternalServerError{}
}

/*AdminGetUserDeviceBansV4InternalServerError handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>
*/
type AdminGetUserDeviceBansV4InternalServerError struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminGetUserDeviceBansV4InternalServerError) Error() string {
	return fmt.Sprintf("[GET /iam/v4/admin/namespaces/{namespace}/devices/bans][%d] adminGetUserDeviceBansV4InternalServerError  %+v", 500, o.ToJSONString())
}

func (o *AdminGetUserDeviceBansV4InternalServerError) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminGetUserDeviceBansV4InternalServerError) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminGetUserDeviceBansV4InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
