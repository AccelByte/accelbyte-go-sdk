{
  "host": "demo.accelbyte.io",
  "info": {
    "contact": {
      "email": "engineering@accelbyte.io",
      "name": "Engineering Team at AccelByte",
      "url": "https://accelbyte.io"
    },
    "description": "Justice Cloudsave Service",
    "title": "justice-cloudsave-service",
    "version": "2.3.0"
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "HasPermission": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [DELETE]": "ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [READ]": "ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [READ]",
        "ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [UPDATE]": "ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [WRITE]": "ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [WRITE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [DELETE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [DELETE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:RECORD [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:RECORD [READ]",
        "NAMESPACE:{namespace}:CLOUDSAVE:RECORD [CREATE]": "NAMESPACE:{namespace}:CLOUDSAVE:RECORD [CREATE]",
        "NAMESPACE:{namespace}:CLOUDSAVE:RECORD [DELETE]": "NAMESPACE:{namespace}:CLOUDSAVE:RECORD [DELETE]",
        "NAMESPACE:{namespace}:CLOUDSAVE:RECORD [READ]": "NAMESPACE:{namespace}:CLOUDSAVE:RECORD [READ]",
        "NAMESPACE:{namespace}:CLOUDSAVE:RECORD [UPDATE]": "NAMESPACE:{namespace}:CLOUDSAVE:RECORD [UPDATE]",
        "NAMESPACE:{namespace}:PUBLIC:CLOUDSAVE:RECORD [READ]": "NAMESPACE:{namespace}:PUBLIC:CLOUDSAVE:RECORD [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [DELETE]": "NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [DELETE]",
        "NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [READ]": "NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [UPDATE]": "NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [WRITE]": "NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [WRITE]",
        "NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [READ]": "NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [UPDATE]": "NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [WRITE]": "NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [WRITE]"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "HasScope": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "social": "social"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "paths": {
    "/cloudsave/v1/admin/namespaces/{namespace}/records": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [READ]\n\nRequired scope: social\n\nRetrieve list of records key by namespace",
        "operationId": "listGameRecordsHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "key",
            "in": "query",
            "name": "query",
            "type": "string"
          },
          {
            "description": "offset",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          },
          {
            "description": "limit",
            "in": "query",
            "name": "limit",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Retrieve list of records key by namespace",
            "schema": {
              "$ref": "#/definitions/models.ListGameRecordKeys"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve list of records key by namespace",
        "tags": [
          "AdminGameRecord"
        ]
      }
    },
    "/cloudsave/v1/admin/namespaces/{namespace}/records/{key}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [DELETE]\n\nRequired scope: social\n\nThis endpoints delete game record in namespace-level",
        "operationId": "adminDeleteGameRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Purge all records under the given key",
        "tags": [
          "AdminGameRecord"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [READ]\n\nRequired scope: social\n\nGet a record by its key in namespace-level.",
        "operationId": "adminGetGameRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Record in namespace-level retrieved",
            "schema": {
              "$ref": "#/definitions/models.GameRecord"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve a record value by its key",
        "tags": [
          "AdminGameRecord"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [WRITE]\n\nRequired scope: social\n\nThis endpoints is to create new game record in namespace-level.",
        "operationId": "adminPostGameRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.GameRecordRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Record in namespace-level saved"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [WRITE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Save namespace level record",
        "tags": [
          "AdminGameRecord"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [UPDATE]\n\nRequired scope: social\n\nThis endpoints is to replace game record data if exists or insert new data in namespace-level",
        "operationId": "adminPutGameRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.GameRecordRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Record saved"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Save or replace game record",
        "tags": [
          "AdminGameRecord"
        ]
      }
    },
    "/cloudsave/v1/admin/namespaces/{namespace}/users/records": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [READ]\n\nRequired scope: social\n\nRetrieve list of player records key and userID under given namespace.",
        "operationId": "listPlayerRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "query, search player records by key or userID",
            "in": "query",
            "name": "query",
            "type": "string"
          },
          {
            "description": "offset",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "limit",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/models.ListPlayerRecordKeys"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLOUDSAVE:RECORD [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve list of public player records",
        "tags": [
          "AdminPlayerRecord"
        ]
      }
    },
    "/cloudsave/v1/admin/namespaces/{namespace}/users/{userId}/records": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:USER:{userId}:RECORD [READ]\n\nRequired scope: social\n\nRetrieve list of player records key and userID under given namespace.",
        "operationId": "AdminRetrievePlayerRecords",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID who own the record",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "offset",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "limit",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/models.ListPlayerRecordKeys"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:RECORD [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve list of player records",
        "tags": [
          "AdminPlayerRecord"
        ]
      }
    },
    "/cloudsave/v1/admin/namespaces/{namespace}/users/{userId}/records/{key}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [DELETE]\n\nRequired scope: social\n\nDelete a record (arbitrary JSON data) in user-level with given key. It will delete the record whether it\u0026#39;s private or public record.",
        "operationId": "adminDeletePlayerRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID who own the record",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Record in user-level saved"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Purge player record based on its key",
        "tags": [
          "AdminPlayerRecord"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [READ]\n\nRequired scope: social\n\nGet a record in user-level (arbitrary JSON data) by its key.",
        "operationId": "adminGetPlayerRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID who own the record",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Record in user-level retrieved",
            "schema": {
              "$ref": "#/definitions/models.PlayerRecord"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve a record value by its key",
        "tags": [
          "AdminPlayerRecord"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [CREATE]\n\nRequired scope: social\n\nSave a record (arbitrary JSON data) in user-level.\nIf a record already exist with given record key, this endpoint will try to merge.\nSame top level key inside body will be replaced, different top level key will be appended.\nRecord saved will be a private record.",
        "operationId": "adminPostPlayerRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID who own the record",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PlayerRecordRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Record in user-level saved"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Save user level record",
        "tags": [
          "AdminPlayerRecord"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [UPDATE]\n\nRequired scope: social\n\nSave a record (arbitrary JSON data) in user-level.\nIf a record already exist with given key, this endpoint will replace the record, else will create new Record.\nRecord saved will be a private record.",
        "operationId": "adminPutPlayerRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID who own the record",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PlayerRecordRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Record in user-level saved"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create or replace player record",
        "tags": [
          "AdminPlayerRecord"
        ]
      }
    },
    "/cloudsave/v1/admin/namespaces/{namespace}/users/{userId}/records/{key}/public": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [DELETE]\n\nRequired scope: social\n\nDelete a public record (arbitrary JSON data) in user-level with given key.",
        "operationId": "adminDeletePlayerPublicRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID who own the record",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete player public record based on its key",
        "tags": [
          "AdminPlayerRecord"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [READ]\n\nRequired scope: social\n\nGet a record in user-level (arbitrary JSON data) by its key.",
        "operationId": "adminGetPlayerPublicRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID who own the record",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/models.PlayerRecord"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve a player public record value by its key",
        "tags": [
          "AdminPlayerRecord"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [CREATE]\n\nRequired scope: social\n\nSave a record (arbitrary JSON data) in user-level.\nIf a record already exist with given record key, this endpoint will try to merge.\nSame top level key inside body will be replaced, different top level key will be appended.\nRecord saved will be a public record.\nIf existing record is not public (is_public false) then this endpoint won\u0026#39;t make it public.",
        "operationId": "adminPostPlayerPublicRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID who own the record",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PlayerRecordRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Record saved "
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Save user level record",
        "tags": [
          "AdminPlayerRecord"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [UPDATE]\n\nRequired scope: social\n\nSave a record (arbitrary JSON data) in user-level.\nIf a record already exist with given key, this endpoint will replace the record, else it will create new Record.\nRecord saved will be a public record.",
        "operationId": "adminPutPlayerPublicRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID who own the record",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PlayerRecordRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Record in user-level saved"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create or replace player record",
        "tags": [
          "AdminPlayerRecord"
        ]
      }
    },
    "/cloudsave/v1/namespaces/{namespace}/concurrent/records/{key}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;table\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Permission\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;NAMESPACE:{namespace}:CLOUDSAVE:RECORD [UPDATE]\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Scope\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\n\u0026lt;br/\u0026gt;\n\nIf record already exists, it will be replaced with the one from request body (all fields will be\ndeleted). If record is not exists, it will create a new one with value from request body.\n\nExample:\n\nReplace all records\n\u0026lt;pre\u0026gt;\n\t// existed record\n\t{\n\t\t\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;\n\t}\n\n\t// new update (request body)\n\t{\n\t\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n\t}\n\n\t// result\n\t{\n\t\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n\t}\n\u0026lt;/pre\u0026gt;\n\n\u0026lt;b\u0026gt;Optimistic Concurrency Control\u0026lt;/b\u0026gt;\u0026lt;br\u0026gt;\nThis endpoint implement optimistic concurrency control to avoid race condition.\nIf the record has been updated since the client fetch it, the server will return HTTP status code 412 (precondition failed) \nand client need to redo the operation (fetch data and do update).\nOtherwise, the server will process the request.\n",
        "operationId": "putGameRecordConcurrentHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ConcurrentRecordRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Record saved"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:CLOUDSAVE:RECORD [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create or replace game record",
        "tags": [
          "ConcurrentRecord"
        ]
      }
    },
    "/cloudsave/v1/namespaces/{namespace}/records/{key}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;table\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Permission\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;NAMESPACE:{namespace}:CLOUDSAVE:RECORD [DELETE]\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Scope\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\n\u0026lt;br/\u0026gt;\n\nDelete records by its key\n",
        "operationId": "deleteGameRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:CLOUDSAVE:RECORD [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete game record",
        "tags": [
          "PublicGameRecord"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;table\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Permission\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;NAMESPACE:{namespace}:CLOUDSAVE:RECORD [READ]\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Scope\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\n\u0026lt;br/\u0026gt;\nGet game record by its key.\n",
        "operationId": "getGameRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Record retrieved",
            "schema": {
              "$ref": "#/definitions/models.GameRecord"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:CLOUDSAVE:RECORD [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get game record",
        "tags": [
          "PublicGameRecord"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;table\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Permission\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;NAMESPACE:{namespace}:CLOUDSAVE:RECORD [CREATE]\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Scope\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\n\u0026lt;br/\u0026gt;\n\nIf there\u0026#39;s already record, the record will be merged with conditions:\n- If field name is already exist, the value will be replaced\n- If field name is not exists it will append the field and its value\n\nExample:\n\nReplace value in a specific JSON key\n\u0026lt;pre\u0026gt;\n// existed record\n{\n\t\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;\n}\n\n// new update (request body)\n{\n\t\u0026#34;foo\u0026#34;: \u0026#34;barUpdated\u0026#34;\n}\n\n// result\n{\n\t\u0026#34;foo\u0026#34;: \u0026#34;barUpdated\u0026#34;\n}\n\u0026lt;/pre\u0026gt;\n\nAppend new json item\n\u0026lt;pre\u0026gt;\n// existed record\n{\n\t\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;\n}\n\n// new update (request body)\n{\n\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n}\n\n// result\n{\n\t\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;,\n\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n}\n\u0026lt;/pre\u0026gt;\n",
        "operationId": "postGameRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.GameRecordRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Record saved"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:CLOUDSAVE:RECORD [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create or append game record",
        "tags": [
          "PublicGameRecord"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;table\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Permission\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;NAMESPACE:{namespace}:CLOUDSAVE:RECORD [UPDATE]\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Scope\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\n\u0026lt;br/\u0026gt;\n\nIf record already exists, it will be replaced with the one from request body (all fields will be\ndeleted). If record is not exists, it will create a new one with value from request body.\n\nExample:\n\nReplace all records\n\u0026lt;pre\u0026gt;\n\t// existed record\n\t{\n\t\t\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;\n\t}\n\n\t// new update (request body)\n\t{\n\t\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n\t}\n\n\t// result\n\t{\n\t\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n\t}\n\u0026lt;/pre\u0026gt;\n",
        "operationId": "putGameRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.GameRecordRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Record saved"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:CLOUDSAVE:RECORD [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create or replace game record",
        "tags": [
          "PublicGameRecord"
        ]
      }
    },
    "/cloudsave/v1/namespaces/{namespace}/users/bulk/records/{key}/public": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;table\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Permission\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;NAMESPACE:{namespace}:PUBLIC:CLOUDSAVE:RECORD [READ]\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Scope\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\n\u0026lt;br/\u0026gt;\n\t\nBulk get other player\u0026#39;s record that is public by userIds, max allowed 20 at a time. Only record with \u0026lt;code\u0026gt;isPublic=true\u0026lt;/code\u0026gt; that can be\nretrieved using this endpoint.\n",
        "operationId": "bulkGetPlayerPublicRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.BulkUserIDsRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Record retrieved",
            "schema": {
              "$ref": "#/definitions/models.BulkGetPlayerRecordResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:PUBLIC:CLOUDSAVE:RECORD [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Bulk get other player's public record",
        "tags": [
          "PublicPlayerRecord"
        ]
      }
    },
    "/cloudsave/v1/namespaces/{namespace}/users/me/records/{key}/public": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required scope: social\n\nRequired valid user authorization\n\nDelete player public record (arbitrary JSON data) in user-level with given key.",
        "operationId": "publicDeletePlayerPublicRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete player public record based on its key",
        "tags": [
          "PublicPlayerRecord"
        ]
      }
    },
    "/cloudsave/v1/namespaces/{namespace}/users/{userId}/concurrent/records/{key}/public": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;table\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Permission\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [UPDATE]\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Scope\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\n\u0026lt;br/\u0026gt;\n\nIf the record is not exist, it will create. If the record already exist, it will replace the record\ninstead. And this operation can only be applied to record with \u0026lt;code\u0026gt;isPublic=true\u0026lt;/code\u0026gt;.\n\nExample\n\nReplace record\n\u0026lt;pre\u0026gt;\n// existed record\n{\n\t\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;\n}\n\n// new record (request body)\n{\n\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n}\n\n// result\n{\n\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n}\n\u0026lt;/pre\u0026gt;\n\t\n\u0026lt;b\u0026gt;Optimistic Concurrency Control\u0026lt;/b\u0026gt;\u0026lt;br\u0026gt;\nThis endpoint implement optimistic concurrency control to avoid race condition.\nIf the record has been updated since the client fetch it, the server will return HTTP status code 412 (precondition failed)\nand client need to redo the operation (fetch data and do update).\nOtherwise, the server will process the request.\n",
        "operationId": "putPlayerPublicRecordConcurrentHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID who own the record",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ConcurrentRecordRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Record saved"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create or replace player record",
        "tags": [
          "ConcurrentRecord"
        ]
      }
    },
    "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;table\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Permission\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [DELETE]\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Scope\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\n\u0026lt;br/\u0026gt;\n\nDelete player record by its key",
        "operationId": "deletePlayerRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID who own the record",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete player record",
        "tags": [
          "PublicPlayerRecord"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;table\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Permission\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [READ]\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Scope\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\n\u0026lt;br/\u0026gt;\n\nGet player record by its key",
        "operationId": "getPlayerRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID of record owner",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Record retrieved",
            "schema": {
              "$ref": "#/definitions/models.PlayerRecord"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get player record",
        "tags": [
          "PublicPlayerRecord"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;table\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Permission\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [WRITE]\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Scope\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\n\u0026lt;br/\u0026gt;\n\nCreate player record if it is not exists otherwise merge with these criteria:\n- If field name is already exists, replace the value\n- If field name is not exists, append it\n\nExample\n\nReplace value:\n\u0026lt;pre\u0026gt;\n\t// existed record\n\t{\n\t\t\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;\n\t}\n\n\t// new record (request body)\n\t{\n\t\t\u0026#34;foo\u0026#34;: \u0026#34;bar_updated\u0026#34;\n\t}\n\n\t// result\n\t{\n\t\t\u0026#34;foo\u0026#34;: \u0026#34;bar_updated\u0026#34;\n\t}\n\u0026lt;/pre\u0026gt;\n\nAppend value:\n\u0026lt;pre\u0026gt;\n\t// existed record\n\t{\n\t\t\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;\n\t}\n\n\t// new record (request body)\n\t{\n\t\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n\t}\n\n\t// result\n\t{\n\t\t\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;,\n\t\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n\t}\n\u0026lt;/pre\u0026gt;\n",
        "operationId": "postPlayerRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID of record owner",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PlayerRecordRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Record saved"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [WRITE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create or append player record",
        "tags": [
          "PublicPlayerRecord"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;table\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Permission\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [UPDATE]\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Scope\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\n\u0026lt;br/\u0026gt;\n\nThis endpoint will create new record if it is not exists and it will replace if already exists.\n\nExample\n\nReplace record\n\u0026lt;pre\u0026gt;\n// existed record\n{\n\t\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;\n}\n\n// new record (request body)\n{\n\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n}\n\n// result\n{\n\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n}\n\u0026lt;/pre\u0026gt;\n",
        "operationId": "putPlayerRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID who own the record",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PlayerRecordRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Record saved"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create or replace player record",
        "tags": [
          "PublicPlayerRecord"
        ]
      }
    },
    "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}/public": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;table\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Permission\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [READ]\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Scope\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\n\u0026lt;br/\u0026gt;\n\nGet other player\u0026#39;s record that is public. Only record with \u0026lt;code\u0026gt;isPublic=true\u0026lt;/code\u0026gt; that can be\nretrieved using this endpoint.\n",
        "operationId": "getPlayerPublicRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID of record owner",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Record retrieved",
            "schema": {
              "$ref": "#/definitions/models.PlayerRecord"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get other player's public record",
        "tags": [
          "PublicPlayerRecord"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;table\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Permission\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [WRITE]\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Scope\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\n\u0026lt;br/\u0026gt;\n\nThis endpoint will create or update player record with \u0026lt;code\u0026gt;isPublic=true\u0026lt;/code\u0026gt; meaning that the\nrecord will be available for other player to be retrieved. Other player can only retrieve the record\nand not create, update or even delete.\n\nThis endpoint will create public player record if it is not exists otherwise merge with these criteria:\n- If field name is already exists, replace the value\n- If field name is not exists, append it\n\nExample\n\nReplace value:\n\u0026lt;pre\u0026gt;\n\t// existed record\n\t{\n\t\t\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;\n\t}\n\n\t// new record (request body)\n\t{\n\t\t\u0026#34;foo\u0026#34;: \u0026#34;bar_updated\u0026#34;\n\t}\n\n\t// result\n\t{\n\t\t\u0026#34;foo\u0026#34;: \u0026#34;bar_updated\u0026#34;\n\t}\n\u0026lt;/pre\u0026gt;\n\nAppend value:\n\u0026lt;pre\u0026gt;\n\t// existed record\n\t{\n\t\t\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;\n\t}\n\n\t// new record (request body)\n\t{\n\t\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n\t}\n\n\t// result\n\t{\n\t\t\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;,\n\t\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n\t}\n\u0026lt;/pre\u0026gt;\n",
        "operationId": "postPlayerPublicRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID who own the record",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PlayerRecordRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Record saved"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [WRITE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create public player record",
        "tags": [
          "PublicPlayerRecord"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;table\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Permission\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [UPDATE]\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;tr\u0026gt;\n\t\t\u0026lt;td\u0026gt;Required Scope\u0026lt;/td\u0026gt;\n\t\t\u0026lt;td\u0026gt;\u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\u0026lt;/td\u0026gt;\n\t\u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\n\u0026lt;br/\u0026gt;\n\nIf the record is not exist, it will create. If the record already exist, it will replace the record\ninstead. And this operation can only be applied to record with \u0026lt;code\u0026gt;isPublic=true\u0026lt;/code\u0026gt;.\n\nExample\n\nReplace record\n\u0026lt;pre\u0026gt;\n// existed record\n{\n\t\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;\n}\n\n// new record (request body)\n{\n\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n}\n\n// result\n{\n\t\u0026#34;foo_new\u0026#34;: \u0026#34;bar_new\u0026#34;\n}\n\u0026lt;/pre\u0026gt;\n",
        "operationId": "putPlayerPublicRecordHandlerV1",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID who own the record",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "key of record",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PlayerRecordRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Record saved"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ResponseError"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create or replace player record",
        "tags": [
          "PublicPlayerRecord"
        ]
      }
    }
  },
  "definitions": {
    "models.BulkGetPlayerRecordResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/models.PlayerRecord"
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ]
    },
    "models.BulkUserIDsRequest": {
      "properties": {
        "userIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "userIds"
      ]
    },
    "models.ConcurrentRecordRequest": {
      "properties": {
        "updatedAt": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      },
      "required": [
        "updatedAt",
        "value"
      ]
    },
    "models.GameRecord": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "key": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "value": {
          "type": "object"
        }
      },
      "required": [
        "created_at",
        "key",
        "namespace",
        "updated_at",
        "value"
      ]
    },
    "models.GameRecordRequest": {
      "type": "object"
    },
    "models.ListGameRecordKeys": {
      "properties": {
        "data": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/models.Pagination"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "models.ListPlayerRecordKeys": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/models.PlayerRecordKey"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/models.Pagination"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "models.Pagination": {
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      },
      "required": [
        "first",
        "last",
        "next",
        "previous"
      ]
    },
    "models.PlayerRecord": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "is_public": {
          "type": "boolean",
          "x-omitempty": false
        },
        "key": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "user_id": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      },
      "required": [
        "created_at",
        "is_public",
        "key",
        "namespace",
        "updated_at",
        "user_id",
        "value"
      ]
    },
    "models.PlayerRecordKey": {
      "properties": {
        "key": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      },
      "required": [
        "key",
        "user_id"
      ]
    },
    "models.PlayerRecordRequest": {
      "type": "object"
    },
    "models.ResponseError": {
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "required": [
        "errorCode",
        "errorMessage"
      ]
    }
  }
}