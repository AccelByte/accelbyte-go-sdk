// Code generated by go-swagger; DO NOT EDIT.

package agreement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ChangePreferenceConsentReader is a Reader for the ChangePreferenceConsent structure.
type ChangePreferenceConsentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangePreferenceConsentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChangePreferenceConsentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PATCH /agreement/admin/agreements/localized-policy-versions/preferences/namespaces/{namespace}/userId/{userId} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewChangePreferenceConsentOK creates a ChangePreferenceConsentOK with default headers values
func NewChangePreferenceConsentOK() *ChangePreferenceConsentOK {
	return &ChangePreferenceConsentOK{}
}

/*ChangePreferenceConsentOK handles this case with default header values.

  successful operation
*/
type ChangePreferenceConsentOK struct {
}

func (o *ChangePreferenceConsentOK) Error() string {
	return fmt.Sprintf("[PATCH /agreement/admin/agreements/localized-policy-versions/preferences/namespaces/{namespace}/userId/{userId}][%d] changePreferenceConsentOK ", 200)
}

func (o *ChangePreferenceConsentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
