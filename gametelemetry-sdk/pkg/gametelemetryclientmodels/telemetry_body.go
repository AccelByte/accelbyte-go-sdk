// Code generated by go-swagger; DO NOT EDIT.

package gametelemetryclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TelemetryBody TelemetryBody
//
// swagger:model TelemetryBody
type TelemetryBody struct {

	// Eventid
	//
	// Adding this `EventID` field in the request body does not override the `EventID` generated by server which is saved in the data lake
	EventID string `json:"EventId,omitempty"`

	// Eventname
	// Required: true
	EventName *string `json:"EventName"`

	// Eventnamespace
	// Required: true
	EventNamespace *string `json:"EventNamespace"`

	// Eventtimestamp
	//
	// Adding this `EventTimestamp` field in the request body does not override the `EventTimestamp` generated by server which is saved in the data lake. To add specific timestamp of your telemetry data, please add a new subfield in the `payload` field
	// Format: date-time
	EventTimestamp *strfmt.DateTime `json:"EventTimestamp,omitempty"`

	// Payload
	// Required: true
	Payload interface{} `json:"Payload"`
}

// Validate validates this telemetry body
func (m *TelemetryBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TelemetryBody) validateEventName(formats strfmt.Registry) error {

	if err := validate.Required("EventName", "body", m.EventName); err != nil {
		return err
	}

	return nil
}

func (m *TelemetryBody) validateEventNamespace(formats strfmt.Registry) error {

	if err := validate.Required("EventNamespace", "body", m.EventNamespace); err != nil {
		return err
	}

	return nil
}

func (m *TelemetryBody) validateEventTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.EventTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("EventTimestamp", "body", "date-time", m.EventTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TelemetryBody) validatePayload(formats strfmt.Registry) error {

	if err := validate.Required("Payload", "body", m.Payload); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TelemetryBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TelemetryBody) UnmarshalBinary(b []byte) error {
	var res TelemetryBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
