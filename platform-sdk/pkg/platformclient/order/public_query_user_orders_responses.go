// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclientmodels"
)

// PublicQueryUserOrdersReader is a Reader for the PublicQueryUserOrders structure.
type PublicQueryUserOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PublicQueryUserOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPublicQueryUserOrdersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /platform/public/namespaces/{namespace}/users/{userId}/orders returns an error %d: %s", response.Code(), string(data))
	}
}

// NewPublicQueryUserOrdersOK creates a PublicQueryUserOrdersOK with default headers values
func NewPublicQueryUserOrdersOK() *PublicQueryUserOrdersOK {
	return &PublicQueryUserOrdersOK{}
}

/*PublicQueryUserOrdersOK handles this case with default header values.

  successful operation
*/
type PublicQueryUserOrdersOK struct {
	Payload *platformclientmodels.OrderPagingSlicedResult
}

func (o *PublicQueryUserOrdersOK) Error() string {
	return fmt.Sprintf("[GET /platform/public/namespaces/{namespace}/users/{userId}/orders][%d] publicQueryUserOrdersOK  %+v", 200, o.Payload)
}

func (o *PublicQueryUserOrdersOK) GetPayload() *platformclientmodels.OrderPagingSlicedResult {
	return o.Payload
}

func (o *PublicQueryUserOrdersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.OrderPagingSlicedResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
