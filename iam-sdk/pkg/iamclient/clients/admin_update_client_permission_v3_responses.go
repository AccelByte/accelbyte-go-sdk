// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// AdminUpdateClientPermissionV3Reader is a Reader for the AdminUpdateClientPermissionV3 structure.
type AdminUpdateClientPermissionV3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminUpdateClientPermissionV3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAdminUpdateClientPermissionV3NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminUpdateClientPermissionV3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminUpdateClientPermissionV3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAdminUpdateClientPermissionV3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAdminUpdateClientPermissionV3NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PUT /iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminUpdateClientPermissionV3NoContent creates a AdminUpdateClientPermissionV3NoContent with default headers values
func NewAdminUpdateClientPermissionV3NoContent() *AdminUpdateClientPermissionV3NoContent {
	return &AdminUpdateClientPermissionV3NoContent{}
}

/*AdminUpdateClientPermissionV3NoContent handles this case with default header values.

  Operation succeeded
*/
type AdminUpdateClientPermissionV3NoContent struct {
}

func (o *AdminUpdateClientPermissionV3NoContent) Error() string {
	return fmt.Sprintf("[PUT /iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions][%d] adminUpdateClientPermissionV3NoContent ", 204)
}

func (o *AdminUpdateClientPermissionV3NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAdminUpdateClientPermissionV3BadRequest creates a AdminUpdateClientPermissionV3BadRequest with default headers values
func NewAdminUpdateClientPermissionV3BadRequest() *AdminUpdateClientPermissionV3BadRequest {
	return &AdminUpdateClientPermissionV3BadRequest{}
}

/*AdminUpdateClientPermissionV3BadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>
*/
type AdminUpdateClientPermissionV3BadRequest struct {
	Payload *iamclientmodels.RestapiErrorResponse
}

func (o *AdminUpdateClientPermissionV3BadRequest) Error() string {
	return fmt.Sprintf("[PUT /iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions][%d] adminUpdateClientPermissionV3BadRequest  %+v", 400, o.Payload)
}

func (o *AdminUpdateClientPermissionV3BadRequest) GetPayload() *iamclientmodels.RestapiErrorResponse {
	return o.Payload
}

func (o *AdminUpdateClientPermissionV3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestapiErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateClientPermissionV3Unauthorized creates a AdminUpdateClientPermissionV3Unauthorized with default headers values
func NewAdminUpdateClientPermissionV3Unauthorized() *AdminUpdateClientPermissionV3Unauthorized {
	return &AdminUpdateClientPermissionV3Unauthorized{}
}

/*AdminUpdateClientPermissionV3Unauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>
*/
type AdminUpdateClientPermissionV3Unauthorized struct {
	Payload *iamclientmodels.RestapiErrorResponse
}

func (o *AdminUpdateClientPermissionV3Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions][%d] adminUpdateClientPermissionV3Unauthorized  %+v", 401, o.Payload)
}

func (o *AdminUpdateClientPermissionV3Unauthorized) GetPayload() *iamclientmodels.RestapiErrorResponse {
	return o.Payload
}

func (o *AdminUpdateClientPermissionV3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestapiErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateClientPermissionV3Forbidden creates a AdminUpdateClientPermissionV3Forbidden with default headers values
func NewAdminUpdateClientPermissionV3Forbidden() *AdminUpdateClientPermissionV3Forbidden {
	return &AdminUpdateClientPermissionV3Forbidden{}
}

/*AdminUpdateClientPermissionV3Forbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>
*/
type AdminUpdateClientPermissionV3Forbidden struct {
	Payload *iamclientmodels.RestapiErrorResponse
}

func (o *AdminUpdateClientPermissionV3Forbidden) Error() string {
	return fmt.Sprintf("[PUT /iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions][%d] adminUpdateClientPermissionV3Forbidden  %+v", 403, o.Payload)
}

func (o *AdminUpdateClientPermissionV3Forbidden) GetPayload() *iamclientmodels.RestapiErrorResponse {
	return o.Payload
}

func (o *AdminUpdateClientPermissionV3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestapiErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateClientPermissionV3NotFound creates a AdminUpdateClientPermissionV3NotFound with default headers values
func NewAdminUpdateClientPermissionV3NotFound() *AdminUpdateClientPermissionV3NotFound {
	return &AdminUpdateClientPermissionV3NotFound{}
}

/*AdminUpdateClientPermissionV3NotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10365</td><td>client not found</td></tr></table>
*/
type AdminUpdateClientPermissionV3NotFound struct {
	Payload *iamclientmodels.RestapiErrorResponse
}

func (o *AdminUpdateClientPermissionV3NotFound) Error() string {
	return fmt.Sprintf("[PUT /iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions][%d] adminUpdateClientPermissionV3NotFound  %+v", 404, o.Payload)
}

func (o *AdminUpdateClientPermissionV3NotFound) GetPayload() *iamclientmodels.RestapiErrorResponse {
	return o.Payload
}

func (o *AdminUpdateClientPermissionV3NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestapiErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
