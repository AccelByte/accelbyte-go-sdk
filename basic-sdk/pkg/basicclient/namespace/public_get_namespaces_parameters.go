// Code generated by go-swagger; DO NOT EDIT.

package namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPublicGetNamespacesParams creates a new PublicGetNamespacesParams object
// with the default values initialized.
func NewPublicGetNamespacesParams() *PublicGetNamespacesParams {
	var (
		activeOnlyDefault = bool(false)
	)
	return &PublicGetNamespacesParams{
		ActiveOnly: &activeOnlyDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPublicGetNamespacesParamsWithTimeout creates a new PublicGetNamespacesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPublicGetNamespacesParamsWithTimeout(timeout time.Duration) *PublicGetNamespacesParams {
	var (
		activeOnlyDefault = bool(false)
	)
	return &PublicGetNamespacesParams{
		ActiveOnly: &activeOnlyDefault,

		timeout: timeout,
	}
}

// NewPublicGetNamespacesParamsWithContext creates a new PublicGetNamespacesParams object
// with the default values initialized, and the ability to set a context for a request
func NewPublicGetNamespacesParamsWithContext(ctx context.Context) *PublicGetNamespacesParams {
	var (
		activeOnlyDefault = bool(false)
	)
	return &PublicGetNamespacesParams{
		ActiveOnly: &activeOnlyDefault,

		Context: ctx,
	}
}

// NewPublicGetNamespacesParamsWithHTTPClient creates a new PublicGetNamespacesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPublicGetNamespacesParamsWithHTTPClient(client *http.Client) *PublicGetNamespacesParams {
	var (
		activeOnlyDefault = bool(false)
	)
	return &PublicGetNamespacesParams{
		ActiveOnly: &activeOnlyDefault,
		HTTPClient: client,
	}
}

/*PublicGetNamespacesParams contains all the parameters to send to the API endpoint
for the public get namespaces operation typically these are written to a http.Request
*/
type PublicGetNamespacesParams struct {

	/*ActiveOnly
	  only retrieves active namespaces

	*/
	ActiveOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the public get namespaces params
func (o *PublicGetNamespacesParams) WithTimeout(timeout time.Duration) *PublicGetNamespacesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the public get namespaces params
func (o *PublicGetNamespacesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the public get namespaces params
func (o *PublicGetNamespacesParams) WithContext(ctx context.Context) *PublicGetNamespacesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the public get namespaces params
func (o *PublicGetNamespacesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the public get namespaces params
func (o *PublicGetNamespacesParams) WithHTTPClient(client *http.Client) *PublicGetNamespacesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the public get namespaces params
func (o *PublicGetNamespacesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActiveOnly adds the activeOnly to the public get namespaces params
func (o *PublicGetNamespacesParams) WithActiveOnly(activeOnly *bool) *PublicGetNamespacesParams {
	o.SetActiveOnly(activeOnly)
	return o
}

// SetActiveOnly adds the activeOnly to the public get namespaces params
func (o *PublicGetNamespacesParams) SetActiveOnly(activeOnly *bool) {
	o.ActiveOnly = activeOnly
}

// WriteToRequest writes these params to a swagger request
func (o *PublicGetNamespacesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActiveOnly != nil {

		// query param activeOnly
		var qrActiveOnly bool
		if o.ActiveOnly != nil {
			qrActiveOnly = *o.ActiveOnly
		}
		qActiveOnly := swag.FormatBool(qrActiveOnly)
		if qActiveOnly != "" {
			if err := r.SetQueryParam("activeOnly", qActiveOnly); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
