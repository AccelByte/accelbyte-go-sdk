// Code generated by go-swagger; DO NOT EDIT.

package user_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/basic-sdk/pkg/basicclientmodels"
)

// EnableUserProfileStatusReader is a Reader for the EnableUserProfileStatus structure.
type EnableUserProfileStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnableUserProfileStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnableUserProfileStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnableUserProfileStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewEnableUserProfileStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewEnableUserProfileStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewEnableUserProfileStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PATCH /v1/admin/namespaces/{namespace}/users/{userId}/profiles/status returns an error %d: %s", response.Code(), string(data))
	}
}

// NewEnableUserProfileStatusOK creates a EnableUserProfileStatusOK with default headers values
func NewEnableUserProfileStatusOK() *EnableUserProfileStatusOK {
	return &EnableUserProfileStatusOK{}
}

/*EnableUserProfileStatusOK handles this case with default header values.

  successful operation
*/
type EnableUserProfileStatusOK struct {
	Payload *basicclientmodels.UserProfilePrivateInfo
}

func (o *EnableUserProfileStatusOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/admin/namespaces/{namespace}/users/{userId}/profiles/status][%d] enableUserProfileStatusOK  %+v", 200, o.Payload)
}

func (o *EnableUserProfileStatusOK) GetPayload() *basicclientmodels.UserProfilePrivateInfo {
	return o.Payload
}

func (o *EnableUserProfileStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.UserProfilePrivateInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableUserProfileStatusBadRequest creates a EnableUserProfileStatusBadRequest with default headers values
func NewEnableUserProfileStatusBadRequest() *EnableUserProfileStatusBadRequest {
	return &EnableUserProfileStatusBadRequest{}
}

/*EnableUserProfileStatusBadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>
*/
type EnableUserProfileStatusBadRequest struct {
	Payload *basicclientmodels.ValidationErrorEntity
}

func (o *EnableUserProfileStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/admin/namespaces/{namespace}/users/{userId}/profiles/status][%d] enableUserProfileStatusBadRequest  %+v", 400, o.Payload)
}

func (o *EnableUserProfileStatusBadRequest) GetPayload() *basicclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *EnableUserProfileStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableUserProfileStatusUnauthorized creates a EnableUserProfileStatusUnauthorized with default headers values
func NewEnableUserProfileStatusUnauthorized() *EnableUserProfileStatusUnauthorized {
	return &EnableUserProfileStatusUnauthorized{}
}

/*EnableUserProfileStatusUnauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>
*/
type EnableUserProfileStatusUnauthorized struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *EnableUserProfileStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/admin/namespaces/{namespace}/users/{userId}/profiles/status][%d] enableUserProfileStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *EnableUserProfileStatusUnauthorized) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *EnableUserProfileStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableUserProfileStatusForbidden creates a EnableUserProfileStatusForbidden with default headers values
func NewEnableUserProfileStatusForbidden() *EnableUserProfileStatusForbidden {
	return &EnableUserProfileStatusForbidden{}
}

/*EnableUserProfileStatusForbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>
*/
type EnableUserProfileStatusForbidden struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *EnableUserProfileStatusForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/admin/namespaces/{namespace}/users/{userId}/profiles/status][%d] enableUserProfileStatusForbidden  %+v", 403, o.Payload)
}

func (o *EnableUserProfileStatusForbidden) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *EnableUserProfileStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableUserProfileStatusNotFound creates a EnableUserProfileStatusNotFound with default headers values
func NewEnableUserProfileStatusNotFound() *EnableUserProfileStatusNotFound {
	return &EnableUserProfileStatusNotFound{}
}

/*EnableUserProfileStatusNotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>user profile not found</td></tr></table>
*/
type EnableUserProfileStatusNotFound struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *EnableUserProfileStatusNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/admin/namespaces/{namespace}/users/{userId}/profiles/status][%d] enableUserProfileStatusNotFound  %+v", 404, o.Payload)
}

func (o *EnableUserProfileStatusNotFound) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *EnableUserProfileStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
