// Code generated by go-swagger; DO NOT EDIT.

package item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclientmodels"
)

// ReturnItemReader is a Reader for the ReturnItem structure.
type ReturnItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReturnItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewReturnItemNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewReturnItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewReturnItemUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PUT /platform/admin/namespaces/{namespace}/items/{itemId}/return returns an error %d: %s", response.Code(), string(data))
	}
}

// NewReturnItemNoContent creates a ReturnItemNoContent with default headers values
func NewReturnItemNoContent() *ReturnItemNoContent {
	return &ReturnItemNoContent{}
}

/*ReturnItemNoContent handles this case with default header values.

  Return item successfully
*/
type ReturnItemNoContent struct {
}

func (o *ReturnItemNoContent) Error() string {
	return fmt.Sprintf("[PUT /platform/admin/namespaces/{namespace}/items/{itemId}/return][%d] returnItemNoContent ", 204)
}

func (o *ReturnItemNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReturnItemNotFound creates a ReturnItemNotFound with default headers values
func NewReturnItemNotFound() *ReturnItemNotFound {
	return &ReturnItemNotFound{}
}

/*ReturnItemNotFound handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>
*/
type ReturnItemNotFound struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *ReturnItemNotFound) Error() string {
	return fmt.Sprintf("[PUT /platform/admin/namespaces/{namespace}/items/{itemId}/return][%d] returnItemNotFound  %+v", 404, o.Payload)
}

func (o *ReturnItemNotFound) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *ReturnItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReturnItemUnprocessableEntity creates a ReturnItemUnprocessableEntity with default headers values
func NewReturnItemUnprocessableEntity() *ReturnItemUnprocessableEntity {
	return &ReturnItemUnprocessableEntity{}
}

/*ReturnItemUnprocessableEntity handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type ReturnItemUnprocessableEntity struct {
	Payload *platformclientmodels.ValidationErrorEntity
}

func (o *ReturnItemUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /platform/admin/namespaces/{namespace}/items/{itemId}/return][%d] returnItemUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ReturnItemUnprocessableEntity) GetPayload() *platformclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *ReturnItemUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
