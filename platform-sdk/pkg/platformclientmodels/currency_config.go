// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CurrencyConfig currency config
//
// swagger:model CurrencyConfig
type CurrencyConfig struct {

	// currency symbol
	// Required: true
	CurrencySymbol *string `json:"currencySymbol"`

	// max amount of per transaction
	// Required: true
	MaxAmountPerTransaction *int64 `json:"maxAmountPerTransaction"`

	// max balance amount of the currency
	// Required: true
	MaxBalanceAmount *int64 `json:"maxBalanceAmount"`

	// max transaction amount per day
	// Required: true
	MaxTransactionAmountPerDay *int64 `json:"maxTransactionAmountPerDay"`
}

// Validate validates this currency config
func (m *CurrencyConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrencySymbol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxAmountPerTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxBalanceAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxTransactionAmountPerDay(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CurrencyConfig) validateCurrencySymbol(formats strfmt.Registry) error {

	if err := validate.Required("currencySymbol", "body", m.CurrencySymbol); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyConfig) validateMaxAmountPerTransaction(formats strfmt.Registry) error {

	if err := validate.Required("maxAmountPerTransaction", "body", m.MaxAmountPerTransaction); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyConfig) validateMaxBalanceAmount(formats strfmt.Registry) error {

	if err := validate.Required("maxBalanceAmount", "body", m.MaxBalanceAmount); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyConfig) validateMaxTransactionAmountPerDay(formats strfmt.Registry) error {

	if err := validate.Required("maxTransactionAmountPerDay", "body", m.MaxTransactionAmountPerDay); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CurrencyConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrencyConfig) UnmarshalBinary(b []byte) error {
	var res CurrencyConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
