// Code generated by go-swagger; DO NOT EDIT.

package dsmcclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsOverrideConfig models override config
//
// swagger:model models.OverrideConfig
type ModelsOverrideConfig struct {

	// allow version override
	// Required: true
	AllowVersionOverride *bool `json:"allow_version_override"`

	// overrides
	// Required: true
	Overrides map[string]ModelsDeploymentConfigOverride `json:"overrides"`
}

// Validate validates this models override config
func (m *ModelsOverrideConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowVersionOverride(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrides(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsOverrideConfig) validateAllowVersionOverride(formats strfmt.Registry) error {

	if err := validate.Required("allow_version_override", "body", m.AllowVersionOverride); err != nil {
		return err
	}

	return nil
}

func (m *ModelsOverrideConfig) validateOverrides(formats strfmt.Registry) error {

	for k := range m.Overrides {

		if err := validate.Required("overrides"+"."+k, "body", m.Overrides[k]); err != nil {
			return err
		}
		if val, ok := m.Overrides[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsOverrideConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsOverrideConfig) UnmarshalBinary(b []byte) error {
	var res ModelsOverrideConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
