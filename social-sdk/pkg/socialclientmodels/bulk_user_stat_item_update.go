// Code generated by go-swagger; DO NOT EDIT.

package socialclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BulkUserStatItemUpdate bulk user stat item update
//
// swagger:model BulkUserStatItemUpdate
type BulkUserStatItemUpdate struct {

	// Additional data to be published in event payload
	AdditionalData map[string]interface{} `json:"additionalData,omitempty"`

	// Additional key to identify multi level user's statitems, e.g. character's statitems
	AdditionalKey string `json:"additionalKey,omitempty"`

	// stat code
	// Required: true
	StatCode *string `json:"statCode"`

	// update strategy
	// Required: true
	// Enum: [INCREMENT MAX MIN OVERRIDE]
	UpdateStrategy *string `json:"updateStrategy"`

	// user Id
	// Required: true
	UserID *string `json:"userId"`

	// value
	// Required: true
	Value *float64 `json:"value"`
}

// Validate validates this bulk user stat item update
func (m *BulkUserStatItemUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkUserStatItemUpdate) validateStatCode(formats strfmt.Registry) error {

	if err := validate.Required("statCode", "body", m.StatCode); err != nil {
		return err
	}

	return nil
}

var bulkUserStatItemUpdateTypeUpdateStrategyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INCREMENT","MAX","MIN","OVERRIDE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bulkUserStatItemUpdateTypeUpdateStrategyPropEnum = append(bulkUserStatItemUpdateTypeUpdateStrategyPropEnum, v)
	}
}

const (

	// BulkUserStatItemUpdateUpdateStrategyINCREMENT captures enum value "INCREMENT"
	BulkUserStatItemUpdateUpdateStrategyINCREMENT string = "INCREMENT"

	// BulkUserStatItemUpdateUpdateStrategyMAX captures enum value "MAX"
	BulkUserStatItemUpdateUpdateStrategyMAX string = "MAX"

	// BulkUserStatItemUpdateUpdateStrategyMIN captures enum value "MIN"
	BulkUserStatItemUpdateUpdateStrategyMIN string = "MIN"

	// BulkUserStatItemUpdateUpdateStrategyOVERRIDE captures enum value "OVERRIDE"
	BulkUserStatItemUpdateUpdateStrategyOVERRIDE string = "OVERRIDE"
)

// prop value enum
func (m *BulkUserStatItemUpdate) validateUpdateStrategyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bulkUserStatItemUpdateTypeUpdateStrategyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BulkUserStatItemUpdate) validateUpdateStrategy(formats strfmt.Registry) error {

	if err := validate.Required("updateStrategy", "body", m.UpdateStrategy); err != nil {
		return err
	}

	// value enum
	if err := m.validateUpdateStrategyEnum("updateStrategy", "body", *m.UpdateStrategy); err != nil {
		return err
	}

	return nil
}

func (m *BulkUserStatItemUpdate) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *BulkUserStatItemUpdate) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkUserStatItemUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkUserStatItemUpdate) UnmarshalBinary(b []byte) error {
	var res BulkUserStatItemUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
