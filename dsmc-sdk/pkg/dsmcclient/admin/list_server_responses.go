// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/dsmc-sdk/pkg/dsmcclientmodels"
)

// ListServerReader is a Reader for the ListServer structure.
type ListServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListServerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListServerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewListServerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /dsmcontroller/admin/namespaces/{namespace}/servers returns an error %d: %s", response.Code(), string(data))
	}
}

// NewListServerOK creates a ListServerOK with default headers values
func NewListServerOK() *ListServerOK {
	return &ListServerOK{}
}

/*ListServerOK handles this case with default header values.

  servers listed
*/
type ListServerOK struct {
	Payload *dsmcclientmodels.ModelsListServerResponse
}

func (o *ListServerOK) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/servers][%d] listServerOK  %+v", 200, o.Payload)
}

func (o *ListServerOK) GetPayload() *dsmcclientmodels.ModelsListServerResponse {
	return o.Payload
}

func (o *ListServerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ModelsListServerResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListServerUnauthorized creates a ListServerUnauthorized with default headers values
func NewListServerUnauthorized() *ListServerUnauthorized {
	return &ListServerUnauthorized{}
}

/*ListServerUnauthorized handles this case with default header values.

  Unauthorized
*/
type ListServerUnauthorized struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *ListServerUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/servers][%d] listServerUnauthorized  %+v", 401, o.Payload)
}

func (o *ListServerUnauthorized) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *ListServerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListServerInternalServerError creates a ListServerInternalServerError with default headers values
func NewListServerInternalServerError() *ListServerInternalServerError {
	return &ListServerInternalServerError{}
}

/*ListServerInternalServerError handles this case with default header values.

  Internal Server Error
*/
type ListServerInternalServerError struct {
	Payload *dsmcclientmodels.ResponseError
}

func (o *ListServerInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dsmcontroller/admin/namespaces/{namespace}/servers][%d] listServerInternalServerError  %+v", 500, o.Payload)
}

func (o *ListServerInternalServerError) GetPayload() *dsmcclientmodels.ResponseError {
	return o.Payload
}

func (o *ListServerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dsmcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
