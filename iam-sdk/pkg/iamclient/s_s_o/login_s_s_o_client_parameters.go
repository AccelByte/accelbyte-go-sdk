// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package s_s_o

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewLoginSSOClientParams creates a new LoginSSOClientParams object
// with the default values initialized.
func NewLoginSSOClientParams() *LoginSSOClientParams {
	var ()
	return &LoginSSOClientParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLoginSSOClientParamsWithTimeout creates a new LoginSSOClientParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLoginSSOClientParamsWithTimeout(timeout time.Duration) *LoginSSOClientParams {
	var ()
	return &LoginSSOClientParams{

		timeout: timeout,
	}
}

// NewLoginSSOClientParamsWithContext creates a new LoginSSOClientParams object
// with the default values initialized, and the ability to set a context for a request
func NewLoginSSOClientParamsWithContext(ctx context.Context) *LoginSSOClientParams {
	var ()
	return &LoginSSOClientParams{

		Context: ctx,
	}
}

// NewLoginSSOClientParamsWithHTTPClient creates a new LoginSSOClientParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLoginSSOClientParamsWithHTTPClient(client *http.Client) *LoginSSOClientParams {
	var ()
	return &LoginSSOClientParams{
		HTTPClient: client,
	}
}

/*LoginSSOClientParams contains all the parameters to send to the API endpoint
for the login s s o client operation typically these are written to a http.Request
*/
type LoginSSOClientParams struct {

	/*Payload
	  Key value payload received from SSO client, if any, and must be escaped

	*/
	Payload *string
	/*PlatformID
	  SSO Client ID

	*/
	PlatformID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the login s s o client params
func (o *LoginSSOClientParams) WithTimeout(timeout time.Duration) *LoginSSOClientParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the login s s o client params
func (o *LoginSSOClientParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the login s s o client params
func (o *LoginSSOClientParams) WithContext(ctx context.Context) *LoginSSOClientParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the login s s o client params
func (o *LoginSSOClientParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the login s s o client params
func (o *LoginSSOClientParams) WithHTTPClient(client *http.Client) *LoginSSOClientParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the login s s o client params
func (o *LoginSSOClientParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPayload adds the payload to the login s s o client params
func (o *LoginSSOClientParams) WithPayload(payload *string) *LoginSSOClientParams {
	o.SetPayload(payload)
	return o
}

// SetPayload adds the payload to the login s s o client params
func (o *LoginSSOClientParams) SetPayload(payload *string) {
	o.Payload = payload
}

// WithPlatformID adds the platformID to the login s s o client params
func (o *LoginSSOClientParams) WithPlatformID(platformID string) *LoginSSOClientParams {
	o.SetPlatformID(platformID)
	return o
}

// SetPlatformID adds the platformId to the login s s o client params
func (o *LoginSSOClientParams) SetPlatformID(platformID string) {
	o.PlatformID = platformID
}

// WriteToRequest writes these params to a swagger request
func (o *LoginSSOClientParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Payload != nil {

		// query param payload
		var qrPayload string
		if o.Payload != nil {
			qrPayload = *o.Payload
		}
		qPayload := qrPayload
		if qPayload != "" {
			if err := r.SetQueryParam("payload", qPayload); err != nil {
				return err
			}
		}

	}

	// path param platformId
	if err := r.SetPathParam("platformId", o.PlatformID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
