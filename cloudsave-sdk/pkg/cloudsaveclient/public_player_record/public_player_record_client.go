// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package public_player_record

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"reflect"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new public player record API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for public player record API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	RetrievePlayerRecords(params *RetrievePlayerRecordsParams, authInfo runtime.ClientAuthInfoWriter) (*RetrievePlayerRecordsOK, *RetrievePlayerRecordsBadRequest, *RetrievePlayerRecordsUnauthorized, *RetrievePlayerRecordsInternalServerError, error)
	RetrievePlayerRecordsShort(params *RetrievePlayerRecordsParams, authInfo runtime.ClientAuthInfoWriter) (*RetrievePlayerRecordsOK, error)
	BulkGetPlayerPublicRecordHandlerV1(params *BulkGetPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*BulkGetPlayerPublicRecordHandlerV1OK, *BulkGetPlayerPublicRecordHandlerV1BadRequest, *BulkGetPlayerPublicRecordHandlerV1Unauthorized, *BulkGetPlayerPublicRecordHandlerV1Forbidden, *BulkGetPlayerPublicRecordHandlerV1InternalServerError, error)
	BulkGetPlayerPublicRecordHandlerV1Short(params *BulkGetPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*BulkGetPlayerPublicRecordHandlerV1OK, error)
	DeletePlayerRecordHandlerV1(params *DeletePlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*DeletePlayerRecordHandlerV1NoContent, *DeletePlayerRecordHandlerV1BadRequest, *DeletePlayerRecordHandlerV1Unauthorized, *DeletePlayerRecordHandlerV1Forbidden, *DeletePlayerRecordHandlerV1InternalServerError, error)
	DeletePlayerRecordHandlerV1Short(params *DeletePlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*DeletePlayerRecordHandlerV1NoContent, error)
	GetPlayerPublicRecordHandlerV1(params *GetPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetPlayerPublicRecordHandlerV1OK, *GetPlayerPublicRecordHandlerV1Unauthorized, *GetPlayerPublicRecordHandlerV1NotFound, *GetPlayerPublicRecordHandlerV1InternalServerError, error)
	GetPlayerPublicRecordHandlerV1Short(params *GetPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetPlayerPublicRecordHandlerV1OK, error)
	GetPlayerRecordHandlerV1(params *GetPlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetPlayerRecordHandlerV1OK, *GetPlayerRecordHandlerV1Unauthorized, *GetPlayerRecordHandlerV1Forbidden, *GetPlayerRecordHandlerV1NotFound, *GetPlayerRecordHandlerV1InternalServerError, error)
	GetPlayerRecordHandlerV1Short(params *GetPlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetPlayerRecordHandlerV1OK, error)
	GetPlayerRecordsBulkHandlerV1(params *GetPlayerRecordsBulkHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetPlayerRecordsBulkHandlerV1OK, *GetPlayerRecordsBulkHandlerV1BadRequest, *GetPlayerRecordsBulkHandlerV1Unauthorized, *GetPlayerRecordsBulkHandlerV1Forbidden, *GetPlayerRecordsBulkHandlerV1InternalServerError, error)
	GetPlayerRecordsBulkHandlerV1Short(params *GetPlayerRecordsBulkHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetPlayerRecordsBulkHandlerV1OK, error)
	PostPlayerPublicRecordHandlerV1(params *PostPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PostPlayerPublicRecordHandlerV1Created, *PostPlayerPublicRecordHandlerV1BadRequest, *PostPlayerPublicRecordHandlerV1Unauthorized, *PostPlayerPublicRecordHandlerV1InternalServerError, error)
	PostPlayerPublicRecordHandlerV1Short(params *PostPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PostPlayerPublicRecordHandlerV1Created, error)
	PostPlayerRecordHandlerV1(params *PostPlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PostPlayerRecordHandlerV1Created, *PostPlayerRecordHandlerV1BadRequest, *PostPlayerRecordHandlerV1Unauthorized, *PostPlayerRecordHandlerV1Forbidden, *PostPlayerRecordHandlerV1InternalServerError, error)
	PostPlayerRecordHandlerV1Short(params *PostPlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PostPlayerRecordHandlerV1Created, error)
	PublicDeletePlayerPublicRecordHandlerV1(params *PublicDeletePlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PublicDeletePlayerPublicRecordHandlerV1NoContent, *PublicDeletePlayerPublicRecordHandlerV1BadRequest, *PublicDeletePlayerPublicRecordHandlerV1Unauthorized, *PublicDeletePlayerPublicRecordHandlerV1NotFound, *PublicDeletePlayerPublicRecordHandlerV1InternalServerError, error)
	PublicDeletePlayerPublicRecordHandlerV1Short(params *PublicDeletePlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PublicDeletePlayerPublicRecordHandlerV1NoContent, error)
	PutPlayerPublicRecordHandlerV1(params *PutPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PutPlayerPublicRecordHandlerV1OK, *PutPlayerPublicRecordHandlerV1BadRequest, *PutPlayerPublicRecordHandlerV1Unauthorized, *PutPlayerPublicRecordHandlerV1InternalServerError, error)
	PutPlayerPublicRecordHandlerV1Short(params *PutPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PutPlayerPublicRecordHandlerV1OK, error)
	PutPlayerRecordHandlerV1(params *PutPlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PutPlayerRecordHandlerV1OK, *PutPlayerRecordHandlerV1BadRequest, *PutPlayerRecordHandlerV1Unauthorized, *PutPlayerRecordHandlerV1Forbidden, *PutPlayerRecordHandlerV1InternalServerError, error)
	PutPlayerRecordHandlerV1Short(params *PutPlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PutPlayerRecordHandlerV1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Deprecated: 2022-08-10 - Use RetrievePlayerRecordsShort instead.

  RetrievePlayerRecords queries player records key

  Required valid user token

Required scope: &lt;code&gt;social&lt;/code&gt;

Retrieve list of player records key under given namespace.
*/
func (a *Client) RetrievePlayerRecords(params *RetrievePlayerRecordsParams, authInfo runtime.ClientAuthInfoWriter) (*RetrievePlayerRecordsOK, *RetrievePlayerRecordsBadRequest, *RetrievePlayerRecordsUnauthorized, *RetrievePlayerRecordsInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrievePlayerRecordsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RetrievePlayerRecords",
		Method:             "GET",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/me/records",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetrievePlayerRecordsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *RetrievePlayerRecordsOK:
		return v, nil, nil, nil, nil

	case *RetrievePlayerRecordsBadRequest:
		return nil, v, nil, nil, nil

	case *RetrievePlayerRecordsUnauthorized:
		return nil, nil, v, nil, nil

	case *RetrievePlayerRecordsInternalServerError:
		return nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  RetrievePlayerRecordsShort queries player records key

  Required valid user token

Required scope: &lt;code&gt;social&lt;/code&gt;

Retrieve list of player records key under given namespace.
*/
func (a *Client) RetrievePlayerRecordsShort(params *RetrievePlayerRecordsParams, authInfo runtime.ClientAuthInfoWriter) (*RetrievePlayerRecordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrievePlayerRecordsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RetrievePlayerRecords",
		Method:             "GET",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/me/records",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetrievePlayerRecordsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *RetrievePlayerRecordsOK:
		return v, nil
	case *RetrievePlayerRecordsBadRequest:
		return nil, v
	case *RetrievePlayerRecordsUnauthorized:
		return nil, v
	case *RetrievePlayerRecordsInternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
Deprecated: 2022-08-10 - Use BulkGetPlayerPublicRecordHandlerV1Short instead.

  BulkGetPlayerPublicRecordHandlerV1 bulks get player public records

  &lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Permission&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;NAMESPACE:{namespace}:PUBLIC:CLOUDSAVE:RECORD [READ]&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Scope&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;social&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;

Bulk get other player&#39;s record that is public by userIds, max allowed 20 at a time. Only record with &lt;code&gt;isPublic=true&lt;/code&gt; that can be
retrieved using this endpoint.

*/
func (a *Client) BulkGetPlayerPublicRecordHandlerV1(params *BulkGetPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*BulkGetPlayerPublicRecordHandlerV1OK, *BulkGetPlayerPublicRecordHandlerV1BadRequest, *BulkGetPlayerPublicRecordHandlerV1Unauthorized, *BulkGetPlayerPublicRecordHandlerV1Forbidden, *BulkGetPlayerPublicRecordHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkGetPlayerPublicRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkGetPlayerPublicRecordHandlerV1",
		Method:             "POST",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/bulk/records/{key}/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkGetPlayerPublicRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *BulkGetPlayerPublicRecordHandlerV1OK:
		return v, nil, nil, nil, nil, nil

	case *BulkGetPlayerPublicRecordHandlerV1BadRequest:
		return nil, v, nil, nil, nil, nil

	case *BulkGetPlayerPublicRecordHandlerV1Unauthorized:
		return nil, nil, v, nil, nil, nil

	case *BulkGetPlayerPublicRecordHandlerV1Forbidden:
		return nil, nil, nil, v, nil, nil

	case *BulkGetPlayerPublicRecordHandlerV1InternalServerError:
		return nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  BulkGetPlayerPublicRecordHandlerV1Short bulks get player public records

  &lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Permission&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;NAMESPACE:{namespace}:PUBLIC:CLOUDSAVE:RECORD [READ]&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Scope&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;social&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;

Bulk get other player&#39;s record that is public by userIds, max allowed 20 at a time. Only record with &lt;code&gt;isPublic=true&lt;/code&gt; that can be
retrieved using this endpoint.

*/
func (a *Client) BulkGetPlayerPublicRecordHandlerV1Short(params *BulkGetPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*BulkGetPlayerPublicRecordHandlerV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkGetPlayerPublicRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkGetPlayerPublicRecordHandlerV1",
		Method:             "POST",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/bulk/records/{key}/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkGetPlayerPublicRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *BulkGetPlayerPublicRecordHandlerV1OK:
		return v, nil
	case *BulkGetPlayerPublicRecordHandlerV1BadRequest:
		return nil, v
	case *BulkGetPlayerPublicRecordHandlerV1Unauthorized:
		return nil, v
	case *BulkGetPlayerPublicRecordHandlerV1Forbidden:
		return nil, v
	case *BulkGetPlayerPublicRecordHandlerV1InternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
Deprecated: 2022-08-10 - Use DeletePlayerRecordHandlerV1Short instead.

  DeletePlayerRecordHandlerV1 deletes player record

  &lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Permission&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [DELETE]&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Scope&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;social&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;

Delete player record by its key.
Only user that own the player record could delete it.

*/
func (a *Client) DeletePlayerRecordHandlerV1(params *DeletePlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*DeletePlayerRecordHandlerV1NoContent, *DeletePlayerRecordHandlerV1BadRequest, *DeletePlayerRecordHandlerV1Unauthorized, *DeletePlayerRecordHandlerV1Forbidden, *DeletePlayerRecordHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePlayerRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePlayerRecordHandlerV1",
		Method:             "DELETE",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePlayerRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *DeletePlayerRecordHandlerV1NoContent:
		return v, nil, nil, nil, nil, nil

	case *DeletePlayerRecordHandlerV1BadRequest:
		return nil, v, nil, nil, nil, nil

	case *DeletePlayerRecordHandlerV1Unauthorized:
		return nil, nil, v, nil, nil, nil

	case *DeletePlayerRecordHandlerV1Forbidden:
		return nil, nil, nil, v, nil, nil

	case *DeletePlayerRecordHandlerV1InternalServerError:
		return nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  DeletePlayerRecordHandlerV1Short deletes player record

  &lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Permission&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [DELETE]&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Scope&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;social&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;

Delete player record by its key.
Only user that own the player record could delete it.

*/
func (a *Client) DeletePlayerRecordHandlerV1Short(params *DeletePlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*DeletePlayerRecordHandlerV1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePlayerRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePlayerRecordHandlerV1",
		Method:             "DELETE",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePlayerRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *DeletePlayerRecordHandlerV1NoContent:
		return v, nil
	case *DeletePlayerRecordHandlerV1BadRequest:
		return nil, v
	case *DeletePlayerRecordHandlerV1Unauthorized:
		return nil, v
	case *DeletePlayerRecordHandlerV1Forbidden:
		return nil, v
	case *DeletePlayerRecordHandlerV1InternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
Deprecated: 2022-08-10 - Use GetPlayerPublicRecordHandlerV1Short instead.

  GetPlayerPublicRecordHandlerV1 gets player public record

  &lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Permission&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [READ]&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Scope&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;social&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;

Get other player&#39;s record that is public. Only record with &lt;code&gt;isPublic=true&lt;/code&gt; that can be
retrieved using this endpoint.

*/
func (a *Client) GetPlayerPublicRecordHandlerV1(params *GetPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetPlayerPublicRecordHandlerV1OK, *GetPlayerPublicRecordHandlerV1Unauthorized, *GetPlayerPublicRecordHandlerV1NotFound, *GetPlayerPublicRecordHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlayerPublicRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlayerPublicRecordHandlerV1",
		Method:             "GET",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlayerPublicRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetPlayerPublicRecordHandlerV1OK:
		return v, nil, nil, nil, nil

	case *GetPlayerPublicRecordHandlerV1Unauthorized:
		return nil, v, nil, nil, nil

	case *GetPlayerPublicRecordHandlerV1NotFound:
		return nil, nil, v, nil, nil

	case *GetPlayerPublicRecordHandlerV1InternalServerError:
		return nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  GetPlayerPublicRecordHandlerV1Short gets player public record

  &lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Permission&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [READ]&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Scope&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;social&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;

Get other player&#39;s record that is public. Only record with &lt;code&gt;isPublic=true&lt;/code&gt; that can be
retrieved using this endpoint.

*/
func (a *Client) GetPlayerPublicRecordHandlerV1Short(params *GetPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetPlayerPublicRecordHandlerV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlayerPublicRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlayerPublicRecordHandlerV1",
		Method:             "GET",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlayerPublicRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *GetPlayerPublicRecordHandlerV1OK:
		return v, nil
	case *GetPlayerPublicRecordHandlerV1Unauthorized:
		return nil, v
	case *GetPlayerPublicRecordHandlerV1NotFound:
		return nil, v
	case *GetPlayerPublicRecordHandlerV1InternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
Deprecated: 2022-08-10 - Use GetPlayerRecordHandlerV1Short instead.

  GetPlayerRecordHandlerV1 gets player record

  &lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Permission&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [READ]&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Scope&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;social&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;

Get player record by its key.
&lt;b&gt;Private Record:&lt;/b&gt; Only user that own the player record could retrieve it.
*/
func (a *Client) GetPlayerRecordHandlerV1(params *GetPlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetPlayerRecordHandlerV1OK, *GetPlayerRecordHandlerV1Unauthorized, *GetPlayerRecordHandlerV1Forbidden, *GetPlayerRecordHandlerV1NotFound, *GetPlayerRecordHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlayerRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlayerRecordHandlerV1",
		Method:             "GET",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlayerRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetPlayerRecordHandlerV1OK:
		return v, nil, nil, nil, nil, nil

	case *GetPlayerRecordHandlerV1Unauthorized:
		return nil, v, nil, nil, nil, nil

	case *GetPlayerRecordHandlerV1Forbidden:
		return nil, nil, v, nil, nil, nil

	case *GetPlayerRecordHandlerV1NotFound:
		return nil, nil, nil, v, nil, nil

	case *GetPlayerRecordHandlerV1InternalServerError:
		return nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  GetPlayerRecordHandlerV1Short gets player record

  &lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Permission&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [READ]&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Scope&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;social&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;

Get player record by its key.
&lt;b&gt;Private Record:&lt;/b&gt; Only user that own the player record could retrieve it.
*/
func (a *Client) GetPlayerRecordHandlerV1Short(params *GetPlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetPlayerRecordHandlerV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlayerRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlayerRecordHandlerV1",
		Method:             "GET",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlayerRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *GetPlayerRecordHandlerV1OK:
		return v, nil
	case *GetPlayerRecordHandlerV1Unauthorized:
		return nil, v
	case *GetPlayerRecordHandlerV1Forbidden:
		return nil, v
	case *GetPlayerRecordHandlerV1NotFound:
		return nil, v
	case *GetPlayerRecordHandlerV1InternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
Deprecated: 2022-08-10 - Use GetPlayerRecordsBulkHandlerV1Short instead.

  GetPlayerRecordsBulkHandlerV1 gets player records bulk

  Required valid user token

Required scope: &lt;code&gt;social&lt;/code&gt;

Retrieve player record key and payload in bulk under given namespace.

Maximum bulk key limit per request 20
*/
func (a *Client) GetPlayerRecordsBulkHandlerV1(params *GetPlayerRecordsBulkHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetPlayerRecordsBulkHandlerV1OK, *GetPlayerRecordsBulkHandlerV1BadRequest, *GetPlayerRecordsBulkHandlerV1Unauthorized, *GetPlayerRecordsBulkHandlerV1Forbidden, *GetPlayerRecordsBulkHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlayerRecordsBulkHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlayerRecordsBulkHandlerV1",
		Method:             "POST",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/me/records/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlayerRecordsBulkHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *GetPlayerRecordsBulkHandlerV1OK:
		return v, nil, nil, nil, nil, nil

	case *GetPlayerRecordsBulkHandlerV1BadRequest:
		return nil, v, nil, nil, nil, nil

	case *GetPlayerRecordsBulkHandlerV1Unauthorized:
		return nil, nil, v, nil, nil, nil

	case *GetPlayerRecordsBulkHandlerV1Forbidden:
		return nil, nil, nil, v, nil, nil

	case *GetPlayerRecordsBulkHandlerV1InternalServerError:
		return nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  GetPlayerRecordsBulkHandlerV1Short gets player records bulk

  Required valid user token

Required scope: &lt;code&gt;social&lt;/code&gt;

Retrieve player record key and payload in bulk under given namespace.

Maximum bulk key limit per request 20
*/
func (a *Client) GetPlayerRecordsBulkHandlerV1Short(params *GetPlayerRecordsBulkHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetPlayerRecordsBulkHandlerV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlayerRecordsBulkHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlayerRecordsBulkHandlerV1",
		Method:             "POST",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/me/records/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlayerRecordsBulkHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *GetPlayerRecordsBulkHandlerV1OK:
		return v, nil
	case *GetPlayerRecordsBulkHandlerV1BadRequest:
		return nil, v
	case *GetPlayerRecordsBulkHandlerV1Unauthorized:
		return nil, v
	case *GetPlayerRecordsBulkHandlerV1Forbidden:
		return nil, v
	case *GetPlayerRecordsBulkHandlerV1InternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
Deprecated: 2022-08-10 - Use PostPlayerPublicRecordHandlerV1Short instead.

  PostPlayerPublicRecordHandlerV1 creates or append player public record

  &lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Permission&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [WRITE]&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Scope&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;social&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;

&lt;h2&gt;Description&lt;/h2&gt;

This endpoints will create new player public record or append the existing player public record.

&lt;b&gt;Append example:&lt;/b&gt;

Example 1
- 	Existing JSON:
	&lt;pre&gt;{ &#34;data1&#34;: &#34;value&#34; }&lt;/pre&gt;
- 	New JSON:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;
-	Result:
	&lt;pre&gt;{ &#34;data1&#34;: &#34;value&#34;, &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;

Example 2
-	Existing JSON:
	&lt;pre&gt;{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34; }&lt;/pre&gt;
-	New JSON:
	&lt;pre&gt;{ &#34;data1&#34;: { &#34;data3&#34;: &#34;new value&#34; }&lt;/pre&gt;
-	Result:
	&lt;pre&gt;{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34;, &#34;data3&#34;: &#34;new value&#34; }&lt;/pre&gt;


&lt;h2&gt;Restriction &lt;/h2&gt;
This is the restriction of Key Naming for the record:
1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name
-	&lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt;
2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names
-	&lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
3. Cannot use empty string in key names
-	&lt;pre&gt;{ &#34;&#34;: &#34;value&#34; }&lt;/pre&gt;


&lt;h2&gt;Reserved Word&lt;/h2&gt;

Reserved Word List: &lt;b&gt;__META&lt;/b&gt;

The reserved word cannot be used as a field in record value,
If still defining the field when creating or updating the record, it will be ignored.


&lt;h2&gt;Warning: This endpoint is going to deprecate&lt;/h2&gt;

This endpoint is going to deprecate in the future please don&#39;t use it.

For alternative, please use these endpoints:
- &lt;b&gt;POST /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt; and utilizing &lt;b&gt;__META&lt;/b&gt; functionality
- &lt;b&gt;PUT /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt; and utilizing &lt;b&gt;__META&lt;/b&gt; functionality
- &lt;b&gt;DELETE /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt;

*/
func (a *Client) PostPlayerPublicRecordHandlerV1(params *PostPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PostPlayerPublicRecordHandlerV1Created, *PostPlayerPublicRecordHandlerV1BadRequest, *PostPlayerPublicRecordHandlerV1Unauthorized, *PostPlayerPublicRecordHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPlayerPublicRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPlayerPublicRecordHandlerV1",
		Method:             "POST",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPlayerPublicRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *PostPlayerPublicRecordHandlerV1Created:
		return v, nil, nil, nil, nil

	case *PostPlayerPublicRecordHandlerV1BadRequest:
		return nil, v, nil, nil, nil

	case *PostPlayerPublicRecordHandlerV1Unauthorized:
		return nil, nil, v, nil, nil

	case *PostPlayerPublicRecordHandlerV1InternalServerError:
		return nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PostPlayerPublicRecordHandlerV1Short creates or append player public record

  &lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Permission&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [WRITE]&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Scope&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;social&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;

&lt;h2&gt;Description&lt;/h2&gt;

This endpoints will create new player public record or append the existing player public record.

&lt;b&gt;Append example:&lt;/b&gt;

Example 1
- 	Existing JSON:
	&lt;pre&gt;{ &#34;data1&#34;: &#34;value&#34; }&lt;/pre&gt;
- 	New JSON:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;
-	Result:
	&lt;pre&gt;{ &#34;data1&#34;: &#34;value&#34;, &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;

Example 2
-	Existing JSON:
	&lt;pre&gt;{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34; }&lt;/pre&gt;
-	New JSON:
	&lt;pre&gt;{ &#34;data1&#34;: { &#34;data3&#34;: &#34;new value&#34; }&lt;/pre&gt;
-	Result:
	&lt;pre&gt;{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34;, &#34;data3&#34;: &#34;new value&#34; }&lt;/pre&gt;


&lt;h2&gt;Restriction &lt;/h2&gt;
This is the restriction of Key Naming for the record:
1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name
-	&lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt;
2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names
-	&lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
3. Cannot use empty string in key names
-	&lt;pre&gt;{ &#34;&#34;: &#34;value&#34; }&lt;/pre&gt;


&lt;h2&gt;Reserved Word&lt;/h2&gt;

Reserved Word List: &lt;b&gt;__META&lt;/b&gt;

The reserved word cannot be used as a field in record value,
If still defining the field when creating or updating the record, it will be ignored.


&lt;h2&gt;Warning: This endpoint is going to deprecate&lt;/h2&gt;

This endpoint is going to deprecate in the future please don&#39;t use it.

For alternative, please use these endpoints:
- &lt;b&gt;POST /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt; and utilizing &lt;b&gt;__META&lt;/b&gt; functionality
- &lt;b&gt;PUT /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt; and utilizing &lt;b&gt;__META&lt;/b&gt; functionality
- &lt;b&gt;DELETE /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt;

*/
func (a *Client) PostPlayerPublicRecordHandlerV1Short(params *PostPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PostPlayerPublicRecordHandlerV1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPlayerPublicRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPlayerPublicRecordHandlerV1",
		Method:             "POST",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPlayerPublicRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *PostPlayerPublicRecordHandlerV1Created:
		return v, nil
	case *PostPlayerPublicRecordHandlerV1BadRequest:
		return nil, v
	case *PostPlayerPublicRecordHandlerV1Unauthorized:
		return nil, v
	case *PostPlayerPublicRecordHandlerV1InternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
Deprecated: 2022-08-10 - Use PostPlayerRecordHandlerV1Short instead.

  PostPlayerRecordHandlerV1 creates or append player record

  Required permission: &lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [CREATE]&lt;/code&gt;
Required scope: &lt;code&gt;social&lt;/code&gt;

&lt;h2&gt;Description&lt;/h2&gt;

This endpoints will create new player record or append the existing player record.
Only user that own the existing player record could modify.

&lt;b&gt;Append example:&lt;/b&gt;

Example 1
- 	Existing JSON:
	&lt;pre&gt;{ &#34;data1&#34;: &#34;value&#34; }&lt;/pre&gt;
- 	New JSON:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;
-	Result:
	&lt;pre&gt;{ &#34;data1&#34;: &#34;value&#34;, &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;

Example 2
-	Existing JSON:
	&lt;pre&gt;{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34; }&lt;/pre&gt;
-	New JSON:
	&lt;pre&gt;{ &#34;data1&#34;: { &#34;data3&#34;: &#34;new value&#34; }&lt;/pre&gt;
-	Result:
	&lt;pre&gt;{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34;, &#34;data3&#34;: &#34;new value&#34; }&lt;/pre&gt;


&lt;h2&gt;Restriction &lt;/h2&gt;
This is the restriction of Key Naming for the record:
1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name
-	&lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt;
2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names
-	&lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
3. Cannot use empty string in key names
-	&lt;pre&gt;{ &#34;&#34;: &#34;value&#34; }&lt;/pre&gt;


&lt;h2&gt;Record Metadata&lt;/h2&gt;

Metadata allows user to define the behaviour of the record.
Metadata can be defined in request body with field name &lt;b&gt;__META&lt;/b&gt;.
When creating record, if &lt;b&gt;__META&lt;/b&gt; field is not defined, the metadata value will use the default value.
When updating record, if &lt;b&gt;__META&lt;/b&gt; field is not defined, the existing metadata value will stay as is.

&lt;b&gt;Metadata List:&lt;/b&gt;
1.	is_public (default: false, type: bool)
	Indicate whether the player record is a public record or not.

&lt;b&gt;Request Body Example:&lt;/b&gt;
&lt;pre&gt;
	{
		&#34;__META&#34;: {
			&#34;is_public&#34;: true
		}
		...
	}
&lt;/pre&gt;

*/
func (a *Client) PostPlayerRecordHandlerV1(params *PostPlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PostPlayerRecordHandlerV1Created, *PostPlayerRecordHandlerV1BadRequest, *PostPlayerRecordHandlerV1Unauthorized, *PostPlayerRecordHandlerV1Forbidden, *PostPlayerRecordHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPlayerRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPlayerRecordHandlerV1",
		Method:             "POST",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPlayerRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *PostPlayerRecordHandlerV1Created:
		return v, nil, nil, nil, nil, nil

	case *PostPlayerRecordHandlerV1BadRequest:
		return nil, v, nil, nil, nil, nil

	case *PostPlayerRecordHandlerV1Unauthorized:
		return nil, nil, v, nil, nil, nil

	case *PostPlayerRecordHandlerV1Forbidden:
		return nil, nil, nil, v, nil, nil

	case *PostPlayerRecordHandlerV1InternalServerError:
		return nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PostPlayerRecordHandlerV1Short creates or append player record

  Required permission: &lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [CREATE]&lt;/code&gt;
Required scope: &lt;code&gt;social&lt;/code&gt;

&lt;h2&gt;Description&lt;/h2&gt;

This endpoints will create new player record or append the existing player record.
Only user that own the existing player record could modify.

&lt;b&gt;Append example:&lt;/b&gt;

Example 1
- 	Existing JSON:
	&lt;pre&gt;{ &#34;data1&#34;: &#34;value&#34; }&lt;/pre&gt;
- 	New JSON:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;
-	Result:
	&lt;pre&gt;{ &#34;data1&#34;: &#34;value&#34;, &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;

Example 2
-	Existing JSON:
	&lt;pre&gt;{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34; }&lt;/pre&gt;
-	New JSON:
	&lt;pre&gt;{ &#34;data1&#34;: { &#34;data3&#34;: &#34;new value&#34; }&lt;/pre&gt;
-	Result:
	&lt;pre&gt;{ &#34;data1&#34;: { &#34;data2&#34;: &#34;value&#34;, &#34;data3&#34;: &#34;new value&#34; }&lt;/pre&gt;


&lt;h2&gt;Restriction &lt;/h2&gt;
This is the restriction of Key Naming for the record:
1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name
-	&lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt;
2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names
-	&lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
3. Cannot use empty string in key names
-	&lt;pre&gt;{ &#34;&#34;: &#34;value&#34; }&lt;/pre&gt;


&lt;h2&gt;Record Metadata&lt;/h2&gt;

Metadata allows user to define the behaviour of the record.
Metadata can be defined in request body with field name &lt;b&gt;__META&lt;/b&gt;.
When creating record, if &lt;b&gt;__META&lt;/b&gt; field is not defined, the metadata value will use the default value.
When updating record, if &lt;b&gt;__META&lt;/b&gt; field is not defined, the existing metadata value will stay as is.

&lt;b&gt;Metadata List:&lt;/b&gt;
1.	is_public (default: false, type: bool)
	Indicate whether the player record is a public record or not.

&lt;b&gt;Request Body Example:&lt;/b&gt;
&lt;pre&gt;
	{
		&#34;__META&#34;: {
			&#34;is_public&#34;: true
		}
		...
	}
&lt;/pre&gt;

*/
func (a *Client) PostPlayerRecordHandlerV1Short(params *PostPlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PostPlayerRecordHandlerV1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPlayerRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPlayerRecordHandlerV1",
		Method:             "POST",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPlayerRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *PostPlayerRecordHandlerV1Created:
		return v, nil
	case *PostPlayerRecordHandlerV1BadRequest:
		return nil, v
	case *PostPlayerRecordHandlerV1Unauthorized:
		return nil, v
	case *PostPlayerRecordHandlerV1Forbidden:
		return nil, v
	case *PostPlayerRecordHandlerV1InternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
Deprecated: 2022-08-10 - Use PublicDeletePlayerPublicRecordHandlerV1Short instead.

  PublicDeletePlayerPublicRecordHandlerV1 deletes player public record

  Required valid user authorization
Required scope: &lt;code&gt;social&lt;/code&gt;

Delete player public record.


&lt;h2&gt;Warning: This endpoint is going to deprecate&lt;/h2&gt;

This endpoint is going to deprecate in the future please don&#39;t use it.

For alternative, please use these endpoints:
- &lt;b&gt;POST /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt; and utilizing &lt;b&gt;__META&lt;/b&gt; functionality
- &lt;b&gt;PUT /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt; and utilizing &lt;b&gt;__META&lt;/b&gt; functionality
- &lt;b&gt;DELETE /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt;

*/
func (a *Client) PublicDeletePlayerPublicRecordHandlerV1(params *PublicDeletePlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PublicDeletePlayerPublicRecordHandlerV1NoContent, *PublicDeletePlayerPublicRecordHandlerV1BadRequest, *PublicDeletePlayerPublicRecordHandlerV1Unauthorized, *PublicDeletePlayerPublicRecordHandlerV1NotFound, *PublicDeletePlayerPublicRecordHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicDeletePlayerPublicRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "publicDeletePlayerPublicRecordHandlerV1",
		Method:             "DELETE",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/me/records/{key}/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicDeletePlayerPublicRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *PublicDeletePlayerPublicRecordHandlerV1NoContent:
		return v, nil, nil, nil, nil, nil

	case *PublicDeletePlayerPublicRecordHandlerV1BadRequest:
		return nil, v, nil, nil, nil, nil

	case *PublicDeletePlayerPublicRecordHandlerV1Unauthorized:
		return nil, nil, v, nil, nil, nil

	case *PublicDeletePlayerPublicRecordHandlerV1NotFound:
		return nil, nil, nil, v, nil, nil

	case *PublicDeletePlayerPublicRecordHandlerV1InternalServerError:
		return nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PublicDeletePlayerPublicRecordHandlerV1Short deletes player public record

  Required valid user authorization
Required scope: &lt;code&gt;social&lt;/code&gt;

Delete player public record.


&lt;h2&gt;Warning: This endpoint is going to deprecate&lt;/h2&gt;

This endpoint is going to deprecate in the future please don&#39;t use it.

For alternative, please use these endpoints:
- &lt;b&gt;POST /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt; and utilizing &lt;b&gt;__META&lt;/b&gt; functionality
- &lt;b&gt;PUT /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt; and utilizing &lt;b&gt;__META&lt;/b&gt; functionality
- &lt;b&gt;DELETE /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt;

*/
func (a *Client) PublicDeletePlayerPublicRecordHandlerV1Short(params *PublicDeletePlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PublicDeletePlayerPublicRecordHandlerV1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicDeletePlayerPublicRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "publicDeletePlayerPublicRecordHandlerV1",
		Method:             "DELETE",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/me/records/{key}/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicDeletePlayerPublicRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *PublicDeletePlayerPublicRecordHandlerV1NoContent:
		return v, nil
	case *PublicDeletePlayerPublicRecordHandlerV1BadRequest:
		return nil, v
	case *PublicDeletePlayerPublicRecordHandlerV1Unauthorized:
		return nil, v
	case *PublicDeletePlayerPublicRecordHandlerV1NotFound:
		return nil, v
	case *PublicDeletePlayerPublicRecordHandlerV1InternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
Deprecated: 2022-08-10 - Use PutPlayerPublicRecordHandlerV1Short instead.

  PutPlayerPublicRecordHandlerV1 creates or replace player public record

  &lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Permission&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [UPDATE]&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Scope&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;social&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;

&lt;h2&gt;Description&lt;/h2&gt;

This endpoints will create new player public record or replace the existing player public record.

&lt;b&gt;Replace behaviour:&lt;/b&gt;
The existing value will be replaced completely with the new value.

Example
- 	Existing JSON:
	&lt;pre&gt;{ &#34;data1&#34;: &#34;value&#34; }&lt;/pre&gt;
- 	New JSON:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;
-	Result:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;


&lt;h2&gt;Restriction &lt;/h2&gt;
This is the restriction of Key Naming for the record:
1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name
-	&lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt;
2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names
-	&lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
3. Cannot use empty string in key names
-	&lt;pre&gt;{ &#34;&#34;: &#34;value&#34; }&lt;/pre&gt;


&lt;h2&gt;Reserved Word&lt;/h2&gt;

Reserved Word List: &lt;b&gt;__META&lt;/b&gt;

The reserved word cannot be used as a field in record value,
If still defining the field when creating or updating the record, it will be ignored.


&lt;h2&gt;Warning: This endpoint is going to deprecate&lt;/h2&gt;

This endpoint is going to deprecate in the future please don&#39;t use it.

For alternative, please use these endpoints:
- &lt;b&gt;POST /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt; and utilizing &lt;b&gt;__META&lt;/b&gt; functionality
- &lt;b&gt;PUT /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt; and utilizing &lt;b&gt;__META&lt;/b&gt; functionality
- &lt;b&gt;DELETE /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt;

*/
func (a *Client) PutPlayerPublicRecordHandlerV1(params *PutPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PutPlayerPublicRecordHandlerV1OK, *PutPlayerPublicRecordHandlerV1BadRequest, *PutPlayerPublicRecordHandlerV1Unauthorized, *PutPlayerPublicRecordHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPlayerPublicRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPlayerPublicRecordHandlerV1",
		Method:             "PUT",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPlayerPublicRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *PutPlayerPublicRecordHandlerV1OK:
		return v, nil, nil, nil, nil

	case *PutPlayerPublicRecordHandlerV1BadRequest:
		return nil, v, nil, nil, nil

	case *PutPlayerPublicRecordHandlerV1Unauthorized:
		return nil, nil, v, nil, nil

	case *PutPlayerPublicRecordHandlerV1InternalServerError:
		return nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PutPlayerPublicRecordHandlerV1Short creates or replace player public record

  &lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Permission&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:PUBLIC:CLOUDSAVE:RECORD [UPDATE]&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Required Scope&lt;/td&gt;
		&lt;td&gt;&lt;code&gt;social&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;

&lt;h2&gt;Description&lt;/h2&gt;

This endpoints will create new player public record or replace the existing player public record.

&lt;b&gt;Replace behaviour:&lt;/b&gt;
The existing value will be replaced completely with the new value.

Example
- 	Existing JSON:
	&lt;pre&gt;{ &#34;data1&#34;: &#34;value&#34; }&lt;/pre&gt;
- 	New JSON:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;
-	Result:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;


&lt;h2&gt;Restriction &lt;/h2&gt;
This is the restriction of Key Naming for the record:
1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name
-	&lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt;
2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names
-	&lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
3. Cannot use empty string in key names
-	&lt;pre&gt;{ &#34;&#34;: &#34;value&#34; }&lt;/pre&gt;


&lt;h2&gt;Reserved Word&lt;/h2&gt;

Reserved Word List: &lt;b&gt;__META&lt;/b&gt;

The reserved word cannot be used as a field in record value,
If still defining the field when creating or updating the record, it will be ignored.


&lt;h2&gt;Warning: This endpoint is going to deprecate&lt;/h2&gt;

This endpoint is going to deprecate in the future please don&#39;t use it.

For alternative, please use these endpoints:
- &lt;b&gt;POST /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt; and utilizing &lt;b&gt;__META&lt;/b&gt; functionality
- &lt;b&gt;PUT /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt; and utilizing &lt;b&gt;__META&lt;/b&gt; functionality
- &lt;b&gt;DELETE /cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}&lt;/b&gt;

*/
func (a *Client) PutPlayerPublicRecordHandlerV1Short(params *PutPlayerPublicRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PutPlayerPublicRecordHandlerV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPlayerPublicRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPlayerPublicRecordHandlerV1",
		Method:             "PUT",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPlayerPublicRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *PutPlayerPublicRecordHandlerV1OK:
		return v, nil
	case *PutPlayerPublicRecordHandlerV1BadRequest:
		return nil, v
	case *PutPlayerPublicRecordHandlerV1Unauthorized:
		return nil, v
	case *PutPlayerPublicRecordHandlerV1InternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
Deprecated: 2022-08-10 - Use PutPlayerRecordHandlerV1Short instead.

  PutPlayerRecordHandlerV1 creates or replace player record

  Required permission: &lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [UPDATE]&lt;/code&gt;
Required scope: &lt;code&gt;social&lt;/code&gt;

&lt;h2&gt;Description&lt;/h2&gt;

This endpoints will create new player record or replace the existing player record.
Only user that own the existing player record could modify it.

&lt;b&gt;Replace behaviour:&lt;/b&gt;
The existing value will be replaced completely with the new value.

Example
- 	Existing JSON:
	&lt;pre&gt;{ &#34;data1&#34;: &#34;value&#34; }&lt;/pre&gt;
- 	New JSON:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;
-	Result:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;


&lt;h2&gt;Restriction &lt;/h2&gt;
This is the restriction of Key Naming for the record:
1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name
-	&lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt;
2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names
-	&lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
3. Cannot use empty string in key names
-	&lt;pre&gt;{ &#34;&#34;: &#34;value&#34; }&lt;/pre&gt;


&lt;h2&gt;Record Metadata&lt;/h2&gt;

Metadata allows user to define the behaviour of the record.
Metadata can be defined in request body with field name &lt;b&gt;__META&lt;/b&gt;.
When creating record, if &lt;b&gt;__META&lt;/b&gt; field is not defined, the metadata value will use the default value.
When updating record, if &lt;b&gt;__META&lt;/b&gt; field is not defined, the existing metadata value will stay as is.

&lt;b&gt;Metadata List:&lt;/b&gt;
1.	is_public (default: false, type: bool)
	Indicate whether the player record is a public record or not.

&lt;b&gt;Request Body Example:&lt;/b&gt;
&lt;pre&gt;
	{
		&#34;__META&#34;: {
			&#34;is_public&#34;: true
		}
		...
	}
&lt;/pre&gt;

*/
func (a *Client) PutPlayerRecordHandlerV1(params *PutPlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PutPlayerRecordHandlerV1OK, *PutPlayerRecordHandlerV1BadRequest, *PutPlayerRecordHandlerV1Unauthorized, *PutPlayerRecordHandlerV1Forbidden, *PutPlayerRecordHandlerV1InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPlayerRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPlayerRecordHandlerV1",
		Method:             "PUT",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPlayerRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *PutPlayerRecordHandlerV1OK:
		return v, nil, nil, nil, nil, nil

	case *PutPlayerRecordHandlerV1BadRequest:
		return nil, v, nil, nil, nil, nil

	case *PutPlayerRecordHandlerV1Unauthorized:
		return nil, nil, v, nil, nil, nil

	case *PutPlayerRecordHandlerV1Forbidden:
		return nil, nil, nil, v, nil, nil

	case *PutPlayerRecordHandlerV1InternalServerError:
		return nil, nil, nil, nil, v, nil

	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  PutPlayerRecordHandlerV1Short creates or replace player record

  Required permission: &lt;code&gt;NAMESPACE:{namespace}:USER:{userId}:CLOUDSAVE:RECORD [UPDATE]&lt;/code&gt;
Required scope: &lt;code&gt;social&lt;/code&gt;

&lt;h2&gt;Description&lt;/h2&gt;

This endpoints will create new player record or replace the existing player record.
Only user that own the existing player record could modify it.

&lt;b&gt;Replace behaviour:&lt;/b&gt;
The existing value will be replaced completely with the new value.

Example
- 	Existing JSON:
	&lt;pre&gt;{ &#34;data1&#34;: &#34;value&#34; }&lt;/pre&gt;
- 	New JSON:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;
-	Result:
	&lt;pre&gt;{ &#34;data2&#34;: &#34;new value&#34; }&lt;/pre&gt;


&lt;h2&gt;Restriction &lt;/h2&gt;
This is the restriction of Key Naming for the record:
1. Cannot use &lt;b&gt;&#34;.&#34;&lt;/b&gt; as the key name
-	&lt;pre&gt;{ &#34;data.2&#34;: &#34;value&#34; }&lt;/pre&gt;
2. Cannot use &lt;b&gt;&#34;$&#34;&lt;/b&gt; as the prefix in key names
-	&lt;pre&gt;{ &#34;$data&#34;: &#34;value&#34; }&lt;/pre&gt;
3. Cannot use empty string in key names
-	&lt;pre&gt;{ &#34;&#34;: &#34;value&#34; }&lt;/pre&gt;


&lt;h2&gt;Record Metadata&lt;/h2&gt;

Metadata allows user to define the behaviour of the record.
Metadata can be defined in request body with field name &lt;b&gt;__META&lt;/b&gt;.
When creating record, if &lt;b&gt;__META&lt;/b&gt; field is not defined, the metadata value will use the default value.
When updating record, if &lt;b&gt;__META&lt;/b&gt; field is not defined, the existing metadata value will stay as is.

&lt;b&gt;Metadata List:&lt;/b&gt;
1.	is_public (default: false, type: bool)
	Indicate whether the player record is a public record or not.

&lt;b&gt;Request Body Example:&lt;/b&gt;
&lt;pre&gt;
	{
		&#34;__META&#34;: {
			&#34;is_public&#34;: true
		}
		...
	}
&lt;/pre&gt;

*/
func (a *Client) PutPlayerRecordHandlerV1Short(params *PutPlayerRecordHandlerV1Params, authInfo runtime.ClientAuthInfoWriter) (*PutPlayerRecordHandlerV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPlayerRecordHandlerV1Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	if params.RetryPolicy != nil {
		params.SetHTTPClientTransport(params.RetryPolicy)
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPlayerRecordHandlerV1",
		Method:             "PUT",
		PathPattern:        "/cloudsave/v1/namespaces/{namespace}/users/{userId}/records/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPlayerRecordHandlerV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}

	switch v := result.(type) {

	case *PutPlayerRecordHandlerV1OK:
		return v, nil
	case *PutPlayerRecordHandlerV1BadRequest:
		return nil, v
	case *PutPlayerRecordHandlerV1Unauthorized:
		return nil, v
	case *PutPlayerRecordHandlerV1Forbidden:
		return nil, v
	case *PutPlayerRecordHandlerV1InternalServerError:
		return nil, v

	default:
		return nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
