// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package friends

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUserGetFriendshipStatusParams creates a new UserGetFriendshipStatusParams object
// with the default values initialized.
func NewUserGetFriendshipStatusParams() *UserGetFriendshipStatusParams {
	var ()
	return &UserGetFriendshipStatusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUserGetFriendshipStatusParamsWithTimeout creates a new UserGetFriendshipStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUserGetFriendshipStatusParamsWithTimeout(timeout time.Duration) *UserGetFriendshipStatusParams {
	var ()
	return &UserGetFriendshipStatusParams{

		timeout: timeout,
	}
}

// NewUserGetFriendshipStatusParamsWithContext creates a new UserGetFriendshipStatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewUserGetFriendshipStatusParamsWithContext(ctx context.Context) *UserGetFriendshipStatusParams {
	var ()
	return &UserGetFriendshipStatusParams{

		Context: ctx,
	}
}

// NewUserGetFriendshipStatusParamsWithHTTPClient creates a new UserGetFriendshipStatusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUserGetFriendshipStatusParamsWithHTTPClient(client *http.Client) *UserGetFriendshipStatusParams {
	var ()
	return &UserGetFriendshipStatusParams{
		HTTPClient: client,
	}
}

/*UserGetFriendshipStatusParams contains all the parameters to send to the API endpoint
for the user get friendship status operation typically these are written to a http.Request
*/
type UserGetFriendshipStatusParams struct {

	/*FriendID
	  Friend ID

	*/
	FriendID string
	/*Namespace
	  namespace

	*/
	Namespace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the user get friendship status params
func (o *UserGetFriendshipStatusParams) WithTimeout(timeout time.Duration) *UserGetFriendshipStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user get friendship status params
func (o *UserGetFriendshipStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user get friendship status params
func (o *UserGetFriendshipStatusParams) WithContext(ctx context.Context) *UserGetFriendshipStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user get friendship status params
func (o *UserGetFriendshipStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user get friendship status params
func (o *UserGetFriendshipStatusParams) WithHTTPClient(client *http.Client) *UserGetFriendshipStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user get friendship status params
func (o *UserGetFriendshipStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFriendID adds the friendID to the user get friendship status params
func (o *UserGetFriendshipStatusParams) WithFriendID(friendID string) *UserGetFriendshipStatusParams {
	o.SetFriendID(friendID)
	return o
}

// SetFriendID adds the friendId to the user get friendship status params
func (o *UserGetFriendshipStatusParams) SetFriendID(friendID string) {
	o.FriendID = friendID
}

// WithNamespace adds the namespace to the user get friendship status params
func (o *UserGetFriendshipStatusParams) WithNamespace(namespace string) *UserGetFriendshipStatusParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the user get friendship status params
func (o *UserGetFriendshipStatusParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WriteToRequest writes these params to a swagger request
func (o *UserGetFriendshipStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param friendId
	if err := r.SetPathParam("friendId", o.FriendID); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
