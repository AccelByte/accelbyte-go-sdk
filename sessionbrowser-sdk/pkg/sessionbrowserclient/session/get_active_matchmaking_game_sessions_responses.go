// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/sessionbrowser-sdk/pkg/sessionbrowserclientmodels"
)

// GetActiveMatchmakingGameSessionsReader is a Reader for the GetActiveMatchmakingGameSessions structure.
type GetActiveMatchmakingGameSessionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetActiveMatchmakingGameSessionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetActiveMatchmakingGameSessionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetActiveMatchmakingGameSessionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetActiveMatchmakingGameSessionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /sessionbrowser/admin/namespaces/{namespace}/gamesession/active/matchmaking-game returns an error %d: %s", response.Code(), string(data))
	}
}

// NewGetActiveMatchmakingGameSessionsOK creates a GetActiveMatchmakingGameSessionsOK with default headers values
func NewGetActiveMatchmakingGameSessionsOK() *GetActiveMatchmakingGameSessionsOK {
	return &GetActiveMatchmakingGameSessionsOK{}
}

/*GetActiveMatchmakingGameSessionsOK handles this case with default header values.

  matchmaking game session list
*/
type GetActiveMatchmakingGameSessionsOK struct {
	Payload *sessionbrowserclientmodels.ModelsActiveMatchmakingGameResponse
}

func (o *GetActiveMatchmakingGameSessionsOK) Error() string {
	return fmt.Sprintf("[GET /sessionbrowser/admin/namespaces/{namespace}/gamesession/active/matchmaking-game][%d] getActiveMatchmakingGameSessionsOK  %+v", 200, o.Payload)
}

func (o *GetActiveMatchmakingGameSessionsOK) GetPayload() *sessionbrowserclientmodels.ModelsActiveMatchmakingGameResponse {
	return o.Payload
}

func (o *GetActiveMatchmakingGameSessionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(sessionbrowserclientmodels.ModelsActiveMatchmakingGameResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetActiveMatchmakingGameSessionsBadRequest creates a GetActiveMatchmakingGameSessionsBadRequest with default headers values
func NewGetActiveMatchmakingGameSessionsBadRequest() *GetActiveMatchmakingGameSessionsBadRequest {
	return &GetActiveMatchmakingGameSessionsBadRequest{}
}

/*GetActiveMatchmakingGameSessionsBadRequest handles this case with default header values.

  malformed request
*/
type GetActiveMatchmakingGameSessionsBadRequest struct {
	Payload *sessionbrowserclientmodels.RestapiErrorResponseV2
}

func (o *GetActiveMatchmakingGameSessionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /sessionbrowser/admin/namespaces/{namespace}/gamesession/active/matchmaking-game][%d] getActiveMatchmakingGameSessionsBadRequest  %+v", 400, o.Payload)
}

func (o *GetActiveMatchmakingGameSessionsBadRequest) GetPayload() *sessionbrowserclientmodels.RestapiErrorResponseV2 {
	return o.Payload
}

func (o *GetActiveMatchmakingGameSessionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(sessionbrowserclientmodels.RestapiErrorResponseV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetActiveMatchmakingGameSessionsInternalServerError creates a GetActiveMatchmakingGameSessionsInternalServerError with default headers values
func NewGetActiveMatchmakingGameSessionsInternalServerError() *GetActiveMatchmakingGameSessionsInternalServerError {
	return &GetActiveMatchmakingGameSessionsInternalServerError{}
}

/*GetActiveMatchmakingGameSessionsInternalServerError handles this case with default header values.

  Internal Server Error
*/
type GetActiveMatchmakingGameSessionsInternalServerError struct {
	Payload *sessionbrowserclientmodels.RestapiErrorResponseV2
}

func (o *GetActiveMatchmakingGameSessionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sessionbrowser/admin/namespaces/{namespace}/gamesession/active/matchmaking-game][%d] getActiveMatchmakingGameSessionsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetActiveMatchmakingGameSessionsInternalServerError) GetPayload() *sessionbrowserclientmodels.RestapiErrorResponseV2 {
	return o.Payload
}

func (o *GetActiveMatchmakingGameSessionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(sessionbrowserclientmodels.RestapiErrorResponseV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
