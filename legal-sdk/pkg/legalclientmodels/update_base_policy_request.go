// Code generated by go-swagger; DO NOT EDIT.

package legalclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateBasePolicyRequest update base policy request
//
// swagger:model UpdateBasePolicyRequest
type UpdateBasePolicyRequest struct {

	// affected client ids
	// Unique: true
	AffectedClientIds []string `json:"affectedClientIds"`

	// affected countries
	AffectedCountries []string `json:"affectedCountries"`

	// base policy name
	BasePolicyName string `json:"basePolicyName,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// tags
	// Unique: true
	Tags []string `json:"tags"`
}

// Validate validates this update base policy request
func (m *UpdateBasePolicyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffectedClientIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateBasePolicyRequest) validateAffectedClientIds(formats strfmt.Registry) error {

	if swag.IsZero(m.AffectedClientIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("affectedClientIds", "body", m.AffectedClientIds); err != nil {
		return err
	}

	return nil
}

func (m *UpdateBasePolicyRequest) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := validate.UniqueItems("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateBasePolicyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateBasePolicyRequest) UnmarshalBinary(b []byte) error {
	var res UpdateBasePolicyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
