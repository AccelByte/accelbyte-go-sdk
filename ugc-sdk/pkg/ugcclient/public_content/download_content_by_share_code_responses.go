// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package public_content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/ugc-sdk/pkg/ugcclientmodels"
)

// DownloadContentByShareCodeReader is a Reader for the DownloadContentByShareCode structure.
type DownloadContentByShareCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadContentByShareCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadContentByShareCodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDownloadContentByShareCodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDownloadContentByShareCodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewDownloadContentByShareCodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /ugc/v1/public/namespaces/{namespace}/contents/sharecodes/{shareCode} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewDownloadContentByShareCodeOK creates a DownloadContentByShareCodeOK with default headers values
func NewDownloadContentByShareCodeOK() *DownloadContentByShareCodeOK {
	return &DownloadContentByShareCodeOK{}
}

/*DownloadContentByShareCodeOK handles this case with default header values.

  OK
*/
type DownloadContentByShareCodeOK struct {
	Payload *ugcclientmodels.ModelsContentDownloadResponse
}

func (o *DownloadContentByShareCodeOK) Error() string {
	return fmt.Sprintf("[GET /ugc/v1/public/namespaces/{namespace}/contents/sharecodes/{shareCode}][%d] downloadContentByShareCodeOK  %+v", 200, o.Payload)
}

func (o *DownloadContentByShareCodeOK) GetPayload() *ugcclientmodels.ModelsContentDownloadResponse {
	return o.Payload
}

func (o *DownloadContentByShareCodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ModelsContentDownloadResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadContentByShareCodeUnauthorized creates a DownloadContentByShareCodeUnauthorized with default headers values
func NewDownloadContentByShareCodeUnauthorized() *DownloadContentByShareCodeUnauthorized {
	return &DownloadContentByShareCodeUnauthorized{}
}

/*DownloadContentByShareCodeUnauthorized handles this case with default header values.

  Unauthorized
*/
type DownloadContentByShareCodeUnauthorized struct {
	Payload *ugcclientmodels.ResponseError
}

func (o *DownloadContentByShareCodeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /ugc/v1/public/namespaces/{namespace}/contents/sharecodes/{shareCode}][%d] downloadContentByShareCodeUnauthorized  %+v", 401, o.Payload)
}

func (o *DownloadContentByShareCodeUnauthorized) GetPayload() *ugcclientmodels.ResponseError {
	return o.Payload
}

func (o *DownloadContentByShareCodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadContentByShareCodeNotFound creates a DownloadContentByShareCodeNotFound with default headers values
func NewDownloadContentByShareCodeNotFound() *DownloadContentByShareCodeNotFound {
	return &DownloadContentByShareCodeNotFound{}
}

/*DownloadContentByShareCodeNotFound handles this case with default header values.

  Not Found
*/
type DownloadContentByShareCodeNotFound struct {
	Payload *ugcclientmodels.ResponseError
}

func (o *DownloadContentByShareCodeNotFound) Error() string {
	return fmt.Sprintf("[GET /ugc/v1/public/namespaces/{namespace}/contents/sharecodes/{shareCode}][%d] downloadContentByShareCodeNotFound  %+v", 404, o.Payload)
}

func (o *DownloadContentByShareCodeNotFound) GetPayload() *ugcclientmodels.ResponseError {
	return o.Payload
}

func (o *DownloadContentByShareCodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadContentByShareCodeInternalServerError creates a DownloadContentByShareCodeInternalServerError with default headers values
func NewDownloadContentByShareCodeInternalServerError() *DownloadContentByShareCodeInternalServerError {
	return &DownloadContentByShareCodeInternalServerError{}
}

/*DownloadContentByShareCodeInternalServerError handles this case with default header values.

  Internal Server Error
*/
type DownloadContentByShareCodeInternalServerError struct {
	Payload *ugcclientmodels.ResponseError
}

func (o *DownloadContentByShareCodeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ugc/v1/public/namespaces/{namespace}/contents/sharecodes/{shareCode}][%d] downloadContentByShareCodeInternalServerError  %+v", 500, o.Payload)
}

func (o *DownloadContentByShareCodeInternalServerError) GetPayload() *ugcclientmodels.ResponseError {
	return o.Payload
}

func (o *DownloadContentByShareCodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ugcclientmodels.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
