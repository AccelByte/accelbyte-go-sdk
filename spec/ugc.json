{
  "host": "demo.accelbyte.io",
  "info": {
    "contact": {
      "email": "engineering@accelbyte.io",
      "name": "Engineering Team at AccelByte",
      "url": "https://accelbyte.io"
    },
    "description": "Justice UGC Service",
    "title": "justice-ugc-service",
    "version": "2.9.2"
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "HasPermission": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [CREATE]": "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [DELETE]": "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [READ]": "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [READ]",
        "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [UPDATE]": "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]": "ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId} [DELETE]": "NAMESPACE:{namespace}:USER:{userId} [DELETE]",
        "NAMESPACE:{namespace}:USER:{userId}:CHANNEL [CREATE]": "NAMESPACE:{namespace}:USER:{userId}:CHANNEL [CREATE]",
        "NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]": "NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]",
        "NAMESPACE:{namespace}:USER:{userId}:CHANNEL [READ]": "NAMESPACE:{namespace}:USER:{userId}:CHANNEL [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:CHANNEL [UPDATE]": "NAMESPACE:{namespace}:USER:{userId}:CHANNEL [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]": "NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]",
        "NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]": "NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]",
        "NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]": "NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]": "NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [CREATE]": "NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [CREATE]",
        "NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]": "NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]",
        "NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]": "NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [UPDATE]": "NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [UPDATE]"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "HasScope": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {},
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "paths": {
    "/ugc/v1/admin/namespaces/{namespace}/channels": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [READ]\u0026lt;/b\u0026gt;",
        "operationId": "SingleAdminGetChannel",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGetChannelResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Channels",
        "tags": [
          "Admin Channel"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [CREATE]\u0026lt;/b\u0026gt;",
        "operationId": "AdminCreateChannel",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ChannelRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.ChannelResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create Channel",
        "tags": [
          "Admin Channel"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]\u0026lt;/b\u0026gt;",
        "operationId": "SingleAdminDeleteChannel",
        "parameters": [
          {
            "description": "channelID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Channel",
        "tags": [
          "Admin Channel"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [UPDATE]\u0026lt;/b\u0026gt;",
        "operationId": "SingleAdminUpdateChannel",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ChannelRequest"
            }
          },
          {
            "description": "channelID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChannelResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Channel",
        "tags": [
          "Admin Channel"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u0026lt;/b\u0026gt;.\\n \n\t\t\t\tAll request body are required except preview, tags and customAttributes.\n\t\t\t\t",
        "operationId": "AdminUploadContentDirect",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateContentRequest"
            }
          },
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload content to a channel",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents/s3": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u0026lt;/b\u0026gt;.\\n \n\t\t\t\tAll request body are required except preview, tags, contentType and customAttributes.\n\t\t\t\tcontentType values is used to enforce the Content-Type header needed by the client when uploading the content using the S3 presigned URL.\n\t\t\t\tIf not specified, it will use fileExtension value.\n\t\t\t\t\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;\u0026lt;b\u0026gt;NOTE: Preview is Legacy Code, please use Screenshot for better solution to display preview of a content\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "AdminUploadContentS3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateContentRequestS3"
            }
          },
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload content to S3 bucket",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents/s3/{contentId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u0026lt;/b\u0026gt;.\n\t\t\t\t\tAll request body are required except payload, preview, tags, contentType, updateContentFile and customAttributes.\n\t\t\t\t\tcontentType values is used to enforce the Content-Type header needed by the client to upload the content using the S3 presigned URL.\n\t\t\t\t\tIf not specified, it will use fileExtension value.\n\t\t\t\t\tTo update content\u0026#39;s file, set \u0026lt;code\u0026gt;updateContentFile\u0026lt;/code\u0026gt; to \u0026lt;code\u0026gt;true\u0026lt;/code\u0026gt; and upload the file using URL in \u0026lt;code\u0026gt;payloadURL.url\u0026lt;/code\u0026gt; in response body.\n\t\t\t\t\t\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;\u0026lt;b\u0026gt;NOTE: Preview is Legacy Code, please use Screenshot for better solution to display preview of a content\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "SingleAdminUpdateContentS3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ContentRequest"
            }
          },
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update content to S3 bucket",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents/search": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]\u0026lt;/b\u0026gt;\n\nFor advance tag filtering supports \u0026amp; as AND operator and | as OR operator and parentheses () for priority. e.g: \n\n\u0026lt;code\u0026gt;tags=red\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;animal\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red|animal\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;animal|wild\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;(animal|wild)\u0026lt;/code\u0026gt;\n\nThe precedence of logical operator is AND \u0026gt; OR, so if no parentheses, AND logical operator will be executed first.\n\nAllowed character for operand: alphanumeric, underscore \u0026lt;code\u0026gt;_\u0026lt;/code\u0026gt; and dash \u0026lt;code\u0026gt;-\u0026lt;/code\u0026gt;\n\nAllowed character for operator: \u0026lt;code\u0026gt;\u0026amp;\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;|\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;(\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;)\u0026lt;/code\u0026gt;\n\n\u0026lt;b\u0026gt;Please note that value of tags query param should be URL encoded\u0026lt;/b\u0026gt;",
        "operationId": "AdminSearchChannelSpecificContent",
        "parameters": [
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "creator name",
            "in": "query",
            "name": "creator",
            "type": "string"
          },
          {
            "description": "filter only official contents (boolean)",
            "in": "query",
            "name": "isofficial",
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "content name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "sorting order: asc, desc. default=desc",
            "in": "query",
            "name": "orderby",
            "type": "string"
          },
          {
            "description": "sorting criteria: name,download,like,date. default=date",
            "in": "query",
            "name": "sortby",
            "type": "string"
          },
          {
            "description": "content subtype",
            "in": "query",
            "name": "subtype",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "content tag",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "tags",
            "type": "array"
          },
          {
            "description": "content type",
            "in": "query",
            "name": "type",
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "query",
            "name": "userId",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Search contents specific to a channel",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents/{contentId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u0026lt;/b\u0026gt;.",
        "operationId": "SingleAdminDeleteContent",
        "parameters": [
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete content",
        "tags": [
          "Admin Content"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u0026lt;/b\u0026gt;.\\n \n\t\t\t\t\tAll request body are required except preview, tags and customAttributes.\n\t\t\t\t\t",
        "operationId": "SingleAdminUpdateContentDirect",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateContentRequest"
            }
          },
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update content to a channel",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]\u0026lt;/b\u0026gt;.",
        "operationId": "SingleAdminGetContent",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user's generated contents",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents/bulk": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]\u0026lt;/b\u0026gt;.\n\t\t\t\t\t\tMaximum contentId per request 100",
        "operationId": "AdminGetContentBulk",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminGetContentBulkRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.ContentDownloadResponse"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Bulk get content by content IDs",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents/search": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]\u0026lt;/b\u0026gt;\n\nFor advance tag filtering supports \u0026amp; as AND operator and | as OR operator and parentheses () for priority. e.g: \n\n\u0026lt;code\u0026gt;tags=red\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;animal\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red|animal\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;animal|wild\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;(animal|wild)\u0026lt;/code\u0026gt;\n\nThe precedence of logical operator is AND \u0026gt; OR, so if no parentheses, AND logical operator will be executed first.\n\nAllowed character for operand: alphanumeric, underscore \u0026lt;code\u0026gt;_\u0026lt;/code\u0026gt; and dash \u0026lt;code\u0026gt;-\u0026lt;/code\u0026gt;\n\nAllowed character for operator: \u0026lt;code\u0026gt;\u0026amp;\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;|\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;(\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;)\u0026lt;/code\u0026gt;\n\n\u0026lt;b\u0026gt;Please note that value of tags query param should be URL encoded\u0026lt;/b\u0026gt;",
        "operationId": "AdminSearchContent",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "creator name",
            "in": "query",
            "name": "creator",
            "type": "string"
          },
          {
            "description": "filter only official contents  (boolean)",
            "in": "query",
            "name": "isofficial",
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "content name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "sorting order: asc, desc. default=desc",
            "in": "query",
            "name": "orderby",
            "type": "string"
          },
          {
            "description": "sorting criteria: name,download,like,date. default=date",
            "in": "query",
            "name": "sortby",
            "type": "string"
          },
          {
            "description": "content subtype",
            "in": "query",
            "name": "subtype",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "content tag",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "tags",
            "type": "array"
          },
          {
            "description": "content type",
            "in": "query",
            "name": "type",
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "query",
            "name": "userId",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Search contents",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents/sharecodes/{shareCode}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]\u0026lt;/b\u0026gt;.",
        "operationId": "AdminGetUserContentByShareCode",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "content sharecode",
            "in": "path",
            "name": "shareCode",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get content by sharecode",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents/{contentId}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]\u0026lt;/b\u0026gt;.",
        "operationId": "AdminGetSpecificContent",
        "parameters": [
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user specific content",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents/{contentId}/preview": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]\u0026lt;/b\u0026gt;\u0026lt;p\u0026gt;\u0026lt;b\u0026gt;NOTE: Preview is Legacy Code, please use Screenshot for better solution to display preview of a content\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "AdminDownloadContentPreview",
        "parameters": [
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetContentPreviewResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get content preview",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents/{contentId}/screenshots": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u0026lt;/b\u0026gt;.\\n \n\t\t\t\tAll request body are required except for contentType field. \n\t\t\t\tcontentType values is used to enforce the Content-Type header needed by the client to upload the content using the presigned URL.\n\t\t\t\tIf not specified, it will use fileExtension value.\n\t\t\t\tSupported file extensions: pjp, jpg, jpeg, jfif, bmp, png. \\n\n\t\t\t\tMaximum description length: 1024.\n\t\t\t\t",
        "operationId": "AdminUploadContentScreenshot",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateScreenshotRequest"
            }
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateScreenshotResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload screenshots for content",
        "tags": [
          "Admin Content"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u0026lt;/b\u0026gt;.\\n \n\t\t\t\t\tMaximum description length: 1024.\n\t\t\t\t\t",
        "operationId": "AdminUpdateScreenshots",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateScreenshotRequest"
            }
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UpdateScreenshotResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update screenshot of content",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents/{contentId}/screenshots/{screenshotId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u0026lt;/b\u0026gt;.\n\t\t\t\t",
        "operationId": "AdminDeleteContentScreenshot",
        "parameters": [
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "screenshot ID",
            "in": "path",
            "name": "screenshotId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete screenshots content",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/groups": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]\u0026lt;/b\u0026gt;.",
        "operationId": "SingleAdminGetAllGroups",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGroupResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get all user groups",
        "tags": [
          "Admin Group"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [CREATE]",
        "operationId": "AdminCreateGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateGroupRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create groups",
        "tags": [
          "Admin Group"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/groups/{groupId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]",
        "operationId": "SingleAdminDeleteGroup",
        "parameters": [
          {
            "description": "group ID",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete group",
        "tags": [
          "Admin Group"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]\u0026lt;/b\u0026gt;.",
        "operationId": "SingleAdminGetGroup",
        "parameters": [
          {
            "description": "group ID",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get specific user group",
        "tags": [
          "Admin Group"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [UPDATE]\n\t\t\t\t\treplace group name and contents with new ones.",
        "operationId": "SingleAdminUpdateGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateGroupRequest"
            }
          },
          {
            "description": "group ID",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update group",
        "tags": [
          "Admin Group"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/groups/{groupId}/contents": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]\u0026lt;/b\u0026gt;.",
        "operationId": "SingleAdminGetGroupContents",
        "parameters": [
          {
            "description": "group ID",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get contents belong to a group",
        "tags": [
          "Admin Group"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/tags": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [READ]",
        "operationId": "AdminGetTag",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGetTagResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get tags",
        "tags": [
          "Admin Tag"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [CREATE]\n\t\t\t\tcreates a new tag",
        "operationId": "AdminCreateTag",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateTagRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateTagResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create tags",
        "tags": [
          "Admin Tag"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/tags/{tagId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [DELETE]",
        "operationId": "AdminDeleteTag",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "tag ID",
            "in": "path",
            "name": "tagId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete tags",
        "tags": [
          "Admin Tag"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [UPDATE]\n\t\t\t\tupdates a tag",
        "operationId": "AdminUpdateTag",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateTagRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "tag ID",
            "in": "path",
            "name": "tagId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateTagResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update tag",
        "tags": [
          "Admin Tag"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/types": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [READ]",
        "operationId": "AdminGetType",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGetTypeResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get types",
        "tags": [
          "Admin Type"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [CREATE]\n\t\t\tcreates a new type and subtype",
        "operationId": "AdminCreateType",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateTypeRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create types",
        "tags": [
          "Admin Type"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/types/{typeId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [DELETE]",
        "operationId": "AdminDeleteType",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "type ID",
            "in": "path",
            "name": "typeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete types",
        "tags": [
          "Admin Type"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [UPDATE]\n\t\t\tupdates a type and subtype",
        "operationId": "AdminUpdateType",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateTypeRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "type ID",
            "in": "path",
            "name": "typeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:UGCCONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update types",
        "tags": [
          "Admin Type"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/channels": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]\u0026lt;/b\u0026gt;",
        "operationId": "AdminDeleteAllUserChannels",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete all user channel",
        "tags": [
          "Anonymization"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [READ]\u0026lt;/b\u0026gt;",
        "operationId": "AdminGetChannel",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGetChannelResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Channels",
        "tags": [
          "Admin Channel"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/channels/{channelId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]\u0026lt;/b\u0026gt;",
        "operationId": "AdminDeleteChannel",
        "parameters": [
          {
            "description": "channelID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Channel",
        "tags": [
          "Admin Channel"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [UPDATE]\u0026lt;/b\u0026gt;",
        "operationId": "AdminUpdateChannel",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ChannelRequest"
            }
          },
          {
            "description": "channelID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChannelResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Channel",
        "tags": [
          "Admin Channel"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/s3/{contentId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u0026lt;/b\u0026gt;. \n\t\t\t\tAll request body are required except payload, preview, tags, contentType, updateContentFile and customAttributes.\n\t\t\t\tcontentType values is used to enforce the Content-Type header needed by the client to upload the content using the S3 presigned URL.\n\t\t\t\tIf not specified, it will use fileExtension value.\n\t\t\t\tTo update content\u0026#39;s file, set \u0026lt;code\u0026gt;updateContentFile\u0026lt;/code\u0026gt; to \u0026lt;code\u0026gt;true\u0026lt;/code\u0026gt; and upload the file using URL in \u0026lt;code\u0026gt;payloadURL.url\u0026lt;/code\u0026gt; in response body.\n\t\t\t\t\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;\u0026lt;b\u0026gt;NOTE: Preview is Legacy Code, please use Screenshot for better solution to display preview of a content\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "AdminUpdateContentS3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ContentRequest"
            }
          },
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update content to S3 bucket",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/{contentId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u0026lt;/b\u0026gt;.",
        "operationId": "AdminDeleteContent",
        "parameters": [
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete content",
        "tags": [
          "Admin Content"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u0026lt;/b\u0026gt;.\\n \n\t\t\t\t\tAll request body are required except preview, tags and customAttributes.\n\t\t\t\t\t",
        "operationId": "AdminUpdateContentDirect",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateContentRequest"
            }
          },
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update content to a channel",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/contents": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u0026lt;/b\u0026gt;.",
        "operationId": "AdminDeleteAllUserContents",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete all user content",
        "tags": [
          "Anonymization"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]\u0026lt;/b\u0026gt;.",
        "operationId": "AdminGetContent",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user's generated contents",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/contents/{contentId}/hide": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u0026lt;/b\u0026gt;.",
        "operationId": "AdminHideUserContent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.HideContentRequest"
            }
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Hide/Unhide user's generated contents",
        "tags": [
          "Admin Content"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/groups": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]",
        "operationId": "AdminDeleteAllUserGroup",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete all user group",
        "tags": [
          "Anonymization"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]\u0026lt;/b\u0026gt;.",
        "operationId": "AdminGetAllGroups",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGroupResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get all user groups",
        "tags": [
          "Admin Group"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/groups/{groupId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]",
        "operationId": "AdminDeleteGroup",
        "parameters": [
          {
            "description": "group ID",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete group",
        "tags": [
          "Admin Group"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]\u0026lt;/b\u0026gt;.",
        "operationId": "AdminGetGroup",
        "parameters": [
          {
            "description": "group ID",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get specific user group",
        "tags": [
          "Admin Group"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [UPDATE]\n\t\t\t\t\treplace group name and contents with new ones.",
        "operationId": "AdminUpdateGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateGroupRequest"
            }
          },
          {
            "description": "group ID",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update group",
        "tags": [
          "Admin Group"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/groups/{groupId}/contents": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]\u0026lt;/b\u0026gt;.",
        "operationId": "AdminGetGroupContents",
        "parameters": [
          {
            "description": "group ID",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get contents belong to a group",
        "tags": [
          "Admin Group"
        ]
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/states": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]",
        "operationId": "AdminDeleteAllUserStates",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Remove all user related state: likes, downloads, followers, following",
        "tags": [
          "Anonymization"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/channels/{channelId}/contents": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Requires valid user token.\n\nFor advance tag filtering supports \u0026amp; as AND operator and | as OR operator and parentheses () for priority. e.g: \n\n\u0026lt;code\u0026gt;tags=red\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;animal\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red|animal\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;animal|wild\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;(animal|wild)\u0026lt;/code\u0026gt;\n\nThe precedence of logical operator is AND \u0026gt; OR, so if no parentheses, AND logical operator will be executed first.\n\nAllowed character for operand: alphanumeric, underscore \u0026lt;code\u0026gt;_\u0026lt;/code\u0026gt; and dash \u0026lt;code\u0026gt;-\u0026lt;/code\u0026gt;\n\nAllowed character for operator: \u0026lt;code\u0026gt;\u0026amp;\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;|\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;(\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;)\u0026lt;/code\u0026gt;\n\n\u0026lt;b\u0026gt;Please note that value of tags query param should be URL encoded\u0026lt;/b\u0026gt;",
        "operationId": "SearchChannelSpecificContent",
        "parameters": [
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "creator name",
            "in": "query",
            "name": "creator",
            "type": "string"
          },
          {
            "description": "filter only official contents (boolean)",
            "in": "query",
            "name": "isofficial",
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "content name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "sorting order: asc, desc. default=desc",
            "in": "query",
            "name": "orderby",
            "type": "string"
          },
          {
            "description": "sorting criteria: name,download,like,date. default=date",
            "in": "query",
            "name": "sortby",
            "type": "string"
          },
          {
            "description": "content subtype",
            "in": "query",
            "name": "subtype",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "content tag",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "tags",
            "type": "array"
          },
          {
            "description": "content type",
            "in": "query",
            "name": "type",
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "query",
            "name": "userId",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Search contents specific to a channel",
        "tags": [
          "Public Content"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Public user can access without token or if token specified, requires valid user token.\n\nFor advance tag filtering supports \u0026amp; as AND operator and | as OR operator and parentheses () for priority. e.g: \n\n\u0026lt;code\u0026gt;tags=red\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;animal\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red|animal\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;animal|wild\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;(animal|wild)\u0026lt;/code\u0026gt;\n\nThe precedence of logical operator is AND \u0026gt; OR, so if no parentheses, AND logical operator will be executed first.\n\nAllowed character for operand: alphanumeric, underscore \u0026lt;code\u0026gt;_\u0026lt;/code\u0026gt; and dash \u0026lt;code\u0026gt;-\u0026lt;/code\u0026gt;\n\nAllowed character for operator: \u0026lt;code\u0026gt;\u0026amp;\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;|\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;(\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;)\u0026lt;/code\u0026gt;\n\n\u0026lt;b\u0026gt;Please note that value of tags query param should be URL encoded\u0026lt;/b\u0026gt;",
        "operationId": "PublicSearchContent",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "creator name",
            "in": "query",
            "name": "creator",
            "type": "string"
          },
          {
            "description": "filter only official contents (boolean)",
            "in": "query",
            "name": "isofficial",
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "content name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "sorting order: asc, desc. default=desc",
            "in": "query",
            "name": "orderby",
            "type": "string"
          },
          {
            "description": "sorting criteria: name,download,like,date. default=date",
            "in": "query",
            "name": "sortby",
            "type": "string"
          },
          {
            "description": "content subtype",
            "in": "query",
            "name": "subtype",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "content tag",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "tags",
            "type": "array"
          },
          {
            "description": "content type",
            "in": "query",
            "name": "type",
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "query",
            "name": "userId",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Search contents",
        "tags": [
          "Public Content"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/bulk": {
      "post": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Maximum requested Ids: 100.\n\t\t\tPublic user can access without token or if token specified, requires valid user token",
        "operationId": "PublicGetContentBulk",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PublicGetContentBulkRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.ContentDownloadResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get contents by content Ids ",
        "tags": [
          "Public Content"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/followed": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Requires valid user token",
        "operationId": "GetFollowedContent",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get contents from followed creators",
        "tags": [
          "Public Follow"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/liked": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Requires valid user token.\n\nFor advance tag filtering supports \u0026amp; as AND operator and | as OR operator and parentheses () for priority. e.g: \n\n\u0026lt;code\u0026gt;tags=red\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;animal\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red|animal\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;animal|wild\u0026lt;/code\u0026gt;\n\n\u0026lt;code\u0026gt;tags=red\u0026amp;(animal|wild)\u0026lt;/code\u0026gt;\n\nThe precedence of logical operator is AND \u0026gt; OR, so if no parentheses, AND logical operator will be executed first.\n\nAllowed character for operand: alphanumeric, underscore \u0026lt;code\u0026gt;_\u0026lt;/code\u0026gt; and dash \u0026lt;code\u0026gt;-\u0026lt;/code\u0026gt;\n\nAllowed character for operator: \u0026lt;code\u0026gt;\u0026amp;\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;|\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;(\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;)\u0026lt;/code\u0026gt;\n\n\u0026lt;b\u0026gt;Please note that value of tags query param should be URL encoded\u0026lt;/b\u0026gt;",
        "operationId": "GetLikedContent",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "filter content by official or community",
            "in": "query",
            "name": "isofficial",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "content name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "sorting order: asc, desc. default=desc",
            "in": "query",
            "name": "orderby",
            "type": "string"
          },
          {
            "description": "sorting criteria: name,download,like,date. default=date",
            "in": "query",
            "name": "sortby",
            "type": "string"
          },
          {
            "description": "subtype",
            "in": "query",
            "name": "subtype",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "tags",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "tags",
            "type": "array"
          },
          {
            "description": "type",
            "in": "query",
            "name": "type",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get liked contents",
        "tags": [
          "Public Like"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/sharecodes/{shareCode}": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Public user can access without token or if token specified, requires valid user token",
        "operationId": "PublicDownloadContentByShareCode",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "content sharecode",
            "in": "path",
            "name": "shareCode",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get content by sharecode",
        "tags": [
          "Public Content"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/{contentId}": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Public user can access without token or if token specified, requires valid user token",
        "operationId": "PublicDownloadContentByContentID",
        "parameters": [
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get user specific content",
        "tags": [
          "Public Content"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/{contentId}/downloadcount": {
      "post": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Requires valid user token",
        "operationId": "AddDownloadCount",
        "parameters": [
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.AddDownloadCountResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Add unique download count to a content",
        "tags": [
          "Public Download Count"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/{contentId}/like": {
      "put": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Requires valid user token",
        "operationId": "UpdateContentLikeStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ContentLikeRequest"
            }
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ContentLikeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update like/unlike status to a content",
        "tags": [
          "Public Like"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/{contentId}/preview": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "\u0026lt;p\u0026gt;Requires valid user token\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;b\u0026gt;NOTE: Preview is Legacy Code, please use Screenshot for better solution to display preview of a content\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "PublicDownloadContentPreview",
        "parameters": [
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetContentPreviewResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get content preview",
        "tags": [
          "Public Content"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/tags": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Publicly accessible",
        "operationId": "GetTag",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGetTagResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get tags",
        "tags": [
          "Public Tag"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/types": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Requires valid user token",
        "operationId": "GetType",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGetTypeResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get types",
        "tags": [
          "Public Type"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Public user can access without token or if token specified, requires valid user token",
        "operationId": "PublicSearchCreator",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "sorting order: asc, desc. default=desc",
            "in": "query",
            "name": "orderby",
            "type": "string"
          },
          {
            "description": "sorting criteria: followCount, totalLikedContent. default=object id",
            "in": "query",
            "name": "sortby",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedCreatorOverviewResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Search creator",
        "tags": [
          "Public Creator"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/followed": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Requires valid user token",
        "operationId": "GetFollowedUsers",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of user per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedCreatorOverviewResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get followed creators",
        "tags": [
          "Public Follow"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Public user can access without token or if token specified, requires valid user token",
        "operationId": "PublicGetCreator",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreatorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get creator stats: number of total like by other user, number of total following and follower user",
        "tags": [
          "Public Creator"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/channels": {
      "delete": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]\u0026lt;/b\u0026gt;",
        "operationId": "DeleteAllUserChannel",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete all user channel",
        "tags": [
          "Anonymization"
        ]
      },
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CHANNEL [READ]\u0026lt;/b\u0026gt;",
        "operationId": "GetChannels",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGetChannelResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CHANNEL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Channels",
        "tags": [
          "Public Channel"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CHANNEL [CREATE]\u0026lt;/b\u0026gt;",
        "operationId": "CreateChannel",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ChannelRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.ChannelResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CHANNEL [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create Channel",
        "tags": [
          "Public Channel"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/channels/{channelId}": {
      "delete": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]\u0026lt;/b\u0026gt;",
        "operationId": "DeleteChannel",
        "parameters": [
          {
            "description": "channelID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Channel",
        "tags": [
          "Public Channel"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CHANNEL [UPDATE]\u0026lt;/b\u0026gt;",
        "operationId": "UpdateChannel",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ChannelRequest"
            }
          },
          {
            "description": "channelID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChannelResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CHANNEL [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Channel",
        "tags": [
          "Public Channel"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents": {
      "post": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "deprecated": true,
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u0026lt;/b\u0026gt;.\\n \n\t\t\tAll request body are required except preview, tags and customAttributes.\n\t\t\t",
        "operationId": "CreateContentDirect",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateContentRequest"
            }
          },
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload content to a channel",
        "tags": [
          "Public Content"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/s3": {
      "post": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u0026lt;/b\u0026gt;.\\n \n\t\t\t\tAll request body are required except payload, preview, tags, contentType and customAttributes.\n\t\t\t\tcontentType values is used to enforce the Content-Type header needed by the client to upload the content using the S3 presigned URL.\n\t\t\t\tIf not specified, it will use fileExtension value.\n\t\t\t\t\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;\u0026lt;b\u0026gt;NOTE: Preview is Legacy Code, please use Screenshot for better solution to display preview of a content\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "CreateContentS3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateContentRequestS3"
            }
          },
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload content to S3 bucket",
        "tags": [
          "Public Content"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/s3/{contentId}": {
      "put": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u0026lt;/b\u0026gt;.\n\t\t\t\tAll request body are required except payload, preview, tags, contentType, updateContentFile and customAttributes.\n\t\t\t\tcontentType values is used to enforce the Content-Type header needed by the client to upload the content using the S3 presigned URL.\n\t\t\t\tIf not specified, it will use fileExtension value.\n\t\t\t\tTo update content\u0026#39;s file, set \u0026lt;code\u0026gt;updateContentFile\u0026lt;/code\u0026gt; to \u0026lt;code\u0026gt;true\u0026lt;/code\u0026gt; and upload the file using URL in \u0026lt;code\u0026gt;payloadURL.url\u0026lt;/code\u0026gt; in response body. \n\t\t\t\t\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;\u0026lt;b\u0026gt;NOTE: Preview is Legacy Code, please use Screenshot for better solution to display preview of a content\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "UpdateContentS3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ContentRequest"
            }
          },
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update content to S3 bucket",
        "tags": [
          "Public Content"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/{contentId}": {
      "delete": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u0026lt;/b\u0026gt;.",
        "operationId": "DeleteContent",
        "parameters": [
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete content",
        "tags": [
          "Public Content"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "deprecated": true,
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u0026lt;/b\u0026gt;.\\n \n\t\t\t\tAll request body are required except preview, tags and customAttributes.\n\t\t\t\t",
        "operationId": "UpdateContentDirect",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateContentRequest"
            }
          },
          {
            "description": "channel ID",
            "in": "path",
            "name": "channelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update content to a channel",
        "tags": [
          "Public Content"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/contents": {
      "delete": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u0026lt;/b\u0026gt;.",
        "operationId": "DeleteAllUserContents",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete all user content",
        "tags": [
          "Anonymization"
        ]
      },
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Public user can access without token or if token specified, required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]\u0026lt;/b\u0026gt;.",
        "operationId": "PublicGetUserContent",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user's generated contents",
        "tags": [
          "Public Content"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/contents/{contentId}/screenshots": {
      "post": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u0026lt;/b\u0026gt;.\\n \n\t\t\t\tAll request body are required except for contentType field. \n\t\t\t\tcontentType values is used to enforce the Content-Type header needed by the client to upload the content using the presigned URL.\n\t\t\t\tIf not specified, it will use fileExtension value.\n\t\t\t\tSupported file extensions: pjp, jpg, jpeg, jfif, bmp, png. \\n\n\t\t\t\tMaximum description length: 1024.\n\t\t\t\t",
        "operationId": "UploadContentScreenshot",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateScreenshotRequest"
            }
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateScreenshotResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload screenshots for content",
        "tags": [
          "Public Content"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u0026lt;/b\u0026gt;.\\n \n\t\t\t\t\tMaximum description length: 1024.\n\t\t\t\t\t",
        "operationId": "UpdateScreenshots",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateScreenshotRequest"
            }
          },
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UpdateScreenshotResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update screenshot of content",
        "tags": [
          "Public Content"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/contents/{contentId}/screenshots/{screenshotId}": {
      "delete": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u0026lt;/b\u0026gt;.\n\t\t\t\t",
        "operationId": "DeleteContentScreenshot",
        "parameters": [
          {
            "description": "content ID",
            "in": "path",
            "name": "contentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "screenshot ID",
            "in": "path",
            "name": "screenshotId",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete screenshots content",
        "tags": [
          "Public Content"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/follow": {
      "put": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Requires valid user token",
        "operationId": "UpdateUserFollowStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UserFollowRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID to be followed",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UserFollowResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update follow/unfollow status to a user",
        "tags": [
          "Public Follow"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/followers": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "operationId": "GetPublicFollowers",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of user per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedCreatorOverviewResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get list of followers",
        "tags": [
          "Public Follow"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/following": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "operationId": "GetPublicFollowing",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of user per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedCreatorOverviewResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get list of following",
        "tags": [
          "Public Follow"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/groups": {
      "delete": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]",
        "operationId": "DeleteAllUserGroup",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete all user group",
        "tags": [
          "Anonymization"
        ]
      },
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]\u0026lt;/b\u0026gt;.",
        "operationId": "GetGroups",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGroupResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get all user groups",
        "tags": [
          "Public Group"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [CREATE]",
        "operationId": "CreateGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateGroupRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create groups",
        "tags": [
          "Public Group"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/groups/{groupId}": {
      "delete": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]",
        "operationId": "DeleteGroup",
        "parameters": [
          {
            "description": "group ID",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete group",
        "tags": [
          "Public Group"
        ]
      },
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]\u0026lt;/b\u0026gt;.",
        "operationId": "GetGroup",
        "parameters": [
          {
            "description": "group ID",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user's groups",
        "tags": [
          "Public Group"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [UPDATE]\n\t\t\t\treplace group name and contents with new ones",
        "operationId": "UpdateGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateGroupRequest"
            }
          },
          {
            "description": "group ID",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update group",
        "tags": [
          "Public Group"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/groups/{groupId}/contents": {
      "get": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission \u0026lt;b\u0026gt;NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]\u0026lt;/b\u0026gt;.",
        "operationId": "GetGroupContent",
        "parameters": [
          {
            "description": "group ID",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": 1000,
            "description": "number of content per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "the offset number to retrieve",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get contents belong to a group",
        "tags": [
          "Public Group"
        ]
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/states": {
      "delete": {
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "description": "Required permission NAMESPACE:{namespace}:USER:{userId}\u0026#34; [DELETE]",
        "operationId": "DeleteAllUserStates",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Remove all user related state: likes, downloads, followers, following",
        "tags": [
          "Anonymization"
        ]
      }
    }
  },
  "definitions": {
    "models.AddDownloadCountResponse": {
      "properties": {
        "contentId": {
          "type": "string"
        }
      },
      "required": [
        "contentId"
      ]
    },
    "models.AdminGetContentBulkRequest": {
      "properties": {
        "contentIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "contentIds"
      ]
    },
    "models.ChannelRequest": {
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "models.ChannelResponse": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "namespace",
        "userId"
      ]
    },
    "models.ContentDownloadResponse": {
      "properties": {
        "channelId": {
          "type": "string"
        },
        "createdTime": {
          "type": "string"
        },
        "creatorFollowState": {
          "$ref": "#/definitions/models.CreatorFollowState"
        },
        "creatorName": {
          "description": "Creator Name is deprecated",
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "downloadCount": {
          "format": "int32",
          "type": "integer"
        },
        "fileExtension": {
          "type": "string"
        },
        "groups": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "isHidden": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isOfficial": {
          "type": "boolean",
          "x-omitempty": false
        },
        "likeCount": {
          "format": "int32",
          "type": "integer"
        },
        "likeState": {
          "$ref": "#/definitions/models.LikeState"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "payload": {
          "type": "string"
        },
        "payloadURL": {
          "items": {
            "$ref": "#/definitions/models.PayloadURL"
          },
          "type": "array"
        },
        "previewURL": {
          "items": {
            "$ref": "#/definitions/models.PreviewURL"
          },
          "type": "array"
        },
        "screenshots": {
          "items": {
            "$ref": "#/definitions/models.ScreenshotResponse"
          },
          "type": "array"
        },
        "shareCode": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        },
        "updatedTime": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "channelId",
        "createdTime",
        "creatorFollowState",
        "creatorName",
        "downloadCount",
        "fileExtension",
        "id",
        "isHidden",
        "isOfficial",
        "likeCount",
        "name",
        "namespace",
        "shareCode",
        "subType",
        "tags",
        "type",
        "updatedTime",
        "userId"
      ]
    },
    "models.ContentLikeRequest": {
      "properties": {
        "likeStatus": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "likeStatus"
      ]
    },
    "models.ContentLikeResponse": {
      "properties": {
        "contentId": {
          "type": "string"
        },
        "likeStatus": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "contentId",
        "likeStatus"
      ]
    },
    "models.ContentRequest": {
      "properties": {
        "contentType": {
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "fileExtension": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "payload": {
          "type": "string"
        },
        "preview": {
          "description": "Preview is legacy code, please use Screenshot instead",
          "type": "string"
        },
        "previewMetadata": {
          "$ref": "#/definitions/models.previewMetadata"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        },
        "updateContentFile": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "contentType",
        "fileExtension",
        "name",
        "payload",
        "preview",
        "subType",
        "tags",
        "type",
        "updateContentFile"
      ]
    },
    "models.CreateContentRequest": {
      "properties": {
        "customAttributes": {
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "payload": {
          "type": "string"
        },
        "preview": {
          "description": "Preview is legacy code, please use Screenshot instead",
          "type": "string"
        },
        "previewMetadata": {
          "$ref": "#/definitions/models.previewMetadata"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "payload",
        "preview",
        "subType",
        "tags",
        "type"
      ]
    },
    "models.CreateContentRequestS3": {
      "properties": {
        "contentType": {
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "fileExtension": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "preview": {
          "description": "Preview is legacy code, please use Screenshot instead",
          "type": "string"
        },
        "previewMetadata": {
          "$ref": "#/definitions/models.previewMetadata"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "preview",
        "subType",
        "tags",
        "type"
      ]
    },
    "models.CreateContentResponse": {
      "properties": {
        "channelId": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "createdTime": {
          "type": "string"
        },
        "creatorName": {
          "description": "Creator Name is deprecated",
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "fileExtension": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isHidden": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isOfficial": {
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "payloadURL": {
          "items": {
            "$ref": "#/definitions/models.PayloadURL"
          },
          "type": "array"
        },
        "preview": {
          "description": "Preview is legacy code, please use Screenshot instead",
          "type": "string"
        },
        "previewURL": {
          "items": {
            "$ref": "#/definitions/models.PreviewURL"
          },
          "type": "array"
        },
        "shareCode": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        },
        "updatedTime": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "channelId",
        "createdTime",
        "creatorName",
        "fileExtension",
        "id",
        "isHidden",
        "isOfficial",
        "name",
        "namespace",
        "parentNamespace",
        "preview",
        "shareCode",
        "subType",
        "tags",
        "type",
        "updatedTime",
        "userId"
      ]
    },
    "models.CreateGroupRequest": {
      "properties": {
        "contents": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "contents",
        "name"
      ]
    },
    "models.CreateGroupResponse": {
      "properties": {
        "contents": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "createdAt": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "contents",
        "createdAt",
        "id",
        "name",
        "namespace",
        "parentNamespace",
        "userId"
      ]
    },
    "models.CreateScreenshotRequest": {
      "properties": {
        "screenshots": {
          "items": {
            "$ref": "#/definitions/models.createScreenshotRequestItem"
          },
          "type": "array"
        }
      },
      "required": [
        "screenshots"
      ]
    },
    "models.CreateScreenshotResponse": {
      "properties": {
        "screenshots": {
          "items": {
            "$ref": "#/definitions/models.ScreenshotResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "screenshots"
      ]
    },
    "models.CreateTagRequest": {
      "properties": {
        "tag": {
          "type": "string"
        }
      },
      "required": [
        "tag"
      ]
    },
    "models.CreateTagResponse": {
      "properties": {
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "namespace",
        "tag"
      ]
    },
    "models.CreateTypeRequest": {
      "properties": {
        "subtype": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "subtype",
        "type"
      ]
    },
    "models.CreateTypeResponse": {
      "properties": {
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "subtype": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "namespace",
        "parentNamespace",
        "subtype",
        "type"
      ]
    },
    "models.CreatorFollowState": {
      "properties": {
        "state": {
          "type": "boolean",
          "x-omitempty": false
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "state",
        "userId"
      ]
    },
    "models.CreatorOverviewResponse": {
      "properties": {
        "followCount": {
          "description": "Number of followers",
          "format": "int32",
          "type": "integer"
        },
        "followingCount": {
          "description": "Number of following",
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "totalLikedContent": {
          "description": "Total all other user's like to creator content",
          "format": "integer",
          "type": "integer"
        }
      },
      "required": [
        "followCount",
        "followingCount",
        "id",
        "namespace",
        "parentNamespace",
        "totalLikedContent"
      ]
    },
    "models.CreatorResponse": {
      "properties": {
        "creatorFollowState": {
          "$ref": "#/definitions/models.CreatorFollowState"
        },
        "followCount": {
          "description": "Number of followers",
          "format": "int32",
          "type": "integer"
        },
        "followingCount": {
          "description": "Number of following",
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "totalLikedContent": {
          "description": "Total all other user's like to creator content",
          "format": "integer",
          "type": "integer"
        }
      },
      "required": [
        "creatorFollowState",
        "followCount",
        "followingCount",
        "id",
        "namespace",
        "parentNamespace",
        "totalLikedContent"
      ]
    },
    "models.GetContentPreviewResponse": {
      "properties": {
        "preview": {
          "description": "Preview is legacy code, please use Screenshot instead",
          "type": "string"
        },
        "previewURL": {
          "$ref": "#/definitions/models.PreviewURL"
        }
      },
      "required": [
        "preview"
      ]
    },
    "models.HideContentRequest": {
      "properties": {
        "isHidden": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "isHidden"
      ]
    },
    "models.LikeState": {
      "properties": {
        "state": {
          "type": "boolean",
          "x-omitempty": false
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "state",
        "userId"
      ]
    },
    "models.PaginatedContentDownloadResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/models.ContentDownloadResponse"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "models.PaginatedCreatorOverviewResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/models.CreatorOverviewResponse"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "models.PaginatedGetChannelResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/models.ChannelResponse"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "models.PaginatedGetTagResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/models.CreateTagResponse"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "models.PaginatedGetTypeResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/models.CreateTypeResponse"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "models.PaginatedGroupResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/models.CreateGroupResponse"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "models.PagingCursor": {
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      },
      "required": [
        "first",
        "last",
        "next",
        "previous"
      ]
    },
    "models.PayloadURL": {
      "properties": {
        "source": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "source",
        "url"
      ]
    },
    "models.PreviewURL": {
      "properties": {
        "source": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "models.PublicGetContentBulkRequest": {
      "properties": {
        "contentIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "contentIds"
      ]
    },
    "models.ScreenshotResponse": {
      "properties": {
        "contentType": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "fileExtension": {
          "type": "string"
        },
        "screenshotId": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "fileExtension",
        "screenshotId",
        "source",
        "url"
      ]
    },
    "models.UpdateScreenshotRequest": {
      "properties": {
        "screenshots": {
          "items": {
            "$ref": "#/definitions/models.updateScreenshot"
          },
          "type": "array"
        }
      },
      "required": [
        "screenshots"
      ]
    },
    "models.UpdateScreenshotResponse": {
      "properties": {
        "screenshots": {
          "items": {
            "$ref": "#/definitions/models.updateScreenshot"
          },
          "type": "array"
        }
      },
      "required": [
        "screenshots"
      ]
    },
    "models.UserFollowRequest": {
      "properties": {
        "followStatus": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "followStatus"
      ]
    },
    "models.UserFollowResponse": {
      "properties": {
        "followStatus": {
          "type": "boolean",
          "x-omitempty": false
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "followStatus",
        "userId"
      ]
    },
    "models.createScreenshotRequestItem": {
      "properties": {
        "contentType": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "fileExtension": {
          "enum": [
            "bmp",
            "jfif",
            "jpeg",
            "jpg",
            "pjp",
            "png"
          ],
          "type": "string"
        }
      },
      "required": [
        "contentType",
        "description",
        "fileExtension"
      ]
    },
    "models.previewMetadata": {
      "properties": {
        "previewContentType": {
          "type": "string"
        },
        "previewFileExtension": {
          "type": "string"
        }
      },
      "required": [
        "previewContentType",
        "previewFileExtension"
      ]
    },
    "models.updateScreenshot": {
      "properties": {
        "description": {
          "type": "string"
        },
        "screenshotId": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "screenshotId"
      ]
    },
    "response.Error": {
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "required": [
        "errorCode",
        "errorMessage"
      ]
    }
  }
}