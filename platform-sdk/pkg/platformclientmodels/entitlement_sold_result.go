// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntitlementSoldResult entitlement sold result
//
// swagger:model EntitlementSoldResult
type EntitlementSoldResult struct {

	// creditSummaries, The money from the sale
	CreditSummaries []*CreditSummary `json:"creditSummaries"`

	// The entitlement information after the sale
	EntitlementInfo *EntitlementInfo `json:"entitlementInfo,omitempty"`

	// replayed, if true,the response is original successful response. This will not be included in response if client have not pass request id.
	Replayed bool `json:"replayed"`

	// request id
	RequestID string `json:"requestId,omitempty"`
}

// Validate validates this entitlement sold result
func (m *EntitlementSoldResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreditSummaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntitlementInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntitlementSoldResult) validateCreditSummaries(formats strfmt.Registry) error {

	if swag.IsZero(m.CreditSummaries) { // not required
		return nil
	}

	for i := 0; i < len(m.CreditSummaries); i++ {
		if swag.IsZero(m.CreditSummaries[i]) { // not required
			continue
		}

		if m.CreditSummaries[i] != nil {
			if err := m.CreditSummaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("creditSummaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntitlementSoldResult) validateEntitlementInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.EntitlementInfo) { // not required
		return nil
	}

	if m.EntitlementInfo != nil {
		if err := m.EntitlementInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entitlementInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntitlementSoldResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntitlementSoldResult) UnmarshalBinary(b []byte) error {
	var res EntitlementSoldResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
