// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// AdminUpdateRoleV4Reader is a Reader for the AdminUpdateRoleV4 structure.
type AdminUpdateRoleV4Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminUpdateRoleV4Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminUpdateRoleV4OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminUpdateRoleV4BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminUpdateRoleV4Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAdminUpdateRoleV4Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAdminUpdateRoleV4NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PATCH /iam/v4/admin/roles/{roleId} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminUpdateRoleV4OK creates a AdminUpdateRoleV4OK with default headers values
func NewAdminUpdateRoleV4OK() *AdminUpdateRoleV4OK {
	return &AdminUpdateRoleV4OK{}
}

/*AdminUpdateRoleV4OK handles this case with default header values.

  OK
*/
type AdminUpdateRoleV4OK struct {
	Payload *iamclientmodels.ModelRoleV4Response
}

func (o *AdminUpdateRoleV4OK) Error() string {
	return fmt.Sprintf("[PATCH /iam/v4/admin/roles/{roleId}][%d] adminUpdateRoleV4OK  %+v", 200, o.Payload)
}

func (o *AdminUpdateRoleV4OK) GetPayload() *iamclientmodels.ModelRoleV4Response {
	return o.Payload
}

func (o *AdminUpdateRoleV4OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.ModelRoleV4Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateRoleV4BadRequest creates a AdminUpdateRoleV4BadRequest with default headers values
func NewAdminUpdateRoleV4BadRequest() *AdminUpdateRoleV4BadRequest {
	return &AdminUpdateRoleV4BadRequest{}
}

/*AdminUpdateRoleV4BadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>
*/
type AdminUpdateRoleV4BadRequest struct {
	Payload *iamclientmodels.RestapiErrorResponse
}

func (o *AdminUpdateRoleV4BadRequest) Error() string {
	return fmt.Sprintf("[PATCH /iam/v4/admin/roles/{roleId}][%d] adminUpdateRoleV4BadRequest  %+v", 400, o.Payload)
}

func (o *AdminUpdateRoleV4BadRequest) GetPayload() *iamclientmodels.RestapiErrorResponse {
	return o.Payload
}

func (o *AdminUpdateRoleV4BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestapiErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateRoleV4Unauthorized creates a AdminUpdateRoleV4Unauthorized with default headers values
func NewAdminUpdateRoleV4Unauthorized() *AdminUpdateRoleV4Unauthorized {
	return &AdminUpdateRoleV4Unauthorized{}
}

/*AdminUpdateRoleV4Unauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>
*/
type AdminUpdateRoleV4Unauthorized struct {
	Payload *iamclientmodels.RestapiErrorResponse
}

func (o *AdminUpdateRoleV4Unauthorized) Error() string {
	return fmt.Sprintf("[PATCH /iam/v4/admin/roles/{roleId}][%d] adminUpdateRoleV4Unauthorized  %+v", 401, o.Payload)
}

func (o *AdminUpdateRoleV4Unauthorized) GetPayload() *iamclientmodels.RestapiErrorResponse {
	return o.Payload
}

func (o *AdminUpdateRoleV4Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestapiErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateRoleV4Forbidden creates a AdminUpdateRoleV4Forbidden with default headers values
func NewAdminUpdateRoleV4Forbidden() *AdminUpdateRoleV4Forbidden {
	return &AdminUpdateRoleV4Forbidden{}
}

/*AdminUpdateRoleV4Forbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>
*/
type AdminUpdateRoleV4Forbidden struct {
	Payload *iamclientmodels.RestapiErrorResponse
}

func (o *AdminUpdateRoleV4Forbidden) Error() string {
	return fmt.Sprintf("[PATCH /iam/v4/admin/roles/{roleId}][%d] adminUpdateRoleV4Forbidden  %+v", 403, o.Payload)
}

func (o *AdminUpdateRoleV4Forbidden) GetPayload() *iamclientmodels.RestapiErrorResponse {
	return o.Payload
}

func (o *AdminUpdateRoleV4Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestapiErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateRoleV4NotFound creates a AdminUpdateRoleV4NotFound with default headers values
func NewAdminUpdateRoleV4NotFound() *AdminUpdateRoleV4NotFound {
	return &AdminUpdateRoleV4NotFound{}
}

/*AdminUpdateRoleV4NotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10456</td><td>role not found</td></tr></table>
*/
type AdminUpdateRoleV4NotFound struct {
	Payload *iamclientmodels.RestapiErrorResponse
}

func (o *AdminUpdateRoleV4NotFound) Error() string {
	return fmt.Sprintf("[PATCH /iam/v4/admin/roles/{roleId}][%d] adminUpdateRoleV4NotFound  %+v", 404, o.Payload)
}

func (o *AdminUpdateRoleV4NotFound) GetPayload() *iamclientmodels.RestapiErrorResponse {
	return o.Payload
}

func (o *AdminUpdateRoleV4NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestapiErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
