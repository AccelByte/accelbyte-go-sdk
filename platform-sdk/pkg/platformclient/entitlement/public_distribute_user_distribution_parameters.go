// Code generated by go-swagger; DO NOT EDIT.

package entitlement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPublicDistributeUserDistributionParams creates a new PublicDistributeUserDistributionParams object
// with the default values initialized.
func NewPublicDistributeUserDistributionParams() *PublicDistributeUserDistributionParams {
	var (
		quantityDefault = int32(1)
	)
	return &PublicDistributeUserDistributionParams{
		Quantity: &quantityDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPublicDistributeUserDistributionParamsWithTimeout creates a new PublicDistributeUserDistributionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPublicDistributeUserDistributionParamsWithTimeout(timeout time.Duration) *PublicDistributeUserDistributionParams {
	var (
		quantityDefault = int32(1)
	)
	return &PublicDistributeUserDistributionParams{
		Quantity: &quantityDefault,

		timeout: timeout,
	}
}

// NewPublicDistributeUserDistributionParamsWithContext creates a new PublicDistributeUserDistributionParams object
// with the default values initialized, and the ability to set a context for a request
func NewPublicDistributeUserDistributionParamsWithContext(ctx context.Context) *PublicDistributeUserDistributionParams {
	var (
		quantityDefault = int32(1)
	)
	return &PublicDistributeUserDistributionParams{
		Quantity: &quantityDefault,

		Context: ctx,
	}
}

// NewPublicDistributeUserDistributionParamsWithHTTPClient creates a new PublicDistributeUserDistributionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPublicDistributeUserDistributionParamsWithHTTPClient(client *http.Client) *PublicDistributeUserDistributionParams {
	var (
		quantityDefault = int32(1)
	)
	return &PublicDistributeUserDistributionParams{
		Quantity:   &quantityDefault,
		HTTPClient: client,
	}
}

/*PublicDistributeUserDistributionParams contains all the parameters to send to the API endpoint
for the public distribute user distribution operation typically these are written to a http.Request
*/
type PublicDistributeUserDistributionParams struct {

	/*EntitlementID
	  distributable entitlement id

	*/
	EntitlementID string
	/*ExtUserID*/
	ExtUserID string
	/*Namespace
	  publisher namespace

	*/
	Namespace string
	/*Quantity*/
	Quantity *int32
	/*TargetNamespace
	  target game namespace

	*/
	TargetNamespace string
	/*UserID
	  publisher user id

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) WithTimeout(timeout time.Duration) *PublicDistributeUserDistributionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) WithContext(ctx context.Context) *PublicDistributeUserDistributionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) WithHTTPClient(client *http.Client) *PublicDistributeUserDistributionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEntitlementID adds the entitlementID to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) WithEntitlementID(entitlementID string) *PublicDistributeUserDistributionParams {
	o.SetEntitlementID(entitlementID)
	return o
}

// SetEntitlementID adds the entitlementId to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) SetEntitlementID(entitlementID string) {
	o.EntitlementID = entitlementID
}

// WithExtUserID adds the extUserID to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) WithExtUserID(extUserID string) *PublicDistributeUserDistributionParams {
	o.SetExtUserID(extUserID)
	return o
}

// SetExtUserID adds the extUserId to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) SetExtUserID(extUserID string) {
	o.ExtUserID = extUserID
}

// WithNamespace adds the namespace to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) WithNamespace(namespace string) *PublicDistributeUserDistributionParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithQuantity adds the quantity to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) WithQuantity(quantity *int32) *PublicDistributeUserDistributionParams {
	o.SetQuantity(quantity)
	return o
}

// SetQuantity adds the quantity to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) SetQuantity(quantity *int32) {
	o.Quantity = quantity
}

// WithTargetNamespace adds the targetNamespace to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) WithTargetNamespace(targetNamespace string) *PublicDistributeUserDistributionParams {
	o.SetTargetNamespace(targetNamespace)
	return o
}

// SetTargetNamespace adds the targetNamespace to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) SetTargetNamespace(targetNamespace string) {
	o.TargetNamespace = targetNamespace
}

// WithUserID adds the userID to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) WithUserID(userID string) *PublicDistributeUserDistributionParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the public distribute user distribution params
func (o *PublicDistributeUserDistributionParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *PublicDistributeUserDistributionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param entitlementId
	if err := r.SetPathParam("entitlementId", o.EntitlementID); err != nil {
		return err
	}

	// query param extUserId
	qrExtUserID := o.ExtUserID
	qExtUserID := qrExtUserID
	if qExtUserID != "" {
		if err := r.SetQueryParam("extUserId", qExtUserID); err != nil {
			return err
		}
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.Quantity != nil {

		// query param quantity
		var qrQuantity int32
		if o.Quantity != nil {
			qrQuantity = *o.Quantity
		}
		qQuantity := swag.FormatInt32(qrQuantity)
		if qQuantity != "" {
			if err := r.SetQueryParam("quantity", qQuantity); err != nil {
				return err
			}
		}

	}

	// query param targetNamespace
	qrTargetNamespace := o.TargetNamespace
	qTargetNamespace := qrTargetNamespace
	if qTargetNamespace != "" {
		if err := r.SetQueryParam("targetNamespace", qTargetNamespace); err != nil {
			return err
		}
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
