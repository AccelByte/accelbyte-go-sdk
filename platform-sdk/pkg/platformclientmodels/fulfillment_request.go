// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FulfillmentRequest A DTO object for fulfillment request API call.
//
// swagger:model FulfillmentRequest
type FulfillmentRequest struct {

	// end date time
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// itemId
	ItemID string `json:"itemId,omitempty"`

	// itemSku
	ItemSku string `json:"itemSku,omitempty"`

	// language
	Language string `json:"language,omitempty"`

	// order summary for fulfillment scripts
	Order *OrderSummary `json:"order,omitempty"`

	// orderNo
	OrderNo string `json:"orderNo,omitempty"`

	// quantity
	// Required: true
	Quantity *int32 `json:"quantity"`

	// region
	Region string `json:"region,omitempty"`

	// source
	// Enum: [PURCHASE IAP PROMOTION ACHIEVEMENT REFERRAL_BONUS REDEEM_CODE REWARD GIFT OTHER]
	Source string `json:"source,omitempty"`

	// start date time
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// storeId
	StoreID string `json:"storeId,omitempty"`
}

// Validate validates this fulfillment request
func (m *FulfillmentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentRequest) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FulfillmentRequest) validateOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.Order) { // not required
		return nil
	}

	if m.Order != nil {
		if err := m.Order.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order")
			}
			return err
		}
	}

	return nil
}

func (m *FulfillmentRequest) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

var fulfillmentRequestTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PURCHASE","IAP","PROMOTION","ACHIEVEMENT","REFERRAL_BONUS","REDEEM_CODE","REWARD","GIFT","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fulfillmentRequestTypeSourcePropEnum = append(fulfillmentRequestTypeSourcePropEnum, v)
	}
}

const (

	// FulfillmentRequestSourcePURCHASE captures enum value "PURCHASE"
	FulfillmentRequestSourcePURCHASE string = "PURCHASE"

	// FulfillmentRequestSourceIAP captures enum value "IAP"
	FulfillmentRequestSourceIAP string = "IAP"

	// FulfillmentRequestSourcePROMOTION captures enum value "PROMOTION"
	FulfillmentRequestSourcePROMOTION string = "PROMOTION"

	// FulfillmentRequestSourceACHIEVEMENT captures enum value "ACHIEVEMENT"
	FulfillmentRequestSourceACHIEVEMENT string = "ACHIEVEMENT"

	// FulfillmentRequestSourceREFERRALBONUS captures enum value "REFERRAL_BONUS"
	FulfillmentRequestSourceREFERRALBONUS string = "REFERRAL_BONUS"

	// FulfillmentRequestSourceREDEEMCODE captures enum value "REDEEM_CODE"
	FulfillmentRequestSourceREDEEMCODE string = "REDEEM_CODE"

	// FulfillmentRequestSourceREWARD captures enum value "REWARD"
	FulfillmentRequestSourceREWARD string = "REWARD"

	// FulfillmentRequestSourceGIFT captures enum value "GIFT"
	FulfillmentRequestSourceGIFT string = "GIFT"

	// FulfillmentRequestSourceOTHER captures enum value "OTHER"
	FulfillmentRequestSourceOTHER string = "OTHER"
)

// prop value enum
func (m *FulfillmentRequest) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fulfillmentRequestTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FulfillmentRequest) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *FulfillmentRequest) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FulfillmentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FulfillmentRequest) UnmarshalBinary(b []byte) error {
	var res FulfillmentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
