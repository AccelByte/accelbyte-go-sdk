// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreditRevocation credit revocation
//
// swagger:model CreditRevocation
type CreditRevocation struct {

	// amount
	Amount int64 `json:"amount,omitempty"`

	// balance origin
	BalanceOrigin string `json:"balanceOrigin,omitempty"`

	// currency code
	CurrencyCode string `json:"currencyCode,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// revocation strategy
	RevocationStrategy string `json:"revocationStrategy,omitempty"`

	// skipped
	Skipped bool `json:"skipped"`

	// status
	// Enum: [FAIL SUCCESS]
	Status string `json:"status,omitempty"`

	// wallet Id
	WalletID string `json:"walletId,omitempty"`
}

// Validate validates this credit revocation
func (m *CreditRevocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var creditRevocationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FAIL","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		creditRevocationTypeStatusPropEnum = append(creditRevocationTypeStatusPropEnum, v)
	}
}

const (

	// CreditRevocationStatusFAIL captures enum value "FAIL"
	CreditRevocationStatusFAIL string = "FAIL"

	// CreditRevocationStatusSUCCESS captures enum value "SUCCESS"
	CreditRevocationStatusSUCCESS string = "SUCCESS"
)

// prop value enum
func (m *CreditRevocation) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, creditRevocationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreditRevocation) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreditRevocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreditRevocation) UnmarshalBinary(b []byte) error {
	var res CreditRevocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
