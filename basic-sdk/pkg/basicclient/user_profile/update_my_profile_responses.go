// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package user_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/basic-sdk/pkg/basicclientmodels"
)

// UpdateMyProfileReader is a Reader for the UpdateMyProfile structure.
type UpdateMyProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMyProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateMyProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateMyProfileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateMyProfileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateMyProfileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdateMyProfileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PUT /basic/v1/public/namespaces/{namespace}/users/me/profiles returns an error %d: %s", response.Code(), string(data))
	}
}

// NewUpdateMyProfileOK creates a UpdateMyProfileOK with default headers values
func NewUpdateMyProfileOK() *UpdateMyProfileOK {
	return &UpdateMyProfileOK{}
}

/*UpdateMyProfileOK handles this case with default header values.

  Successful operation
*/
type UpdateMyProfileOK struct {
	Payload *basicclientmodels.UserProfilePrivateInfo
}

func (o *UpdateMyProfileOK) Error() string {
	return fmt.Sprintf("[PUT /basic/v1/public/namespaces/{namespace}/users/me/profiles][%d] updateMyProfileOK  %+v", 200, o.ToString())
}

func (o *UpdateMyProfileOK) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *UpdateMyProfileOK) GetPayload() *basicclientmodels.UserProfilePrivateInfo {
	return o.Payload
}

func (o *UpdateMyProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.UserProfilePrivateInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMyProfileBadRequest creates a UpdateMyProfileBadRequest with default headers values
func NewUpdateMyProfileBadRequest() *UpdateMyProfileBadRequest {
	return &UpdateMyProfileBadRequest{}
}

/*UpdateMyProfileBadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>
*/
type UpdateMyProfileBadRequest struct {
	Payload *basicclientmodels.ValidationErrorEntity
}

func (o *UpdateMyProfileBadRequest) Error() string {
	return fmt.Sprintf("[PUT /basic/v1/public/namespaces/{namespace}/users/me/profiles][%d] updateMyProfileBadRequest  %+v", 400, o.ToString())
}

func (o *UpdateMyProfileBadRequest) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *UpdateMyProfileBadRequest) GetPayload() *basicclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *UpdateMyProfileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMyProfileUnauthorized creates a UpdateMyProfileUnauthorized with default headers values
func NewUpdateMyProfileUnauthorized() *UpdateMyProfileUnauthorized {
	return &UpdateMyProfileUnauthorized{}
}

/*UpdateMyProfileUnauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>
*/
type UpdateMyProfileUnauthorized struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *UpdateMyProfileUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /basic/v1/public/namespaces/{namespace}/users/me/profiles][%d] updateMyProfileUnauthorized  %+v", 401, o.ToString())
}

func (o *UpdateMyProfileUnauthorized) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *UpdateMyProfileUnauthorized) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *UpdateMyProfileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMyProfileForbidden creates a UpdateMyProfileForbidden with default headers values
func NewUpdateMyProfileForbidden() *UpdateMyProfileForbidden {
	return &UpdateMyProfileForbidden{}
}

/*UpdateMyProfileForbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>
*/
type UpdateMyProfileForbidden struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *UpdateMyProfileForbidden) Error() string {
	return fmt.Sprintf("[PUT /basic/v1/public/namespaces/{namespace}/users/me/profiles][%d] updateMyProfileForbidden  %+v", 403, o.ToString())
}

func (o *UpdateMyProfileForbidden) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *UpdateMyProfileForbidden) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *UpdateMyProfileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMyProfileNotFound creates a UpdateMyProfileNotFound with default headers values
func NewUpdateMyProfileNotFound() *UpdateMyProfileNotFound {
	return &UpdateMyProfileNotFound{}
}

/*UpdateMyProfileNotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>20017</td><td>user not linked</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>
*/
type UpdateMyProfileNotFound struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *UpdateMyProfileNotFound) Error() string {
	return fmt.Sprintf("[PUT /basic/v1/public/namespaces/{namespace}/users/me/profiles][%d] updateMyProfileNotFound  %+v", 404, o.ToString())
}

func (o *UpdateMyProfileNotFound) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *UpdateMyProfileNotFound) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *UpdateMyProfileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
