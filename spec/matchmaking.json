{
  "host": "demo.accelbyte.io",
  "info": {
    "description": "Justice Matchmaking Service",
    "title": "Justice Matchmaking Service",
    "version": "2.30.4"
  },
  "schemes": [
    "https"
  ],
  "externalDocs": {
    "description": "API Docs",
    "url": "https://demo.accelbyte.io/matchmaking/apidocs"
  },
  "securityDefinitions": {
    "HasPermission": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {},
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "HasScope": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {},
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "paths": {
    "/healthz": {
      "get": {
        "operationId": "GetHealthcheckInfo",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "tags": [
          "Matchmaking Operations"
        ]
      }
    },
    "/matchmaking/healthz": {
      "get": {
        "operationId": "handlerV3Healthz",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "tags": [
          "Matchmaking Operations"
        ]
      }
    },
    "/matchmaking/namespaces/{namespace}/channels": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Reads all available channels in a namespace\n",
        "operationId": "GetAllChannelsHandler",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "number of object per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset index",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetChannelsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get all channels",
        "tags": [
          "Matchmaking",
          "admin"
        ],
        "x-security": [
          {
            "userPermissions": [
              "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a new matchmaking channel.\n\nMatchmaking channels is a list of pool name that is eligible for matchmaking processes. \nGameMode isolates each matchmaking pools.\n\nIf match timeout is set to 0, by default, incoming matchmaking requests will be timed out after 1 hour.\n\nIf max worker delay is set to 0, by default, it will wait for at max ~8 seconds during low volume.\n\nRule Set\n\nMatching Rule used to classify the player. Player that has matched criteria will be grouped together within an ally.\n\nValid value for criteria is \u0026#34;distance\u0026#34;\n",
        "operationId": "CreateChannelHandler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ChannelRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateChannelResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create a channel",
        "tags": [
          "Matchmaking",
          "admin"
        ],
        "x-security": [
          {
            "userPermissions": [
              "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [CREATE]"
            ]
          }
        ]
      }
    },
    "/matchmaking/namespaces/{namespace}/channels/{channelName}/metrics": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get metric for a specific match pool\n\t\nResult: queue_time in seconds\n",
        "operationId": "GetMatchPoolMetric",
        "parameters": [
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.TicketMetricResultRecord"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get metrics for a specific channel",
        "tags": [
          "Matchmaking",
          "public"
        ],
        "x-security": [
          {
            "userPermissions": [
              "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL:METRICS [READ]"
            ]
          }
        ]
      }
    },
    "/matchmaking/namespaces/{namespace}/channels/{channel}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Deletes a matchmaking channel. Matchmaking channels is a list of \npool name that is eligible for matchmaking processes. GameMode isolates each matchmaking pools.\n\nTrying to delete non-existent channel will result deletion success\n",
        "operationId": "DeleteChannelHandler",
        "parameters": [
          {
            "description": "channel to be deleted",
            "in": "path",
            "name": "channel",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete a channel",
        "tags": [
          "Matchmaking",
          "admin"
        ],
        "x-security": [
          {
            "userPermissions": [
              "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [DELETE]"
            ]
          }
        ]
      }
    },
    "/matchmaking/namespaces/{namespace}/matchresult": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Process match result into final attribute value and stores it to player attribute\n\nWill return final attribute value\n",
        "operationId": "StoreMatchResults",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.MatchResultRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MatchResultResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Store match result",
        "tags": [
          "Matchmaking",
          "public"
        ],
        "x-security": [
          {
            "userPermissions": [
              "NAMESPACE:{namespace}:MATCHRESULT [CREATE]"
            ]
          }
        ]
      }
    },
    "/matchmaking/namespaces/{namespace}/rebalance": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Do rebalance the teams based on MMR from given matchID, \nconsider attribute name \u0026#34;mmr\u0026#34; (case-insensitive), \nor any first attribute with criteria \u0026#34;distance\u0026#34;\n\t\t\nWill return rebalanced mm result",
        "operationId": "Rebalance",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.RebalanceRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.RebalanceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Rebalance Matchmaking based on MMR",
        "tags": [
          "Matchmaking",
          "public"
        ],
        "x-security": [
          {
            "userPermissions": [
              "NAMESPACE:{namespace}:MATCHMAKING:REBALANCE [UPDATE]"
            ]
          }
        ]
      }
    },
    "/matchmaking/namespaces/{namespace}/sessions": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Queues joinable session so that it will be matched with player\u0026#39;s match request tickets. \nThe session queued must be in a channel/game mode that is set to have joinable flag. \nThe session will be in queue until it is full or expired. \nBoth the number of players and session queue timeout can be set in the channel\u0026#39;s config.\n\nThis endpoint is intended to be called by game server to let matchmaker know that \nthe game server is ready for receiving more players through matchmaking tickets to its session.\n\nIf a session is already queued, and game server wants to modify the data or \nrenew the queue timeout (e.g. some player left and more empty slot opened up), \nsimply call this endpoint with the updated session data. \n",
        "operationId": "QueueSessionHandler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.MatchmakingResult"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Queue joinable session",
        "tags": [
          "Matchmaking",
          "public"
        ],
        "x-security": [
          {
            "userPermissions": [
              "NAMESPACE:{namespace}:SESSION [CREATE]"
            ]
          }
        ]
      }
    },
    "/matchmaking/namespaces/{namespace}/sessions/dequeue": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Dequeues joinable session so that it will not be matched with player\u0026#39;s match request tickets. \n\nThis endpoint is intended to be called by game server to let matchmaker know that \nthe game server does not want more players to its session, even though it is not full. \n",
        "operationId": "DequeueSessionHandler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.DequeueRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Dequeue joinable session",
        "tags": [
          "Matchmaking",
          "public"
        ],
        "x-security": [
          {
            "userPermissions": [
              "NAMESPACE:{namespace}:SESSION [UPDATE]"
            ]
          }
        ]
      }
    },
    "/matchmaking/namespaces/{namespace}/sessions/{matchID}/status": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Queries the specified session\u0026#39;s status. Game servers are expected to \ncall this periodically as long as it has a session in queue to see \nif there are new players being matched to the session.\n\nPossible session statuses are \u0026#34;sessionInQueue\u0026#34;, \u0026#34;sessionFull\u0026#34;, and \u0026#34;sessionTimeout\u0026#34;.\n\nif party_id value empty/null, field will not show in response body.\n",
        "operationId": "QuerySessionHandler",
        "parameters": [
          {
            "description": "ID of the match session",
            "in": "path",
            "name": "matchID",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MatchmakingResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Query joinable session status",
        "tags": [
          "Matchmaking",
          "public"
        ],
        "x-security": [
          {
            "userPermissions": [
              "NAMESPACE:{namespace}:SESSION [READ]"
            ]
          }
        ]
      }
    },
    "/matchmaking/social/playtime/namespaces/{namespace}/weight": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a connection weight between player and playtime.\n\nThis endpoint is intended to be called by admin for debugging purpose on social matchmaking rule.\n",
        "operationId": "UpdatePlayTimeWeight",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdatePlayTimeWeightRequest"
            }
          },
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/models.UpdatePlayerPlaytimeWeightResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510301\u003c/td\u003e\u003ctd\u003euser playtime not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update player -- playtime connection weight",
        "tags": [
          "Social Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [UPDATE]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/all/parties": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get all parties queueing in all channels.",
        "operationId": "GetAllPartyInAllChannel",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "additionalProperties": {
                "items": {
                  "$ref": "#/definitions/models.MatchingParty"
                },
                "type": "array"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get all party in all channels",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/all/sessions/bulk": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Bulk get sessions.",
        "operationId": "BulkGetSessions",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "comma-delimited session IDs",
            "in": "query",
            "name": "matchIDs",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.MatchmakingResult"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Bulk get sessions",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/export": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Export channels configuration to file. \n\nAction Code: 510114",
        "operationId": "ExportChannels",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Disposition": {
                "description": "Content-Disposition",
                "type": "string"
              }
            },
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Export channels",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Import channels configuration from file. It will merge with existing channels.\nAvailable import strategy:\n- leaveOut: if channel with same key exist, the existing will be used and imported one will be ignored (default)\n- replace: if channel with same key exist, the imported channel will be used and existing one will be removed\n\nAction Code: 510113",
        "operationId": "ImportChannels",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "file to be imported",
            "in": "formData",
            "name": "file",
            "type": "file"
          },
          {
            "description": "strategy for import",
            "in": "formData",
            "name": "strategy",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ImportConfigResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510109\u003c/td\u003e\u003ctd\u003efailed to read file\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Import channels",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [UPDATE]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Reads single channel based on namespace and channel name\n\nAction Code: 510112",
        "operationId": "GetSingleMatchmakingChannel",
        "parameters": [
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChannelV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get single channel",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update channel based on namespace and channel name\n\nAction Code: 510111",
        "operationId": "UpdateMatchmakingChannel",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateChannelRequest"
            }
          },
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update a channel",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [UPDATE]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/mocks": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "\tDelete all mock tickets and matches in a channel.\n\u0026#39;",
        "operationId": "CleanAllMocks",
        "parameters": [
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Mocks cleaned up"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete all mock tickets and matches",
        "tags": [
          "Mock Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [UPDATE]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/mocks/matches": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "\tRead all mock matches in a channel resulted from matching mock tickets.\n\u0026#39;",
        "operationId": "GetAllMockMatches",
        "parameters": [
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Mock matches queried",
            "schema": {
              "$ref": "#/definitions/models.GetMockMatchesResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get all mock matches",
        "tags": [
          "Mock Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\tRead mock matches that has timestamp older than specified timestamp in a channel resulted from matching mock tickets.\n\u0026#39;",
        "operationId": "GetMockMatchesByTimestamp",
        "parameters": [
          {
            "description": "timestamp of oldest match to get",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.QueryMockBy"
            }
          },
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Mock matches queried",
            "schema": {
              "$ref": "#/definitions/models.GetMockMatchesResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get mock matches after timestamp",
        "tags": [
          "Mock Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/mocks/tickets": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "\tRead all mock tickets in a channel.\n\u0026#39;",
        "operationId": "GetAllMockTickets",
        "parameters": [
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Mock tickets queried",
            "schema": {
              "$ref": "#/definitions/models.GetMockTicketsResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get all mock tickets",
        "tags": [
          "Mock Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\tCreate and queue mock tickets into specified game mode\u0026#39;s pool. \n\tTicket\u0026#39;s MMRs will be randomized using Normal distribution according to the input mean and standard deviation.\n\tAll mock tickets and matches will be cleaned up automatically after 1 day.\n\u0026#39;",
        "operationId": "CreateMockTickets",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateMockTicket"
            }
          },
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Mock tickets created",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.MockTicket"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create mock tickets",
        "tags": [
          "Mock Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [CREATE]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/mocks/tickets/bulk": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\tCreate and queue mock tickets into specified game mode\u0026#39;s pool. \n\tThe tickets input will be used as is.\n\u0026#39;",
        "operationId": "BulkCreateMockTickets",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/models.MatchingParty"
              },
              "type": "array"
            }
          },
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Mock tickets created"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Bulk create mock tickets",
        "tags": [
          "Mock Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [CREATE]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/mocks/tickets/query": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\tRead mock tickets after the specified timestamp in a channel.\n\u0026#39;",
        "operationId": "GetMockTicketsByTimestamp",
        "parameters": [
          {
            "description": "timestamp of oldest ticket to get",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.QueryMockBy"
            }
          },
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Mock tickets queried",
            "schema": {
              "$ref": "#/definitions/models.GetMockTicketsResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get mock tickets after timestamp",
        "tags": [
          "Mock Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/parties": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get all parties queueing in a channel.",
        "operationId": "GetAllPartyInChannel",
        "parameters": [
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.MatchingParty"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get all party in a channel",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/sessions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get all sessions in a channel.\n\nif party_id value empty/null, field will not show in response body.",
        "operationId": "GetAllSessionsInChannel",
        "parameters": [
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.MatchmakingResult"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get all channel sessions",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/sessions/{matchID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a session in a channel.",
        "operationId": "DeleteSessionInChannel",
        "parameters": [
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the match session",
            "in": "path",
            "name": "matchID",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete session in a channel",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [DELETE]"
            ]
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add user into the session in a channel.",
        "operationId": "AddUserIntoSessionInChannel",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.MatchAddUserIntoSessionRequest"
            }
          },
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the match session",
            "in": "path",
            "name": "matchID",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Add user into the session in a channel",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [CREATE]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/sessions/{matchID}/users/{userID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a user from a session in the channel.",
        "operationId": "DeleteUserFromSessionInChannel",
        "parameters": [
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the match session",
            "in": "path",
            "name": "matchID",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the user",
            "in": "path",
            "name": "userID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded"
          },
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete user from the session in a channel",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [DELETE]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/stats": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "\tGet a channel\u0026#39;s stat data (mean, stddev, min, max) according to the stats collected from statistics service.\n\u0026#39;",
        "operationId": "GetStatData",
        "parameters": [
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Stats queried",
            "schema": {
              "$ref": "#/definitions/models.StatResumeResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get stats",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/sessions/history/search": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\n\u0026lt;p\u0026gt;\n\t\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/sessionbrowser/admin/namespaces/{namespace}/sessions/history/search [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\t\u0026lt;/ul\u0026gt;\n\u0026lt;/p\u0026gt;\n\nSearch sessions.",
        "operationId": "SearchSessions",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "limit",
            "in": "query",
            "name": "limit",
            "required": true,
            "type": "integer"
          },
          {
            "description": "offset",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          },
          {
            "description": "ID of the channel",
            "in": "query",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "only deleted session",
            "in": "query",
            "name": "deleted",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "ID of the match session",
            "in": "query",
            "name": "matchID",
            "type": "string"
          },
          {
            "description": "ID of the party",
            "in": "query",
            "name": "partyID",
            "type": "string"
          },
          {
            "description": "ID of the user",
            "in": "query",
            "name": "userID",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/service.GetSessionHistorySearchResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Search sessions",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/sessions/{matchID}/history/detailed": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\n\u0026lt;p\u0026gt;\n\t\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/sessionbrowser/admin/namespaces/{namespace}/sessions/{sessionId}/history/detailed [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\t\u0026lt;/ul\u0026gt;\n\u0026lt;/p\u0026gt;\n\nGet session history detailed.\n\nif party_id value empty/null, field will not show in response body.",
        "operationId": "GetSessionHistoryDetailed",
        "parameters": [
          {
            "description": "ID of the match session",
            "in": "path",
            "name": "matchID",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "items": {
                "$ref": "#/definitions/service.GetSessionHistoryDetailedResponseItem"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get session history detailed",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      }
    },
    "/matchmaking/v1/messages": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "get the list of messages.",
        "operationId": "publicGetMessages",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/log.AppMessageDeclaration"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "get service messages",
        "tags": [
          "Matchmaking Operations"
        ]
      }
    },
    "/matchmaking/v1/public/namespaces/{namespace}/channels": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Reads all available channels in a namespace\n",
        "operationId": "PublicGetAllMatchmakingChannel",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.ChannelV1"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get all channels",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v1/public/namespaces/{namespace}/channels/{channelName}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Reads single channel based on namespace and channel name\n",
        "operationId": "PublicGetSingleMatchmakingChannel",
        "parameters": [
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChannelV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get single channel",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v2/admin/namespaces/{namespace}/sessions/history/search": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;p\u0026gt;\n\t\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/sessionbrowser/admin/namespaces/{namespace}/sessions/history/search [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\t\u0026lt;/ul\u0026gt;\n\u0026lt;/p\u0026gt;\n\nSearch sessions. Optimize the query by differentiating query with filter namespace only and filter with namespace \u0026amp; other filter (partyID, userID, matchID).\nQuery with filter namespace only will not group whole session data while query with filter namespace \u0026amp; other filter will include session data.",
        "operationId": "SearchSessionsV2",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "limit",
            "in": "query",
            "name": "limit",
            "required": true,
            "type": "integer"
          },
          {
            "description": "offset",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          },
          {
            "description": "ID of the channel",
            "in": "query",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "only deleted session",
            "in": "query",
            "name": "deleted",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "ID of the match session",
            "in": "query",
            "name": "matchID",
            "type": "string"
          },
          {
            "description": "ID of the party",
            "in": "query",
            "name": "partyID",
            "type": "string"
          },
          {
            "description": "ID of the user",
            "in": "query",
            "name": "userID",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/service.GetSessionHistorySearchResponseV2"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Search sessions",
        "tags": [
          "Matchmaking"
        ],
        "x-security": [
          {
            "userPermissions": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ]
          }
        ]
      }
    },
    "/matchmaking/version": {
      "get": {
        "operationId": "versionCheckHandler",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "tags": [
          "Matchmaking Operations"
        ]
      }
    }
  },
  "definitions": {
    "log.AppMessageDeclaration": {
      "properties": {
        "Attributes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Code": {
          "type": "string"
        },
        "CodeName": {
          "type": "string"
        },
        "Section": {
          "type": "string"
        },
        "Service": {
          "type": "string"
        },
        "Text": {
          "type": "string"
        }
      },
      "required": [
        "Attributes",
        "Code",
        "CodeName",
        "Section",
        "Service",
        "Text"
      ]
    },
    "models.AllianceFlexingRule": {
      "properties": {
        "combination": {
          "$ref": "#/definitions/models.Combination"
        },
        "duration": {
          "format": "int64",
          "type": "integer"
        },
        "max_number": {
          "format": "int32",
          "type": "integer"
        },
        "min_number": {
          "format": "int32",
          "type": "integer"
        },
        "player_max_number": {
          "format": "int32",
          "type": "integer"
        },
        "player_min_number": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "combination",
        "duration",
        "max_number",
        "min_number",
        "player_max_number",
        "player_min_number"
      ]
    },
    "models.AllianceRule": {
      "properties": {
        "combination": {
          "$ref": "#/definitions/models.Combination"
        },
        "max_number": {
          "format": "int32",
          "type": "integer"
        },
        "min_number": {
          "format": "int32",
          "type": "integer"
        },
        "player_max_number": {
          "format": "int32",
          "type": "integer"
        },
        "player_min_number": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "combination",
        "max_number",
        "min_number",
        "player_max_number",
        "player_min_number"
      ]
    },
    "models.AllianceRuleV1": {
      "properties": {
        "combination": {
          "$ref": "#/definitions/models.Combination"
        },
        "maxNumber": {
          "format": "int32",
          "type": "integer"
        },
        "minNumber": {
          "format": "int32",
          "type": "integer"
        },
        "playerMaxNumber": {
          "format": "int32",
          "type": "integer"
        },
        "playerMinNumber": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "combination",
        "maxNumber",
        "minNumber",
        "playerMaxNumber",
        "playerMinNumber"
      ]
    },
    "models.BucketMMRRule": {
      "properties": {
        "disable_authority": {
          "type": "boolean",
          "x-omitempty": false
        },
        "flex_authority_count": {
          "format": "int32",
          "type": "integer"
        },
        "flex_flat_step_range": {
          "format": "int32",
          "type": "integer"
        },
        "flex_immunity_count": {
          "format": "int32",
          "type": "integer"
        },
        "flex_range_max": {
          "format": "int32",
          "type": "integer"
        },
        "flex_rate_ms": {
          "format": "int64",
          "type": "integer"
        },
        "flex_step_max": {
          "format": "int32",
          "type": "integer"
        },
        "force_authority_match": {
          "type": "boolean",
          "x-omitempty": false
        },
        "initial_step_range": {
          "format": "int32",
          "type": "integer"
        },
        "mmr_max": {
          "format": "int32",
          "type": "integer"
        },
        "mmr_mean": {
          "format": "int32",
          "type": "integer"
        },
        "mmr_min": {
          "format": "int32",
          "type": "integer"
        },
        "mmr_std_dev": {
          "format": "int32",
          "type": "integer"
        },
        "override_mmr_data": {
          "type": "boolean",
          "x-omitempty": false
        },
        "use_bucket_mmr": {
          "type": "boolean",
          "x-omitempty": false
        },
        "use_flat_flex_step": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "disable_authority",
        "flex_authority_count",
        "flex_flat_step_range",
        "flex_immunity_count",
        "flex_range_max",
        "flex_rate_ms",
        "flex_step_max",
        "force_authority_match",
        "initial_step_range",
        "mmr_max",
        "mmr_mean",
        "mmr_min",
        "mmr_std_dev",
        "override_mmr_data",
        "use_bucket_mmr",
        "use_flat_flex_step"
      ]
    },
    "models.Channel": {
      "properties": {
        "blocked_player_option": {
          "type": "string"
        },
        "deployment": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "find_match_timeout_seconds": {
          "format": "int32",
          "type": "integer"
        },
        "game_mode": {
          "type": "string"
        },
        "joinable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "max_delay_ms": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "region_expansion_range_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_expansion_rate_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_latency_initial_range_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_latency_max_ms": {
          "format": "int32",
          "type": "integer"
        },
        "ruleset": {
          "$ref": "#/definitions/models.RuleSet"
        },
        "session_queue_timeout_seconds": {
          "format": "int32",
          "type": "integer"
        },
        "slug": {
          "type": "string"
        },
        "social_matchmaking": {
          "type": "boolean",
          "x-omitempty": false
        },
        "sub_gamemode_selection": {
          "type": "string"
        },
        "ticket_observability_enable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "updated_at": {
          "type": "string"
        },
        "use_sub_gamemode": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "blocked_player_option",
        "deployment",
        "description",
        "find_match_timeout_seconds",
        "game_mode",
        "joinable",
        "max_delay_ms",
        "namespace",
        "region_expansion_range_ms",
        "region_expansion_rate_ms",
        "region_latency_initial_range_ms",
        "region_latency_max_ms",
        "session_queue_timeout_seconds",
        "slug",
        "social_matchmaking",
        "sub_gamemode_selection",
        "updated_at",
        "use_sub_gamemode"
      ]
    },
    "models.ChannelRequest": {
      "properties": {
        "blocked_player_option": {
          "enum": [
            "blockedPlayerCanMatch",
            "blockedPlayerCanMatchOnDifferentTeam",
            "blockedPlayerCannotMatch"
          ],
          "type": "string"
        },
        "deployment": {
          "type": "string",
          "x-nullable": false
        },
        "description": {
          "type": "string",
          "x-nullable": false
        },
        "find_match_timeout_seconds": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "game_mode": {
          "type": "string",
          "x-nullable": false
        },
        "joinable": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "max_delay_ms": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "region_expansion_range_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_expansion_rate_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_latency_initial_range_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_latency_max_ms": {
          "format": "int32",
          "type": "integer"
        },
        "rule_set": {
          "$ref": "#/definitions/models.RuleSet",
          "x-nullable": false
        },
        "session_queue_timeout_seconds": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "social_matchmaking": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sub_gamemode_selection": {
          "enum": [
            "random",
            "ticketOrder"
          ],
          "type": "string",
          "x-nullable": true
        },
        "ticket_observability_enable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "use_sub_gamemode": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        }
      },
      "required": [
        "deployment",
        "description",
        "find_match_timeout_seconds",
        "game_mode",
        "max_delay_ms",
        "rule_set",
        "session_queue_timeout_seconds"
      ]
    },
    "models.ChannelV1": {
      "properties": {
        "blocked_player_option": {
          "type": "string"
        },
        "deployment": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "findMatchTimeoutSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "gameMode": {
          "type": "string"
        },
        "joinable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "max_delay_ms": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "region_expansion_range_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_expansion_rate_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_latency_initial_range_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_latency_max_ms": {
          "format": "int32",
          "type": "integer"
        },
        "ruleSet": {
          "$ref": "#/definitions/models.RuleSetV1"
        },
        "sessionQueueTimeoutSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "slug": {
          "type": "string"
        },
        "socialMatchmaking": {
          "type": "boolean",
          "x-omitempty": false
        },
        "sub_gamemode_selection": {
          "type": "string"
        },
        "ticket_observability_enable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "updatedAt": {
          "type": "string"
        },
        "use_sub_gamemode": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "blocked_player_option",
        "deployment",
        "description",
        "findMatchTimeoutSeconds",
        "gameMode",
        "joinable",
        "max_delay_ms",
        "namespace",
        "region_expansion_range_ms",
        "region_expansion_rate_ms",
        "region_latency_initial_range_ms",
        "region_latency_max_ms",
        "sessionQueueTimeoutSeconds",
        "slug",
        "socialMatchmaking",
        "sub_gamemode_selection",
        "updatedAt",
        "use_sub_gamemode"
      ]
    },
    "models.Combination": {
      "properties": {
        "alliances": {
          "items": {
            "items": {
              "$ref": "#/definitions/models.Role"
            },
            "type": "array"
          },
          "type": "array"
        },
        "has_combination": {
          "type": "boolean",
          "x-omitempty": false
        },
        "role_flexing_enable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "role_flexing_player": {
          "format": "int32",
          "type": "integer"
        },
        "role_flexing_second": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "has_combination",
        "role_flexing_enable",
        "role_flexing_player",
        "role_flexing_second"
      ]
    },
    "models.CreateChannelResponse": {
      "properties": {
        "blocked_player_option": {
          "type": "string"
        },
        "deployment": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "find_match_timeout_seconds": {
          "format": "int32",
          "type": "integer"
        },
        "game_mode": {
          "type": "string"
        },
        "joinable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "max_delay_ms": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "region_expansion_range_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_expansion_rate_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_latency_initial_range_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_latency_max_ms": {
          "format": "int32",
          "type": "integer"
        },
        "ruleset": {
          "$ref": "#/definitions/models.RuleSet"
        },
        "session_queue_timeout_seconds": {
          "format": "int32",
          "type": "integer"
        },
        "slug": {
          "type": "string"
        },
        "social_matchmaking": {
          "type": "boolean",
          "x-omitempty": false
        },
        "sub_gamemode_selection": {
          "type": "string"
        },
        "ticket_observability_enable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "updated_at": {
          "type": "string"
        },
        "use_sub_gamemode": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "blocked_player_option",
        "deployment",
        "description",
        "find_match_timeout_seconds",
        "game_mode",
        "joinable",
        "max_delay_ms",
        "namespace",
        "region_expansion_range_ms",
        "region_expansion_rate_ms",
        "region_latency_initial_range_ms",
        "region_latency_max_ms",
        "session_queue_timeout_seconds",
        "slug",
        "social_matchmaking",
        "sub_gamemode_selection",
        "updated_at",
        "use_sub_gamemode"
      ]
    },
    "models.CreateMockTicket": {
      "properties": {
        "attribute_name": {
          "type": "string"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "mmrMax": {
          "format": "double",
          "type": "number"
        },
        "mmrMean": {
          "format": "double",
          "type": "number"
        },
        "mmrMin": {
          "format": "double",
          "type": "number"
        },
        "mmrStdDev": {
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "attribute_name",
        "count",
        "mmrMax",
        "mmrMean",
        "mmrMin",
        "mmrStdDev"
      ]
    },
    "models.DequeueRequest": {
      "properties": {
        "match_id": {
          "type": "string"
        }
      },
      "required": [
        "match_id"
      ]
    },
    "models.FlexingRule": {
      "properties": {
        "attribute": {
          "type": "string",
          "x-nullable": false
        },
        "criteria": {
          "type": "string",
          "x-nullable": false
        },
        "duration": {
          "format": "int64",
          "type": "integer"
        },
        "reference": {
          "format": "double",
          "type": "number",
          "x-nullable": false
        }
      },
      "required": [
        "attribute",
        "criteria",
        "duration",
        "reference"
      ]
    },
    "models.GetChannelsResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/models.Channel"
          },
          "type": "array"
        },
        "pagination": {
          "$ref": "#/definitions/models.Pagination"
        }
      },
      "required": [
        "data",
        "pagination"
      ]
    },
    "models.GetMockMatchesResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "largest_mmr_distance": {
          "format": "int32",
          "type": "integer"
        },
        "longest_time_to_match_seconds": {
          "format": "int64",
          "type": "integer"
        },
        "matches": {
          "items": {
            "$ref": "#/definitions/models.MockMatch"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "largest_mmr_distance",
        "longest_time_to_match_seconds",
        "matches"
      ]
    },
    "models.GetMockTicketsResponse": {
      "properties": {
        "cancelled_count": {
          "format": "int32",
          "type": "integer"
        },
        "highest_mmr": {
          "format": "int32",
          "type": "integer"
        },
        "in_queue_count": {
          "format": "int32",
          "type": "integer"
        },
        "lowest_mmr": {
          "format": "int32",
          "type": "integer"
        },
        "matched_count": {
          "format": "int32",
          "type": "integer"
        },
        "mmr_in_queue": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object"
        },
        "mmr_matched": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object"
        },
        "mmr_timeout": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object"
        },
        "tickets": {
          "items": {
            "$ref": "#/definitions/models.MockTicket"
          },
          "type": "array"
        },
        "timeout_count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "cancelled_count",
        "highest_mmr",
        "in_queue_count",
        "lowest_mmr",
        "matched_count",
        "mmr_in_queue",
        "mmr_matched",
        "mmr_timeout",
        "tickets",
        "timeout_count"
      ]
    },
    "models.ImportConfigResponse": {
      "properties": {
        "failedConfigs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ignoredConfigs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "newConfigs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "replacedConfigs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "failedConfigs",
        "ignoredConfigs",
        "newConfigs",
        "replacedConfigs"
      ]
    },
    "models.MatchAddUserIntoSessionRequest": {
      "properties": {
        "blocked_players": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "party_id": {
          "type": "string",
          "x-nullable": true
        },
        "user_id": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "user_id"
      ]
    },
    "models.MatchOption": {
      "properties": {
        "name": {
          "type": "string",
          "x-nullable": false
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "models.MatchOptionRule": {
      "properties": {
        "options": {
          "items": {
            "$ref": "#/definitions/models.MatchOption"
          },
          "type": "array"
        }
      }
    },
    "models.MatchResultRequest": {
      "properties": {
        "match_id": {
          "type": "string",
          "x-nullable": false
        },
        "players": {
          "items": {
            "$ref": "#/definitions/models.PlayerResultRequest"
          },
          "type": "array",
          "x-nullable": false
        }
      },
      "required": [
        "match_id",
        "players"
      ]
    },
    "models.MatchResultResponse": {
      "properties": {
        "match_id": {
          "type": "string"
        },
        "players": {
          "items": {
            "$ref": "#/definitions/models.PlayerResultResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "match_id",
        "players"
      ]
    },
    "models.MatchingAlly": {
      "properties": {
        "matching_parties": {
          "items": {
            "$ref": "#/definitions/models.MatchingParty"
          },
          "type": "array"
        }
      },
      "required": [
        "matching_parties"
      ]
    },
    "models.MatchingParty": {
      "properties": {
        "first_ticket_created_at": {
          "format": "int64",
          "type": "integer"
        },
        "party_attributes": {
          "type": "object"
        },
        "party_id": {
          "type": "string",
          "x-nullable": false
        },
        "party_members": {
          "items": {
            "$ref": "#/definitions/models.PartyMember"
          },
          "type": "array"
        },
        "ticket_created_at": {
          "format": "int64",
          "type": "integer"
        },
        "ticket_id": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "first_ticket_created_at",
        "party_attributes",
        "party_id",
        "party_members",
        "ticket_id"
      ]
    },
    "models.MatchingRule": {
      "properties": {
        "attribute": {
          "type": "string",
          "x-nullable": false
        },
        "criteria": {
          "type": "string",
          "x-nullable": false
        },
        "reference": {
          "format": "double",
          "type": "number",
          "x-nullable": false
        }
      },
      "required": [
        "attribute",
        "criteria",
        "reference"
      ]
    },
    "models.MatchmakingResult": {
      "properties": {
        "channel": {
          "type": "string",
          "x-nullable": false
        },
        "client_version": {
          "type": "string",
          "x-nullable": false
        },
        "deployment": {
          "type": "string",
          "x-nullable": false
        },
        "error_code": {
          "format": "int32",
          "type": "integer"
        },
        "error_message": {
          "type": "string"
        },
        "game_mode": {
          "type": "string",
          "x-nullable": false
        },
        "is_mock": {
          "type": "string"
        },
        "joinable": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "match_id": {
          "type": "string",
          "x-nullable": false
        },
        "matching_allies": {
          "items": {
            "$ref": "#/definitions/models.MatchingAlly"
          },
          "type": "array"
        },
        "namespace": {
          "type": "string",
          "x-nullable": false
        },
        "party_attributes": {
          "type": "object"
        },
        "party_id": {
          "type": "string",
          "x-nullable": true
        },
        "queued_at": {
          "format": "int64",
          "type": "integer",
          "x-nullable": false
        },
        "region": {
          "type": "string",
          "x-nullable": false
        },
        "server_name": {
          "type": "string",
          "x-nullable": false
        },
        "status": {
          "type": "string",
          "x-nullable": false
        },
        "ticket_id": {
          "type": "string",
          "x-nullable": false
        },
        "ticket_ids": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "channel",
        "client_version",
        "deployment",
        "error_code",
        "error_message",
        "game_mode",
        "is_mock",
        "match_id",
        "matching_allies",
        "namespace",
        "party_attributes",
        "queued_at",
        "region",
        "server_name",
        "status",
        "ticket_id",
        "updated_at"
      ]
    },
    "models.MockMatch": {
      "properties": {
        "channel": {
          "type": "string",
          "x-nullable": false
        },
        "client_version": {
          "type": "string",
          "x-nullable": false
        },
        "deployment": {
          "type": "string",
          "x-nullable": false
        },
        "error_code": {
          "format": "int32",
          "type": "integer"
        },
        "error_message": {
          "type": "string"
        },
        "game_mode": {
          "type": "string",
          "x-nullable": false
        },
        "is_mock": {
          "type": "string"
        },
        "joinable": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "match_id": {
          "type": "string",
          "x-nullable": false
        },
        "matching_allies": {
          "items": {
            "$ref": "#/definitions/models.MatchingAlly"
          },
          "type": "array"
        },
        "mmr_distance": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string",
          "x-nullable": false
        },
        "party_attributes": {
          "type": "object"
        },
        "party_id": {
          "type": "string",
          "x-nullable": true
        },
        "queued_at": {
          "format": "int64",
          "type": "integer",
          "x-nullable": false
        },
        "region": {
          "type": "string",
          "x-nullable": false
        },
        "server_name": {
          "type": "string",
          "x-nullable": false
        },
        "status": {
          "type": "string",
          "x-nullable": false
        },
        "ticket_id": {
          "type": "string",
          "x-nullable": false
        },
        "ticket_ids": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "time_to_match_seconds": {
          "format": "int64",
          "type": "integer"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "channel",
        "client_version",
        "deployment",
        "error_code",
        "error_message",
        "game_mode",
        "is_mock",
        "match_id",
        "matching_allies",
        "mmr_distance",
        "namespace",
        "party_attributes",
        "queued_at",
        "region",
        "server_name",
        "status",
        "ticket_id",
        "time_to_match_seconds",
        "updated_at"
      ]
    },
    "models.MockTicket": {
      "properties": {
        "additional_criteria": {
          "type": "object"
        },
        "channel": {
          "type": "string"
        },
        "created_at": {
          "format": "int64",
          "type": "integer"
        },
        "first_ticket_created_at": {
          "format": "int64",
          "type": "integer"
        },
        "is_mock": {
          "type": "string"
        },
        "is_sampled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "latency_map": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object"
        },
        "namespace": {
          "type": "string"
        },
        "party_attributes": {
          "type": "object"
        },
        "party_id": {
          "type": "string"
        },
        "party_leader_id": {
          "type": "string"
        },
        "party_members": {
          "items": {
            "$ref": "#/definitions/models.PartyMember"
          },
          "type": "array"
        },
        "priority": {
          "format": "int32",
          "type": "integer"
        },
        "sampling_properties": {
          "items": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "array"
        },
        "sorted_latency": {
          "items": {
            "$ref": "#/definitions/models.Region"
          },
          "type": "array"
        },
        "status": {
          "type": "string"
        },
        "ticket_id": {
          "type": "string"
        },
        "ticket_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "additional_criteria",
        "channel",
        "created_at",
        "first_ticket_created_at",
        "is_mock",
        "is_sampled",
        "latency_map",
        "namespace",
        "party_attributes",
        "party_id",
        "party_leader_id",
        "party_members",
        "priority",
        "sampling_properties",
        "sorted_latency",
        "status",
        "ticket_id",
        "ticket_ids"
      ]
    },
    "models.Pagination": {
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      },
      "required": [
        "first",
        "last",
        "next",
        "previous"
      ]
    },
    "models.PartyMember": {
      "properties": {
        "extra_attributes": {
          "type": "object"
        },
        "user_id": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "extra_attributes",
        "user_id"
      ]
    },
    "models.PlayerResultRequest": {
      "properties": {
        "results": {
          "items": {
            "$ref": "#/definitions/models.ResultAttributeRequest"
          },
          "type": "array",
          "x-nullable": false
        },
        "user_id": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "results",
        "user_id"
      ]
    },
    "models.PlayerResultResponse": {
      "properties": {
        "current_score": {
          "items": {
            "$ref": "#/definitions/models.ResultAttributeResponse"
          },
          "type": "array"
        },
        "user_id": {
          "type": "string"
        }
      },
      "required": [
        "current_score",
        "user_id"
      ]
    },
    "models.QueryMockBy": {
      "properties": {
        "timestamp_after": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "timestamp_after"
      ]
    },
    "models.RebalanceRequest": {
      "properties": {
        "match_id": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "match_id"
      ]
    },
    "models.RebalanceResponse": {
      "properties": {
        "match_id": {
          "type": "string",
          "x-nullable": false
        },
        "matching_allies": {
          "items": {
            "$ref": "#/definitions/models.MatchingAlly"
          },
          "type": "array"
        }
      },
      "required": [
        "match_id",
        "matching_allies"
      ]
    },
    "models.Region": {
      "properties": {
        "latency": {
          "format": "int32",
          "type": "integer"
        },
        "region": {
          "type": "string"
        }
      },
      "required": [
        "latency",
        "region"
      ]
    },
    "models.ResultAttributeRequest": {
      "properties": {
        "attribute": {
          "type": "string",
          "x-nullable": false
        },
        "value": {
          "format": "double",
          "type": "number",
          "x-nullable": false
        }
      },
      "required": [
        "attribute",
        "value"
      ]
    },
    "models.ResultAttributeResponse": {
      "properties": {
        "attribute": {
          "type": "string"
        },
        "value": {
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "attribute",
        "value"
      ]
    },
    "models.Role": {
      "properties": {
        "max": {
          "format": "int32",
          "type": "integer"
        },
        "min": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "max",
        "min",
        "name"
      ]
    },
    "models.RuleSet": {
      "properties": {
        "alliance": {
          "$ref": "#/definitions/models.AllianceRule"
        },
        "alliance_flexing_rule": {
          "items": {
            "$ref": "#/definitions/models.AllianceFlexingRule"
          },
          "type": "array"
        },
        "batch_size": {
          "format": "int32",
          "type": "integer"
        },
        "bucket_mmr_rule": {
          "$ref": "#/definitions/models.BucketMMRRule"
        },
        "flexing_rule": {
          "items": {
            "$ref": "#/definitions/models.FlexingRule"
          },
          "type": "array"
        },
        "match_options": {
          "$ref": "#/definitions/models.MatchOptionRule"
        },
        "matching_rule": {
          "items": {
            "$ref": "#/definitions/models.MatchingRule"
          },
          "type": "array"
        },
        "rebalance_enable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "sort_ticket": {
          "$ref": "#/definitions/models.SortTicket"
        },
        "sort_tickets": {
          "items": {
            "$ref": "#/definitions/models.SortTicketRule"
          },
          "type": "array"
        },
        "sub_game_modes": {
          "additionalProperties": {
            "$ref": "#/definitions/models.SubGameMode"
          },
          "type": "object"
        },
        "ticket_flexing_selection": {
          "type": "string"
        },
        "ticket_flexing_selections": {
          "items": {
            "$ref": "#/definitions/models.SelectionRule"
          },
          "type": "array"
        },
        "use_newest_ticket_for_flexing": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "batch_size",
        "rebalance_enable",
        "ticket_flexing_selection"
      ]
    },
    "models.RuleSetV1": {
      "properties": {
        "alliance": {
          "$ref": "#/definitions/models.AllianceRuleV1"
        },
        "alliance_flexing_rule": {
          "items": {
            "$ref": "#/definitions/models.AllianceFlexingRule"
          },
          "type": "array"
        },
        "batch_size": {
          "format": "int32",
          "type": "integer"
        },
        "bucket_mmr_rule": {
          "$ref": "#/definitions/models.BucketMMRRule"
        },
        "flexingRules": {
          "items": {
            "$ref": "#/definitions/models.FlexingRule"
          },
          "type": "array"
        },
        "match_options": {
          "$ref": "#/definitions/models.MatchOptionRule"
        },
        "matchingRules": {
          "items": {
            "$ref": "#/definitions/models.MatchingRule"
          },
          "type": "array"
        },
        "sort_ticket": {
          "$ref": "#/definitions/models.SortTicket"
        },
        "sort_tickets": {
          "items": {
            "$ref": "#/definitions/models.SortTicketRule"
          },
          "type": "array"
        },
        "sub_game_modes": {
          "additionalProperties": {
            "$ref": "#/definitions/models.SubGameMode"
          },
          "type": "object"
        },
        "ticket_flexing_selection": {
          "type": "string"
        },
        "ticket_flexing_selections": {
          "items": {
            "$ref": "#/definitions/models.SelectionRule"
          },
          "type": "array"
        },
        "use_newest_ticket_for_flexing": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "batch_size",
        "ticket_flexing_selection"
      ]
    },
    "models.SelectionRule": {
      "properties": {
        "selection": {
          "type": "string"
        },
        "threshold": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "selection",
        "threshold"
      ]
    },
    "models.SortTicket": {
      "properties": {
        "search_result": {
          "type": "string"
        },
        "ticket_queue": {
          "type": "string"
        }
      },
      "required": [
        "search_result",
        "ticket_queue"
      ]
    },
    "models.SortTicketRule": {
      "properties": {
        "search_result": {
          "type": "string"
        },
        "threshold": {
          "format": "int64",
          "type": "integer"
        },
        "ticket_queue": {
          "type": "string"
        }
      },
      "required": [
        "search_result",
        "threshold",
        "ticket_queue"
      ]
    },
    "models.StatResumeResponse": {
      "properties": {
        "max": {
          "type": "string"
        },
        "mean": {
          "type": "string"
        },
        "min": {
          "type": "string"
        },
        "multiplier": {
          "type": "string"
        },
        "stddev": {
          "type": "string"
        },
        "valueShifts": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "zscores": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "required": [
        "max",
        "mean",
        "min",
        "multiplier",
        "stddev",
        "valueShifts",
        "zscores"
      ]
    },
    "models.SubGameMode": {
      "properties": {
        "alliance": {
          "$ref": "#/definitions/models.AllianceRule"
        },
        "alliance_flexing_rule": {
          "items": {
            "$ref": "#/definitions/models.AllianceFlexingRule"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "alliance",
        "name"
      ]
    },
    "models.TicketMetricResultRecord": {
      "properties": {
        "queue_time": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "queue_time"
      ]
    },
    "models.UpdateAllianceRule": {
      "properties": {
        "combination": {
          "$ref": "#/definitions/models.Combination"
        },
        "maxNumber": {
          "format": "int32",
          "type": "integer"
        },
        "minNumber": {
          "format": "int32",
          "type": "integer"
        },
        "playerMaxNumber": {
          "format": "int32",
          "type": "integer"
        },
        "playerMinNumber": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "models.UpdateChannelRequest": {
      "properties": {
        "blocked_player_option": {
          "enum": [
            "blockedPlayerCanMatch",
            "blockedPlayerCanMatchOnDifferentTeam",
            "blockedPlayerCannotMatch"
          ],
          "type": "string"
        },
        "deployment": {
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "findMatchTimeoutSeconds": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        },
        "joinable": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "max_delay_ms": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        },
        "region_expansion_range_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_expansion_rate_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_latency_initial_range_ms": {
          "format": "int32",
          "type": "integer"
        },
        "region_latency_max_ms": {
          "format": "int32",
          "type": "integer"
        },
        "ruleSet": {
          "$ref": "#/definitions/models.UpdateRuleset",
          "x-nullable": true
        },
        "sessionQueueTimeoutSeconds": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        },
        "socialMatchmaking": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "sub_gamemode_selection": {
          "enum": [
            "random",
            "ticketOrder"
          ],
          "type": "string",
          "x-nullable": true
        },
        "ticket_observability_enable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "use_sub_gamemode": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        }
      },
      "required": [
        "deployment",
        "description",
        "findMatchTimeoutSeconds",
        "joinable",
        "max_delay_ms",
        "ruleSet",
        "sessionQueueTimeoutSeconds",
        "socialMatchmaking",
        "use_sub_gamemode"
      ]
    },
    "models.UpdatePlayTimeWeightRequest": {
      "properties": {
        "playtime": {
          "format": "int32",
          "type": "integer"
        },
        "userID": {
          "type": "string"
        },
        "weight": {
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "playtime",
        "userID",
        "weight"
      ]
    },
    "models.UpdatePlayerPlaytimeWeightResponse": {
      "properties": {
        "playtime": {
          "type": "string"
        },
        "userID": {
          "type": "string"
        },
        "weight": {
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "playtime",
        "userID",
        "weight"
      ]
    },
    "models.UpdateRuleset": {
      "properties": {
        "alliance": {
          "$ref": "#/definitions/models.UpdateAllianceRule"
        },
        "alliance_flexing_rule": {
          "items": {
            "$ref": "#/definitions/models.AllianceFlexingRule"
          },
          "type": "array"
        },
        "batch_size": {
          "format": "int32",
          "type": "integer"
        },
        "bucket_mmr_rule": {
          "$ref": "#/definitions/models.BucketMMRRule"
        },
        "flexingRules": {
          "items": {
            "$ref": "#/definitions/models.FlexingRule"
          },
          "type": "array"
        },
        "match_options": {
          "$ref": "#/definitions/models.MatchOptionRule"
        },
        "matchingRules": {
          "items": {
            "$ref": "#/definitions/models.MatchingRule"
          },
          "type": "array"
        },
        "sort_ticket": {
          "$ref": "#/definitions/models.SortTicket"
        },
        "sort_tickets": {
          "items": {
            "$ref": "#/definitions/models.SortTicketRule"
          },
          "type": "array"
        },
        "sub_game_modes": {
          "$ref": "#/definitions/models.UpdateRuleset.sub_game_modes"
        },
        "ticket_flexing_selection": {
          "type": "string"
        },
        "ticket_flexing_selections": {
          "items": {
            "$ref": "#/definitions/models.SelectionRule"
          },
          "type": "array"
        },
        "use_newest_ticket_for_flexing": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "alliance",
        "alliance_flexing_rule",
        "batch_size",
        "sort_ticket",
        "sort_tickets",
        "ticket_flexing_selection",
        "ticket_flexing_selections"
      ]
    },
    "models.UpdateRuleset.sub_game_modes": {
      "additionalProperties": {
        "$ref": "#/definitions/models.SubGameMode"
      },
      "type": "object"
    },
    "response.Error": {
      "properties": {
        "ErrorCode": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "ErrorMessage": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "ErrorCode",
        "ErrorMessage"
      ]
    },
    "response.ErrorV1": {
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "errorMessage": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "errorCode",
        "errorMessage"
      ]
    },
    "service.GetSessionHistoryDetailedResponseItem": {
      "properties": {
        "_id": {
          "type": "string",
          "x-nullable": false
        },
        "channel": {
          "type": "string",
          "x-nullable": false
        },
        "client_version": {
          "type": "string",
          "x-nullable": false
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "event_description": {
          "type": "string",
          "x-nullable": true
        },
        "event_name": {
          "type": "string",
          "x-nullable": false
        },
        "game_mode": {
          "type": "string",
          "x-nullable": false
        },
        "joinable": {
          "type": "boolean",
          "x-nullable": false,
          "x-omitempty": false
        },
        "match_id": {
          "type": "string",
          "x-nullable": false
        },
        "matching_allies": {
          "items": {
            "$ref": "#/definitions/models.MatchingAlly"
          },
          "type": "array",
          "x-nullable": false
        },
        "namespace": {
          "type": "string",
          "x-nullable": false
        },
        "party_id": {
          "type": "string",
          "x-nullable": false
        },
        "region": {
          "type": "string",
          "x-nullable": false
        },
        "server_name": {
          "type": "string",
          "x-nullable": false
        },
        "status": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "_id",
        "channel",
        "client_version",
        "created_at",
        "event_description",
        "event_name",
        "game_mode",
        "joinable",
        "match_id",
        "matching_allies",
        "namespace",
        "region",
        "server_name",
        "status"
      ]
    },
    "service.GetSessionHistorySearchResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/service.GetSessionHistorySearchResponseItem"
          },
          "type": "array"
        },
        "pagination": {
          "$ref": "#/definitions/models.Pagination"
        }
      },
      "required": [
        "data",
        "pagination"
      ]
    },
    "service.GetSessionHistorySearchResponseItem": {
      "properties": {
        "_id": {
          "type": "string",
          "x-nullable": false
        },
        "channel": {
          "type": "string",
          "x-nullable": false
        },
        "client_version": {
          "type": "string",
          "x-nullable": false
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "event_description": {
          "type": "string",
          "x-nullable": true
        },
        "event_name": {
          "type": "string",
          "x-nullable": false
        },
        "game_mode": {
          "type": "string",
          "x-nullable": false
        },
        "joinable": {
          "type": "boolean",
          "x-nullable": false,
          "x-omitempty": false
        },
        "match_id": {
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "type": "string",
          "x-nullable": false
        },
        "party_id": {
          "type": "string",
          "x-nullable": true
        },
        "region": {
          "type": "string",
          "x-nullable": false
        },
        "server_name": {
          "type": "string",
          "x-nullable": false
        },
        "status": {
          "type": "string",
          "x-nullable": false
        },
        "sub_game_mode": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "_id",
        "channel",
        "client_version",
        "created_at",
        "event_description",
        "event_name",
        "game_mode",
        "joinable",
        "match_id",
        "namespace",
        "region",
        "server_name",
        "status",
        "sub_game_mode"
      ]
    },
    "service.GetSessionHistorySearchResponseItemV2": {
      "properties": {
        "_id": {
          "type": "string",
          "x-nullable": false
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "game_mode": {
          "type": "string",
          "x-nullable": false
        },
        "joinable": {
          "type": "boolean",
          "x-nullable": false,
          "x-omitempty": false
        },
        "match_id": {
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "type": "string",
          "x-nullable": false
        },
        "status": {
          "type": "string",
          "x-nullable": false
        },
        "sub_game_mode": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "_id",
        "created_at",
        "game_mode",
        "joinable",
        "match_id",
        "namespace",
        "status",
        "sub_game_mode"
      ]
    },
    "service.GetSessionHistorySearchResponseV2": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/service.GetSessionHistorySearchResponseItemV2"
          },
          "type": "array"
        },
        "pagination": {
          "$ref": "#/definitions/models.Pagination"
        }
      },
      "required": [
        "data",
        "pagination"
      ]
    }
  },
  "x-docs": {
    "alias": "matchmaking",
    "host": "https://demo.accelbyte.io",
    "path": "/matchmaking/apidocs/api.json"
  },
  "x-version": {
    "buildDate": "2024-05-02T09:38:51+00:00",
    "gitHash": "cdafd88c6a9435f1eb63b0f8739f1770d3e49003",
    "version": "2.30.4",
    "version-roles-seeding": "0.0.23"
  }
}