// Code generated by go-swagger; DO NOT EDIT.

package category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclientmodels"
)

// UpdateCategoryReader is a Reader for the UpdateCategory structure.
type UpdateCategoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCategoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCategoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCategoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdateCategoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewUpdateCategoryConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewUpdateCategoryUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PUT /admin/namespaces/{namespace}/categories/{categoryPath} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewUpdateCategoryOK creates a UpdateCategoryOK with default headers values
func NewUpdateCategoryOK() *UpdateCategoryOK {
	return &UpdateCategoryOK{}
}

/*UpdateCategoryOK handles this case with default header values.

  successful operation
*/
type UpdateCategoryOK struct {
	Payload *platformclientmodels.FullCategoryInfo
}

func (o *UpdateCategoryOK) Error() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/categories/{categoryPath}][%d] updateCategoryOK  %+v", 200, o.Payload)
}

func (o *UpdateCategoryOK) GetPayload() *platformclientmodels.FullCategoryInfo {
	return o.Payload
}

func (o *UpdateCategoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.FullCategoryInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCategoryBadRequest creates a UpdateCategoryBadRequest with default headers values
func NewUpdateCategoryBadRequest() *UpdateCategoryBadRequest {
	return &UpdateCategoryBadRequest{}
}

/*UpdateCategoryBadRequest handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr></table>
*/
type UpdateCategoryBadRequest struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *UpdateCategoryBadRequest) Error() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/categories/{categoryPath}][%d] updateCategoryBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCategoryBadRequest) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *UpdateCategoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCategoryNotFound creates a UpdateCategoryNotFound with default headers values
func NewUpdateCategoryNotFound() *UpdateCategoryNotFound {
	return &UpdateCategoryNotFound{}
}

/*UpdateCategoryNotFound handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr></table>
*/
type UpdateCategoryNotFound struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *UpdateCategoryNotFound) Error() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/categories/{categoryPath}][%d] updateCategoryNotFound  %+v", 404, o.Payload)
}

func (o *UpdateCategoryNotFound) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *UpdateCategoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCategoryConflict creates a UpdateCategoryConflict with default headers values
func NewUpdateCategoryConflict() *UpdateCategoryConflict {
	return &UpdateCategoryConflict{}
}

/*UpdateCategoryConflict handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>
*/
type UpdateCategoryConflict struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *UpdateCategoryConflict) Error() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/categories/{categoryPath}][%d] updateCategoryConflict  %+v", 409, o.Payload)
}

func (o *UpdateCategoryConflict) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *UpdateCategoryConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCategoryUnprocessableEntity creates a UpdateCategoryUnprocessableEntity with default headers values
func NewUpdateCategoryUnprocessableEntity() *UpdateCategoryUnprocessableEntity {
	return &UpdateCategoryUnprocessableEntity{}
}

/*UpdateCategoryUnprocessableEntity handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type UpdateCategoryUnprocessableEntity struct {
	Payload *platformclientmodels.ValidationErrorEntity
}

func (o *UpdateCategoryUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/categories/{categoryPath}][%d] updateCategoryUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateCategoryUnprocessableEntity) GetPayload() *platformclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *UpdateCategoryUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
