{
  "host": "demo.accelbyte.io",
  "info": {
    "description": "Justice Matchmaking Service",
    "title": "Justice Matchmaking Service",
    "version": "2.14.1"
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "HasPermission": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Create]": "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Create]",
        "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Delete]": "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Delete]",
        "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]": "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]",
        "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]": "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]",
        "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Update]": "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Update]",
        "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [CREATE]": "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [CREATE]",
        "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Delete]": "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Delete]",
        "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]": "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]",
        "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [UPDATE]": "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [UPDATE]",
        "NAMESPACE:{namespace}:MATCHRESULT [CREATE]": "NAMESPACE:{namespace}:MATCHRESULT [CREATE]",
        "NAMESPACE:{namespace}:SESSION [CREATE]": "NAMESPACE:{namespace}:SESSION [CREATE]",
        "NAMESPACE:{namespace}:SESSION [READ]": "NAMESPACE:{namespace}:SESSION [READ]",
        "NAMESPACE:{namespace}:SESSION [UPDATE]": "NAMESPACE:{namespace}:SESSION [UPDATE]"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "HasScope": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "social": "social"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "paths": {
    "/healthz": {
      "get": {
        "operationId": "GetHealthcheckInfo",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "tags": [
          "Matchmaking Operations"
        ]
      }
    },
    "/matchmaking/healthz": {
      "get": {
        "operationId": "handlerV3Healthz",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "tags": [
          "Matchmaking Operations"
        ]
      }
    },
    "/matchmaking/namespaces/{namespace}/channels": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]\n\nRequired Scope: social\n\nReads all available channels in a namespace\n",
        "operationId": "GetAllChannelsHandler",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "offset index",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "number of object per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetChannelsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get all channels",
        "tags": [
          "Matchmaking"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [CREATE]\n\nRequired Scope: social\n\nCreates a new matchmaking channel.\n\nMatchmaking channels is a list of pool name that is eligible for matchmaking processes. \nGameMode isolates each matchmaking pools.\n\nIf match timeout is set to 0, by default, incoming matchmaking requests will be timed out after 1 hour.\n\nIf max worker delay is set to 0, by default, it will wait for at max ~8 seconds during low volume.\n\nRule Set\n\nMatching Rule used to classify the player. Player that has matched criteria will be grouped together within an ally.\n\nValid value for criteria is \u0026#34;distance\u0026#34;\n",
        "operationId": "CreateChannelHandler",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ChannelRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateChannelResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create a channel",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/namespaces/{namespace}/channels/{channel}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Delete]\n\nRequired Scope: social\n\nDeletes a matchmaking channel. Matchmaking channels is a list of \npool name that is eligible for matchmaking processes. GameMode isolates each matchmaking pools.\n\nTrying to delete non-existent channel will result deletion success\n",
        "operationId": "DeleteChannelHandler",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "channel to be deleted",
            "in": "path",
            "name": "channel",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Delete]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a channel",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/namespaces/{namespace}/matchresult": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: NAMESPACE:{namespace}:MATCHRESULT [CREATE]\n\nRequired Scope: social\n\nProcess match result into final attribute value and stores it to player attribute\n\nWill return final attribute value\n",
        "operationId": "StoreMatchResults",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.MatchResultRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MatchResultResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:MATCHRESULT [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Store match result",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/namespaces/{namespace}/sessions": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: NAMESPACE:{namespace}:SESSION [CREATE]\n\nRequired Scope: social\n\nQueues joinable session so that it will be matched with player\u0026#39;s match request tickets. \nThe session queued must be in a channel/game mode that is set to have joinable flag. \nThe session will be in queue until it is full or expired. \nBoth the number of players and session queue timeout can be set in the channel\u0026#39;s config.\n\nThis endpoint is intended to be called by game server to let matchmaker know that \nthe game server is ready for receiving more players through matchmaking tickets to its session.\n\nIf a session is already queued, and game server wants to modify the data or \nrenew the queue timeout (e.g. some player left and more empty slot opened up), \nsimply call this endpoint with the updated session data. \n",
        "operationId": "QueueSessionHandler",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.MatchmakingResult"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:SESSION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Queue joinable session",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/namespaces/{namespace}/sessions/dequeue": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: NAMESPACE:{namespace}:SESSION [UPDATE]\n\nRequired Scope: social\n\nDequeues joinable session so that it will not be matched with player\u0026#39;s match request tickets. \n\nThis endpoint is intended to be called by game server to let matchmaker know that \nthe game server does not want more players to its session, even though it is not full. \n",
        "operationId": "DequeueSessionHandler",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.DequeueRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:SESSION [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Dequeue joinable session",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/namespaces/{namespace}/sessions/{matchID}/status": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: NAMESPACE:{namespace}:SESSION [READ]\n\nRequired Scope: social\n\nQueries the specified session\u0026#39;s status. Game servers are expected to \ncall this periodically as long as it has a session in queue to see \nif there are new players being matched to the session.\n\nPossible session statuses are \u0026#34;sessionInQueue\u0026#34;, \u0026#34;sessionFull\u0026#34;, and \u0026#34;sessionTimeout\u0026#34;.\n",
        "operationId": "QuerySessionHandler",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the match session",
            "in": "path",
            "name": "matchID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.MatchmakingResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:SESSION [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Query joinable session status",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/social/playtime/namespaces/{namespace}/weight": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [UPDATE]\n\nRequired Scope: social\n\nUpdate a connection weight between player and playtime.\n\nThis endpoint is intended to be called by admin for debugging purpose on social matchmaking rule.\n",
        "operationId": "UpdatePlayTimeWeight",
        "parameters": [
          {
            "description": "namespace of the game",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdatePlayTimeWeightRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/models.UpdatePlayerPlaytimeWeightResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510301\u003c/td\u003e\u003ctd\u003euser playtime not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Update player -- playtime connection weight",
        "tags": [
          "Social Matchmaking"
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/all/parties": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]\n\nRequired Scope: social\n\nGet all parties queueing in all channels.",
        "operationId": "GetAllPartyInAllChannel",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "additionalProperties": {
                "items": {
                  "$ref": "#/definitions/models.MatchingParty"
                },
                "type": "array"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get all party in all channels",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/all/sessions/bulk": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]\n\nRequired Scope: social\n\nBulk get sessions.",
        "operationId": "BulkGetSessions",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "comma-delimited session IDs",
            "in": "query",
            "name": "matchIDs",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.MatchmakingResult"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Bulk get sessions",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/export": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]\n\nRequired Scope: social\n\nExport channels configuration to file. \n\nAction Code: 510114",
        "operationId": "ExportChannels",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.ChannelV1"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Export channels",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Required Permission: ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Update]\n\nRequired Scope: social\n\nImport channels configuration from file. It will merge with existing channels.\nAvailable import strategy:\n- leaveOut: if channel with same key exist, the existing will be used and imported one will be ignored (default)\n- replace: if channel with same key exist, the imported channel will be used and existing one will be removed\n\nAction Code: 510113",
        "operationId": "ImportChannels",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "file to be imported",
            "in": "formData",
            "name": "file",
            "type": "file"
          },
          {
            "description": "strategy for import",
            "in": "formData",
            "name": "strategy",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ImportConfigResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510109\u003c/td\u003e\u003ctd\u003efailed to read file\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Update]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Import channels",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]\n\nRequired Scope: social\n\nReads single channel based on namespace and channel name\n\nAction Code: 510112",
        "operationId": "GetSingleMatchmakingChannel",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChannelV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get single channel",
        "tags": [
          "Matchmaking"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Update]\n\nRequired Scope: social\n\nUpdate channel based on namespace and channel name\n\nAction Code: 510111",
        "operationId": "UpdateMatchmakingChannel",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateChannelRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Update]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Update a channel",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/parties": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]\n\nRequired Scope: social\n\nGet all parties queueing in a channel.",
        "operationId": "GetAllPartyInChannel",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.MatchingParty"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get all party in a channel",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/sessions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]\n\nRequired Scope: social\n\nGet all sessions in a channel.",
        "operationId": "GetAllSessionsInChannel",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.MatchmakingResult"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get all channel sessions",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/sessions/{matchID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Delete]\n\nRequired Scope: social\n\nDelete a session in a channel.",
        "operationId": "DeleteSessionInChannel",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the match session",
            "in": "path",
            "name": "matchID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Delete]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete session in a channel",
        "tags": [
          "Matchmaking"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Create]\n\t\nRequired Scope: social\n\t\nAdd user into the session in a channel.",
        "operationId": "AddUserIntoSessionInChannel",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the match session",
            "in": "path",
            "name": "matchID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.MatchAddUserIntoSessionRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Create]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Add user into the session in a channel",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/sessions/{matchID}/users/{userID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Delete]\n\t\nRequired Scope: social\n\t\nDelete a user from a session in the channel.",
        "operationId": "DeleteUserFromSessionInChannel",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the match session",
            "in": "path",
            "name": "matchID",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the user",
            "in": "path",
            "name": "userID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded"
          },
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Delete]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete user from the session in a channel",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/sessions/history/search": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]\n\t\nRequired Scope: social\n\t\nSearch sessions.",
        "operationId": "SearchSessions",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the match session",
            "in": "query",
            "name": "matchID",
            "type": "string"
          },
          {
            "description": "ID of the user",
            "in": "query",
            "name": "userID",
            "type": "string"
          },
          {
            "description": "ID of the party",
            "in": "query",
            "name": "partyID",
            "type": "string"
          },
          {
            "description": "ID of the channel",
            "in": "query",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "only deleted session",
            "in": "query",
            "name": "deleted",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "limit",
            "in": "query",
            "name": "limit",
            "required": true,
            "type": "integer"
          },
          {
            "description": "offset",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/service.GetSessionHistorySearchResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Search sessions",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v1/admin/namespaces/{namespace}/sessions/{matchID}/history/detailed": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]\n\t\nRequired Scope: social\n\t\nGet session history detailed.",
        "operationId": "GetSessionHistoryDetailed",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the match session",
            "in": "path",
            "name": "matchID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "items": {
                "$ref": "#/definitions/service.GetSessionHistoryDetailedResponseItem"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get session history detailed",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v1/messages": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "get the list of messages.",
        "operationId": "publicGetMessages",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/log.AppMessageDeclaration"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "get service messages",
        "tags": [
          "Matchmaking Operations"
        ]
      }
    },
    "/matchmaking/v1/public/namespaces/{namespace}/channels": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Reads all available channels in a namespace\n",
        "operationId": "PublicGetAllMatchmakingChannel",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.ChannelV1"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get all channels",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v1/public/namespaces/{namespace}/channels/{channelName}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Reads single channel based on namespace and channel name\n",
        "operationId": "PublicGetSingleMatchmakingChannel",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "channel name, accept snake_case, lowercase, and numeric",
            "in": "path",
            "name": "channelName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChannelV1"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get single channel",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/v2/admin/namespaces/{namespace}/sessions/history/search": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required Permission: ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]\n\t\nRequired Scope: social\n\t\nSearch sessions. Optimize the query by differentiating query with filter namespace only and filter with namespace \u0026amp; other filter (partyID, userID, matchID).\nQuery with filter namespace only will not group whole session data while query with filter namespace \u0026amp; other filter will include session data.",
        "operationId": "SearchSessionsV2",
        "parameters": [
          {
            "description": "namespace of the game, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the match session",
            "in": "query",
            "name": "matchID",
            "type": "string"
          },
          {
            "description": "ID of the user",
            "in": "query",
            "name": "userID",
            "type": "string"
          },
          {
            "description": "ID of the party",
            "in": "query",
            "name": "partyID",
            "type": "string"
          },
          {
            "description": "ID of the channel",
            "in": "query",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "only deleted session",
            "in": "query",
            "name": "deleted",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "limit",
            "in": "query",
            "name": "limit",
            "required": true,
            "type": "integer"
          },
          {
            "description": "offset",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/service.GetSessionHistorySearchResponseV2"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20014\u003c/td\u003e\u003ctd\u003einvalid audience\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20015\u003c/td\u003e\u003ctd\u003einsufficient scope\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e510110\u003c/td\u003e\u003ctd\u003echannel not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.ErrorV1"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MATCHMAKING:CHANNEL [Read]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Search sessions",
        "tags": [
          "Matchmaking"
        ]
      }
    },
    "/matchmaking/version": {
      "get": {
        "operationId": "versionCheckHandler",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "tags": [
          "Matchmaking Operations"
        ]
      }
    }
  },
  "definitions": {
    "log.AppMessageDeclaration": {
      "properties": {
        "Attributes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Code": {
          "type": "string"
        },
        "CodeName": {
          "type": "string"
        },
        "Section": {
          "type": "string"
        },
        "Service": {
          "type": "string"
        },
        "Text": {
          "type": "string"
        }
      },
      "required": [
        "Attributes",
        "Code",
        "CodeName",
        "Section",
        "Service",
        "Text"
      ]
    },
    "models.AllianceFlexingRule": {
      "properties": {
        "duration": {
          "format": "int64",
          "type": "integer"
        },
        "max_number": {
          "format": "int32",
          "type": "integer"
        },
        "min_number": {
          "format": "int32",
          "type": "integer"
        },
        "player_max_number": {
          "format": "int32",
          "type": "integer"
        },
        "player_min_number": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "duration",
        "max_number",
        "min_number",
        "player_max_number",
        "player_min_number"
      ]
    },
    "models.AllianceRule": {
      "properties": {
        "max_number": {
          "format": "int32",
          "type": "integer"
        },
        "min_number": {
          "format": "int32",
          "type": "integer"
        },
        "player_max_number": {
          "format": "int32",
          "type": "integer"
        },
        "player_min_number": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "max_number",
        "min_number",
        "player_max_number",
        "player_min_number"
      ]
    },
    "models.AllianceRuleV1": {
      "properties": {
        "maxNumber": {
          "format": "int32",
          "type": "integer"
        },
        "minNumber": {
          "format": "int32",
          "type": "integer"
        },
        "playerMaxNumber": {
          "format": "int32",
          "type": "integer"
        },
        "playerMinNumber": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "maxNumber",
        "minNumber",
        "playerMaxNumber",
        "playerMinNumber"
      ]
    },
    "models.Channel": {
      "properties": {
        "deployment": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "find_match_timeout_seconds": {
          "format": "int32",
          "type": "integer"
        },
        "game_mode": {
          "type": "string"
        },
        "joinable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "max_delay_ms": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "ruleset": {
          "$ref": "#/definitions/models.RuleSet"
        },
        "session_queue_timeout_seconds": {
          "format": "int32",
          "type": "integer"
        },
        "slug": {
          "type": "string"
        },
        "social_matchmaking": {
          "type": "boolean",
          "x-omitempty": false
        },
        "updated_at": {
          "type": "string"
        },
        "use_sub_gamemode": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "deployment",
        "description",
        "find_match_timeout_seconds",
        "game_mode",
        "joinable",
        "max_delay_ms",
        "namespace",
        "ruleset",
        "session_queue_timeout_seconds",
        "slug",
        "social_matchmaking",
        "updated_at",
        "use_sub_gamemode"
      ]
    },
    "models.ChannelRequest": {
      "properties": {
        "deployment": {
          "type": "string",
          "x-nullable": false
        },
        "description": {
          "type": "string",
          "x-nullable": false
        },
        "find_match_timeout_seconds": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "game_mode": {
          "type": "string",
          "x-nullable": false
        },
        "joinable": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "max_delay_ms": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "rule_set": {
          "$ref": "#/definitions/models.RuleSet",
          "x-nullable": false
        },
        "session_queue_timeout_seconds": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "social_matchmaking": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "use_sub_gamemode": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        }
      },
      "required": [
        "deployment",
        "description",
        "find_match_timeout_seconds",
        "game_mode",
        "max_delay_ms",
        "rule_set",
        "session_queue_timeout_seconds"
      ]
    },
    "models.ChannelV1": {
      "properties": {
        "deployment": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "findMatchTimeoutSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "gameMode": {
          "type": "string"
        },
        "joinable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "max_delay_ms": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "ruleSet": {
          "$ref": "#/definitions/models.RuleSetV1"
        },
        "sessionQueueTimeoutSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "slug": {
          "type": "string"
        },
        "socialMatchmaking": {
          "type": "boolean",
          "x-omitempty": false
        },
        "updatedAt": {
          "type": "string"
        },
        "use_sub_gamemode": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "deployment",
        "description",
        "findMatchTimeoutSeconds",
        "gameMode",
        "joinable",
        "max_delay_ms",
        "namespace",
        "ruleSet",
        "sessionQueueTimeoutSeconds",
        "slug",
        "socialMatchmaking",
        "updatedAt",
        "use_sub_gamemode"
      ]
    },
    "models.CreateChannelResponse": {
      "properties": {
        "deployment": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "find_match_timeout_seconds": {
          "format": "int32",
          "type": "integer"
        },
        "game_mode": {
          "type": "string"
        },
        "joinable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "max_delay_ms": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "ruleset": {
          "$ref": "#/definitions/models.RuleSet"
        },
        "session_queue_timeout_seconds": {
          "format": "int32",
          "type": "integer"
        },
        "slug": {
          "type": "string"
        },
        "social_matchmaking": {
          "type": "boolean",
          "x-omitempty": false
        },
        "updated_at": {
          "type": "string"
        },
        "use_sub_gamemode": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "deployment",
        "description",
        "find_match_timeout_seconds",
        "game_mode",
        "joinable",
        "max_delay_ms",
        "namespace",
        "ruleset",
        "session_queue_timeout_seconds",
        "slug",
        "social_matchmaking",
        "updated_at",
        "use_sub_gamemode"
      ]
    },
    "models.DequeueRequest": {
      "properties": {
        "match_id": {
          "type": "string"
        }
      },
      "required": [
        "match_id"
      ]
    },
    "models.FlexingRule": {
      "properties": {
        "attribute": {
          "type": "string",
          "x-nullable": false
        },
        "criteria": {
          "type": "string",
          "x-nullable": false
        },
        "duration": {
          "format": "int64",
          "type": "integer"
        },
        "reference": {
          "format": "double",
          "type": "number",
          "x-nullable": false
        }
      },
      "required": [
        "attribute",
        "criteria",
        "duration",
        "reference"
      ]
    },
    "models.GetChannelsResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/models.Channel"
          },
          "type": "array"
        },
        "pagination": {
          "$ref": "#/definitions/models.Pagination"
        }
      },
      "required": [
        "data",
        "pagination"
      ]
    },
    "models.ImportConfigResponse": {
      "properties": {
        "failedConfigs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ignoredConfigs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "newConfigs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "replacedConfigs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "failedConfigs",
        "ignoredConfigs",
        "newConfigs",
        "replacedConfigs"
      ]
    },
    "models.MatchAddUserIntoSessionRequest": {
      "properties": {
        "blocked_players": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "party_id": {
          "type": "string",
          "x-nullable": true
        },
        "user_id": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "user_id"
      ]
    },
    "models.MatchOption": {
      "properties": {
        "name": {
          "type": "string",
          "x-nullable": false
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "models.MatchOptionRule": {
      "properties": {
        "options": {
          "items": {
            "$ref": "#/definitions/models.MatchOption"
          },
          "type": "array"
        }
      },
      "required": [
        "options"
      ]
    },
    "models.MatchResultRequest": {
      "properties": {
        "match_id": {
          "type": "string",
          "x-nullable": false
        },
        "players": {
          "items": {
            "$ref": "#/definitions/models.PlayerResultRequest"
          },
          "type": "array",
          "x-nullable": false
        }
      },
      "required": [
        "match_id",
        "players"
      ]
    },
    "models.MatchResultResponse": {
      "properties": {
        "match_id": {
          "type": "string"
        },
        "players": {
          "items": {
            "$ref": "#/definitions/models.PlayerResultResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "match_id",
        "players"
      ]
    },
    "models.MatchingAlly": {
      "properties": {
        "matching_parties": {
          "items": {
            "$ref": "#/definitions/models.MatchingParty"
          },
          "type": "array"
        }
      },
      "required": [
        "matching_parties"
      ]
    },
    "models.MatchingParty": {
      "properties": {
        "first_ticket_created_at": {
          "format": "int64",
          "type": "integer"
        },
        "party_attributes": {
          "type": "object"
        },
        "party_id": {
          "type": "string",
          "x-nullable": false
        },
        "party_members": {
          "items": {
            "$ref": "#/definitions/models.PartyMember"
          },
          "type": "array"
        }
      },
      "required": [
        "first_ticket_created_at",
        "party_attributes",
        "party_id",
        "party_members"
      ]
    },
    "models.MatchingRule": {
      "properties": {
        "attribute": {
          "type": "string",
          "x-nullable": false
        },
        "criteria": {
          "type": "string",
          "x-nullable": false
        },
        "reference": {
          "format": "double",
          "type": "number",
          "x-nullable": false
        }
      },
      "required": [
        "attribute",
        "criteria",
        "reference"
      ]
    },
    "models.MatchmakingResult": {
      "properties": {
        "channel": {
          "type": "string",
          "x-nullable": false
        },
        "client_version": {
          "type": "string",
          "x-nullable": false
        },
        "deployment": {
          "type": "string",
          "x-nullable": false
        },
        "game_mode": {
          "type": "string",
          "x-nullable": false
        },
        "joinable": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "match_id": {
          "type": "string",
          "x-nullable": false
        },
        "matching_allies": {
          "items": {
            "$ref": "#/definitions/models.MatchingAlly"
          },
          "type": "array"
        },
        "namespace": {
          "type": "string",
          "x-nullable": false
        },
        "party_attributes": {
          "type": "object"
        },
        "party_id": {
          "type": "string",
          "x-nullable": true
        },
        "queued_at": {
          "format": "int64",
          "type": "integer",
          "x-nullable": false
        },
        "region": {
          "type": "string",
          "x-nullable": false
        },
        "server_name": {
          "type": "string",
          "x-nullable": false
        },
        "status": {
          "type": "string",
          "x-nullable": false
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "channel",
        "client_version",
        "deployment",
        "game_mode",
        "match_id",
        "matching_allies",
        "namespace",
        "party_attributes",
        "queued_at",
        "region",
        "server_name",
        "status",
        "updated_at"
      ]
    },
    "models.Pagination": {
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      },
      "required": [
        "first",
        "last",
        "next",
        "previous"
      ]
    },
    "models.PartyMember": {
      "properties": {
        "extra_attributes": {
          "type": "object"
        },
        "user_id": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "extra_attributes",
        "user_id"
      ]
    },
    "models.PlayerResultRequest": {
      "properties": {
        "results": {
          "items": {
            "$ref": "#/definitions/models.ResultAttributeRequest"
          },
          "type": "array",
          "x-nullable": false
        },
        "user_id": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "results",
        "user_id"
      ]
    },
    "models.PlayerResultResponse": {
      "properties": {
        "current_score": {
          "items": {
            "$ref": "#/definitions/models.ResultAttributeResponse"
          },
          "type": "array"
        },
        "user_id": {
          "type": "string"
        }
      },
      "required": [
        "current_score",
        "user_id"
      ]
    },
    "models.ResultAttributeRequest": {
      "properties": {
        "attribute": {
          "type": "string",
          "x-nullable": false
        },
        "value": {
          "format": "double",
          "type": "number",
          "x-nullable": false
        }
      },
      "required": [
        "attribute",
        "value"
      ]
    },
    "models.ResultAttributeResponse": {
      "properties": {
        "attribute": {
          "type": "string"
        },
        "value": {
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "attribute",
        "value"
      ]
    },
    "models.RuleSet": {
      "properties": {
        "alliance": {
          "$ref": "#/definitions/models.AllianceRule"
        },
        "alliance_flexing_rule": {
          "items": {
            "$ref": "#/definitions/models.AllianceFlexingRule"
          },
          "type": "array"
        },
        "flexing_rule": {
          "items": {
            "$ref": "#/definitions/models.FlexingRule"
          },
          "type": "array"
        },
        "match_options": {
          "$ref": "#/definitions/models.MatchOptionRule"
        },
        "matching_rule": {
          "items": {
            "$ref": "#/definitions/models.MatchingRule"
          },
          "type": "array"
        },
        "sub_game_modes": {
          "additionalProperties": {
            "$ref": "#/definitions/models.SubGameMode"
          },
          "type": "object"
        }
      },
      "required": [
        "alliance",
        "alliance_flexing_rule",
        "flexing_rule",
        "match_options",
        "matching_rule",
        "sub_game_modes"
      ]
    },
    "models.RuleSetV1": {
      "properties": {
        "alliance": {
          "$ref": "#/definitions/models.AllianceRuleV1"
        },
        "alliance_flexing_rule": {
          "items": {
            "$ref": "#/definitions/models.AllianceFlexingRule"
          },
          "type": "array"
        },
        "flexingRules": {
          "items": {
            "$ref": "#/definitions/models.FlexingRule"
          },
          "type": "array"
        },
        "match_options": {
          "$ref": "#/definitions/models.MatchOptionRule"
        },
        "matchingRules": {
          "items": {
            "$ref": "#/definitions/models.MatchingRule"
          },
          "type": "array"
        },
        "sub_game_modes": {
          "additionalProperties": {
            "$ref": "#/definitions/models.SubGameMode"
          },
          "type": "object"
        }
      },
      "required": [
        "alliance",
        "alliance_flexing_rule",
        "flexingRules",
        "match_options",
        "matchingRules",
        "sub_game_modes"
      ]
    },
    "models.SubGameMode": {
      "properties": {
        "alliance": {
          "$ref": "#/definitions/models.AllianceRule"
        },
        "alliance_flexing_rule": {
          "items": {
            "$ref": "#/definitions/models.AllianceFlexingRule"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "alliance",
        "alliance_flexing_rule",
        "name"
      ]
    },
    "models.UpdateAllianceRule": {
      "properties": {
        "maxNumber": {
          "format": "int32",
          "type": "integer"
        },
        "minNumber": {
          "format": "int32",
          "type": "integer"
        },
        "playerMaxNumber": {
          "format": "int32",
          "type": "integer"
        },
        "playerMinNumber": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "models.UpdateChannelRequest": {
      "properties": {
        "deployment": {
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "findMatchTimeoutSeconds": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        },
        "joinable": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "max_delay_ms": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        },
        "ruleSet": {
          "$ref": "#/definitions/models.UpdateRuleset",
          "x-nullable": true
        },
        "sessionQueueTimeoutSeconds": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        },
        "socialMatchmaking": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        },
        "use_sub_gamemode": {
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": false
        }
      },
      "required": [
        "deployment",
        "description",
        "findMatchTimeoutSeconds",
        "joinable",
        "max_delay_ms",
        "ruleSet",
        "sessionQueueTimeoutSeconds",
        "socialMatchmaking",
        "use_sub_gamemode"
      ]
    },
    "models.UpdatePlayTimeWeightRequest": {
      "properties": {
        "playtime": {
          "format": "int32",
          "type": "integer"
        },
        "userID": {
          "type": "string"
        },
        "weight": {
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "playtime",
        "userID",
        "weight"
      ]
    },
    "models.UpdatePlayerPlaytimeWeightResponse": {
      "properties": {
        "playtime": {
          "type": "string"
        },
        "userID": {
          "type": "string"
        },
        "weight": {
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "playtime",
        "userID",
        "weight"
      ]
    },
    "models.UpdateRuleset": {
      "properties": {
        "alliance": {
          "$ref": "#/definitions/models.UpdateAllianceRule"
        },
        "alliance_flexing_rule": {
          "items": {
            "$ref": "#/definitions/models.AllianceFlexingRule"
          },
          "type": "array"
        },
        "flexingRules": {
          "items": {
            "$ref": "#/definitions/models.FlexingRule"
          },
          "type": "array"
        },
        "match_options": {
          "$ref": "#/definitions/models.MatchOptionRule"
        },
        "matchingRules": {
          "items": {
            "$ref": "#/definitions/models.MatchingRule"
          },
          "type": "array"
        },
        "sub_game_modes": {
          "$ref": "#/definitions/models.UpdateRuleset.sub_game_modes"
        }
      },
      "required": [
        "alliance",
        "alliance_flexing_rule"
      ]
    },
    "models.UpdateRuleset.sub_game_modes": {
      "additionalProperties": {
        "$ref": "#/definitions/models.SubGameMode"
      },
      "type": "object"
    },
    "response.Error": {
      "properties": {
        "ErrorCode": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "ErrorMessage": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "ErrorCode",
        "ErrorMessage"
      ]
    },
    "response.ErrorV1": {
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "errorMessage": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "errorCode",
        "errorMessage"
      ]
    },
    "service.GetSessionHistoryDetailedResponseItem": {
      "properties": {
        "_id": {
          "type": "string",
          "x-nullable": false
        },
        "channel": {
          "type": "string",
          "x-nullable": false
        },
        "client_version": {
          "type": "string",
          "x-nullable": false
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "event_description": {
          "type": "string",
          "x-nullable": true
        },
        "event_name": {
          "type": "string",
          "x-nullable": false
        },
        "game_mode": {
          "type": "string",
          "x-nullable": false
        },
        "joinable": {
          "type": "boolean",
          "x-nullable": false,
          "x-omitempty": false
        },
        "match_id": {
          "type": "string",
          "x-nullable": false
        },
        "matching_allies": {
          "items": {
            "$ref": "#/definitions/models.MatchingAlly"
          },
          "type": "array",
          "x-nullable": false
        },
        "namespace": {
          "type": "string",
          "x-nullable": false
        },
        "party_id": {
          "type": "string",
          "x-nullable": false
        },
        "region": {
          "type": "string",
          "x-nullable": false
        },
        "server_name": {
          "type": "string",
          "x-nullable": false
        },
        "status": {
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "_id",
        "channel",
        "client_version",
        "created_at",
        "event_description",
        "event_name",
        "game_mode",
        "joinable",
        "match_id",
        "matching_allies",
        "namespace",
        "region",
        "server_name",
        "status"
      ]
    },
    "service.GetSessionHistorySearchResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/service.GetSessionHistorySearchResponseItem"
          },
          "type": "array"
        },
        "pagination": {
          "$ref": "#/definitions/models.Pagination"
        }
      },
      "required": [
        "data",
        "pagination"
      ]
    },
    "service.GetSessionHistorySearchResponseItem": {
      "properties": {
        "_id": {
          "type": "string",
          "x-nullable": false
        },
        "channel": {
          "type": "string",
          "x-nullable": false
        },
        "client_version": {
          "type": "string",
          "x-nullable": false
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "event_description": {
          "type": "string",
          "x-nullable": true
        },
        "event_name": {
          "type": "string",
          "x-nullable": false
        },
        "game_mode": {
          "type": "string",
          "x-nullable": false
        },
        "joinable": {
          "type": "boolean",
          "x-nullable": false,
          "x-omitempty": false
        },
        "match_id": {
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "type": "string",
          "x-nullable": false
        },
        "party_id": {
          "type": "string",
          "x-nullable": true
        },
        "region": {
          "type": "string",
          "x-nullable": false
        },
        "server_name": {
          "type": "string",
          "x-nullable": false
        },
        "status": {
          "type": "string",
          "x-nullable": false
        },
        "sub_game_mode": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "_id",
        "channel",
        "client_version",
        "created_at",
        "event_description",
        "event_name",
        "game_mode",
        "joinable",
        "match_id",
        "namespace",
        "region",
        "server_name",
        "status",
        "sub_game_mode"
      ]
    },
    "service.GetSessionHistorySearchResponseItemV2": {
      "properties": {
        "_id": {
          "type": "string",
          "x-nullable": false
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "game_mode": {
          "type": "string",
          "x-nullable": false
        },
        "joinable": {
          "type": "boolean",
          "x-nullable": false,
          "x-omitempty": false
        },
        "match_id": {
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "type": "string",
          "x-nullable": false
        },
        "status": {
          "type": "string",
          "x-nullable": false
        },
        "sub_game_mode": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "_id",
        "created_at",
        "game_mode",
        "joinable",
        "match_id",
        "namespace",
        "status",
        "sub_game_mode"
      ]
    },
    "service.GetSessionHistorySearchResponseV2": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/service.GetSessionHistorySearchResponseItemV2"
          },
          "type": "array"
        },
        "pagination": {
          "$ref": "#/definitions/models.Pagination"
        }
      },
      "required": [
        "data",
        "pagination"
      ]
    }
  }
}