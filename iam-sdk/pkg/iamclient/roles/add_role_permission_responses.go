// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AddRolePermissionReader is a Reader for the AddRolePermission structure.
type AddRolePermissionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddRolePermissionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAddRolePermissionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddRolePermissionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddRolePermissionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAddRolePermissionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAddRolePermissionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /iam/roles/{roleId}/permissions/{resource}/{action} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAddRolePermissionNoContent creates a AddRolePermissionNoContent with default headers values
func NewAddRolePermissionNoContent() *AddRolePermissionNoContent {
	return &AddRolePermissionNoContent{}
}

/*AddRolePermissionNoContent handles this case with default header values.

  Operation succeeded
*/
type AddRolePermissionNoContent struct {
}

func (o *AddRolePermissionNoContent) Error() string {
	return fmt.Sprintf("[POST /iam/roles/{roleId}/permissions/{resource}/{action}][%d] addRolePermissionNoContent ", 204)
}

func (o *AddRolePermissionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddRolePermissionBadRequest creates a AddRolePermissionBadRequest with default headers values
func NewAddRolePermissionBadRequest() *AddRolePermissionBadRequest {
	return &AddRolePermissionBadRequest{}
}

/*AddRolePermissionBadRequest handles this case with default header values.

  Invalid request
*/
type AddRolePermissionBadRequest struct {
}

func (o *AddRolePermissionBadRequest) Error() string {
	return fmt.Sprintf("[POST /iam/roles/{roleId}/permissions/{resource}/{action}][%d] addRolePermissionBadRequest ", 400)
}

func (o *AddRolePermissionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddRolePermissionUnauthorized creates a AddRolePermissionUnauthorized with default headers values
func NewAddRolePermissionUnauthorized() *AddRolePermissionUnauthorized {
	return &AddRolePermissionUnauthorized{}
}

/*AddRolePermissionUnauthorized handles this case with default header values.

  Unauthorized access
*/
type AddRolePermissionUnauthorized struct {
}

func (o *AddRolePermissionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /iam/roles/{roleId}/permissions/{resource}/{action}][%d] addRolePermissionUnauthorized ", 401)
}

func (o *AddRolePermissionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddRolePermissionForbidden creates a AddRolePermissionForbidden with default headers values
func NewAddRolePermissionForbidden() *AddRolePermissionForbidden {
	return &AddRolePermissionForbidden{}
}

/*AddRolePermissionForbidden handles this case with default header values.

  Forbidden
*/
type AddRolePermissionForbidden struct {
}

func (o *AddRolePermissionForbidden) Error() string {
	return fmt.Sprintf("[POST /iam/roles/{roleId}/permissions/{resource}/{action}][%d] addRolePermissionForbidden ", 403)
}

func (o *AddRolePermissionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddRolePermissionNotFound creates a AddRolePermissionNotFound with default headers values
func NewAddRolePermissionNotFound() *AddRolePermissionNotFound {
	return &AddRolePermissionNotFound{}
}

/*AddRolePermissionNotFound handles this case with default header values.

  Data not found
*/
type AddRolePermissionNotFound struct {
}

func (o *AddRolePermissionNotFound) Error() string {
	return fmt.Sprintf("[POST /iam/roles/{roleId}/permissions/{resource}/{action}][%d] addRolePermissionNotFound ", 404)
}

func (o *AddRolePermissionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
