// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package group_member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/group-sdk/pkg/groupclientmodels"
)

// KickGroupMemberPublicV1Reader is a Reader for the KickGroupMemberPublicV1 structure.
type KickGroupMemberPublicV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KickGroupMemberPublicV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKickGroupMemberPublicV1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewKickGroupMemberPublicV1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewKickGroupMemberPublicV1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewKickGroupMemberPublicV1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewKickGroupMemberPublicV1NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewKickGroupMemberPublicV1InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /group/v1/public/namespaces/{namespace}/users/{userId}/kick returns an error %d: %s", response.Code(), string(data))
	}
}

// NewKickGroupMemberPublicV1OK creates a KickGroupMemberPublicV1OK with default headers values
func NewKickGroupMemberPublicV1OK() *KickGroupMemberPublicV1OK {
	return &KickGroupMemberPublicV1OK{}
}

/*KickGroupMemberPublicV1OK handles this case with default header values.

  OK
*/
type KickGroupMemberPublicV1OK struct {
	Payload *groupclientmodels.ModelsKickGroupMemberResponseV1
}

func (o *KickGroupMemberPublicV1OK) Error() string {
	return fmt.Sprintf("[POST /group/v1/public/namespaces/{namespace}/users/{userId}/kick][%d] kickGroupMemberPublicV1OK  %+v", 200, o.ToJSONString())
}

func (o *KickGroupMemberPublicV1OK) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *KickGroupMemberPublicV1OK) GetPayload() *groupclientmodels.ModelsKickGroupMemberResponseV1 {
	return o.Payload
}

func (o *KickGroupMemberPublicV1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(groupclientmodels.ModelsKickGroupMemberResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKickGroupMemberPublicV1BadRequest creates a KickGroupMemberPublicV1BadRequest with default headers values
func NewKickGroupMemberPublicV1BadRequest() *KickGroupMemberPublicV1BadRequest {
	return &KickGroupMemberPublicV1BadRequest{}
}

/*KickGroupMemberPublicV1BadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type KickGroupMemberPublicV1BadRequest struct {
	Payload *groupclientmodels.ResponseErrorResponse
}

func (o *KickGroupMemberPublicV1BadRequest) Error() string {
	return fmt.Sprintf("[POST /group/v1/public/namespaces/{namespace}/users/{userId}/kick][%d] kickGroupMemberPublicV1BadRequest  %+v", 400, o.ToJSONString())
}

func (o *KickGroupMemberPublicV1BadRequest) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *KickGroupMemberPublicV1BadRequest) GetPayload() *groupclientmodels.ResponseErrorResponse {
	return o.Payload
}

func (o *KickGroupMemberPublicV1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(groupclientmodels.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKickGroupMemberPublicV1Unauthorized creates a KickGroupMemberPublicV1Unauthorized with default headers values
func NewKickGroupMemberPublicV1Unauthorized() *KickGroupMemberPublicV1Unauthorized {
	return &KickGroupMemberPublicV1Unauthorized{}
}

/*KickGroupMemberPublicV1Unauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>
*/
type KickGroupMemberPublicV1Unauthorized struct {
	Payload *groupclientmodels.ResponseErrorResponse
}

func (o *KickGroupMemberPublicV1Unauthorized) Error() string {
	return fmt.Sprintf("[POST /group/v1/public/namespaces/{namespace}/users/{userId}/kick][%d] kickGroupMemberPublicV1Unauthorized  %+v", 401, o.ToJSONString())
}

func (o *KickGroupMemberPublicV1Unauthorized) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *KickGroupMemberPublicV1Unauthorized) GetPayload() *groupclientmodels.ResponseErrorResponse {
	return o.Payload
}

func (o *KickGroupMemberPublicV1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(groupclientmodels.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKickGroupMemberPublicV1Forbidden creates a KickGroupMemberPublicV1Forbidden with default headers values
func NewKickGroupMemberPublicV1Forbidden() *KickGroupMemberPublicV1Forbidden {
	return &KickGroupMemberPublicV1Forbidden{}
}

/*KickGroupMemberPublicV1Forbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20022</td><td>token is not user token</td></tr><tr><td>73036</td><td>insufficient member role permission</td></tr></table>
*/
type KickGroupMemberPublicV1Forbidden struct {
	Payload *groupclientmodels.ResponseErrorResponse
}

func (o *KickGroupMemberPublicV1Forbidden) Error() string {
	return fmt.Sprintf("[POST /group/v1/public/namespaces/{namespace}/users/{userId}/kick][%d] kickGroupMemberPublicV1Forbidden  %+v", 403, o.ToJSONString())
}

func (o *KickGroupMemberPublicV1Forbidden) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *KickGroupMemberPublicV1Forbidden) GetPayload() *groupclientmodels.ResponseErrorResponse {
	return o.Payload
}

func (o *KickGroupMemberPublicV1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(groupclientmodels.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKickGroupMemberPublicV1NotFound creates a KickGroupMemberPublicV1NotFound with default headers values
func NewKickGroupMemberPublicV1NotFound() *KickGroupMemberPublicV1NotFound {
	return &KickGroupMemberPublicV1NotFound{}
}

/*KickGroupMemberPublicV1NotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>73433</td><td>member group not found</td></tr><tr><td>73034</td><td>user not belong to any group</td></tr></table>
*/
type KickGroupMemberPublicV1NotFound struct {
	Payload *groupclientmodels.ResponseErrorResponse
}

func (o *KickGroupMemberPublicV1NotFound) Error() string {
	return fmt.Sprintf("[POST /group/v1/public/namespaces/{namespace}/users/{userId}/kick][%d] kickGroupMemberPublicV1NotFound  %+v", 404, o.ToJSONString())
}

func (o *KickGroupMemberPublicV1NotFound) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *KickGroupMemberPublicV1NotFound) GetPayload() *groupclientmodels.ResponseErrorResponse {
	return o.Payload
}

func (o *KickGroupMemberPublicV1NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(groupclientmodels.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKickGroupMemberPublicV1InternalServerError creates a KickGroupMemberPublicV1InternalServerError with default headers values
func NewKickGroupMemberPublicV1InternalServerError() *KickGroupMemberPublicV1InternalServerError {
	return &KickGroupMemberPublicV1InternalServerError{}
}

/*KickGroupMemberPublicV1InternalServerError handles this case with default header values.

  Internal Server Error
*/
type KickGroupMemberPublicV1InternalServerError struct {
	Payload *groupclientmodels.ResponseErrorResponse
}

func (o *KickGroupMemberPublicV1InternalServerError) Error() string {
	return fmt.Sprintf("[POST /group/v1/public/namespaces/{namespace}/users/{userId}/kick][%d] kickGroupMemberPublicV1InternalServerError  %+v", 500, o.ToJSONString())
}

func (o *KickGroupMemberPublicV1InternalServerError) ToJSONString() string {
	if o.Payload == nil {
		return "{}"
	}

	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)

		return fmt.Sprintf("Failed to marshal the payload: %+v", o.Payload)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *KickGroupMemberPublicV1InternalServerError) GetPayload() *groupclientmodels.ResponseErrorResponse {
	return o.Payload
}

func (o *KickGroupMemberPublicV1InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(groupclientmodels.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
