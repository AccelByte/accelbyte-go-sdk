// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// AdminListUsersV3Reader is a Reader for the AdminListUsersV3 structure.
type AdminListUsersV3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminListUsersV3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminListUsersV3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminListUsersV3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminListUsersV3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAdminListUsersV3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewAdminListUsersV3InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /iam/v3/admin/namespaces/{namespace}/users/platforms/justice returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminListUsersV3OK creates a AdminListUsersV3OK with default headers values
func NewAdminListUsersV3OK() *AdminListUsersV3OK {
	return &AdminListUsersV3OK{}
}

/*AdminListUsersV3OK handles this case with default header values.

  Operation succeeded
*/
type AdminListUsersV3OK struct {
	Payload *iamclientmodels.AccountcommonListUsersWithPlatformAccountsResponse
}

func (o *AdminListUsersV3OK) Error() string {
	return fmt.Sprintf("[GET /iam/v3/admin/namespaces/{namespace}/users/platforms/justice][%d] adminListUsersV3OK  %+v", 200, o.Payload)
}

func (o *AdminListUsersV3OK) GetPayload() *iamclientmodels.AccountcommonListUsersWithPlatformAccountsResponse {
	return o.Payload
}

func (o *AdminListUsersV3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.AccountcommonListUsersWithPlatformAccountsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminListUsersV3BadRequest creates a AdminListUsersV3BadRequest with default headers values
func NewAdminListUsersV3BadRequest() *AdminListUsersV3BadRequest {
	return &AdminListUsersV3BadRequest{}
}

/*AdminListUsersV3BadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type AdminListUsersV3BadRequest struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminListUsersV3BadRequest) Error() string {
	return fmt.Sprintf("[GET /iam/v3/admin/namespaces/{namespace}/users/platforms/justice][%d] adminListUsersV3BadRequest  %+v", 400, o.Payload)
}

func (o *AdminListUsersV3BadRequest) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminListUsersV3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminListUsersV3Unauthorized creates a AdminListUsersV3Unauthorized with default headers values
func NewAdminListUsersV3Unauthorized() *AdminListUsersV3Unauthorized {
	return &AdminListUsersV3Unauthorized{}
}

/*AdminListUsersV3Unauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>
*/
type AdminListUsersV3Unauthorized struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminListUsersV3Unauthorized) Error() string {
	return fmt.Sprintf("[GET /iam/v3/admin/namespaces/{namespace}/users/platforms/justice][%d] adminListUsersV3Unauthorized  %+v", 401, o.Payload)
}

func (o *AdminListUsersV3Unauthorized) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminListUsersV3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminListUsersV3Forbidden creates a AdminListUsersV3Forbidden with default headers values
func NewAdminListUsersV3Forbidden() *AdminListUsersV3Forbidden {
	return &AdminListUsersV3Forbidden{}
}

/*AdminListUsersV3Forbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20003</td><td>forbidden access</td></tr></table>
*/
type AdminListUsersV3Forbidden struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminListUsersV3Forbidden) Error() string {
	return fmt.Sprintf("[GET /iam/v3/admin/namespaces/{namespace}/users/platforms/justice][%d] adminListUsersV3Forbidden  %+v", 403, o.Payload)
}

func (o *AdminListUsersV3Forbidden) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminListUsersV3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminListUsersV3InternalServerError creates a AdminListUsersV3InternalServerError with default headers values
func NewAdminListUsersV3InternalServerError() *AdminListUsersV3InternalServerError {
	return &AdminListUsersV3InternalServerError{}
}

/*AdminListUsersV3InternalServerError handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>
*/
type AdminListUsersV3InternalServerError struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminListUsersV3InternalServerError) Error() string {
	return fmt.Sprintf("[GET /iam/v3/admin/namespaces/{namespace}/users/platforms/justice][%d] adminListUsersV3InternalServerError  %+v", 500, o.Payload)
}

func (o *AdminListUsersV3InternalServerError) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminListUsersV3InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
