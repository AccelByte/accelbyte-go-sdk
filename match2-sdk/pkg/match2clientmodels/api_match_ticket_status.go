// Code generated by go-swagger; DO NOT EDIT.

package match2clientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIMatchTicketStatus api match ticket status
//
// swagger:model api.MatchTicketStatus
type APIMatchTicketStatus struct {

	// match found
	// Required: true
	MatchFound *bool `json:"matchFound"`

	// proposed proposal
	ProposedProposal *APIProposedProposal `json:"proposedProposal,omitempty"`

	// session ID
	// Required: true
	SessionID *string `json:"sessionID"`
}

// Validate validates this api match ticket status
func (m *APIMatchTicketStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchFound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProposedProposal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIMatchTicketStatus) validateMatchFound(formats strfmt.Registry) error {

	if err := validate.Required("matchFound", "body", m.MatchFound); err != nil {
		return err
	}

	return nil
}

func (m *APIMatchTicketStatus) validateProposedProposal(formats strfmt.Registry) error {

	if swag.IsZero(m.ProposedProposal) { // not required
		return nil
	}

	if m.ProposedProposal != nil {
		if err := m.ProposedProposal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proposedProposal")
			}
			return err
		}
	}

	return nil
}

func (m *APIMatchTicketStatus) validateSessionID(formats strfmt.Registry) error {

	if err := validate.Required("sessionID", "body", m.SessionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIMatchTicketStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIMatchTicketStatus) UnmarshalBinary(b []byte) error {
	var res APIMatchTicketStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
