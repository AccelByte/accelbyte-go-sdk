// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EntitlementDecrementResult entitlement decrement result
//
// swagger:model EntitlementDecrementResult
type EntitlementDecrementResult struct {

	// appId if entitlement is an app
	AppID string `json:"appId,omitempty"`

	// appType if entitlement is an app
	// Enum: [DEMO DLC GAME SOFTWARE]
	AppType string `json:"appType,omitempty"`

	// entitlement class
	// Required: true
	// Enum: [APP CODE ENTITLEMENT LOOTBOX MEDIA OPTIONBOX SUBSCRIPTION]
	Clazz *string `json:"clazz"`

	// entitlement created at
	// Required: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt"`

	// entitlement end date
	// Format: date-time
	EndDate *strfmt.DateTime `json:"endDate,omitempty"`

	// entitlement features
	// Unique: true
	Features []string `json:"features"`

	// entitlement granted at
	// Required: true
	// Format: date-time
	GrantedAt strfmt.DateTime `json:"grantedAt"`

	// grantedCode, the granted code
	GrantedCode string `json:"grantedCode,omitempty"`

	// entitlement id
	// Required: true
	ID *string `json:"id"`

	// itemId of the entitlement
	// Required: true
	ItemID *string `json:"itemId"`

	// itemNamespace for the purchased item
	// Required: true
	ItemNamespace *string `json:"itemNamespace"`

	// itemSnapshot
	ItemSnapshot *ItemSnapshot `json:"itemSnapshot,omitempty"`

	// entitlement name
	// Required: true
	Name *string `json:"name"`

	// entitlement namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// replayed, if true,the response is original successful response. This will not be included in response if client have not pass request id.
	Replayed bool `json:"replayed"`

	// request id
	RequestID string `json:"requestId,omitempty"`

	// loot reward, only return when consume a loot box entitlement
	Rewards []*EntitlementLootBoxReward `json:"rewards"`

	// sku for purchased item
	Sku string `json:"sku,omitempty"`

	// entitlement source
	// Required: true
	// Enum: [ACHIEVEMENT GIFT IAP OTHER PROMOTION PURCHASE REDEEM_CODE REFERRAL_BONUS REWARD]
	Source *string `json:"source"`

	// Whether the CONSUMABLE entitlement is stackable
	Stackable bool `json:"stackable"`

	// entitlement start date
	// Format: date-time
	StartDate *strfmt.DateTime `json:"startDate,omitempty"`

	// entitlement status
	// Required: true
	// Enum: [ACTIVE CONSUMED INACTIVE REVOKED]
	Status *string `json:"status"`

	// storeId of the item, published store if omitted
	StoreID string `json:"storeId,omitempty"`

	// entitlement type
	// Required: true
	// Enum: [CONSUMABLE DURABLE]
	Type *string `json:"type"`

	// entitlement updated at
	// Required: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt"`

	// useCount for entitlement
	UseCount int32 `json:"useCount,omitempty"`

	// userId for this entitlement
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this entitlement decrement result
func (m *EntitlementDecrementResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClazz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrantedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemSnapshot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var entitlementDecrementResultTypeAppTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEMO","DLC","GAME","SOFTWARE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		entitlementDecrementResultTypeAppTypePropEnum = append(entitlementDecrementResultTypeAppTypePropEnum, v)
	}
}

const (

	// EntitlementDecrementResultAppTypeDEMO captures enum value "DEMO"
	EntitlementDecrementResultAppTypeDEMO string = "DEMO"

	// EntitlementDecrementResultAppTypeDLC captures enum value "DLC"
	EntitlementDecrementResultAppTypeDLC string = "DLC"

	// EntitlementDecrementResultAppTypeGAME captures enum value "GAME"
	EntitlementDecrementResultAppTypeGAME string = "GAME"

	// EntitlementDecrementResultAppTypeSOFTWARE captures enum value "SOFTWARE"
	EntitlementDecrementResultAppTypeSOFTWARE string = "SOFTWARE"
)

// prop value enum
func (m *EntitlementDecrementResult) validateAppTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, entitlementDecrementResultTypeAppTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EntitlementDecrementResult) validateAppType(formats strfmt.Registry) error {

	if swag.IsZero(m.AppType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAppTypeEnum("appType", "body", m.AppType); err != nil {
		return err
	}

	return nil
}

var entitlementDecrementResultTypeClazzPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["APP","CODE","ENTITLEMENT","LOOTBOX","MEDIA","OPTIONBOX","SUBSCRIPTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		entitlementDecrementResultTypeClazzPropEnum = append(entitlementDecrementResultTypeClazzPropEnum, v)
	}
}

const (

	// EntitlementDecrementResultClazzAPP captures enum value "APP"
	EntitlementDecrementResultClazzAPP string = "APP"

	// EntitlementDecrementResultClazzCODE captures enum value "CODE"
	EntitlementDecrementResultClazzCODE string = "CODE"

	// EntitlementDecrementResultClazzENTITLEMENT captures enum value "ENTITLEMENT"
	EntitlementDecrementResultClazzENTITLEMENT string = "ENTITLEMENT"

	// EntitlementDecrementResultClazzLOOTBOX captures enum value "LOOTBOX"
	EntitlementDecrementResultClazzLOOTBOX string = "LOOTBOX"

	// EntitlementDecrementResultClazzMEDIA captures enum value "MEDIA"
	EntitlementDecrementResultClazzMEDIA string = "MEDIA"

	// EntitlementDecrementResultClazzOPTIONBOX captures enum value "OPTIONBOX"
	EntitlementDecrementResultClazzOPTIONBOX string = "OPTIONBOX"

	// EntitlementDecrementResultClazzSUBSCRIPTION captures enum value "SUBSCRIPTION"
	EntitlementDecrementResultClazzSUBSCRIPTION string = "SUBSCRIPTION"
)

// prop value enum
func (m *EntitlementDecrementResult) validateClazzEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, entitlementDecrementResultTypeClazzPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EntitlementDecrementResult) validateClazz(formats strfmt.Registry) error {

	if err := validate.Required("clazz", "body", m.Clazz); err != nil {
		return err
	}

	// value enum
	if err := m.validateClazzEnum("clazz", "body", *m.Clazz); err != nil {
		return err
	}

	return nil
}

func (m *EntitlementDecrementResult) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EntitlementDecrementResult) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EntitlementDecrementResult) validateFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Features) { // not required
		return nil
	}

	if err := validate.UniqueItems("features", "body", m.Features); err != nil {
		return err
	}

	return nil
}

func (m *EntitlementDecrementResult) validateGrantedAt(formats strfmt.Registry) error {

	if err := validate.Required("grantedAt", "body", strfmt.DateTime(m.GrantedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("grantedAt", "body", "date-time", m.GrantedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EntitlementDecrementResult) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *EntitlementDecrementResult) validateItemID(formats strfmt.Registry) error {

	if err := validate.Required("itemId", "body", m.ItemID); err != nil {
		return err
	}

	return nil
}

func (m *EntitlementDecrementResult) validateItemNamespace(formats strfmt.Registry) error {

	if err := validate.Required("itemNamespace", "body", m.ItemNamespace); err != nil {
		return err
	}

	return nil
}

func (m *EntitlementDecrementResult) validateItemSnapshot(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemSnapshot) { // not required
		return nil
	}

	if m.ItemSnapshot != nil {
		if err := m.ItemSnapshot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("itemSnapshot")
			}
			return err
		}
	}

	return nil
}

func (m *EntitlementDecrementResult) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *EntitlementDecrementResult) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *EntitlementDecrementResult) validateRewards(formats strfmt.Registry) error {

	if swag.IsZero(m.Rewards) { // not required
		return nil
	}

	for i := 0; i < len(m.Rewards); i++ {
		if swag.IsZero(m.Rewards[i]) { // not required
			continue
		}

		if m.Rewards[i] != nil {
			if err := m.Rewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var entitlementDecrementResultTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACHIEVEMENT","GIFT","IAP","OTHER","PROMOTION","PURCHASE","REDEEM_CODE","REFERRAL_BONUS","REWARD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		entitlementDecrementResultTypeSourcePropEnum = append(entitlementDecrementResultTypeSourcePropEnum, v)
	}
}

const (

	// EntitlementDecrementResultSourceACHIEVEMENT captures enum value "ACHIEVEMENT"
	EntitlementDecrementResultSourceACHIEVEMENT string = "ACHIEVEMENT"

	// EntitlementDecrementResultSourceGIFT captures enum value "GIFT"
	EntitlementDecrementResultSourceGIFT string = "GIFT"

	// EntitlementDecrementResultSourceIAP captures enum value "IAP"
	EntitlementDecrementResultSourceIAP string = "IAP"

	// EntitlementDecrementResultSourceOTHER captures enum value "OTHER"
	EntitlementDecrementResultSourceOTHER string = "OTHER"

	// EntitlementDecrementResultSourcePROMOTION captures enum value "PROMOTION"
	EntitlementDecrementResultSourcePROMOTION string = "PROMOTION"

	// EntitlementDecrementResultSourcePURCHASE captures enum value "PURCHASE"
	EntitlementDecrementResultSourcePURCHASE string = "PURCHASE"

	// EntitlementDecrementResultSourceREDEEMCODE captures enum value "REDEEM_CODE"
	EntitlementDecrementResultSourceREDEEMCODE string = "REDEEM_CODE"

	// EntitlementDecrementResultSourceREFERRALBONUS captures enum value "REFERRAL_BONUS"
	EntitlementDecrementResultSourceREFERRALBONUS string = "REFERRAL_BONUS"

	// EntitlementDecrementResultSourceREWARD captures enum value "REWARD"
	EntitlementDecrementResultSourceREWARD string = "REWARD"
)

// prop value enum
func (m *EntitlementDecrementResult) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, entitlementDecrementResultTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EntitlementDecrementResult) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", *m.Source); err != nil {
		return err
	}

	return nil
}

func (m *EntitlementDecrementResult) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var entitlementDecrementResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","CONSUMED","INACTIVE","REVOKED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		entitlementDecrementResultTypeStatusPropEnum = append(entitlementDecrementResultTypeStatusPropEnum, v)
	}
}

const (

	// EntitlementDecrementResultStatusACTIVE captures enum value "ACTIVE"
	EntitlementDecrementResultStatusACTIVE string = "ACTIVE"

	// EntitlementDecrementResultStatusCONSUMED captures enum value "CONSUMED"
	EntitlementDecrementResultStatusCONSUMED string = "CONSUMED"

	// EntitlementDecrementResultStatusINACTIVE captures enum value "INACTIVE"
	EntitlementDecrementResultStatusINACTIVE string = "INACTIVE"

	// EntitlementDecrementResultStatusREVOKED captures enum value "REVOKED"
	EntitlementDecrementResultStatusREVOKED string = "REVOKED"
)

// prop value enum
func (m *EntitlementDecrementResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, entitlementDecrementResultTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EntitlementDecrementResult) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var entitlementDecrementResultTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONSUMABLE","DURABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		entitlementDecrementResultTypeTypePropEnum = append(entitlementDecrementResultTypeTypePropEnum, v)
	}
}

const (

	// EntitlementDecrementResultTypeCONSUMABLE captures enum value "CONSUMABLE"
	EntitlementDecrementResultTypeCONSUMABLE string = "CONSUMABLE"

	// EntitlementDecrementResultTypeDURABLE captures enum value "DURABLE"
	EntitlementDecrementResultTypeDURABLE string = "DURABLE"
)

// prop value enum
func (m *EntitlementDecrementResult) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, entitlementDecrementResultTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EntitlementDecrementResult) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *EntitlementDecrementResult) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EntitlementDecrementResult) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntitlementDecrementResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntitlementDecrementResult) UnmarshalBinary(b []byte) error {
	var res EntitlementDecrementResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
