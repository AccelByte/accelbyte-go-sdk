// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package campaign

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclientmodels"
)

// ApplyUserRedemptionReader is a Reader for the ApplyUserRedemption structure.
type ApplyUserRedemptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApplyUserRedemptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewApplyUserRedemptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewApplyUserRedemptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewApplyUserRedemptionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewApplyUserRedemptionUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /platform/admin/namespaces/{namespace}/users/{userId}/redemption returns an error %d: %s", response.Code(), string(data))
	}
}

// NewApplyUserRedemptionOK creates a ApplyUserRedemptionOK with default headers values
func NewApplyUserRedemptionOK() *ApplyUserRedemptionOK {
	return &ApplyUserRedemptionOK{}
}

/*ApplyUserRedemptionOK handles this case with default header values.

  successful operation
*/
type ApplyUserRedemptionOK struct {
	Payload *platformclientmodels.RedeemResult
}

func (o *ApplyUserRedemptionOK) Error() string {
	return fmt.Sprintf("[POST /platform/admin/namespaces/{namespace}/users/{userId}/redemption][%d] applyUserRedemptionOK  %+v", 200, o.Payload)
}

func (o *ApplyUserRedemptionOK) GetPayload() *platformclientmodels.RedeemResult {
	return o.Payload
}

func (o *ApplyUserRedemptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.RedeemResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyUserRedemptionNotFound creates a ApplyUserRedemptionNotFound with default headers values
func NewApplyUserRedemptionNotFound() *ApplyUserRedemptionNotFound {
	return &ApplyUserRedemptionNotFound{}
}

/*ApplyUserRedemptionNotFound handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37142</td><td>Code [{code}] does not exist in namespace [{namespace}]</td></tr></table>
*/
type ApplyUserRedemptionNotFound struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *ApplyUserRedemptionNotFound) Error() string {
	return fmt.Sprintf("[POST /platform/admin/namespaces/{namespace}/users/{userId}/redemption][%d] applyUserRedemptionNotFound  %+v", 404, o.Payload)
}

func (o *ApplyUserRedemptionNotFound) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *ApplyUserRedemptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyUserRedemptionConflict creates a ApplyUserRedemptionConflict with default headers values
func NewApplyUserRedemptionConflict() *ApplyUserRedemptionConflict {
	return &ApplyUserRedemptionConflict{}
}

/*ApplyUserRedemptionConflict handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37172</td><td>Campaign [{campaignId}] is inactive in namespace [{namespace}]</td></tr><tr><td>37173</td><td>Code [{code}] is inactive in namespace [{namespace}]</td></tr><tr><td>37174</td><td>Exceeded max redeem count per code [{maxCount}]</td></tr><tr><td>37175</td><td>Exceeded max redeem count per code per user [{maxCount}]</td></tr><tr><td>37177</td><td>Code redemption not started</td></tr><tr><td>37178</td><td>Code redemption already ended</td></tr></table>
*/
type ApplyUserRedemptionConflict struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *ApplyUserRedemptionConflict) Error() string {
	return fmt.Sprintf("[POST /platform/admin/namespaces/{namespace}/users/{userId}/redemption][%d] applyUserRedemptionConflict  %+v", 409, o.Payload)
}

func (o *ApplyUserRedemptionConflict) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *ApplyUserRedemptionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyUserRedemptionUnprocessableEntity creates a ApplyUserRedemptionUnprocessableEntity with default headers values
func NewApplyUserRedemptionUnprocessableEntity() *ApplyUserRedemptionUnprocessableEntity {
	return &ApplyUserRedemptionUnprocessableEntity{}
}

/*ApplyUserRedemptionUnprocessableEntity handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type ApplyUserRedemptionUnprocessableEntity struct {
	Payload *platformclientmodels.ValidationErrorEntity
}

func (o *ApplyUserRedemptionUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /platform/admin/namespaces/{namespace}/users/{userId}/redemption][%d] applyUserRedemptionUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ApplyUserRedemptionUnprocessableEntity) GetPayload() *platformclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *ApplyUserRedemptionUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
