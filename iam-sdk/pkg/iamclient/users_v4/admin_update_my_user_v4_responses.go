// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package users_v4

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// AdminUpdateMyUserV4Reader is a Reader for the AdminUpdateMyUserV4 structure.
type AdminUpdateMyUserV4Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminUpdateMyUserV4Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminUpdateMyUserV4OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminUpdateMyUserV4BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminUpdateMyUserV4Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewAdminUpdateMyUserV4Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewAdminUpdateMyUserV4InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PATCH /iam/v4/admin/users/me returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminUpdateMyUserV4OK creates a AdminUpdateMyUserV4OK with default headers values
func NewAdminUpdateMyUserV4OK() *AdminUpdateMyUserV4OK {
	return &AdminUpdateMyUserV4OK{}
}

/*AdminUpdateMyUserV4OK handles this case with default header values.

  OK
*/
type AdminUpdateMyUserV4OK struct {
	Payload *iamclientmodels.ModelUserResponseV3
}

func (o *AdminUpdateMyUserV4OK) Error() string {
	return fmt.Sprintf("[PATCH /iam/v4/admin/users/me][%d] adminUpdateMyUserV4OK  %+v", 200, o.ToString())
}

func (o *AdminUpdateMyUserV4OK) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateMyUserV4OK) GetPayload() *iamclientmodels.ModelUserResponseV3 {
	return o.Payload
}

func (o *AdminUpdateMyUserV4OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.ModelUserResponseV3)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateMyUserV4BadRequest creates a AdminUpdateMyUserV4BadRequest with default headers values
func NewAdminUpdateMyUserV4BadRequest() *AdminUpdateMyUserV4BadRequest {
	return &AdminUpdateMyUserV4BadRequest{}
}

/*AdminUpdateMyUserV4BadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>10154</td><td>country not found</td></tr><tr><td>10130</td><td>user under age</td></tr></table>
*/
type AdminUpdateMyUserV4BadRequest struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminUpdateMyUserV4BadRequest) Error() string {
	return fmt.Sprintf("[PATCH /iam/v4/admin/users/me][%d] adminUpdateMyUserV4BadRequest  %+v", 400, o.ToString())
}

func (o *AdminUpdateMyUserV4BadRequest) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateMyUserV4BadRequest) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminUpdateMyUserV4BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateMyUserV4Unauthorized creates a AdminUpdateMyUserV4Unauthorized with default headers values
func NewAdminUpdateMyUserV4Unauthorized() *AdminUpdateMyUserV4Unauthorized {
	return &AdminUpdateMyUserV4Unauthorized{}
}

/*AdminUpdateMyUserV4Unauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr><tr><td>20022</td><td>token is not user token</td></tr></table>
*/
type AdminUpdateMyUserV4Unauthorized struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminUpdateMyUserV4Unauthorized) Error() string {
	return fmt.Sprintf("[PATCH /iam/v4/admin/users/me][%d] adminUpdateMyUserV4Unauthorized  %+v", 401, o.ToString())
}

func (o *AdminUpdateMyUserV4Unauthorized) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateMyUserV4Unauthorized) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminUpdateMyUserV4Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateMyUserV4Conflict creates a AdminUpdateMyUserV4Conflict with default headers values
func NewAdminUpdateMyUserV4Conflict() *AdminUpdateMyUserV4Conflict {
	return &AdminUpdateMyUserV4Conflict{}
}

/*AdminUpdateMyUserV4Conflict handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10177</td><td>username already used</td></tr></table>
*/
type AdminUpdateMyUserV4Conflict struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminUpdateMyUserV4Conflict) Error() string {
	return fmt.Sprintf("[PATCH /iam/v4/admin/users/me][%d] adminUpdateMyUserV4Conflict  %+v", 409, o.ToString())
}

func (o *AdminUpdateMyUserV4Conflict) ToString() string {
	b, err := json.Marshal(o.Payload)
	if err != nil {
		fmt.Println(err)
	}

	return fmt.Sprintf("%+v", string(b))
}

func (o *AdminUpdateMyUserV4Conflict) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminUpdateMyUserV4Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateMyUserV4InternalServerError creates a AdminUpdateMyUserV4InternalServerError with default headers values
func NewAdminUpdateMyUserV4InternalServerError() *AdminUpdateMyUserV4InternalServerError {
	return &AdminUpdateMyUserV4InternalServerError{}
}

/*AdminUpdateMyUserV4InternalServerError handles this case with default header values.

  Internal Server Error
*/
type AdminUpdateMyUserV4InternalServerError struct {
}

func (o *AdminUpdateMyUserV4InternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /iam/v4/admin/users/me][%d] adminUpdateMyUserV4InternalServerError ", 500)
}

func (o *AdminUpdateMyUserV4InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
