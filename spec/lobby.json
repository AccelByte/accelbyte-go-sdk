{
  "host": "demo.accelbyte.io",
  "info": {
    "description": "Justice Lobby Server",
    "title": "justice-lobby-server",
    "version": "3.31.0"
  },
  "schemes": [
    "https"
  ],
  "externalDocs": {
    "description": "API Docs",
    "url": "https://demo.accelbyte.io/lobby/apidocs"
  },
  "securityDefinitions": {
    "HasPermission": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "ADMIN:NAMESPACE:*:LOBBY:CONFIG [READ]": "ADMIN:NAMESPACE:*:LOBBY:CONFIG [READ]",
        "ADMIN:NAMESPACE:{namespace}:LOBBY:CCU [READ]": "ADMIN:NAMESPACE:{namespace}:LOBBY:CCU [READ]",
        "ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [READ]": "ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [READ]",
        "ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [UPDATE]": "ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]": "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [DELETE]": "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]": "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]",
        "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [UPDATE]": "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [READ]": "ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [READ]",
        "ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [UPDATE]": "ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:PROFANITY [CREATE]": "ADMIN:NAMESPACE:{namespace}:PROFANITY [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:PROFANITY [DELETE]": "ADMIN:NAMESPACE:{namespace}:PROFANITY [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]": "ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]",
        "ADMIN:NAMESPACE:{namespace}:PROFANITY [UPDATE]": "ADMIN:NAMESPACE:{namespace}:PROFANITY [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [CREATE]": "ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [DELETE]": "ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [READ]": "ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [READ]",
        "ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [UPDATE]": "ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:ATTRIBUTES [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:ATTRIBUTES [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:ATTRIBUTES [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:ATTRIBUTES [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [READ]",
        "NAMESPACE:{namespace}:NOTIFICATION [CREATE]": "NAMESPACE:{namespace}:NOTIFICATION [CREATE]",
        "NAMESPACE:{namespace}:TEMPLATE [CREATE]": "NAMESPACE:{namespace}:TEMPLATE [CREATE]",
        "NAMESPACE:{namespace}:TEMPLATE [DELETE]": "NAMESPACE:{namespace}:TEMPLATE [DELETE]",
        "NAMESPACE:{namespace}:TEMPLATE [READ]": "NAMESPACE:{namespace}:TEMPLATE [READ]",
        "NAMESPACE:{namespace}:TEMPLATE [UPDATE]": "NAMESPACE:{namespace}:TEMPLATE [UPDATE]",
        "NAMESPACE:{namespace}:TOPIC [CREATE]": "NAMESPACE:{namespace}:TOPIC [CREATE]",
        "NAMESPACE:{namespace}:TOPIC [DELETE]": "NAMESPACE:{namespace}:TOPIC [DELETE]",
        "NAMESPACE:{namespace}:TOPIC [READ]": "NAMESPACE:{namespace}:TOPIC [READ]",
        "NAMESPACE:{namespace}:TOPIC [UPDATE]": "NAMESPACE:{namespace}:TOPIC [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:FRIENDS [CREATE]": "NAMESPACE:{namespace}:USER:{userId}:FRIENDS [CREATE]",
        "NAMESPACE:{namespace}:USER:{userId}:FRIENDS [DELETE]": "NAMESPACE:{namespace}:USER:{userId}:FRIENDS [DELETE]",
        "NAMESPACE:{namespace}:USER:{userId}:FRIENDS [READ]": "NAMESPACE:{namespace}:USER:{userId}:FRIENDS [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:NOTIFICATION [CREATE]": "NAMESPACE:{namespace}:USER:{userId}:NOTIFICATION [CREATE]"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "HasScope": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "social": "social"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "paths": {
    "/friends/namespaces/{namespace}/me": {
      "get": {
        "operationId": "getUserFriendsUpdated",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 25,
            "description": "maximum number of data",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "numbers of row to skip within the result",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.GetUserFriendsResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "get list of friends",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/friends/namespaces/{namespace}/me/incoming": {
      "get": {
        "operationId": "getUserIncomingFriends",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 25,
            "description": "maximum number of data",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "numbers of row to skip within the result",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.GetUserIncomingFriendsResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "get list of incoming friends",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/friends/namespaces/{namespace}/me/incoming-time": {
      "get": {
        "operationId": "getUserIncomingFriendsWithTime",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 25,
            "description": "maximum number of data",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "numbers of row to skip within the result",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.LoadIncomingFriendsWithTimeResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "get list of incoming friends with requested time info",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/friends/namespaces/{namespace}/me/outgoing": {
      "get": {
        "operationId": "getUserOutgoingFriends",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 25,
            "description": "maximum number of data",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "numbers of row to skip within the result",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.GetUserOutgoingFriendsResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "get list of outgoing friends",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/friends/namespaces/{namespace}/me/outgoing-time": {
      "get": {
        "operationId": "getUserOutgoingFriendsWithTime",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 25,
            "description": "maximum number of data",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "numbers of row to skip within the result",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.LoadOutgoingFriendsWithTimeResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "get list of outgoing friends with requested time info",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/friends/namespaces/{namespace}/me/platforms": {
      "get": {
        "operationId": "getUserFriendsWithPlatform",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": 25,
            "description": "maximum number of data",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "numbers of row to skip within the result",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ListBulkUserPlatformsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "get list of friends with platform data",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/friends/namespaces/{namespace}/me/request": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Client should provide either friendID or friendPublicID. If both are provided, friendID will be chosen to be used.\nThis endpoint will only send a pending invite that can be either rejected/accepted\n",
        "operationId": "userRequestFriend",
        "parameters": [
          {
            "description": "add friend content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserRequestFriendRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "user add friend",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/friends/namespaces/{namespace}/me/request/accept": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "userAcceptFriendRequest",
        "parameters": [
          {
            "description": "accept friend content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserAcceptFriendRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "user accept friend",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/friends/namespaces/{namespace}/me/request/cancel": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "userCancelFriendRequest",
        "parameters": [
          {
            "description": "cancel friend request content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCancelFriendRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "user cancel a friend request",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/friends/namespaces/{namespace}/me/request/reject": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "userRejectFriendRequest",
        "parameters": [
          {
            "description": "reject friend request content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserRejectFriendRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "user reject a friend request",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/friends/namespaces/{namespace}/me/status/{friendId}": {
      "get": {
        "operationId": "userGetFriendshipStatus",
        "parameters": [
          {
            "description": "Friend ID",
            "in": "path",
            "name": "friendId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserGetFriendshipStatusResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "user get friendship status",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/friends/namespaces/{namespace}/me/unfriend": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "userUnfriendRequest",
        "parameters": [
          {
            "description": "unfriend request content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUnfriendRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "user unfriend a friend",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/friends/namespaces/{namespace}/users/{userId}/add/bulk": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:FRIENDS [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;friends request in a namespace.",
        "operationId": "addFriendsWithoutConfirmation",
        "parameters": [
          {
            "description": "friends request content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BulkFriendsRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:FRIENDS [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Add friends without confirmation",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/friends/namespaces/{namespace}/users/{userId}/delete/bulk": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:FRIENDS [DELETE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;friends request in a namespace.",
        "operationId": "bulkDeleteFriends",
        "parameters": [
          {
            "description": "list of friend userIDs",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BulkFriendsRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "number of deleted items (one friendship consists of 2 items)",
            "schema": {
              "$ref": "#/definitions/model.BulkFriendsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/model.BulkFriendsResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:FRIENDS [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete friends, and incoming/outgoing friend requests",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/friends/sync/namespaces/{namespace}/me": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Sync friends using server to server call to native first party servere.\n\t\t\tSupported platforms:\n\t\t\tsteam: The platform_token’s value is the binary ticket returned by Steam. \n\t\t\t \t\tIf this ticket was generated by Steam GetAuthTicketForWebApi with version \u0026gt;= 1.57, then platform token should use this style: {identity}:{ticket}\n\t\t\t\t\tthe {identity} was the parameter to call GetAuthTicketForWebApi when the ticket was created. Note: Do not contain : in this {identity}\n\t\t\tps4: The platform_token’s value is the authorization code returned by Sony OAuth.\n\t\t\tps5: The platform_token’s value is the authorization code returned by Sony OAuth.",
        "operationId": "syncNativeFriends",
        "parameters": [
          {
            "description": "request native friend sync, is_login, if true mean user already login to IAM, if false mean user need to passing the user token.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/model.NativeFriendRequest"
              },
              "type": "array"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.NativeFriendSyncResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "sync friends using server to server call to native first party server.",
        "tags": [
          "friends",
          "public"
        ]
      }
    },
    "/lobby/v1/admin/config": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:*:LOBBY:CONFIG [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get lobby config of all namespaces.\u0026lt;br\u0026gt;default MaxDSWaitTime is 120 (second)",
        "operationId": "adminGetAllConfigV1",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ConfigList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LOBBY:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "admin get all namespaces config",
        "tags": [
          "config"
        ]
      }
    },
    "/lobby/v1/admin/config/namespaces/{namespace}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get lobby config of a namespace.\u0026lt;br\u0026gt;default MaxDSWaitTime is 120 (second)",
        "operationId": "adminGetConfigV1",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ConfigReq"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "admin get namespace config",
        "tags": [
          "config"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [UPDATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;update lobby config of a namespace.\u0026lt;br\u0026gt;MaxDSWaitTime value is cannot less than 1, if null it will use default value in 120 (second)",
        "operationId": "adminUpdateConfigV1",
        "parameters": [
          {
            "description": "lobby config",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ConfigReq"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ConfigReq"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "admin update namespace config",
        "tags": [
          "config"
        ]
      }
    },
    "/lobby/v1/admin/config/namespaces/{namespace}/export": {
      "get": {
        "description": "\n\t\t\t\tRequired permission ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [READ]\n\n\t\t\t\tRequired Scope: social\n\n\t\t\t\tExport lobby configuration to a json file. The file can then be imported from the /import endpoint. \n\t\t\t\nJSON Schema of the exported file:\n{\u0026#34;required\u0026#34;:[\u0026#34;namespace\u0026#34;,\u0026#34;entitlementItemID\u0026#34;,\u0026#34;chatRateLimitDuration\u0026#34;,\u0026#34;unregisterDelay\u0026#34;,\u0026#34;generalRateLimitDuration\u0026#34;,\u0026#34;autoKickOnDisconnectDelay\u0026#34;,\u0026#34;chatRateLimitBurst\u0026#34;,\u0026#34;generalRateLimitBurst\u0026#34;,\u0026#34;maxPartyMember\u0026#34;,\u0026#34;autoKickOnDisconnect\u0026#34;,\u0026#34;profanityFilter\u0026#34;,\u0026#34;enableChat\u0026#34;,\u0026#34;entitlementCheck\u0026#34;,\u0026#34;cancelTicketOnDisconnect\u0026#34;,\u0026#34;concurrentUsersLimit\u0026#34;,\u0026#34;readyConsentTimeout\u0026#34;,\u0026#34;disableInvitationOnJoinParty\u0026#34;,\u0026#34;allowJoinPartyDuringMatchmaking\u0026#34;,\u0026#34;allowInviteNonConnectedUser\u0026#34;,\u0026#34;keepPresenceActivityOnDisconnect\u0026#34;,\u0026#34;maxDSWaitTime\u0026#34;,\u0026#34;maxFriendsLimit\u0026#34;],\u0026#34;properties\u0026#34;:{\u0026#34;allowInviteNonConnectedUser\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;boolean\u0026#34;},\u0026#34;allowJoinPartyDuringMatchmaking\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;boolean\u0026#34;},\u0026#34;autoKickOnDisconnect\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;boolean\u0026#34;},\u0026#34;autoKickOnDisconnectDelay\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;integer\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;integer\u0026#34;},\u0026#34;cancelTicketOnDisconnect\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;boolean\u0026#34;},\u0026#34;chatRateLimitBurst\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;integer\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;int32\u0026#34;},\u0026#34;chatRateLimitDuration\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;integer\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;integer\u0026#34;},\u0026#34;concurrentUsersLimit\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;integer\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;int32\u0026#34;},\u0026#34;disableInvitationOnJoinParty\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;boolean\u0026#34;},\u0026#34;enableChat\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;boolean\u0026#34;},\u0026#34;entitlementCheck\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;boolean\u0026#34;},\u0026#34;entitlementItemID\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;string\u0026#34;},\u0026#34;generalRateLimitBurst\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;integer\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;int32\u0026#34;},\u0026#34;generalRateLimitDuration\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;integer\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;integer\u0026#34;},\u0026#34;keepPresenceActivityOnDisconnect\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;boolean\u0026#34;},\u0026#34;maxDSWaitTime\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;integer\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;integer\u0026#34;},\u0026#34;maxFriendsLimit\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;integer\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;int32\u0026#34;},\u0026#34;maxPartyMember\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;integer\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;int32\u0026#34;},\u0026#34;namespace\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;string\u0026#34;},\u0026#34;profanityFilter\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;boolean\u0026#34;},\u0026#34;readyConsentTimeout\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;integer\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;integer\u0026#34;},\u0026#34;unregisterDelay\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;integer\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;integer\u0026#34;}}}",
        "operationId": "adminExportConfigV1",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK\nJSON Schema of the exported file:\n{\"required\":[\"namespace\",\"entitlementItemID\",\"chatRateLimitDuration\",\"unregisterDelay\",\"generalRateLimitDuration\",\"autoKickOnDisconnectDelay\",\"chatRateLimitBurst\",\"generalRateLimitBurst\",\"maxPartyMember\",\"autoKickOnDisconnect\",\"profanityFilter\",\"enableChat\",\"entitlementCheck\",\"cancelTicketOnDisconnect\",\"concurrentUsersLimit\",\"readyConsentTimeout\",\"disableInvitationOnJoinParty\",\"allowJoinPartyDuringMatchmaking\",\"allowInviteNonConnectedUser\",\"keepPresenceActivityOnDisconnect\",\"maxDSWaitTime\",\"maxFriendsLimit\"],\"properties\":{\"allowInviteNonConnectedUser\":{\"type\":\"boolean\"},\"allowJoinPartyDuringMatchmaking\":{\"type\":\"boolean\"},\"autoKickOnDisconnect\":{\"type\":\"boolean\"},\"autoKickOnDisconnectDelay\":{\"type\":\"integer\",\"format\":\"integer\"},\"cancelTicketOnDisconnect\":{\"type\":\"boolean\"},\"chatRateLimitBurst\":{\"type\":\"integer\",\"format\":\"int32\"},\"chatRateLimitDuration\":{\"type\":\"integer\",\"format\":\"integer\"},\"concurrentUsersLimit\":{\"type\":\"integer\",\"format\":\"int32\"},\"disableInvitationOnJoinParty\":{\"type\":\"boolean\"},\"enableChat\":{\"type\":\"boolean\"},\"entitlementCheck\":{\"type\":\"boolean\"},\"entitlementItemID\":{\"type\":\"string\"},\"generalRateLimitBurst\":{\"type\":\"integer\",\"format\":\"int32\"},\"generalRateLimitDuration\":{\"type\":\"integer\",\"format\":\"integer\"},\"keepPresenceActivityOnDisconnect\":{\"type\":\"boolean\"},\"maxDSWaitTime\":{\"type\":\"integer\",\"format\":\"integer\"},\"maxFriendsLimit\":{\"type\":\"integer\",\"format\":\"int32\"},\"maxPartyMember\":{\"type\":\"integer\",\"format\":\"int32\"},\"namespace\":{\"type\":\"string\"},\"profanityFilter\":{\"type\":\"boolean\"},\"readyConsentTimeout\":{\"type\":\"integer\",\"format\":\"integer\"},\"unregisterDelay\":{\"type\":\"integer\",\"format\":\"integer\"}}}",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Export lobby config to a json file.",
        "tags": [
          "config"
        ]
      }
    },
    "/lobby/v1/admin/config/namespaces/{namespace}/import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "\n\t\t\t\tRequired permission ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [UPDATE]\n\n\t\t\t\tRequired Scope: social\n\n\t\t\t\tImport config configuration from file. The existing configuration will be replaced.\n\t\t\t\tThe json file to import can be obtained from the /export endpoint. \n\t\t\t\t\n\t\t\t\tMaxDSWaitTime value is cannot less than 1, if null it will use default value in 120 (second)\n\t\t\t",
        "operationId": "adminImportConfigV1",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "file to be imported",
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ImportConfigResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Import lobby config from a json file.",
        "tags": [
          "config"
        ]
      }
    },
    "/lobby/v1/admin/friend/namespaces/{namespace}/users/{userId}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:FRIENDS [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\u0026lt;br\u0026gt;get list of friends in a namespace.",
        "operationId": "get list of friends",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "friend userId",
            "in": "query",
            "name": "friendId",
            "type": "string"
          },
          {
            "default": 25,
            "description": "maximum number of data",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "numbers of row to skip within the result",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/model.GetFriendsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:FRIENDS [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get list of friends",
        "tags": [
          "friends"
        ]
      }
    },
    "/lobby/v1/admin/friend/namespaces/{namespace}/users/{userId}/incoming": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:FRIENDS [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\u0026lt;br\u0026gt;get list of incoming friend requests.",
        "operationId": "get incoming friend requests",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "friend userId",
            "in": "query",
            "name": "friendId",
            "type": "string"
          },
          {
            "default": 25,
            "description": "maximum number of data",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "numbers of row to skip within the result",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/model.LoadIncomingFriendsWithTimeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:FRIENDS [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get incoming friend requests",
        "tags": [
          "friends"
        ]
      }
    },
    "/lobby/v1/admin/friend/namespaces/{namespace}/users/{userId}/outgoing": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:FRIENDS [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\u0026lt;br\u0026gt;get list of outgoing friend requests in a namespace.",
        "operationId": "get outgoing friend requests",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "default": 25,
            "description": "maximum number of data",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "numbers of row to skip within the result",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/model.LoadOutgoingFriendsWithTimeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:FRIENDS [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get list of outgoing friend requests",
        "tags": [
          "friends"
        ]
      }
    },
    "/lobby/v1/admin/global-configurations": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete of global configuration data.",
        "operationId": "adminDeleteGlobalConfig",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Required permission : ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [DELETE]",
        "tags": [
          "admin",
          "global-configurations"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\tget dsmc global configuration.",
        "operationId": "adminGetGlobalConfig",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GlobalConfiguration"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Record of global configuration dsmc.",
        "tags": [
          "admin",
          "global-configurations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Upsert global configuration data.",
        "operationId": "adminUpdateGlobalConfig",
        "parameters": [
          {
            "description": "Update global configuration",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.PutGlobalConfigurationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GlobalConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Required permission : ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [UPDATE]",
        "tags": [
          "admin",
          "global-configurations"
        ]
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/bulkUsers/freeform/notify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Sends notification to multiple user.\n\t\t\tAction Code: 50211",
        "operationId": "sendMultipleUsersFreeformNotificationV1Admin",
        "parameters": [
          {
            "description": "notification content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BulkUsersFreeFormNotificationRequestV1"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "send freeform notification to multiple users",
        "tags": [
          "notification"
        ]
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/freeform/notify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Sends notification to all connected users in a namespace.\u0026lt;br\u0026gt;\n\t\t\tAction Code: 50201",
        "operationId": "sendUsersFreeformNotificationV1Admin",
        "parameters": [
          {
            "description": "notification content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.FreeFormNotificationRequestV1"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "send freeform notification to connected users",
        "tags": [
          "notification"
        ]
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/parties/{partyId}/freeform/notify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\t\t\u0026lt;br\u0026gt;Sends notification to a party.",
        "operationId": "sendPartyFreeformNotificationV1Admin",
        "parameters": [
          {
            "description": "notification content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.FreeFormNotificationRequestV1"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "party ID",
            "in": "path",
            "name": "partyId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "send freeform notification to a party",
        "tags": [
          "notification"
        ]
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/parties/{partyId}/templates/notify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\t\t\u0026lt;br\u0026gt;Sends templated notification to a party.\n\t\t\t\t\t\u0026lt;br\u0026gt;In the request body, specify which template slug (template identifier) to use and the template language.\n\t\t\t\t\t\u0026lt;br\u0026gt;NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content.\n\t\t\t\t\tTemplate need to be published before it can be use to send notifications\u0026lt;br\u0026gt;",
        "operationId": "sendPartyTemplatedNotificationV1Admin",
        "parameters": [
          {
            "description": "notification content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.NotificationWithTemplateRequestV1"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "party ID",
            "in": "path",
            "name": "partyId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "send templated notification to a party",
        "tags": [
          "notification"
        ]
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/templates": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Get all templates in a namespace\u0026lt;br\u0026gt;\n\t\t\tAction Code: 50203",
        "operationId": "getAllNotificationTemplatesV1Admin",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.NotificationTemplateResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get all notification template in a namespace",
        "tags": [
          "notification"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Create new notification template. Include handlebars {{key}} for replaceable contexts. The key inside\n\t\t\thandlebars will be the key to be replaced when sending notification. Already existing template with the same\n\t\t\tslug and language can not be created.\n\t\t\t\u0026lt;br\u0026gt;Check model description for detailed input restrictions.\u0026lt;br\u0026gt;\n\t\t\tAction Code: 50204",
        "operationId": "createNotificationTemplateV1Admin",
        "parameters": [
          {
            "description": "create template input",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CreateTemplateRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "create new notification template",
        "tags": [
          "notification"
        ]
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/templates/notify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Sends notification to all connected users in a namespace with predefined template.\n\t\t\t\u0026lt;br\u0026gt;In the request body, specify which template slug (template identifier) to use and the template language.\n\t\t\t\u0026lt;br\u0026gt;NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content.\n\t\t\tTemplate need to be published before it can be use to send notifications\u0026lt;br/\u0026gt;\n\t\t\tAction Code: 50202",
        "operationId": "sendUsersTemplatedNotificationV1Admin",
        "parameters": [
          {
            "description": "notification content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.NotificationWithTemplateRequestV1"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "send notification to connected users with template",
        "tags": [
          "notification"
        ]
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/templates/{templateSlug}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [DELETE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Delete template slug in notification template\u0026lt;br\u0026gt;\n\t\t\tAction Code: 50206",
        "operationId": "deleteNotificationTemplateSlugV1Admin",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "template slug",
            "in": "path",
            "name": "templateSlug",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "delete template slug in notification template",
        "tags": [
          "notification"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Get all templates in a namespace\u0026lt;br\u0026gt;\n\t\t\tAction Code: 50205",
        "operationId": "getTemplateSlugLocalizationsTemplateV1Admin",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "template slug",
            "in": "path",
            "name": "templateSlug",
            "required": true,
            "type": "string"
          },
          {
            "description": "last language code of previous page",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "first language code of next page",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "size of displayed data",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetAllNotificationTemplateSlugResp"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get all notification template localization in a slug",
        "tags": [
          "notification"
        ]
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/templates/{templateSlug}/languages/{templateLanguage}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [DELETE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;delete template localization\u0026lt;br/\u0026gt;\n\t\t\tAction Code: 50209",
        "operationId": "deleteTemplateLocalizationV1Admin",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "template language, follows IETF BCP 47 standard",
            "in": "path",
            "name": "templateLanguage",
            "required": true,
            "type": "string"
          },
          {
            "description": "Template Identifier, only alphabet characters and hyphens are permitted",
            "in": "path",
            "name": "templateSlug",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "delete template localization",
        "tags": [
          "notification"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Get a template localization\u0026lt;br/\u0026gt;\n\t\t\tAction Code: 50207",
        "operationId": "getSingleTemplateLocalizationV1Admin",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "template language, follows IETF BCP 47 standard",
            "in": "path",
            "name": "templateLanguage",
            "required": true,
            "type": "string"
          },
          {
            "description": "Template Identifier, only alphabet characters and hyphens are permitted",
            "in": "path",
            "name": "templateSlug",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.Localization"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get a template localization",
        "tags": [
          "notification"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [UPDATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br/\u0026gt;update template localization\u0026lt;br/\u0026gt;\n\t\t\tAction Code: 50208",
        "operationId": "updateTemplateLocalizationV1Admin",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdateTemplateRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "template language, follows IETF BCP 47 standard",
            "in": "path",
            "name": "templateLanguage",
            "required": true,
            "type": "string"
          },
          {
            "description": "Template Identifier, only alphabet characters and hyphens are permitted",
            "in": "path",
            "name": "templateSlug",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "update template localization",
        "tags": [
          "notification"
        ]
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/templates/{templateSlug}/languages/{templateLanguage}/publish": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Publish notification template draft. Empty draft can not be published.\u0026lt;br/\u0026gt;\n\t\t\tAction Code: 50210",
        "operationId": "publishTemplateLocalizationV1Admin",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "template language, follows IETF BCP 47 standard",
            "in": "path",
            "name": "templateLanguage",
            "required": true,
            "type": "string"
          },
          {
            "description": "Template Identifier, only alphabet characters and hyphens are permitted",
            "in": "path",
            "name": "templateSlug",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "publish template localization draft",
        "tags": [
          "notification"
        ]
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/topics": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get topic by namespace.\u0026lt;br/\u0026gt;\n\t\t\tAction Code: 50213",
        "operationId": "getAllNotificationTopicsV1Admin",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "last topic name of previous page",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "first topic name of next page",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "size of displayed data",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetAllNotificationTopicsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get topic by namespace",
        "tags": [
          "notification"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Create new notification topic.\n\t\t\t\u0026lt;br\u0026gt;topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST.\n\t\t\tAlready existing topic can not be created\u0026lt;br/\u0026gt;\n\t\t\tAction Code: 50214",
        "operationId": "createNotificationTopicV1Admin",
        "parameters": [
          {
            "description": "create topic input",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CreateTopicRequestV1"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "create new notification topic",
        "tags": [
          "notification"
        ]
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/topics/{topicName}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [DELETE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;delete topic information by topic name.\n\t\t\t\u0026lt;br\u0026gt;topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST.\n\t\t\tAlready existing topic can not be created \u0026lt;br/\u0026gt;\n\t\t\tAction Code: 50217",
        "operationId": "deleteNotificationTopicV1Admin",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "topic name",
            "in": "path",
            "name": "topicName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "delete topic information by topic name",
        "tags": [
          "notification"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get topic information by topic name.\u0026lt;br/\u0026gt;\n\t\t\tAction Code: 50215",
        "operationId": "getNotificationTopicV1Admin",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "topic name",
            "in": "path",
            "name": "topicName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.NotificationTopicResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get topic information by topic name",
        "tags": [
          "notification"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [UPDATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;update topic information by topic name.\n\t\t\t\u0026lt;br\u0026gt;topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST.\n\t\t\tAlready existing topic can not be created \u0026lt;br/\u0026gt;\n\t\t\tAction Code: 50216",
        "operationId": "updateNotificationTopicV1Admin",
        "parameters": [
          {
            "description": "update topic input",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdateTopicRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "topic name",
            "in": "path",
            "name": "topicName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "update topic information by topic name",
        "tags": [
          "notification"
        ]
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/users/{userId}/freeform/notify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Sends notification to a user.\n\t\t\tAction Code: 50211",
        "operationId": "sendSpecificUserFreeformNotificationV1Admin",
        "parameters": [
          {
            "description": "notification content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.FreeFormNotificationRequestV1"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "send freeform notification to a user",
        "tags": [
          "notification"
        ]
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/users/{userId}/templates/notify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Sends templated notification to a user.\n\t\t\t\u0026lt;br\u0026gt;In the request body, specify which template slug (template identifier) to use and the template language.\n\t\t\t\u0026lt;br\u0026gt;NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content.\n\t\t\tTemplate need to be published before it can be use to send notifications\u0026lt;br\u0026gt;\n\t\t\tAction Code: 50212",
        "operationId": "sendSpecificUserTemplatedNotificationV1Admin",
        "parameters": [
          {
            "description": "notification content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.NotificationWithTemplateRequestV1"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "send templated notification to specific user",
        "tags": [
          "notification"
        ]
      }
    },
    "/lobby/v1/admin/party/namespaces/{namespace}/parties/{partyId}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get party data in a namespace.",
        "operationId": "adminGetPartyDataV1",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "party ID",
            "in": "path",
            "name": "partyId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PartyData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "admin get party data",
        "tags": [
          "party"
        ]
      }
    },
    "/lobby/v1/admin/party/namespaces/{namespace}/parties/{partyId}/attributes": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [UPDATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;update party attributes in a namespace.",
        "operationId": "adminUpdatePartyAttributesV1",
        "parameters": [
          {
            "description": "party custom attributes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PartyPUTCustomAttributesRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "party ID",
            "in": "path",
            "name": "partyId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PartyData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "admin update party attributes",
        "tags": [
          "Lobby Operations"
        ]
      }
    },
    "/lobby/v1/admin/party/namespaces/{namespace}/parties/{partyId}/join/{userId}": {
      "post": {
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [UPDATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;admin join a player into a party.",
        "operationId": "adminJoinPartyV1",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "party ID",
            "in": "path",
            "name": "partyId",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "admin join a player into a party",
        "tags": [
          "Lobby Operations"
        ]
      }
    },
    "/lobby/v1/admin/party/namespaces/{namespace}/users/{userId}/party": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get party data in a namespace.",
        "operationId": "adminGetUserPartyV1",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PartyData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "admin get user party data",
        "tags": [
          "party"
        ]
      }
    },
    "/lobby/v1/admin/player/namespaces/{namespace}/ccu": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:LOBBY:CCU [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Get the number of players connected to the Lobby in the given namespace.",
        "operationId": "adminGetLobbyCCU",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetLobbyCcuResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:LOBBY:CCU [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "admin get number of players currently connected to the lobby.",
        "tags": [
          "player"
        ]
      }
    },
    "/lobby/v1/admin/player/namespaces/{namespace}/users/bulk/blocked": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get blocked players data by bulk user ids in a namespace.",
        "operationId": "adminGetBulkPlayerBlockedPlayersV1",
        "parameters": [
          {
            "description": "list of blocked player request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.GetBulkAllPlayerBlockedUsersRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetBulkAllPlayerBlockedUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "admin get blocked players by bulk user ids",
        "tags": [
          "player"
        ]
      }
    },
    "/lobby/v1/admin/player/namespaces/{namespace}/users/{userId}/attributes": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:ATTRIBUTES [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get all player\u0026#39;s session attribute by user id in a namespace.",
        "operationId": "adminGetAllPlayerSessionAttribute",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetAllPlayerSessionAttributeResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:ATTRIBUTES [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "admin get all player's session attribute",
        "tags": [
          "player"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:ATTRIBUTES [UPDATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;set player\u0026#39;s session attribute by user id in a namespace.",
        "operationId": "adminSetPlayerSessionAttribute",
        "parameters": [
          {
            "description": "player attributes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.SetPlayerSessionAttributeRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:ATTRIBUTES [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "admin set player's session attribute",
        "tags": [
          "player"
        ]
      }
    },
    "/lobby/v1/admin/player/namespaces/{namespace}/users/{userId}/attributes/{attribute}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:ATTRIBUTES [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get player\u0026#39;s specific session attribute by user id in a namespace.",
        "operationId": "adminGetPlayerSessionAttribute",
        "parameters": [
          {
            "description": "attribute key",
            "in": "path",
            "name": "attribute",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetPlayerSessionAttributeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:ATTRIBUTES [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "admin get player's session attribute",
        "tags": [
          "player"
        ]
      }
    },
    "/lobby/v1/admin/player/namespaces/{namespace}/users/{userId}/blocked": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get blocked players data by user id in a namespace.",
        "operationId": "adminGetPlayerBlockedPlayersV1",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetAllPlayerBlockedUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "admin get blocked players by user id",
        "tags": [
          "player"
        ]
      }
    },
    "/lobby/v1/admin/player/namespaces/{namespace}/users/{userId}/blocked-by": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;load get players who blocked this player in a namespace based on user id",
        "operationId": "adminGetPlayerBlockedByPlayersV1",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetAllPlayerBlockedByUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get players who blocked this player by user id",
        "tags": [
          "player"
        ]
      }
    },
    "/lobby/v1/admin/player/namespaces/{namespace}/users/{userId}/bulk/block": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Bulk block player in a namespace by list of user id",
        "operationId": "adminBulkBlockPlayersV1",
        "parameters": [
          {
            "description": "list of blocked player request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ListBlockedPlayerRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin bulk blocks player by list user id",
        "tags": [
          "player"
        ]
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/filters/debug": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get the list of filters that would modify the phrase",
        "operationId": "adminDebugProfanityFilters",
        "parameters": [
          {
            "description": "request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.DebugProfanityFilterRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.ProfanityFilter"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get the list of filters that would modify the phrase",
        "tags": [
          "profanity"
        ]
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/list/{list}/filters": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get the list of filters inside the list.",
        "operationId": "adminGetProfanityListFiltersV1",
        "parameters": [
          {
            "description": "list",
            "in": "path",
            "name": "list",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.AdminGetProfanityListFiltersV1Response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get the list of filters inside the list",
        "tags": [
          "profanity"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PROFANITY [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;add a single filter into the list",
        "operationId": "adminAddProfanityFilterIntoList",
        "parameters": [
          {
            "description": "request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminAddProfanityFilterIntoListRequest"
            }
          },
          {
            "description": "list",
            "in": "path",
            "name": "list",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PROFANITY [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "add a single filter into the list",
        "tags": [
          "profanity"
        ]
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/list/{list}/filters/bulk": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PROFANITY [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;add multiple filters into the list",
        "operationId": "adminAddProfanityFilters",
        "parameters": [
          {
            "description": "request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminAddProfanityFiltersRequest"
            }
          },
          {
            "description": "list",
            "in": "path",
            "name": "list",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PROFANITY [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "add multiple filters into the list",
        "tags": [
          "profanity"
        ]
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/list/{list}/filters/bulk-file": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PROFANITY [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;import a file with filters",
        "operationId": "adminImportProfanityFiltersFromFile",
        "parameters": [
          {
            "description": "file",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "list",
            "in": "path",
            "name": "list",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PROFANITY [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "import a file with filters",
        "tags": [
          "profanity"
        ]
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/list/{list}/filters/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PROFANITY [DELETE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;delete the filter from the list",
        "operationId": "adminDeleteProfanityFilter",
        "parameters": [
          {
            "description": "request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminDeleteProfanityFilterRequest"
            }
          },
          {
            "description": "list",
            "in": "path",
            "name": "list",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.ProfanityFilter"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PROFANITY [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "delete the filter from the list",
        "tags": [
          "profanity"
        ]
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/lists": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get lists",
        "operationId": "adminGetProfanityLists",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.AdminGetProfanityListsListResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get lists",
        "tags": [
          "profanity"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PROFANITY [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;create a new list",
        "operationId": "adminCreateProfanityList",
        "parameters": [
          {
            "description": "request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminCreateProfanityListRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PROFANITY [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "create a new list",
        "tags": [
          "profanity"
        ]
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/lists/{list}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PROFANITY [DELETE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;delete a list include all filters inside of it",
        "operationId": "adminDeleteProfanityList",
        "parameters": [
          {
            "description": "list",
            "in": "path",
            "name": "list",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PROFANITY [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "delete a list include all filters inside of it",
        "tags": [
          "profanity"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PROFANITY [UPDATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;update the list",
        "operationId": "adminUpdateProfanityList",
        "parameters": [
          {
            "description": "request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminUpdateProfanityList"
            }
          },
          {
            "description": "list",
            "in": "path",
            "name": "list",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PROFANITY [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "update the list",
        "tags": [
          "profanity"
        ]
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/rule": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get current profanity rule",
        "operationId": "adminGetProfanityRule",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ProfanityRule"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get current profanity rule",
        "tags": [
          "profanity"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PROFANITY [UPDATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;set current profanity rule",
        "operationId": "adminSetProfanityRuleForNamespace",
        "parameters": [
          {
            "description": "request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminSetProfanityRuleForNamespaceRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PROFANITY [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "set current profanity rule",
        "tags": [
          "profanity"
        ]
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/verify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;verify a message directly from the UI or other services",
        "operationId": "adminVerifyMessageProfanityResponse",
        "parameters": [
          {
            "description": "request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminVerifyMessageProfanityRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.AdminVerifyMessageProfanityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "verify a message directly from the UI or other services",
        "tags": [
          "profanity"
        ]
      }
    },
    "/lobby/v1/admin/thirdparty/namespaces/{namespace}/config/steam": {
      "delete": {
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [DELETE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;delete third party config in a namespace.",
        "operationId": "adminDeleteThirdPartyConfig",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Third Party Steam Config",
        "tags": [
          "thirdParty"
        ]
      },
      "get": {
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get third party config for specified namespace.",
        "operationId": "adminGetThirdPartyConfig",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetConfigResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Third Party Steam Config",
        "tags": [
          "thirdParty"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;create third party config in a namespace.",
        "operationId": "adminCreateThirdPartyConfig",
        "parameters": [
          {
            "description": "third party config",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateConfigRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateConfigResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Create Third Party Steam Config",
        "tags": [
          "thirdParty"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [UPDATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Update third party config in a namespace.",
        "operationId": "adminUpdateThirdPartyConfig",
        "parameters": [
          {
            "description": "third party config",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateConfigRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UpdateConfigResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Third Party Steam Config",
        "tags": [
          "thirdParty"
        ]
      }
    },
    "/lobby/v1/messages": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "get the list of messages.",
        "operationId": "publicGetMessages",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/log.AppMessageDeclaration"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "get service messages",
        "tags": [
          "Lobby Operations"
        ]
      }
    },
    "/lobby/v1/public/party/namespaces/{namespace}/parties/{partyId}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required valid user authorization \u0026lt;br/\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;load personal party data in a namespace based on Party ID \u0026lt;br/\u0026gt;\n\t\t\tAction Code: 50101",
        "operationId": "publicGetPartyDataV1",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Party ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "partyId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PartyData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "get party data by party id",
        "tags": [
          "party"
        ]
      }
    },
    "/lobby/v1/public/party/namespaces/{namespace}/parties/{partyId}/attributes": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required valid user authorization \u0026lt;br/\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;update party attributes in a namespace.",
        "operationId": "publicUpdatePartyAttributesV1",
        "parameters": [
          {
            "description": "party custom attributes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PartyPUTCustomAttributesRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "party ID",
            "in": "path",
            "name": "partyId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PartyData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "update party attributes",
        "tags": [
          "party"
        ]
      }
    },
    "/lobby/v1/public/party/namespaces/{namespace}/parties/{partyId}/limit": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required valid user authorization \u0026lt;br/\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Set party limit, only party leader can call this endpoint.",
        "operationId": "publicSetPartyLimitV1",
        "parameters": [
          {
            "description": "party custom attributes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PartyPUTLimitSizeRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "party ID",
            "in": "path",
            "name": "partyId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "set party limit",
        "tags": [
          "party"
        ]
      }
    },
    "/lobby/v1/public/player/namespaces/{namespace}/users/me/blocked": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required valid user authorization \u0026lt;br/\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;load blocked players in a namespace based on user id \u0026lt;br/\u0026gt;\n\t\t\tAction Code: 50101",
        "operationId": "publicGetPlayerBlockedPlayersV1",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetAllPlayerBlockedUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "get blocked players by user id",
        "tags": [
          "player"
        ]
      }
    },
    "/lobby/v1/public/player/namespaces/{namespace}/users/me/blocked-by": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required valid user authorization \u0026lt;br/\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;load get players who blocked this player in a namespace based on user id \u0026lt;br/\u0026gt;\n\t\t\tAction Code: 50101",
        "operationId": "publicGetPlayerBlockedByPlayersV1",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetAllPlayerBlockedByUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "get players who blocked this player by user id",
        "tags": [
          "player"
        ]
      }
    },
    "/lobby/v1/public/presence/namespaces/{namespace}/users/presence": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Query users presence with given namespace and userIds.",
        "operationId": "UsersPresenceHandlerV1",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Comma separated value of userIds",
            "in": "query",
            "name": "userIds",
            "required": true,
            "type": "string"
          },
          {
            "description": "return only number of players for each availability status",
            "in": "query",
            "name": "countOnly",
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/handlers.GetUsersPresenceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Query users presence",
        "tags": [
          "presence"
        ]
      }
    },
    "/notification/namespaces/{namespace}/freeform": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:NOTIFICATION [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Sends notification to all connected users in a namespace.",
        "operationId": "freeFormNotification",
        "parameters": [
          {
            "description": "notification content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.FreeFormNotificationRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:NOTIFICATION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "send freeform notification to a user",
        "tags": [
          "admin",
          "notification"
        ]
      }
    },
    "/notification/namespaces/{namespace}/templated": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:NOTIFICATION [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Sends notification to all connected users in a namespace with predefined template.\n\t\t\t\u0026lt;br\u0026gt;In the request body, specify which template slug (template identifier) to use and the template language.\n\t\t\t\u0026lt;br\u0026gt;NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content.\n\t\t\tTemplate need to be published before it can be use to send notifications",
        "operationId": "notificationWithTemplate",
        "parameters": [
          {
            "description": "notification content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.NotificationWithTemplateRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:NOTIFICATION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "send notification to a user with template",
        "tags": [
          "admin",
          "notification"
        ]
      }
    },
    "/notification/namespaces/{namespace}/templates": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:TEMPLATE [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Get all templates in a namespace",
        "operationId": "getGameTemplate",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.TemplateResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:TEMPLATE [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get all notification template in a namespace",
        "tags": [
          "admin",
          "notification"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:TEMPLATE [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Create new notification template. Include handlebars {{key}} for replaceable contexts. The the key inside\n\t\t\thandlebars will be the key to be replaced when sending notification. Already existing template with the same\n\t\t\tslug and language can not be created.\n\t\t\t\u0026lt;br\u0026gt;Check model description for detailed input restrictions.",
        "operationId": "createTemplate",
        "parameters": [
          {
            "description": "create template input",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CreateTemplateRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:TEMPLATE [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "create new notification template",
        "tags": [
          "admin",
          "notification"
        ]
      }
    },
    "/notification/namespaces/{namespace}/templates/{templateSlug}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:TEMPLATE [DELETE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Delete localization template",
        "operationId": "deleteTemplateSlug",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "template slug",
            "in": "path",
            "name": "templateSlug",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:TEMPLATE [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "delete template localization",
        "tags": [
          "admin",
          "notification"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:TEMPLATE [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Get all templates in a namespace",
        "operationId": "getSlugTemplate",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "template slug",
            "in": "path",
            "name": "templateSlug",
            "required": true,
            "type": "string"
          },
          {
            "description": "last language code of previous page",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "first language code of next page",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "size of displayed data",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.TemplateLocalizationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:TEMPLATE [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get all notification template in a slug",
        "tags": [
          "admin",
          "notification"
        ]
      }
    },
    "/notification/namespaces/{namespace}/templates/{templateSlug}/languages/{templateLanguage}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:TEMPLATE [DELETE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Delete all template in a slug",
        "operationId": "deleteTemplateLocalization",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "template language",
            "in": "path",
            "name": "templateLanguage",
            "required": true,
            "type": "string"
          },
          {
            "description": "template slug",
            "in": "path",
            "name": "templateSlug",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:TEMPLATE [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "delete template localization",
        "tags": [
          "admin",
          "notification"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:TEMPLATE [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Get a template localization",
        "operationId": "getLocalizationTemplate",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "template language",
            "in": "path",
            "name": "templateLanguage",
            "required": true,
            "type": "string"
          },
          {
            "description": "template slug",
            "in": "path",
            "name": "templateSlug",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.TemplateLocalization"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:TEMPLATE [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get a template localization",
        "tags": [
          "admin",
          "notification"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:TEMPLATE [UPDATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Modify draft template",
        "operationId": "updateLocalizationTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdateTemplateRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "template language",
            "in": "path",
            "name": "templateLanguage",
            "required": true,
            "type": "string"
          },
          {
            "description": "template slug",
            "in": "path",
            "name": "templateSlug",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:TEMPLATE [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "update template draft",
        "tags": [
          "admin",
          "notification"
        ]
      }
    },
    "/notification/namespaces/{namespace}/templates/{templateSlug}/languages/{templateLanguage}/publish": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:TEMPLATE [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Publish notification template draft. Empty draft can not be published.",
        "operationId": "publishTemplate",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "template language",
            "in": "path",
            "name": "templateLanguage",
            "required": true,
            "type": "string"
          },
          {
            "description": "template slug",
            "in": "path",
            "name": "templateSlug",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:TEMPLATE [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "publish draft template",
        "tags": [
          "admin",
          "notification"
        ]
      }
    },
    "/notification/namespaces/{namespace}/topics": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:TOPIC [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get topic by namespace.",
        "operationId": "getTopicByNamespace",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "last topic name of previous page",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "first topic name of next page",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "size of displayed data",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.TopicByNamespacesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:TOPIC [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get topic by namespace",
        "tags": [
          "notification",
          "public"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:TOPIC [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Create new notification topic.\n\t\t\t\u0026lt;br\u0026gt;topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST.\n\t\t\tAlready existing topic can not be created",
        "operationId": "createTopic",
        "parameters": [
          {
            "description": "create topic input",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CreateTopicRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:TOPIC [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "create new notification topic",
        "tags": [
          "notification",
          "public"
        ]
      }
    },
    "/notification/namespaces/{namespace}/topics/{topic}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:TOPIC [DELETE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;delete topic information by topic name.\n\t\t\t\u0026lt;br\u0026gt;topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST.\n\t\t\tAlready existing topic can not be created",
        "operationId": "deleteTopicByTopicName",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "topic name",
            "in": "path",
            "name": "topic",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:TOPIC [DELETE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "delete topic information by topic name",
        "tags": [
          "notification",
          "public"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:TOPIC [READ]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;get topic information by topic name.",
        "operationId": "getTopicByTopicName",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "topic name",
            "in": "path",
            "name": "topic",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.NotificationTopicResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:TOPIC [READ]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "get topic information by topic name",
        "tags": [
          "notification",
          "public"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:TOPIC [UPDATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;update topic information by topic name.\n\t\t\t\u0026lt;br\u0026gt;topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST.\n\t\t\tAlready existing topic can not be created",
        "operationId": "updateTopicByTopicName",
        "parameters": [
          {
            "description": "update topic input",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdateTopicRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "topic name",
            "in": "path",
            "name": "topic",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:TOPIC [UPDATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "update topic information by topic name",
        "tags": [
          "notification",
          "public"
        ]
      }
    },
    "/notification/namespaces/{namespace}/users/{userId}/freeform": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:NOTIFICATION [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Sends notification to a user.",
        "operationId": "freeFormNotificationByUserID",
        "parameters": [
          {
            "description": "notification content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.FreeFormNotificationRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:NOTIFICATION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "send freeform notification to a user",
        "tags": [
          "notification",
          "public"
        ]
      }
    },
    "/notification/namespaces/{namespace}/users/{userId}/templated": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission : \u0026lt;code\u0026gt;NAMESPACE:{namespace}:USER:{userId}:NOTIFICATION [CREATE]\u0026lt;/code\u0026gt; with scope \u0026lt;code\u0026gt;social\u0026lt;/code\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Sends notification to a user with predefined template.\n\t\t\t\u0026lt;br\u0026gt;In the request body, specify which template slug (template identifier) to use and the template language.\n\t\t\t\u0026lt;br\u0026gt;NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content.\n\t\t\tTemplate need to be published before it can be use to send notifications",
        "operationId": "notificationWithTemplateByUserID",
        "parameters": [
          {
            "description": "notification content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.NotificationWithTemplateRequest"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:NOTIFICATION [CREATE]"
            ],
            "HasScope": [
              "social"
            ],
            "authorization": []
          }
        ],
        "summary": "send notification to a user with template",
        "tags": [
          "notification",
          "public"
        ]
      }
    }
  },
  "definitions": {
    "handlers.GetUsersPresenceResponse": {
      "properties": {
        "away": {
          "format": "int32",
          "type": "integer"
        },
        "busy": {
          "format": "int32",
          "type": "integer"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/handlers.UserPresence"
          },
          "type": "array"
        },
        "invisible": {
          "format": "int32",
          "type": "integer"
        },
        "offline": {
          "format": "int32",
          "type": "integer"
        },
        "online": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "away",
        "busy",
        "data",
        "invisible",
        "offline",
        "online"
      ]
    },
    "handlers.UserPresence": {
      "properties": {
        "activity": {
          "type": "string"
        },
        "availability": {
          "type": "string"
        },
        "lastSeenAt": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "userID": {
          "type": "string"
        }
      },
      "required": [
        "activity",
        "availability",
        "lastSeenAt",
        "namespace",
        "platform",
        "userID"
      ]
    },
    "log.AppMessageDeclaration": {
      "properties": {
        "Attributes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Code": {
          "type": "string"
        },
        "CodeName": {
          "type": "string"
        },
        "Section": {
          "type": "string"
        },
        "Service": {
          "type": "string"
        },
        "Text": {
          "type": "string"
        }
      },
      "required": [
        "Attributes",
        "Code",
        "CodeName",
        "Section",
        "Service",
        "Text"
      ]
    },
    "model.BulkFriendsRequest": {
      "properties": {
        "friendIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "friendIds"
      ]
    },
    "model.BulkFriendsResponse": {
      "properties": {
        "rowsAffected": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "rowsAffected"
      ]
    },
    "model.BulkUsersFreeFormNotificationRequestV1": {
      "properties": {
        "message": {
          "description": "free form message",
          "type": "string"
        },
        "topicName": {
          "type": "string"
        },
        "userIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "message",
        "topicName",
        "userIds"
      ]
    },
    "model.CreateTemplateRequest": {
      "properties": {
        "templateContent": {
          "description": "template content, use handle bar {{key}} for replaceable context",
          "type": "string"
        },
        "templateLanguage": {
          "description": "template language, follows IETF BCP 47 standard",
          "type": "string"
        },
        "templateSlug": {
          "description": "template identifier, only alphabet characters and hyphens are permitted",
          "type": "string"
        }
      },
      "required": [
        "templateContent",
        "templateLanguage",
        "templateSlug"
      ]
    },
    "model.CreateTopicRequest": {
      "properties": {
        "description": {
          "description": "topic description",
          "type": "string"
        },
        "topic": {
          "description": "topic name, should be alphabets, no special char except underscore, uppercase and no spacing",
          "type": "string"
        }
      },
      "required": [
        "description",
        "topic"
      ]
    },
    "model.CreateTopicRequestV1": {
      "properties": {
        "description": {
          "description": "topic description",
          "type": "string"
        },
        "topicName": {
          "description": "topic name, should be alphabets, no special char except underscore, uppercase and no spacing",
          "type": "string"
        }
      },
      "required": [
        "description",
        "topicName"
      ]
    },
    "model.FreeFormNotificationRequest": {
      "properties": {
        "message": {
          "description": "free form message",
          "type": "string"
        },
        "topic": {
          "type": "string"
        }
      },
      "required": [
        "message",
        "topic"
      ]
    },
    "model.FreeFormNotificationRequestV1": {
      "properties": {
        "message": {
          "description": "free form message",
          "type": "string"
        },
        "topicName": {
          "type": "string"
        }
      },
      "required": [
        "message",
        "topicName"
      ]
    },
    "model.FriendWithPlatform": {
      "properties": {
        "platformId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "platformId",
        "userId"
      ]
    },
    "model.GetAllNotificationTemplateSlugResp": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.Localization"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.GetAllNotificationTopicsResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.NotificationTopicResponseV1"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.GetFriendsResponse": {
      "properties": {
        "friendIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "friends": {
          "items": {
            "$ref": "#/definitions/model.FriendWithPlatform"
          },
          "type": "array"
        },
        "friendsSinceTimes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      },
      "required": [
        "friendIDs",
        "friendsSinceTimes",
        "paging"
      ]
    },
    "model.GetUserFriendsResponse": {
      "properties": {
        "friendIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "friends": {
          "items": {
            "$ref": "#/definitions/model.FriendWithPlatform"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      },
      "required": [
        "friendIDs",
        "paging"
      ]
    },
    "model.GetUserIncomingFriendsResponse": {
      "properties": {
        "friendIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      },
      "required": [
        "friendIDs",
        "paging"
      ]
    },
    "model.GetUserOutgoingFriendsResponse": {
      "properties": {
        "friendIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      },
      "required": [
        "friendIDs",
        "paging"
      ]
    },
    "model.GlobalConfiguration": {
      "properties": {
        "regionRetryMapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "regionURLMapping": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "testGameMode": {
          "type": "string"
        },
        "testRegionURLMapping": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "testTargetUserIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "updatedAt": {
          "type": "string"
        }
      },
      "required": [
        "regionRetryMapping",
        "regionURLMapping",
        "testGameMode",
        "testRegionURLMapping",
        "testTargetUserIDs",
        "updatedAt"
      ]
    },
    "model.IncomingFriendsWithTimeData": {
      "properties": {
        "friendId": {
          "type": "string"
        },
        "requestedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "friendId",
        "requestedAt"
      ]
    },
    "model.ListBulkUserPlatformsResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.UserWithPlatformInfo"
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ]
    },
    "model.LoadIncomingFriendsWithTimeResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.IncomingFriendsWithTimeData"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.LoadOutgoingFriendsWithTimeResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.OutgoingFriendsWithTimeData"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.Localization": {
      "properties": {
        "lastDraftAt": {
          "type": "string"
        },
        "lastPublishedAt": {
          "type": "string"
        },
        "templateContent": {
          "$ref": "#/definitions/model.TemplateContent"
        },
        "templateLanguage": {
          "type": "string"
        }
      },
      "required": [
        "lastDraftAt",
        "lastPublishedAt",
        "templateContent",
        "templateLanguage"
      ]
    },
    "model.NativeFriendRequest": {
      "properties": {
        "isLogin": {
          "type": "boolean",
          "x-omitempty": false
        },
        "platformId": {
          "type": "string"
        },
        "platformToken": {
          "type": "string"
        },
        "psnEnv": {
          "type": "string"
        }
      },
      "required": [
        "isLogin",
        "platformId"
      ]
    },
    "model.NativeFriendSyncResponse": {
      "properties": {
        "detail": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "required": [
        "platformId",
        "status"
      ]
    },
    "model.NotificationTemplateResponse": {
      "properties": {
        "templateLocalizations": {
          "items": {
            "$ref": "#/definitions/model.Localization"
          },
          "type": "array"
        },
        "templateSlug": {
          "type": "string"
        }
      },
      "required": [
        "templateLocalizations",
        "templateSlug"
      ]
    },
    "model.NotificationTopicResponse": {
      "properties": {
        "createdAt": {
          "format": "int64",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "topic": {
          "description": "topic name, should be alphabets, no special char except underscore, uppercase and no spacing",
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "description",
        "namespace",
        "topic"
      ]
    },
    "model.NotificationTopicResponseV1": {
      "properties": {
        "createdAt": {
          "format": "int64",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "topicName": {
          "description": "topic name, should be alphabets, no special char except underscore, uppercase and no spacing",
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "description",
        "namespace",
        "topicName"
      ]
    },
    "model.NotificationWithTemplateRequest": {
      "properties": {
        "templateContext": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "templateLanguage": {
          "type": "string"
        },
        "templateSlug": {
          "type": "string"
        },
        "topic": {
          "type": "string"
        }
      },
      "required": [
        "templateContext",
        "templateLanguage",
        "templateSlug",
        "topic"
      ]
    },
    "model.NotificationWithTemplateRequestV1": {
      "properties": {
        "templateContext": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "templateLanguage": {
          "type": "string"
        },
        "templateSlug": {
          "type": "string"
        },
        "topicName": {
          "type": "string"
        }
      },
      "required": [
        "templateContext",
        "templateLanguage",
        "templateSlug",
        "topicName"
      ]
    },
    "model.OutgoingFriendsWithTimeData": {
      "properties": {
        "friendId": {
          "type": "string"
        },
        "requestedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "friendId",
        "requestedAt"
      ]
    },
    "model.Pagination": {
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      },
      "required": [
        "first",
        "last",
        "next",
        "previous"
      ]
    },
    "model.PutGlobalConfigurationRequest": {
      "properties": {
        "regionRetryMapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "regionURLMapping": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "testGameMode": {
          "type": "string"
        },
        "testRegionURLMapping": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "testTargetUserIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "regionRetryMapping",
        "regionURLMapping",
        "testGameMode",
        "testRegionURLMapping",
        "testTargetUserIDs"
      ]
    },
    "model.TemplateContent": {
      "properties": {
        "draft": {
          "type": "string"
        },
        "published": {
          "type": "string"
        }
      },
      "required": [
        "draft",
        "published"
      ]
    },
    "model.TemplateLocalization": {
      "properties": {
        "lastDraftAt": {
          "type": "string"
        },
        "lastPublishedAt": {
          "type": "string"
        },
        "templateContent": {
          "$ref": "#/definitions/model.TemplateContent"
        },
        "templateLanguage": {
          "type": "string"
        },
        "templateSlug": {
          "type": "string"
        }
      },
      "required": [
        "lastDraftAt",
        "lastPublishedAt",
        "templateContent",
        "templateLanguage",
        "templateSlug"
      ]
    },
    "model.TemplateLocalizationResponse": {
      "properties": {
        "first": {
          "description": "url for first page",
          "type": "string"
        },
        "last": {
          "description": "url for last page",
          "type": "string"
        },
        "next": {
          "description": "url for next page",
          "type": "string"
        },
        "previous": {
          "description": "url for previous page",
          "type": "string"
        },
        "templateLocalization": {
          "items": {
            "$ref": "#/definitions/model.TemplateLocalization"
          },
          "type": "array"
        }
      },
      "required": [
        "first",
        "last",
        "next",
        "previous",
        "templateLocalization"
      ]
    },
    "model.TemplateResponse": {
      "properties": {
        "localizations": {
          "items": {
            "$ref": "#/definitions/model.Localization"
          },
          "type": "array"
        },
        "templateSlug": {
          "type": "string"
        }
      },
      "required": [
        "localizations",
        "templateSlug"
      ]
    },
    "model.TopicByNamespacesResponse": {
      "properties": {
        "first": {
          "description": "url for first page",
          "type": "string"
        },
        "last": {
          "description": "url for last page",
          "type": "string"
        },
        "next": {
          "description": "url for next page",
          "type": "string"
        },
        "previous": {
          "description": "url for previous page",
          "type": "string"
        },
        "topics": {
          "items": {
            "$ref": "#/definitions/model.NotificationTopicResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "first",
        "last",
        "next",
        "previous",
        "topics"
      ]
    },
    "model.UpdateTemplateRequest": {
      "properties": {
        "templateContent": {
          "type": "string"
        }
      },
      "required": [
        "templateContent"
      ]
    },
    "model.UpdateTopicRequest": {
      "properties": {
        "description": {
          "description": "topic description",
          "type": "string"
        }
      },
      "required": [
        "description"
      ]
    },
    "model.UserAcceptFriendRequest": {
      "properties": {
        "friendId": {
          "type": "string"
        }
      },
      "required": [
        "friendId"
      ]
    },
    "model.UserCancelFriendRequest": {
      "properties": {
        "friendId": {
          "type": "string"
        }
      },
      "required": [
        "friendId"
      ]
    },
    "model.UserGetFriendshipStatusResponse": {
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "name"
      ]
    },
    "model.UserPlatformInfo": {
      "properties": {
        "platformDisplayName": {
          "type": "string"
        },
        "platformName": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        }
      },
      "required": [
        "platformDisplayName",
        "platformName",
        "platformUserId"
      ]
    },
    "model.UserRejectFriendRequest": {
      "properties": {
        "friendId": {
          "type": "string"
        }
      },
      "required": [
        "friendId"
      ]
    },
    "model.UserRequestFriendRequest": {
      "properties": {
        "friendId": {
          "type": "string"
        },
        "friendPublicId": {
          "type": "string"
        }
      },
      "required": [
        "friendId",
        "friendPublicId"
      ]
    },
    "model.UserUnfriendRequest": {
      "properties": {
        "friendId": {
          "type": "string"
        }
      },
      "required": [
        "friendId"
      ]
    },
    "model.UserWithPlatformInfo": {
      "properties": {
        "avatarUrl": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "platformInfos": {
          "items": {
            "$ref": "#/definitions/model.UserPlatformInfo"
          },
          "type": "array"
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "avatarUrl",
        "displayName",
        "platformInfos",
        "userId"
      ]
    },
    "models.AdminAddProfanityFilterIntoListRequest": {
      "properties": {
        "filter": {
          "type": "string"
        },
        "note": {
          "type": "string"
        }
      },
      "required": [
        "filter",
        "note"
      ]
    },
    "models.AdminAddProfanityFiltersFilterRequest": {
      "properties": {
        "filter": {
          "type": "string"
        },
        "note": {
          "type": "string"
        }
      },
      "required": [
        "filter",
        "note"
      ]
    },
    "models.AdminAddProfanityFiltersRequest": {
      "properties": {
        "filters": {
          "items": {
            "$ref": "#/definitions/models.AdminAddProfanityFiltersFilterRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "filters"
      ]
    },
    "models.AdminCreateProfanityListRequest": {
      "properties": {
        "isEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isMandatory": {
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "isEnabled",
        "isMandatory",
        "name"
      ]
    },
    "models.AdminDeleteProfanityFilterRequest": {
      "properties": {
        "filter": {
          "type": "string"
        }
      },
      "required": [
        "filter"
      ]
    },
    "models.AdminGetProfanityListFiltersV1Response": {
      "properties": {
        "filters": {
          "items": {
            "$ref": "#/definitions/models.ProfanityFilter"
          },
          "type": "array"
        }
      },
      "required": [
        "filters"
      ]
    },
    "models.AdminGetProfanityListsListResponse": {
      "properties": {
        "isEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isMandatory": {
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "isEnabled",
        "isMandatory",
        "name"
      ]
    },
    "models.AdminSetProfanityRuleForNamespaceRequest": {
      "properties": {
        "rule": {
          "type": "string"
        }
      },
      "required": [
        "rule"
      ]
    },
    "models.AdminUpdateProfanityList": {
      "properties": {
        "isEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isMandatory": {
          "type": "boolean",
          "x-omitempty": false
        },
        "newName": {
          "type": "string"
        }
      },
      "required": [
        "isEnabled",
        "isMandatory",
        "newName"
      ]
    },
    "models.AdminVerifyMessageProfanityRequest": {
      "properties": {
        "message": {
          "type": "string"
        },
        "profanityLevel": {
          "type": "string"
        }
      },
      "required": [
        "message",
        "profanityLevel"
      ]
    },
    "models.AdminVerifyMessageProfanityResponse": {
      "properties": {
        "filteredMessage": {
          "type": "string"
        },
        "hasProfanity": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "filteredMessage",
        "hasProfanity"
      ]
    },
    "models.BlockedByPlayerData": {
      "properties": {
        "blockedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "blockedAt",
        "userId"
      ]
    },
    "models.BlockedPlayerData": {
      "properties": {
        "blockedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "blockedUserId": {
          "type": "string"
        }
      },
      "required": [
        "blockedAt",
        "blockedUserId"
      ]
    },
    "models.Config": {
      "properties": {
        "allowInviteNonConnectedUser": {
          "type": "boolean",
          "x-omitempty": false
        },
        "allowJoinPartyDuringMatchmaking": {
          "type": "boolean",
          "x-omitempty": false
        },
        "autoKickOnDisconnect": {
          "type": "boolean",
          "x-omitempty": false
        },
        "autoKickOnDisconnectDelay": {
          "format": "integer",
          "type": "integer"
        },
        "cancelTicketOnDisconnect": {
          "type": "boolean",
          "x-omitempty": false
        },
        "chatRateLimitBurst": {
          "format": "int32",
          "type": "integer"
        },
        "chatRateLimitDuration": {
          "format": "integer",
          "type": "integer"
        },
        "concurrentUsersLimit": {
          "format": "int32",
          "type": "integer"
        },
        "disableInvitationOnJoinParty": {
          "type": "boolean",
          "x-omitempty": false
        },
        "enableChat": {
          "type": "boolean",
          "x-omitempty": false
        },
        "entitlementCheck": {
          "type": "boolean",
          "x-omitempty": false
        },
        "entitlementItemID": {
          "type": "string"
        },
        "generalRateLimitBurst": {
          "format": "int32",
          "type": "integer"
        },
        "generalRateLimitDuration": {
          "format": "integer",
          "type": "integer"
        },
        "keepPresenceActivityOnDisconnect": {
          "type": "boolean",
          "x-omitempty": false
        },
        "maxDSWaitTime": {
          "format": "integer",
          "type": "integer"
        },
        "maxFriendsLimit": {
          "format": "int32",
          "type": "integer"
        },
        "maxPartyMember": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "profanityFilter": {
          "type": "boolean",
          "x-omitempty": false
        },
        "readyConsentTimeout": {
          "format": "integer",
          "type": "integer"
        },
        "unregisterDelay": {
          "format": "integer",
          "type": "integer"
        }
      },
      "required": [
        "maxDSWaitTime",
        "unregisterDelay"
      ]
    },
    "models.ConfigList": {
      "properties": {
        "configs": {
          "items": {
            "$ref": "#/definitions/models.Config"
          },
          "type": "array"
        }
      },
      "required": [
        "configs"
      ]
    },
    "models.ConfigReq": {
      "properties": {
        "allowInviteNonConnectedUser": {
          "type": "boolean",
          "x-omitempty": false
        },
        "allowJoinPartyDuringMatchmaking": {
          "type": "boolean",
          "x-omitempty": false
        },
        "autoKickOnDisconnect": {
          "type": "boolean",
          "x-omitempty": false
        },
        "autoKickOnDisconnectDelay": {
          "format": "integer",
          "type": "integer"
        },
        "cancelTicketOnDisconnect": {
          "type": "boolean",
          "x-omitempty": false
        },
        "chatRateLimitBurst": {
          "format": "int32",
          "type": "integer"
        },
        "chatRateLimitDuration": {
          "format": "integer",
          "type": "integer"
        },
        "concurrentUsersLimit": {
          "format": "int32",
          "type": "integer"
        },
        "disableInvitationOnJoinParty": {
          "type": "boolean",
          "x-omitempty": false
        },
        "enableChat": {
          "type": "boolean",
          "x-omitempty": false
        },
        "entitlementCheck": {
          "type": "boolean",
          "x-omitempty": false
        },
        "entitlementItemID": {
          "type": "string"
        },
        "generalRateLimitBurst": {
          "format": "int32",
          "type": "integer"
        },
        "generalRateLimitDuration": {
          "format": "integer",
          "type": "integer"
        },
        "keepPresenceActivityOnDisconnect": {
          "type": "boolean",
          "x-omitempty": false
        },
        "maxDSWaitTime": {
          "format": "integer",
          "type": "integer"
        },
        "maxFriendsLimit": {
          "format": "int32",
          "type": "integer"
        },
        "maxPartyMember": {
          "format": "int32",
          "type": "integer"
        },
        "profanityFilter": {
          "type": "boolean",
          "x-omitempty": false
        },
        "readyConsentTimeout": {
          "format": "integer",
          "type": "integer"
        },
        "unregisterDelay": {
          "format": "integer",
          "type": "integer"
        }
      }
    },
    "models.CreateConfigRequest": {
      "properties": {
        "apiKey": {
          "type": "string"
        }
      },
      "required": [
        "apiKey"
      ]
    },
    "models.CreateConfigResponse": {
      "properties": {
        "apiKey": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      },
      "required": [
        "apiKey",
        "namespace"
      ]
    },
    "models.DebugProfanityFilterRequest": {
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "required": [
        "text"
      ]
    },
    "models.GetAllPlayerBlockedByUsersResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/models.BlockedByPlayerData"
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ]
    },
    "models.GetAllPlayerBlockedUsersResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/models.BlockedPlayerData"
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ]
    },
    "models.GetAllPlayerSessionAttributeResponse": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "required": [
        "attributes"
      ]
    },
    "models.GetBulkAllPlayerBlockedUsersRequest": {
      "properties": {
        "listBlockedUserId": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "listBlockedUserId"
      ]
    },
    "models.GetBulkAllPlayerBlockedUsersResponse": {
      "properties": {
        "data": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/models.BlockedPlayerData"
            },
            "type": "array"
          },
          "type": "object"
        }
      },
      "required": [
        "data"
      ]
    },
    "models.GetConfigResponse": {
      "properties": {
        "apiKey": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      },
      "required": [
        "apiKey",
        "namespace"
      ]
    },
    "models.GetLobbyCcuResponse": {
      "properties": {
        "countCurrentUsers": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "countCurrentUsers"
      ]
    },
    "models.GetPlayerSessionAttributeResponse": {
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "key",
        "value"
      ]
    },
    "models.ImportConfigResponse": {
      "properties": {
        "failedConfigs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ignoredConfigs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "newConfigs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "replacedConfigs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "failedConfigs",
        "ignoredConfigs",
        "newConfigs",
        "replacedConfigs"
      ]
    },
    "models.ListBlockedPlayerRequest": {
      "properties": {
        "listBlockedUserId": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "listBlockedUserId"
      ]
    },
    "models.PartyData": {
      "properties": {
        "custom_attribute": {
          "type": "object"
        },
        "invitees": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "leader": {
          "type": "string"
        },
        "members": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "namespace": {
          "type": "string"
        },
        "partyId": {
          "type": "string"
        },
        "updatedAt": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "custom_attribute",
        "invitees",
        "leader",
        "members",
        "namespace",
        "partyId",
        "updatedAt"
      ]
    },
    "models.PartyPUTCustomAttributesRequest": {
      "properties": {
        "custom_attribute": {
          "type": "object"
        },
        "updatedAt": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "custom_attribute",
        "updatedAt"
      ]
    },
    "models.PartyPUTLimitSizeRequest": {
      "properties": {
        "limit": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "limit"
      ]
    },
    "models.ProfanityFilter": {
      "properties": {
        "filter": {
          "type": "string"
        },
        "listName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "note": {
          "type": "string"
        }
      },
      "required": [
        "filter",
        "listName",
        "namespace",
        "note"
      ]
    },
    "models.ProfanityRule": {
      "properties": {
        "Namespace": {
          "type": "string"
        },
        "Rule": {
          "type": "string"
        }
      },
      "required": [
        "Namespace",
        "Rule"
      ]
    },
    "models.SetPlayerSessionAttributeRequest": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "required": [
        "attributes"
      ]
    },
    "models.UpdateConfigRequest": {
      "properties": {
        "apiKey": {
          "type": "string"
        }
      },
      "required": [
        "apiKey"
      ]
    },
    "models.UpdateConfigResponse": {
      "properties": {
        "apiKey": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      },
      "required": [
        "apiKey",
        "namespace"
      ]
    },
    "response.Error": {
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "required": [
        "errorCode",
        "errorMessage"
      ]
    },
    "restapi.ErrorResponseBody": {
      "properties": {
        "ErrorCode": {
          "format": "int32",
          "type": "integer"
        },
        "ErrorMessage": {
          "type": "string"
        }
      },
      "required": [
        "ErrorCode",
        "ErrorMessage"
      ]
    },
    "restapi.ErrorResponseV1": {
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "required": [
        "errorCode",
        "errorMessage"
      ]
    }
  },
  "x-docs": {
    "alias": "lobby",
    "host": "https://demo.accelbyte.io",
    "path": "/lobby/apidocs/api.json"
  },
  "x-version": {
    "buildDate": "2023-11-07T07:30:41+00:00",
    "gitHash": "abb42ce8f1cdb7096c550c9bc65a7e6902ba9dc7",
    "name": "justice-lobby-server",
    "revisionID": "3.31.0",
    "version": "3.31.0",
    "version-justice": "3.45.0",
    "version-roles-seeding": "1.0.1"
  }
}