// Code generated by go-swagger; DO NOT EDIT.

package seasonpassclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClaimableRewards A DTO object for claimable rewards.
//
// swagger:model ClaimableRewards
type ClaimableRewards struct {

	// Claiming rewards, zero based tier index as key, rewards per pass as value
	// Required: true
	ClaimingRewards map[string]map[string][]string `json:"claimingRewards"`

	// To claim rewards, zero based tier index as key, rewards per pass as value
	// Required: true
	ToClaimRewards map[string]map[string][]string `json:"toClaimRewards"`
}

// Validate validates this claimable rewards
func (m *ClaimableRewards) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClaimingRewards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToClaimRewards(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClaimableRewards) validateClaimingRewards(formats strfmt.Registry) error {

	for k := range m.ClaimingRewards {

		if err := validate.Required("claimingRewards"+"."+k, "body", m.ClaimingRewards[k]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ClaimableRewards) validateToClaimRewards(formats strfmt.Registry) error {

	for k := range m.ToClaimRewards {

		if err := validate.Required("toClaimRewards"+"."+k, "body", m.ToClaimRewards[k]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClaimableRewards) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClaimableRewards) UnmarshalBinary(b []byte) error {
	var res ClaimableRewards
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
