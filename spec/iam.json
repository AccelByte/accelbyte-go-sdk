{
  "host": "demo.accelbyte.io",
  "info": {
    "contact": {
      "email": "engineering@accelbyte.io",
      "name": "Engineering Team at AccelByte",
      "url": "https://accelbyte.io"
    },
    "description": "Justice IAM Service",
    "title": "justice-iam-service",
    "version": "5.20.0"
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "HasPermission": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "ADMIN:BAN [READ]": "ADMIN:BAN [READ]",
        "ADMIN:CONFIGURATION [DELETE]": "ADMIN:CONFIGURATION [DELETE]",
        "ADMIN:CONFIGURATION [READ]": "ADMIN:CONFIGURATION [READ]",
        "ADMIN:CONFIGURATION [UPDATE]": "ADMIN:CONFIGURATION [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]": "ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]",
        "ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]": "ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:BAN [CREATE]": "ADMIN:NAMESPACE:{namespace}:BAN [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:BAN [UPDATE]": "ADMIN:NAMESPACE:{namespace}:BAN [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [CREATE]": "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [READ]": "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [READ]",
        "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [UPDATE]": "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:CLIENT [CREATE]": "ADMIN:NAMESPACE:{namespace}:CLIENT [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:CLIENT [DELETE]": "ADMIN:NAMESPACE:{namespace}:CLIENT [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:CLIENT [READ]": "ADMIN:NAMESPACE:{namespace}:CLIENT [READ]",
        "ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]": "ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:CLIENT:{clientId} [DELETE]": "ADMIN:NAMESPACE:{namespace}:CLIENT:{clientId} [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:CLIENTDOMAIN [DELETE]": "ADMIN:NAMESPACE:{namespace}:CLIENTDOMAIN [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:CLIENTDOMAIN [UPDATE]": "ADMIN:NAMESPACE:{namespace}:CLIENTDOMAIN [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:DELETIONSTATUS:USER:{userId} [READ]": "ADMIN:NAMESPACE:{namespace}:DELETIONSTATUS:USER:{userId} [READ]",
        "ADMIN:NAMESPACE:{namespace}:DELETIONSTATUS:USER:{userId} [UPDATE]": "ADMIN:NAMESPACE:{namespace}:DELETIONSTATUS:USER:{userId} [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:DEVICE [CREATE]": "ADMIN:NAMESPACE:{namespace}:DEVICE [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:DEVICE [READ]": "ADMIN:NAMESPACE:{namespace}:DEVICE [READ]",
        "ADMIN:NAMESPACE:{namespace}:DEVICE [UPDATE]": "ADMIN:NAMESPACE:{namespace}:DEVICE [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:HISTORY:LOGIN:USER:{userId} [READ]": "ADMIN:NAMESPACE:{namespace}:HISTORY:LOGIN:USER:{userId} [READ]",
        "ADMIN:NAMESPACE:{namespace}:INFORMATION:USER:{userId} [DELETE]": "ADMIN:NAMESPACE:{namespace}:INFORMATION:USER:{userId} [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [READ]": "ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [READ]",
        "ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [UPDATE]": "ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:PASSWORD:USER [UPDATE]": "ADMIN:NAMESPACE:{namespace}:PASSWORD:USER [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]": "ADMIN:NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [CREATE]": "ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [DELETE]": "ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [UPDATE]": "ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:PLATFORM:*:CLIENT [READ]": "ADMIN:NAMESPACE:{namespace}:PLATFORM:*:CLIENT [READ]",
        "ADMIN:NAMESPACE:{namespace}:PLATFORM:*:SSO [READ]": "ADMIN:NAMESPACE:{namespace}:PLATFORM:*:SSO [READ]",
        "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [CREATE]": "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [DELETE]": "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [READ]": "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [READ]",
        "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [CREATE]": "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [DELETE]": "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [READ]": "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [READ]",
        "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [UPDATE]": "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [Delete]": "ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [Delete]",
        "ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [READ]": "ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [READ]",
        "ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [UPDATE]": "ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [DELETE]": "ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]": "ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER [READ]": "ADMIN:NAMESPACE:{namespace}:USER [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER []": "ADMIN:NAMESPACE:{namespace}:USER []",
        "ADMIN:NAMESPACE:{namespace}:USER:* [READ]": "ADMIN:NAMESPACE:{namespace}:USER:* [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:INVITE [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:INVITE [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId} [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId} [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CODE [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CODE [READ]",
        "ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]",
        "ADMIN:ROLE [CREATE]": "ADMIN:ROLE [CREATE]",
        "ADMIN:ROLE [DELETE]": "ADMIN:ROLE [DELETE]",
        "ADMIN:ROLE [READ]": "ADMIN:ROLE [READ]",
        "ADMIN:ROLE [UPDATE]": "ADMIN:ROLE [UPDATE]",
        "ADMIN:USER:INVITE [CREATE]": "ADMIN:USER:INVITE [CREATE]",
        "BAN:ADMIN [READ]": "BAN:ADMIN [READ]",
        "CLIENT [READ]": "CLIENT [READ]",
        "CLIENT:ADMIN [CREATE]": "CLIENT:ADMIN [CREATE]",
        "CLIENT:ADMIN [DELETE]": "CLIENT:ADMIN [DELETE]",
        "CLIENT:ADMIN [UPDATE]": "CLIENT:ADMIN [UPDATE]",
        "NAMESPACE:{namespace}:CLIENT [READ]": "NAMESPACE:{namespace}:CLIENT [READ]",
        "NAMESPACE:{namespace}:HISTORY:LOGIN:USER:{userId} [READ]": "NAMESPACE:{namespace}:HISTORY:LOGIN:USER:{userId} [READ]",
        "NAMESPACE:{namespace}:INFORMATION:USER:{userId} [READ]": "NAMESPACE:{namespace}:INFORMATION:USER:{userId} [READ]",
        "NAMESPACE:{namespace}:JUSTICE:USER:{userId} [UPDATE]": "NAMESPACE:{namespace}:JUSTICE:USER:{userId} [UPDATE]",
        "NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]": "NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]",
        "NAMESPACE:{namespace}:PUBLISHER:USER:{userId} [READ]": "NAMESPACE:{namespace}:PUBLISHER:USER:{userId} [READ]",
        "NAMESPACE:{namespace}:USER [CREATE]": "NAMESPACE:{namespace}:USER [CREATE]",
        "NAMESPACE:{namespace}:USER [READ]": "NAMESPACE:{namespace}:USER [READ]",
        "NAMESPACE:{namespace}:USER:{userID}:ADMIN [UPDATE]": "NAMESPACE:{namespace}:USER:{userID}:ADMIN [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId} [DELETE]": "NAMESPACE:{namespace}:USER:{userId} [DELETE]",
        "NAMESPACE:{namespace}:USER:{userId} [READ]": "NAMESPACE:{namespace}:USER:{userId} [READ]",
        "NAMESPACE:{namespace}:USER:{userId} [UPDATE]": "NAMESPACE:{namespace}:USER:{userId} [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:PUBLISHER [READ]": "NAMESPACE:{namespace}:USER:{userId}:PUBLISHER [READ]",
        "ROLE [READ]": "ROLE [READ]",
        "ROLE:ADMIN [CREATE]": "ROLE:ADMIN [CREATE]",
        "ROLE:ADMIN [DELETE]": "ROLE:ADMIN [DELETE]",
        "ROLE:ADMIN [UPDATE]": "ROLE:ADMIN [UPDATE]"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "HasScope": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {},
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    },
    "authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    },
    "basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basic": []
    }
  ],
  "swagger": "2.0",
  "paths": {
    "/iam/bans": {
      "get": {
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;BAN:ADMIN [READ]\u0026#39; or \u0026#39;ADMIN:BAN [READ]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/bans [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "GetBansType",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.Bans"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:BAN [READ]",
              "BAN:ADMIN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get list of ban types",
        "tags": [
          "Bans"
        ]
      }
    },
    "/iam/bans/reasons": {
      "get": {
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;BAN:ADMIN [READ]\u0026#39; or \u0026#39;ADMIN:BAN [READ]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/bans/reasons [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "GetListBanReason",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.BanReasons"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:BAN [READ]",
              "BAN:ADMIN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get list of ban reasons",
        "tags": [
          "Bans"
        ]
      }
    },
    "/iam/clients": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;CLIENT [READ]\u0026#39;.\u0026lt;br/\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/clients [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "GetClients",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/clientmodel.ClientResponse"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HasPermission": [
              "CLIENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get All Clients",
        "tags": [
          "Clients"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;CLIENT:ADMIN [CREATE]\u0026#39;. \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/clients  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "CreateClient",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreationResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Client exists"
          }
        },
        "security": [
          {
            "HasPermission": [
              "CLIENT:ADMIN [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create Client",
        "tags": [
          "Clients"
        ]
      }
    },
    "/iam/clients/{clientId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;CLIENT:ADMIN [DELETE]\u0026#39; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/clients/{clientId}  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;/p\u0026gt;",
        "operationId": "DeleteClient",
        "parameters": [
          {
            "description": "Client ID",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "CLIENT:ADMIN [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Client",
        "tags": [
          "Clients"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;CLIENT [READ]\u0026#39; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/clients/{clientId} [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "GetClient",
        "parameters": [
          {
            "description": "Client ID",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "CLIENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Client",
        "tags": [
          "Clients"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;CLIENT:ADMIN [UPDATE]\u0026#39;\u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/clients/{clientId}  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;/p\u0026gt;",
        "operationId": "UpdateClient",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientUpdateRequest"
            }
          },
          {
            "description": "Client ID",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "CLIENT:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Client",
        "tags": [
          "Clients"
        ]
      }
    },
    "/iam/clients/{clientId}/clientpermissions": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;CLIENT:ADMIN [UPDATE]\u0026#39;\u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions  [PUT]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "UpdateClientPermission",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.ClientPermissions"
            }
          },
          {
            "description": "Client ID",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "CLIENT:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Client Permissions",
        "tags": [
          "Clients"
        ]
      }
    },
    "/iam/clients/{clientId}/clientpermissions/{resource}/{action}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\tRequired permission \u0026#39;CLIENT:ADMIN [UPDATE]\u0026#39;\u0026lt;br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions/{resource}/{action}  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;/p\u0026gt;",
        "operationId": "DeleteClientPermission",
        "parameters": [
          {
            "description": "Action",
            "in": "path",
            "name": "action",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Client ID",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Resource Name",
            "in": "path",
            "name": "resource",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "CLIENT:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Client Permission",
        "tags": [
          "Clients"
        ]
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;CLIENT:ADMIN [UPDATE]\u0026#39; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "AddClientPermission",
        "parameters": [
          {
            "description": "Action",
            "in": "path",
            "name": "action",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Client ID",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Resource Name",
            "in": "path",
            "name": "resource",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "CLIENT:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add Client Permission",
        "tags": [
          "Clients"
        ]
      }
    },
    "/iam/clients/{clientId}/secret": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;CLIENT:ADMIN [UPDATE]\u0026#39;\u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/{clientId}/secret  [PUT]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;p\u0026gt;",
        "operationId": "UpdateClientSecret",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientUpdateSecretRequest"
            }
          },
          {
            "description": "Client ID",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "CLIENT:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Client Secret",
        "tags": [
          "Clients"
        ]
      }
    },
    "/iam/namespaces/{namespace}/clients": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\tRequired permission \u0026#39;NAMESPACE:{namespace}:CLIENT [READ]\u0026#39; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/clients [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;\t\n\t\t",
        "operationId": "GetClientsbyNamespace",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/clientmodel.ClientResponse"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:CLIENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get clients by namespace",
        "tags": [
          "Clients"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:CLIENT [CREATE]\u0026#39; \u0026lt;/br\u0026gt;\t\t\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/v3/admin/namespaces/{namespace}/clients  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "CreateClientByNamespace",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreateRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreationResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Client exists"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLIENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create Client",
        "tags": [
          "Clients"
        ]
      }
    },
    "/iam/namespaces/{namespace}/clients/{clientId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:CLIENT:{clientId} [DELETE]\u0026#39; \u0026lt;/br\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/clients/{clientId}  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "DeleteClientByNamespace",
        "parameters": [
          {
            "description": "Client ID",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLIENT:{clientId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Client",
        "tags": [
          "Clients"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\u0026lt;ul\u0026gt;\n\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v4/public/namespaces/{namespace}/users  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Note:\u0026lt;/b\u0026gt;\n\t\u0026lt;dd\u0026gt; 1. v3 \u0026amp; v4 introduce optional verification code\u0026lt;/dd\u0026gt;\n\t\u0026lt;dd\u0026gt; 2. format difference（Pascal case =\u0026gt; Camel case)\u0026lt;/dd\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\n\u0026lt;p\u0026gt;Required permission \u0026#39;NAMESPACE:{namespace}:USER [CREATE]\u0026#39;.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Available Authentication Types:\u0026lt;/p\u0026gt;\n\u0026lt;ol\u0026gt;\n\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;EMAILPASSWD\u0026lt;/strong\u0026gt;: an authentication type used for new user registration through email.\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;PHONEPASSWD\u0026lt;/strong\u0026gt;: an authentication type used for new user registration through phone number.\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\n\u0026lt;p\u0026gt;Country use ISO3166-1 alpha-2 two letter, e.g. US.\u0026lt;/p\u0026gt;\n\n",
        "operationId": "CreateUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserCreateResponse"
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": ""
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/admin": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint(Public): \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/roles/{roleId}/users  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Note:\u0026lt;/b\u0026gt;\n                        \u0026lt;dd\u0026gt;difference in V3 response, format difference: Pascal case =\u0026gt; Camel case\u0026lt;/dd\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER [READ]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint search admin users which have the roleId\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Notes : this endpoint only accept admin role. Admin Role is role which have admin status and members.\n\t\t\tUse endpoint [GET] /roles/{roleId}/admin to check the role status\u0026lt;/p\u0026gt;",
        "operationId": "GetAdminUsersByRoleID",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the next page",
            "in": "query",
            "name": "after",
            "type": "integer"
          },
          {
            "description": "The cursor that points to query data for the previous page",
            "in": "query",
            "name": "before",
            "type": "integer"
          },
          {
            "description": "the maximum number of data that may be returned (1...100)",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Role ID",
            "in": "query",
            "name": "roleId",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetAdminUsersResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20021\u003c/td\u003e\u003ctd\u003einvalid pagination parameter\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10157\u003c/td\u003e\u003ctd\u003especified role is not admin role\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Admin Users By RoleId",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/byLoginId": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\tRequired permission \u0026#39;NAMESPACE:{namespace}:USER [READ]\u0026#39;",
        "operationId": "GetUserByLoginID",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Login id",
            "in": "query",
            "name": "loginId",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUserResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get User By Login Id",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/byPlatformUserID": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint(Public): \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/platforms/{platformId}/users/{platformUserId}  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint(Admin): \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/users/{platformUserId}  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Note:\u0026lt;/b\u0026gt;\n            \t\t\u0026lt;dd\u0026gt;1. difference in V3 response, format difference: Pascal case =\u0026gt; Camel case\u0026lt;/dd\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\t\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;\n\t\tRequired permission \u0026#39;NAMESPACE:{namespace}:USER [READ]\u0026#39;",
        "operationId": "GetUserByPlatformUserID",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "query",
            "name": "platformID",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform User ID",
            "in": "query",
            "name": "platformUserID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUserResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get User By Platform User ID",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/forgotPassword": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/forgot  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\t\t\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:PASSWORD:USER [UPDATE]\u0026#39; or valid basic auth header\u0026#34;+\n\t\t\t\u0026#34;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Special note for publisher-game scenario:\u0026lt;/strong\u0026gt; Game Client should provide game namespace path parameter and Publisher Client should provide publisher namespace path parameter. \u0026lt;/p\u0026gt;\u0026#34;+\n\t\t\t\u0026#34;\u0026lt;p\u0026gt;The password reset code will be sent to the publisher account\u0026#39;s email address. \u0026lt;/p\u0026gt;",
        "operationId": "ForgotPassword",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "basic": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PASSWORD:USER [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Request Password Reset Code",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/listByLoginIds": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint(query by email list): \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/bulk/basic  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint(query by user id list): \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/search/bulk  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;\n\t\tRequired permission \u0026#39;NAMESPACE:{namespace}:USER [READ]\u0026#39;",
        "operationId": "GetUsersByLoginIds",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of LoginIDs. Separated by comma.",
            "in": "query",
            "name": "loginIds",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUsersResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a List of Users By Their Login Id",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/resetPassword": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/reset  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:PASSWORD:USER [UPDATE]\u0026#39; or valid basic auth header",
        "operationId": "ResetPassword",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ResetPasswordRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "basic": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PASSWORD:USER [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Reset User Password",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/search": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/search  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Search all users that match the query on these fields: all login IDs (email address, phone number, and platform user id),\n\t\t\tuserID, display name, and on the specified namespace. If the query is not defined, then it searches all users on the specified namespace.\n\t\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:* [READ]\u0026#39;\u0026lt;/p\u0026gt;",
        "operationId": "SearchUser",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "search query string (optional)",
            "in": "query",
            "name": "query",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.SearchUsersResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:* [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Search users",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/information  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\n\t\tRequired permission \u0026#39;NAMESPACE:{namespace}:USER:{userId} [DELETE]\u0026#39;",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete User",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint(Public): \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/{userId}  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint(Admin): \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Note:\u0026lt;/b\u0026gt;\n            \t\t\u0026lt;dd\u0026gt;format difference in response: Pascal case =\u0026gt; Camel case\u0026lt;/dd\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\tRequired permission \u0026#39;NAMESPACE:{namespace}:USER:{userId} [READ]\u0026#39;",
        "operationId": "GetUserByUserID",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get User By User Id",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint([PUT]): \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me  [PUT]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint([PATCH]): \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint([PATCH]): \u0026lt;i\u0026gt;/iam/v4/public/namespaces/{namespace}/users/me  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Note:  \u0026lt;/b\u0026gt;\n\t\t\t\t\t\u0026lt;dd\u0026gt;1. Prefer [PATCH] if client support PATCH method\u0026lt;/dd\u0026gt;\n\t\t\t\t\t\u0026lt;dd\u0026gt;2. Difference in V3/v4 request body, format difference: Pascal case =\u0026gt; Camel case\u0026lt;/dd\u0026gt;\n\t\t\t\t\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\u0026#34;+\n\t\t\t\u0026#34;\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;This Endpoint support update user based on given data. \u0026lt;b\u0026gt;Single request can update single field or multi fields.\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; \u0026#34;+\n\t\t\t\u0026#34;\u0026lt;p\u0026gt;Supported field {Country, DisplayName, LanguageTag}\u0026lt;/p\u0026gt;\u0026#34;+\n\t\t\t\u0026#34;\u0026lt;p\u0026gt;Country use ISO3166-1 alpha-2 two letter, e.g. US.\u0026lt;/p\u0026gt;\u0026#34;+\n\t\t\t\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;Several case of updating email address\u0026lt;/b\u0026gt;\u0026#34;+\n\t\t\t\u0026#34;\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;User want to update email address of which have been verified, NewEmailAddress response field will be filled with new email address.\u0026lt;/li\u0026gt;\u0026#34;+\n\t\t\t\u0026#34;\u0026lt;li\u0026gt;User want to update email address of which have not been verified, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with new email address. \u0026lt;/li\u0026gt;\u0026#34;+\n\t\t\t\u0026#34;\u0026lt;li\u0026gt;User want to update email address of which have been verified and updated before, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with verified email before. NewEmailAddress response field will be filled with newest email address. \u0026lt;/li\u0026gt;",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "description": "\u003cul\u003e\u003cli\u003eCountry (Optional) \u003cbr\u003e use ISO3166-1 alpha-2 two letter, e.g. US.\u003c/li\u003e\u003cli\u003eDisplayName (Optional) string \u003c/li\u003e\u003cli\u003eLanguageTag (Optional) use Language e.g. en / en-US \u003c/li\u003e\u003c/ul\u003e",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10131\u003c/td\u003e\u003ctd\u003einvalid date of birth\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10155\u003c/td\u003e\u003ctd\u003ecountry is not defined\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10132\u003c/td\u003e\u003ctd\u003einvalid email address\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/ban": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [CREATE]\u0026#39;.",
        "operationId": "BanUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BanCreateRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Ban a single user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\n\t\tRequired permissions \u0026#39;ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [READ]\u0026#39;.",
        "operationId": "GetUserBanHistory",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.UserBanResponse"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user's bans history",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/bans/{banId}/disable": {
      "put": {
        "consumes": [
          "*/*"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans/{banId}  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\n\t\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [UPDATE]\u0026#39;.\u0026lt;br\u0026gt;\u0026#34;+\n\t\t\t\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;Notes for using IAM in publisher - game studio scenarios\u0026lt;/b\u0026gt;\u0026lt;br\u0026gt;\u0026#34;+\n\t\t\t\u0026#34;\u0026lt;p\u0026gt;The endpoint allows:\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt;\u0026#34;+\n\t\t\t\u0026#34;\u0026lt;li\u0026gt;The admin user in publisher namespace disables user’s ban in publisher namespace.\u0026lt;/li\u0026gt;\u0026#34;+\n\t\t\t\u0026#34;\u0026lt;li\u0026gt;The admin user in game namespace disables user’s ban in game namespace.\u0026lt;/li\u0026gt;\u0026#34;+\n\t\t\t\u0026#34;\u0026lt;li\u0026gt;The admin user in publisher namespace disables user’s ban in publisher namespace.\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026#34;+\n\t\t\t\u0026#34;\u0026lt;p\u0026gt;Other scenarios are not supported and will return 403: Forbidden.\u0026lt;/p\u0026gt;",
        "operationId": "DisableUserBan",
        "parameters": [
          {
            "description": "Ban ID",
            "in": "path",
            "name": "banId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10145\u003c/td\u003e\u003ctd\u003edisallow game access publisher user's ban\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Disable ban for a single user.",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/bans/{banId}/enable": {
      "put": {
        "consumes": [
          "*/*"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans/{banId}  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [UPDATE]\u0026#39;.",
        "operationId": "EnableUserBan",
        "parameters": [
          {
            "description": "Ban ID",
            "in": "path",
            "name": "banId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10145\u003c/td\u003e\u003ctd\u003edisallow game access publisher user's ban\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10144\u003c/td\u003e\u003ctd\u003euser has no bans\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Enable ban for a single user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/crosslink": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\n\u0026lt;p\u0026gt;Required permission \u0026#39;NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;\n\tAccess token from original namespace is needed as authorization header. Access token from designated account needed as form parameter to verify the ownership of that account.\n\tWhen platformID (device platfom ID) is specified, platform login method for that specific platform ID is removed.\n\tThis means to protect account from second hand device usage.\n\u0026lt;/p\u0026gt;",
        "operationId": "ListCrossNamespaceAccountLink",
        "parameters": [
          {
            "description": "Access token of the targeted account",
            "in": "formData",
            "name": "linkingToken",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Current platform ID",
            "in": "formData",
            "name": "platformId",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Links existing account with another account in different namespace. ",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/disable": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/status  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;p\u0026gt;Required permissions \u0026#39;ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]\u0026#39;\u0026lt;p\u0026gt;\n\t\t\u0026lt;p\u0026gt;For \u0026lt;strong\u0026gt;Deletion Account\u0026lt;/strong\u0026gt; purpose fill the reason with:\u0026lt;/p\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;DeactivateAccount\u0026lt;/strong\u0026gt; : if your deletion request comes from user\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;AdminDeactivateAccount\u0026lt;/strong\u0026gt; : if your deletion request comes from admin\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;",
        "operationId": "DisableUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.DisableUserRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Disable a user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/enable": {
      "put": {
        "consumes": [
          "*/*"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/status  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;Required permissions \u0026#39;ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]\u0026#39;\u0026lt;p\u0026gt;",
        "operationId": "EnableUser",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Enable a user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/information": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/information  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\n\t\tRequired permissions \u0026#39;ADMIN:NAMESPACE:{namespace}:INFORMATION:USER:{userId} [DELETE]\u0026#39;.",
        "operationId": "DeleteUserInformation",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:INFORMATION:USER:{userId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete user's information",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/{userId}/information  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\n\t\tRequired permissions \u0026#39;NAMESPACE:{namespace}:INFORMATION:USER:{userId} [READ]\u0026#39;.",
        "operationId": "GetUserInformation",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserInformation"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:INFORMATION:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user's information",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/logins/histories": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/{userId}/logins/histories  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/logins/histories  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\n\t\tRequired permission \u0026#39;NAMESPACE:{namespace}:HISTORY:LOGIN:USER:{userId} [READ]\u0026#39;\u0026#34;+\n\t\t\u0026#34;\u0026lt;p\u0026gt;Notes for this endpoint: \u0026lt;/p\u0026gt; \u0026#34;+\n\t\t\u0026#34;\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;This endpoint retrieve the first page of the data if \u0026#39;after\u0026#39; and \u0026#39;before\u0026#39; parameters is empty.\u0026lt;/li\u0026gt;\u0026#34;+\n\t\t\u0026#34;\u0026lt;li\u0026gt;The maximum value of the limit is 100 and the minimum value of the limit is 1.\u0026lt;/li\u0026gt;\u0026#34;+\n\t\t\u0026#34;\u0026lt;li\u0026gt;This endpoint retrieve the next page of the data if we provide \u0026#39;after\u0026#39; parameters with valid Unix timestamp.\u0026lt;/li\u0026gt;\u0026#34;+\n\t\t\u0026#34;\u0026lt;li\u0026gt;This endpoint retrieve the previous page of the data if we provide \u0026#39;before\u0026#39; parameter with valid data Unix timestamp.\u0026lt;/li\u0026gt;\u0026lt;ul\u0026gt;",
        "operationId": "GetUserLoginHistories",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the next page (In Unix timestamp formats, e.g:1545114248)",
            "in": "query",
            "name": "after",
            "type": "number"
          },
          {
            "description": "The cursor that points to query data for the previous page (In Unix timestamp formats, e.g:1545114248).",
            "in": "query",
            "name": "before",
            "type": "number"
          },
          {
            "description": "The number of data retrieved in a page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.LoginHistoriesResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:HISTORY:LOGIN:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get User's Login Histories",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/password": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": " \u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\t \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me/password  [PUT]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]\u0026#39;\u0026lt;p\u0026gt;",
        "operationId": "UpdatePassword",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserPasswordUpdateRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10142\u003c/td\u003e\u003ctd\u003enew password cannot be same with original\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10143\u003c/td\u003e\u003ctd\u003epassword not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update User Password",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/permissions": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/permissions  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint will REPLACE user\u0026#39;s permissions with the ones defined in body\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;In ranged schedule, first element will be start date, and second one will be end date\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Syntax reference\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Fields:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Seconds: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Minutes: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Hours: 0-23 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of month: 1-31 * / , - L W\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Month: 1-12 JAN-DEC * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of week: 0-6 SUN-SAT * / , - L #\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Year: 1970-2099 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Special characters:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;*: all values in the fields, e.g. * in seconds fields indicates every second\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;,: separate items of a list, e.g. MON,WED,FRI in day of week\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \u0026#34;the last Friday\u0026#34; (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \u0026#34;the nearest business day to the 15th of the month.\u0026#34;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;#: must be followed by a number between one and five. It allows you to specify constructs such as \u0026#34;the second Friday\u0026#34; of a given month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t",
        "operationId": "SaveUserPermission",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.Permissions"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Save User Permissions",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [DELETE]\u0026#39;",
        "operationId": "DeleteUserPermission",
        "parameters": [
          {
            "description": "Action (1..15)",
            "in": "path",
            "name": "action",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Resource Name",
            "in": "path",
            "name": "resource",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete User Permission",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/permissions  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint will update existing permission (bitwise OR the action) if found one with same resource, otherwise it will append a new permission\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;In ranged schedule, first element will be start date, and second one will be end date\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Syntax reference\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Fields:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Seconds: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Minutes: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Hours: 0-23 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of month: 1-31 * / , - L W\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Month: 1-12 JAN-DEC * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of week: 0-6 SUN-SAT * / , - L #\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Year: 1970-2099 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Special characters:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;*: all values in the fields, e.g. * in seconds fields indicates every second\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;,: separate items of a list, e.g. MON,WED,FRI in day of week\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \u0026#34;the last Friday\u0026#34; (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \u0026#34;the nearest business day to the 15th of the month.\u0026#34;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;#: must be followed by a number between one and five. It allows you to specify constructs such as \u0026#34;the second Friday\u0026#34; of a given month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t",
        "operationId": "AddUserPermission",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdatePermissionScheduleRequest"
            }
          },
          {
            "description": "Action (1..15)",
            "in": "path",
            "name": "action",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Resource Name",
            "in": "path",
            "name": "resource",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add User Permission",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/platforms": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/{userId}/platforms  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\n\u0026lt;p\u0026gt;Required permission \u0026#39;NAMESPACE:{namespace}:USER:{userId} [READ]\u0026#39;.\u0026lt;/p\u0026gt;\n\u0026lt;h2\u0026gt;Justice Platform Account\u0026lt;/h2\u0026gt;\n\u0026lt;p\u0026gt;The permission ’ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId}’ [READ] is required in order to read the UserID who linked with the user.\u0026lt;/p\u0026gt;\n",
        "operationId": "GetUserPlatformAccounts",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/accountcommon.UserLinkedPlatform"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId} [READ]",
              "ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get platform accounts linked to the user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/platforms/justice/{targetNamespace}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/justice/{targetNamespace} [GET] \u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\t\t\t\n\t\t\t\n\t\t\t\u0026lt;p\u0026gt;This endpoint requires the client access token as the bearer token. Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [READ]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint will support publisher access to game and game access to publisher\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;If targetNamespace filled with publisher namespace then this endpoint will return its game user id and game namespace\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;If targetNamespace filled with game namespace then this endpoint will return its publisher user id and publisher namespace\u0026lt;/p\u0026gt;",
        "operationId": "GetUserMapping",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Target namespace",
            "in": "path",
            "name": "targetNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserMapping"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user mapping",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: /iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/justice/{targetNamespace} [GET] \u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\n\u0026lt;p\u0026gt;This endpoint requires the client access token as the bearer token. Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;The endpoint returns user Justice platform account linked with the given user. If the user Justice platform account doesn\u0026#39;t exist in the designated namespace, the endpoint is going to \u0026lt;strong\u0026gt;create and return the new Justice platform account.\u0026lt;/strong\u0026gt;\nThe newly user Justice platform account is going to be forced to perform token grant through the given user and can\u0026#39;t perform password update\u0026lt;/p\u0026gt;\n\u0026lt;h3\u0026gt;Read Justice Platform Account UserID\u0026lt;/h3\u0026gt;\n\u0026lt;p\u0026gt;In order to read the Justice platform account UserID, it is required to have the permission: \u0026lt;strong\u0026gt;NAMESPACE:{namespace}:JUSTICE:USER:{userId} [READ]\u0026lt;/strong\u0026gt;, otherwise the UserID is going to be censored and replaced with “Redacted” text.\u0026lt;/p\u0026gt;",
        "operationId": "GetUserJusticePlatformAccount",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace where the user Justice platform account lives",
            "in": "path",
            "name": "targetNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserJusticePlatformAccountResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:JUSTICE:USER:{userId} [UPDATE]",
              "ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get the Justice linked accounts on the designated namespace",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/platforms/{platformId}/link": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId} [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\t\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;Prerequisite:\u0026lt;/b\u0026gt; Platform client configuration need to be added to database for specific platformId. Namespace service URL need to be specified (refer to required environment variables).\n\u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steam\u0026lt;/strong\u0026gt;: The ticket’s value is the authentication code returned by Steam.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt;: Steam\u0026#39;s user authentication method using OpenID 2.0. The ticket\u0026#39;s value is URL generated by Steam on web authentication\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Facebook OAuth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Google OAuth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oculus\u0026lt;/strong\u0026gt;: The ticket’s value is a string composed of Oculus\u0026#39;s user ID and the nonce separated by a colon (:).\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Twitch OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;android\u0026lt;/strong\u0026gt;: The ticket\u0026#39;s value is the Android’s device ID\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ios\u0026lt;/strong\u0026gt;: The ticket\u0026#39;s value is the iOS’s device ID.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;apple\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Apple OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;device\u0026lt;/strong\u0026gt;: Every device that does’nt run Android and iOS is categorized as a device platform. The ticket\u0026#39;s value is the device’s ID.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;discord\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Discord OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;",
        "operationId": "PlatformLink",
        "parameters": [
          {
            "description": "Ticket from platform",
            "in": "formData",
            "name": "ticket",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10163\u003c/td\u003e\u003ctd\u003eplatform is already linked with the user account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Link user's account with platform",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/platforms/{platformId}/unlink": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded",
          "text/plain"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/all  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\n\n\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;.\u0026lt;/p\u0026gt;\n\u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steam\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oculus\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;android\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ios\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;device\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;justice\u0026lt;/strong\u0026gt;: A user might have several \u0026#39;justice’ platform on different namespaces. That’s why the platform_namespace need to be specified when the platform ID is ‘justice’. The platform_namespace is the designated user’s namespace.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Unlink user\u0026#39;s account with platform. \u0026#39;justice\u0026#39; platform might have multiple accounts from different namespaces linked. platform_namespace need to be specified when the platform ID is \u0026#39;justice\u0026#39;.\n\t\t\t\u0026lt;br\u0026gt;Unlinking justice platform will enable password token grant and password update. \u0026lt;/p\u0026gt;",
        "operationId": "PlatformUnlink",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace of the platform account to be unlinked",
            "in": "formData",
            "name": "platform_namespace",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Unlink user's account with platform",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/publisher": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/{userId}/publisher  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Required permissions \u0026#39;NAMESPACE:{namespace}:PUBLISHER:USER:{userId} [READ].\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Restriction:\u0026lt;/strong\u0026gt;\n\t\t\tPath Parameter \u0026lt;strong\u0026gt;namespace\u0026lt;/strong\u0026gt; can be provided only with game namespace\u0026lt;/p\u0026gt;",
        "operationId": "GetPublisherUser",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetPublisherUserResponse"
            }
          },
          "400": {
            "description": "Error Code: 7239 - Error Message: wrong namespace: required game namespace",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:PUBLISHER:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Publisher User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/roles": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: /iam/v3/admin/namespaces/{namespace}/users/{userId}/roles  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]\u0026#39;",
        "operationId": "SaveUserRoles",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Save User Roles",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/roles/{roleId}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/plain"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/roles/{roleId}  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [DELETE]\u0026#39;",
        "operationId": "DeleteUserRole",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10159\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10156\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete User Role",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/plain"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/roles/{roleId}  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]\u0026#39;",
        "operationId": "AddUserRole",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10159\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10156\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10160\u003c/td\u003e\u003ctd\u003euser already has the role\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10161\u003c/td\u003e\u003ctd\u003euser already the role member\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add User Role",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/upgradeHeadlessAccount": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\n\t\t \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me/headless/verify  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\n\t\tRequired permission \u0026#39;NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;",
        "operationId": "upgradeHeadlessAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upgrade user account to full account (with email)",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/upgradeHeadlessAccountWithVerificationCode": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me/headless/code/verify  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\n\tRequired permission \u0026#39;NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;\n\u0026lt;p\u0026gt;The endpoint upgrades a headless account by linking the headless account with the email address and the password. By upgrading the headless account into a full account, the user could use the email address and password for using Justice IAM.\nThe endpoint is a shortcut for upgrading a headless account and verifying the email address in one call. In order to get a verification code for the endpoint, please check the send verification code endpoint.\u0026lt;/p\u0026gt;",
        "operationId": "UpgradeHeadlessAccountWithVerificationCode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountWithVerificationCodeRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upgrade headless account and automatically verified the email address if it is succeeded",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/verification": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me/code/verify  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\tRedeems a verification code sent to a user to verify the user\u0026#39;s contact address is correct\n\t\t\t\u0026lt;p\u0026gt;Available ContactType : \u0026lt;b\u0026gt;email\u0026lt;b/\u0026gt; or \u0026lt;b\u0026gt;phone\u0026lt;b/\u0026gt; \u0026lt;/p\u0026gt;",
        "operationId": "UserVerification",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserVerificationRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10149\u003c/td\u003e\u003ctd\u003everification contact type doesn't match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10148\u003c/td\u003e\u003ctd\u003everification code context doesn't match the required context\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10162\u003c/td\u003e\u003ctd\u003einvalid verification\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Redeem verification code sent to user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/verificationcode": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me/code/request  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\n\t\t\tRequired permission \u0026#39;NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;\n\t\t\t\u0026lt;p\u0026gt;The verification code is sent to either the phone number or email address. It depends on the LoginID\u0026#39;s value.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Available contexts for use : \u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;UserAccountRegistration\u0026lt;/strong\u0026gt;\u0026lt;p\u0026gt;a context type used for verifying email address in user account registration. It returns 409 if the email address already verified. \u0026lt;strong\u0026gt;\u0026lt;em\u0026gt;It is the default context if the Context field is empty\u0026lt;/em\u0026gt;\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;UpdateEmailAddress\u0026lt;/strong\u0026gt;\u0026lt;p\u0026gt;a context type used for verify user before updating email address.(Without email address verified checking)\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;upgradeHeadlessAccount\u0026lt;/strong\u0026gt;\u0026lt;p\u0026gt;The context is intended to be used whenever the email address wanted to be automatically verified on upgrading a headless account.  If this context used, IAM rejects the request if the loginId field\u0026#39;s value is already used by others by returning HTTP Status Code 409.\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;",
        "operationId": "SendVerificationCode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10146\u003c/td\u003e\u003ctd\u003euserID not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10140\u003c/td\u003e\u003ctd\u003euser verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Send verification code to user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/oauth/authorize": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\tThe endpoint supports two response types:\u0026lt;br/\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;1. Response Type == \u0026#34;code\u0026#34;:\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\n\t\u0026lt;p\u0026gt;The endpoint returns an authorization code that will be used by the IAM client to exchange for an access token. It supports two different headers, the basic and the bearer header. Each behaves differently.\u0026lt;/p\u0026gt;\n\u0026lt;ul\u0026gt;\n\u0026lt;li\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;The basic header\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\n\t\u0026lt;p\u0026gt;The basic header’s value is the base64 of the client ID and client secret. It is used by the developer whenever the developer authorizes a user on a same namespace.\u0026lt;/p\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;The bearer header\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\n\t\u0026lt;p\u0026gt;The bearer header’s value is an access token. It is used by the developer whenever the developer authorizes a user on a different namespace. The endpoint validates user’s entitlement on the designated namespace for making sure the user is authorized for a designated namespace.\u0026lt;/p\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\u0026lt;p\u0026gt;Following are the responses returned by the endpoint:\u0026lt;/p\u0026gt;\n\u0026lt;ul\u0026gt;\n\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Authorize success\u0026lt;/strong\u0026gt;: redirects to the given URL with the following information: ?code={authorization code}\u0026amp;state={state}\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Authorize failure\u0026lt;/strong\u0026gt;: redirects to the given URL with the following information:?error=access_denied\u0026amp;error_description=...\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;2. Response Type == \u0026#34;token\u0026#34; (Implicit) is deprecated. \u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\n\u0026lt;ul\u0026gt;\n\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint (for: basic header style): \u0026lt;i\u0026gt;/iam/v3/oauth/authorize  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint (for: bearer header style): \u0026lt;/b\u0026gt;\n\t\u0026lt;dd\u0026gt;step1: /iam/v3/namespace/{namespace}/token/request [POST] =\u0026gt; get code\u0026lt;dd\u0026gt;\u0026lt;/br\u0026gt;\n\t\u0026lt;dd\u0026gt;step2: /iam/v3/token/exchange [POST] =\u0026gt; get token by step1\u0026#39;s code\u0026lt;dd\u0026gt;\u0026lt;/br\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Note: \u0026lt;/b\u0026gt;\n\t\u0026lt;dd\u0026gt;1. V3 is standard OAuth2 flow and support PKCE\u0026lt;dd\u0026gt;\u0026lt;/br\u0026gt;\n\t\u0026lt;dd\u0026gt;2. Will not support implicit flow in v3.\u0026lt;dd\u0026gt;\u0026lt;/br\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n",
        "operationId": "Authorization",
        "parameters": [
          {
            "description": "Client id",
            "in": "formData",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Redirect URI. The URI has to match one of the URIs set in client.",
            "in": "formData",
            "name": "redirect_uri",
            "required": true,
            "type": "string"
          },
          {
            "default": "code",
            "description": "Response Type. Allowed values ['code', 'token'].",
            "enum": [
              "code",
              "token"
            ],
            "in": "formData",
            "name": "response_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "User Name",
            "in": "formData",
            "name": "login",
            "type": "string"
          },
          {
            "description": "Password",
            "in": "formData",
            "name": "password",
            "type": "string"
          },
          {
            "description": "Scope. The scope of request by roleId. Accept multiple roleIds separated by whitespace.",
            "in": "formData",
            "name": "scope",
            "type": "string"
          },
          {
            "description": "State. Random value for preventing cross-site request forgery used by client.",
            "in": "formData",
            "name": "state",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "302": {
            "description": "Found",
            "headers": {
              "Location": {
                "description": "The Location header",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "OAuth2 authorize API",
        "tags": [
          "OAuth"
        ],
        "x-location-query": "PLACEHOLDER"
      }
    },
    "/iam/oauth/jwks": {
      "get": {
        "consumes": [
          ""
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint serves public keys for verifying JWT access tokens generated by this service.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;When a client application wants to verify a JWT token, it needs to get the \u0026#39;kid\u0026#39; value found in the JWT token header and use it\n\t\t\tto look up the corresponding public key from a set returned by this endpoint. The client application can then use that public key to verify the JWT.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;A client application might cache the keys so it doesn\u0026#39;t need to do request every time it needs to verify a JWT token. If a client application\n\t\t\tcaches the keys and a key with the same \u0026#39;kid\u0026#39; cannot be found in the cache, it should then try to refresh the keys by making a request to this\n\t\t\tendpoint again.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Please refer to the RFC for more information about JWK (JSON Web Key): https://tools.ietf.org/html/rfc7517\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\t\t\u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/oauth/jwks  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \t\u0026lt;/ul\u0026gt;",
        "operationId": "GetJWKS",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "JWKS returned",
            "schema": {
              "$ref": "#/definitions/oauthcommon.JWKSet"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "JSON Web Key Set for verifying JWT",
        "tags": [
          "OAuth"
        ]
      }
    },
    "/iam/oauth/namespaces/{namespace}/platforms/{platformId}/token": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;\n\t\t\t\tThis endpoint requires all requests to have Authorization header set with Basic access authentication\n\t\t\t\tconstructed from client id and client secret. For publisher-game namespace schema : Specify only either platform_token or device_id. Device token grant\n\t\t\t\tshould be requested along with device_id parameter against game namespace. Another 3rd party platform token grant should be requested\n\t\t\t\talong with platform_token parameter against publisher namespace.\n\t\t\t\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;\n\t\t\t\tSupported platforms:\n\t\t\t\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt;: Steam\u0026#39;s user authentication method using OpenID 2.0. The expected value of the platform token is the URL generated by Steam on web authentication\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;The JWT contains user\u0026#39;s active bans with its expiry date. List of ban types can be obtained from /iam/bans.\u0026lt;/p\u0026gt;.\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/oauth/platforms/{platformId}/token  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "PlatformTokenRequestHandler",
        "parameters": [
          {
            "description": "Requested namespace for token grant",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID to login with",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Device/hardware identifier",
            "in": "formData",
            "name": "device_id",
            "type": "string"
          },
          {
            "description": "Mac address of device",
            "in": "formData",
            "name": "macAddress",
            "type": "string"
          },
          {
            "description": "Token from platform auth",
            "in": "formData",
            "name": "platform_token",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Access Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponse"
            }
          },
          "400": {
            "description": "General request error",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "OAuth2 access token generation specific to platform",
        "tags": [
          "OAuth"
        ]
      }
    },
    "/iam/oauth/namespaces/{namespace}/users/{userId}/revoke": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint requires all requests to have authorization header set with bearer token.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;The endpoint revokes all access tokens and refresh tokens a user has prior the revocation time. It is a convenient feature for the developer (or admin) who wanted to revokes all user\u0026#39;s access tokens and refresh tokens generated before some period of time.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\t\t\u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/oauth/admin/namespaces/{namespace}/users/{userId}/revoke  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \t\u0026lt;/ul\u0026gt;",
        "operationId": "RevokeUser",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User to be revoked",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User revoked"
          },
          "401": {
            "description": "Invalid basic auth header"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Revokes user's tokens'",
        "tags": [
          "OAuth"
        ]
      }
    },
    "/iam/oauth/revocationlist": {
      "get": {
        "consumes": [
          ""
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint will return a list of revoked users and revoked tokens. List of revoked tokens in bloom filter format. This endpoint requires all requests to have Authorization header set with Basic access authentication constructed from client id and client secret.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;The bloom filter uses MurmurHash3 algorithm for hashing the values\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\t\t\u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/oauth/revocationlist  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \t\u0026lt;/ul\u0026gt;",
        "operationId": "GetRevocationList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "revocation list returned",
            "schema": {
              "$ref": "#/definitions/oauthapi.RevocationList"
            }
          },
          "401": {
            "description": "Invalid basic auth header"
          }
        },
        "summary": "OAuth2 revocation list API",
        "tags": [
          "OAuth"
        ]
      }
    },
    "/iam/oauth/revoke/token": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;Revokes a token.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;This endpoint requires all requests to have Authorization header set with Basic access authentication constructed from client id and client secret or Bearer access authentication with valid access token.\u0026lt;/p\u0026gt;\n\t\t\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\t\t\u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/v3/oauth/revoke  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \t\u0026lt;/ul\u0026gt;",
        "operationId": "RevokeToken",
        "parameters": [
          {
            "description": "Token to be revoked",
            "in": "formData",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Token revoked or does not exist"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid basic auth header"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "OAuth2 token revocation API",
        "tags": [
          "OAuth"
        ]
      }
    },
    "/iam/oauth/revoke/user": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint revokes a user. \u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint requires all requests to have Authorization header set with Bearer access authentication with valid access token.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;NAMESPACE:{namespace}:USER:{userID}:ADMIN [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;When other clients know that the userID has been revoked and the token is issued before the revocation, forcing a new token will contain banned permissions. \u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\t\t\u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/oauth/admin/namespaces/{namespace}/users/{userId}/revoke  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \t\u0026lt;/ul\u0026gt;",
        "operationId": "RevokeAUser",
        "parameters": [
          {
            "description": "User to be revoked",
            "in": "formData",
            "name": "userID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User revoked or does not exist"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid basic auth header"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userID}:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "OAuth2 user revocation API",
        "tags": [
          "OAuth"
        ]
      }
    },
    "/iam/oauth/token": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/oauth/token  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Note: difference in V3 response:\u0026lt;/b\u0026gt;\n\t\t\t\t\t\t\t\u0026lt;dd\u0026gt;1. format difference（Pascal case =\u0026gt; Camel case): permissions field from Action =\u0026gt; action, Resource =\u0026gt; resource \u0026lt;/dd\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\t\t\t\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint requires all requests to have \u0026lt;code\u0026gt;Authorization\u0026lt;/code\u0026gt; header set with \u0026lt;code\u0026gt;Basic\u0026lt;/code\u0026gt; access authentication\n\t\t\tconstructed from client id and client secret.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint supports different \u0026lt;strong\u0026gt;grant types\u0026lt;/strong\u0026gt;:\u0026lt;/p\u0026gt;\u0026lt;ol\u0026gt;\n\t \t\t\u0026lt;li\u0026gt;Grant Type == \u0026lt;code\u0026gt;client_credentials\u0026lt;/code\u0026gt;:\u0026lt;br /\u0026gt;\n\t \t\t\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp; This endpoint will check the client credentials provided through Authorization header.\u0026lt;/li\u0026gt;\n\t \t\t\u0026lt;li\u0026gt;Grant Type == \u0026lt;code\u0026gt;password\u0026lt;/code\u0026gt;:\u0026lt;br /\u0026gt;\n\t \t\t\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp; The grant type to use for authenticating a user, whether it\u0026#39;s by email / username and password combination\n\t\t\tor through platform.\u0026lt;/li\u0026gt;\n\t \t\t\u0026lt;li\u0026gt;Grant Type == \u0026lt;code\u0026gt;refresh_token\u0026lt;/code\u0026gt;:\u0026lt;br /\u0026gt;\n\t \t\t\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp; Used to get a new access token for a valid refresh token.\u0026lt;/li\u0026gt;\n\t \t\t\u0026lt;li\u0026gt;Grant Type == \u0026lt;code\u0026gt;authorization_code\u0026lt;code\u0026gt;:\u0026lt;br /\u0026gt;\n\t \t\t\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp; It generates the user token by given the authorization\n\t \t\tcode which generated in \u0026#34;/authorize\u0026#34; API response. It should also pass\n\t \t\tin the redirect_uri, which should be the same as generating the\n\t \t\tauthorization code request.\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt;\n\t \t\t\u0026lt;p\u0026gt;For platform authentication, use grant type \u0026lt;code\u0026gt;password\u0026lt;/code\u0026gt;.\n\t \t\tThe \u0026lt;code\u0026gt;username\u0026lt;/code\u0026gt; field would be in form of\n\t \t\t\u0026lt;code\u0026gt;platform:\u0026amp;lt;platform type\u0026amp;gt;\u0026lt;/code\u0026gt;, for example\n\t \t\t\u0026lt;code\u0026gt;platform:steam\u0026lt;/code\u0026gt; for Steam. For the \u0026lt;code\u0026gt;password\u0026lt;/code\u0026gt;\n\t \t\tfield, set it to the authentication/authorization ticket or token obtainable through the\n\t \t\trespective platform SDK after authenticated the user to the platform. Supported platforms:\u0026lt;/p\u0026gt;\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steam\u0026lt;/strong\u0026gt; - use \u0026lt;code\u0026gt;platform:steam\u0026lt;/code\u0026gt; as the username and use the authentication ticket obtained\n\t\t\tfrom Steam through the Steam SDK as the password.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ps4\u0026lt;/strong\u0026gt; - use \u0026lt;code\u0026gt;platform:ps4\u0026lt;/code\u0026gt; as the username and use the authorization code\n\t\t\tobtained from the PlayStation Network through a player PS4 unit as the password.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;live\u0026lt;/strong\u0026gt; - use \u0026lt;code\u0026gt;platform:live\u0026lt;/code\u0026gt; as the username and use token obtained from \n\t\t\tXbox Secure Token Service (XSTS) as the password.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oculus\u0026lt;/strong\u0026gt; - use \u0026lt;code\u0026gt;platform:oculus\u0026lt;/code\u0026gt; as the username and use the \u0026lt;code\u0026gt;user_id:nonce\u0026lt;/code\u0026gt;\n\t\t\tas password obtained from Oculus through the Oculus SDK.\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;The access token and refresh token are in form of JWT token.\n\t \t\tAn access token JWT contains data which structure is similar to the\n\t \t\tResponse Class below, but without OAuth-related data. To verify a token, use the public keys\n\t\t\tobtained from the \u0026lt;code\u0026gt;/jwks\u0026lt;/code\u0026gt; endpoint below.\u0026lt;/p\u0026gt;\n\u0026lt;h2\u0026gt;Access Token Content\u0026lt;/h2\u0026gt;\n\u0026lt;p\u0026gt;Following is the access token’s content:\u0026lt;/p\u0026gt;\n\u0026lt;ul\u0026gt;\n\u0026lt;li\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;namespace\u0026lt;/strong\u0026gt;. It is the namespace the token was generated from.\u0026lt;/p\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;display_name\u0026lt;/strong\u0026gt;. The display name of the sub. It is empty if the token is generated from the client credential\u0026lt;/p\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;roles\u0026lt;/strong\u0026gt;. The sub’s roles. It is empty if the token is generated from the client credential\u0026lt;/p\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;namespace_roles\u0026lt;/strong\u0026gt;. The sub’s roles scoped to namespace. Improvement from roles, which make the role scoped to specific namespace instead of global to publisher namespace\u0026lt;/p\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;permissions\u0026lt;/strong\u0026gt;. The sub or aud’ permissions\u0026lt;/p\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;bans\u0026lt;/strong\u0026gt;. The sub’s list of bans. It is used by the IAM client for validating the token.\u0026lt;/p\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;jflgs\u0026lt;/strong\u0026gt;. It stands for Justice Flags. It is a special flag used for storing additional status information regarding the sub. It is implemented as a bit mask. Following explains what each bit represents:\u0026lt;/p\u0026gt;\n\u0026lt;ul\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;1: Email Address Verified\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;2: Phone Number Verified\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;4: Anonymous\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;aud\u0026lt;/strong\u0026gt;. The aud is the client ID.\u0026lt;/p\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;iat\u0026lt;/strong\u0026gt;. The time the token issues at. It is in Epoch time format\u0026lt;/p\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;exp\u0026lt;/strong\u0026gt;. The time the token expires. It is in Epoch time format\u0026lt;/p\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;sub\u0026lt;/strong\u0026gt;. The UserID. The sub is omitted if the token is generated from client credential\u0026lt;/p\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\u0026lt;h2\u0026gt;Bans\u0026lt;/h2\u0026gt;\n\u0026lt;p\u0026gt;The JWT contains user\u0026#39;s active bans with its expiry date. List of ban types can be obtained from /bans.\u0026lt;/p\u0026gt;\n\u0026lt;h2\u0026gt;Track Login History\u0026lt;/h2\u0026gt;\n\u0026lt;p\u0026gt;This endpoint will track login history to detect suspicious login activity, please provide \u0026#34;device_id\u0026#34; (alphanumeric) in request header parameter otherwise we will set to \u0026#34;unknown\u0026#34;.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Align with General Data Protection Regulation in Europe, user login history will be kept within 28 days by default\u0026#34;\u0026lt;/p\u0026gt;",
        "operationId": "TokenGrant",
        "parameters": [
          {
            "default": "client_credentials",
            "description": "Grant Type",
            "enum": [
              "authorization_code",
              "client_credentials",
              "password",
              "refresh_token"
            ],
            "in": "formData",
            "name": "grant_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Code (used with grant type 'authorization_code'",
            "in": "formData",
            "name": "code",
            "type": "string"
          },
          {
            "description": "Extend expiration date of refresh token. Only available for grant type 'password'",
            "in": "formData",
            "name": "extend_exp",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "Delegated namespace (used with grant type 'password' to do token grant on other namespace)",
            "in": "formData",
            "name": "namespace",
            "type": "string"
          },
          {
            "description": "Password (used with grant type 'password'",
            "in": "formData",
            "name": "password",
            "type": "string"
          },
          {
            "description": "Redirect URI (used with grant type 'authorization_code'",
            "in": "formData",
            "name": "redirect_uri",
            "type": "string"
          },
          {
            "description": "Refresh Token (used with grant type 'refresh_token'",
            "in": "formData",
            "name": "refresh_token",
            "type": "string"
          },
          {
            "description": "User Name (used with grant type 'password'",
            "in": "formData",
            "name": "username",
            "type": "string"
          },
          {
            "description": "DeviceID (Used on grant type 'password' to track login history) ex. 90252d14544846d79f367148e3f9a3d9",
            "in": "header",
            "name": "Device-Id",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponse"
            }
          },
          "400": {
            "description": "General request error",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "OAuth2 access token generation endpoint",
        "tags": [
          "OAuth"
        ]
      }
    },
    "/iam/oauth/verify": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\tThis endpoint requires all requests to have Authorization header set with Basic access authentication constructed from client id and client secret.\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/oauth/verify  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Note: difference in V3 response:\u0026lt;/b\u0026gt;\n\t\t\t\t\t\t\t\u0026lt;dd\u0026gt;1. format difference（Pascal case =\u0026gt; Camel case): permissions field from Action =\u0026gt; action, Resource =\u0026gt; resource \u0026lt;/dd\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\t\t\t\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "VerifyToken",
        "parameters": [
          {
            "description": "Token to be verified",
            "in": "formData",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Access Token verified",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponse"
            }
          },
          "400": {
            "description": "Access Token not exist or expired"
          }
        },
        "summary": "OAuth2 token verification API",
        "tags": [
          "OAuth"
        ]
      }
    },
    "/iam/roles": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ROLE [READ]\u0026#39; \u0026lt;/br\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "GetRoles",
        "parameters": [
          {
            "description": "- true if the expected result should only returns records with wildcard = true\n- false if the expected result should only returns records with wildcard = false\n- empty (omitted) if the expected result should returns records with no wildcard filter at all\n",
            "in": "query",
            "name": "isWildcard",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.RoleResponseWithManagers"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ROLE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Roles",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ROLE:ADMIN [CREATE]\u0026#39; or \u0026#39;ADMIN:ROLE [CREATE]\u0026#39; \u0026lt;/br\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;Role can only be assigned to other users by the role\u0026#39;s manager.\u0026lt;/p\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;If role is an administrator role (i.e. AdminRole == true), it will list out the role\u0026#39;s members.\u0026lt;/p\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;Administrator role can be created only when at least 1 manager is specified.\u0026lt;/p\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "CreateRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/accountcommon.Role"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [CREATE]",
              "ROLE:ADMIN [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create Role",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/roles/{roleId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ROLE:ADMIN [DELETE]\u0026#39; or \u0026#39;ADMIN:ROLE [DELETE]\u0026#39; \u0026lt;/br\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "DeleteRole",
        "parameters": [
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [DELETE]",
              "ROLE:ADMIN [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Role",
        "tags": [
          "Roles"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ROLE [READ]\u0026#39; \u0026lt;/br\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "GetRole",
        "parameters": [
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ROLE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Role",
        "tags": [
          "Roles"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ROLE:ADMIN [UPDATE]\u0026#39; or \u0026#39;ADMIN:ROLE [UPDATE] \u0026lt;/br\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "UpdateRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleUpdateRequest"
            }
          },
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]",
              "ROLE:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Role",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/roles/{roleId}/admin": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ROLE:ADMIN [UPDATE]\u0026#39; or \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39; \u0026lt;/br\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}/admin  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "RemoveRoleAdmin",
        "parameters": [
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]",
              "ROLE:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Remove Role Admin Status",
        "tags": [
          "Roles"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ROLE [READ] \u0026lt;/br\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;Admin roles has its members listed in the role.\u0026lt;/p\u0026gt;\u0026lt;/br\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}/admin  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "GetRoleAdminStatus",
        "parameters": [
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleAdminStatusResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ROLE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Role Admin Status",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ROLE:ADMIN [UPDATE]\u0026#39; or \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39; \u0026lt;/br\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;Admin roles has its members listed in the role.\u0026lt;/p\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;Role can be set as admin role only when it has at least 1 manager.\u0026lt;/p\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}/admin  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "SetRoleAsAdmin",
        "parameters": [
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]",
              "ROLE:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Set Role as Admin Role",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/roles/{roleId}/managers": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission Required permission \u0026#39;ROLE:ADMIN [UPDATE]\u0026#39; or \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39; \u0026lt;/br\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}/managers  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "RemoveRoleManagers",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleManagersRequest"
            }
          },
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]",
              "ROLE:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Remove Role Managers",
        "tags": [
          "Roles"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ROLE [READ]\u0026#39; \u0026lt;/br\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;Role can only be assigned to other users by the role\u0026#39;s manager.\u0026lt;/p\u0026gt;\u0026lt;/br\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}/managers  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "GetRoleManagers",
        "parameters": [
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleManagersResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ROLE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Role Managers",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ROLE:ADMIN [UPDATE]\u0026#39; or \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39; \u0026lt;/br\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;Role can only be assigned to other users by the role\u0026#39;s manager.\u0026lt;/p\u0026gt;\u0026lt;/br\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}/managers  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "AddRoleManagers",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleManagersRequest"
            }
          },
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]",
              "ROLE:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add Role Managers",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/roles/{roleId}/members": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ROLE:ADMIN [UPDATE]\u0026#39; or \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;\u0026lt;/br\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}/members  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "RemoveRoleMembers",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleMembersRequest"
            }
          },
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]",
              "ROLE:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Remove Role Members",
        "tags": [
          "Roles"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ROLE [READ]\u0026#39; \u0026lt;/br\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}/members  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "GetRoleMembers",
        "parameters": [
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleMembersResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ROLE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Role Members",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ROLE:ADMIN [UPDATE]\u0026#39; or \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39; \u0026lt;/br\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;Admin roles has its members listed in the role.\u0026lt;/p\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;Role can only be assigned to other users by the role\u0026#39;s manager.\u0026lt;/p\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}/members  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "AddRoleMembers",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleMembersRequest"
            }
          },
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]",
              "ROLE:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add Role Members",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/roles/{roleId}/permissions": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;ROLE:ADMIN [UPDATE]\u0026#39; or \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint will REPLACE role\u0026#39;s permissions with the ones defined in body\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;In ranged schedule, first element will be start date, and second one will be end date\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Syntax reference\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Fields:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Seconds: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Minutes: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Hours: 0-23 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of month: 1-31 * / , - L W\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Month: 1-12 JAN-DEC * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of week: 0-6 SUN-SAT * / , - L #\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Year: 1970-2099 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Special characters:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;*: all values in the fields, e.g. * in seconds fields indicates every second\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;,: separate items of a list, e.g. MON,WED,FRI in day of week\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \u0026#34;the last Friday\u0026#34; (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \u0026#34;the nearest business day to the 15th of the month.\u0026#34;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;#: must be followed by a number between one and five. It allows you to specify constructs such as \u0026#34;the second Friday\u0026#34; of a given month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}/permissions [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "UpdateRolePermissions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.Permissions"
            }
          },
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]",
              "ROLE:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Role Permissions",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/roles/{roleId}/permissions/{resource}/{action}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n                Required permission \u0026#39;ROLE:ADMIN [UPDATE]\u0026#39; or \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39; \u0026lt;/br\u0026gt;\n                \u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}/permissions/{resource}/{action}  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v4/admin/roles/{roleId}/permissions  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;",
        "operationId": "DeleteRolePermission",
        "parameters": [
          {
            "description": "Action",
            "in": "path",
            "name": "action",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Resource Name",
            "in": "path",
            "name": "resource",
            "required": true,
            "type": "string"
          },
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]",
              "ROLE:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Role Permission",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;ROLE:ADMIN [UPDATE]\u0026#39; Or \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint will update existing permission (bitwise OR the action) if found one with same resource, otherwise it will append a new permission\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;In ranged schedule, first element will be start date, and second one will be end date\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Syntax reference\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Fields:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Seconds: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Minutes: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Hours: 0-23 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of month: 1-31 * / , - L W\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Month: 1-12 JAN-DEC * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of week: 0-6 SUN-SAT * / , - L #\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Year: 1970-2099 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Special characters:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;*: all values in the fields, e.g. * in seconds fields indicates every second\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;,: separate items of a list, e.g. MON,WED,FRI in day of week\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \u0026#34;the last Friday\u0026#34; (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \u0026#34;the nearest business day to the 15th of the month.\u0026#34;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;#: must be followed by a number between one and five. It allows you to specify constructs such as \u0026#34;the second Friday\u0026#34; of a given month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n                \u0026lt;ul\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint(update): \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}/permissions  [PUT] \u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                        \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint(create): \u0026lt;i\u0026gt;/iam/v3/admin/roles/{roleId}/permissions  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;\n\t\t\t",
        "operationId": "AddRolePermission",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdatePermissionScheduleRequest"
            }
          },
          {
            "description": "Action",
            "in": "path",
            "name": "action",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Resource Name",
            "in": "path",
            "name": "resource",
            "required": true,
            "type": "string"
          },
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]",
              "ROLE:ADMIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add Role Permission",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/agerestrictions": {
      "get": {
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/agerestrictions  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Note:\u0026lt;/b\u0026gt;\n                        \u0026lt;dd\u0026gt;difference in V3 response, format difference: Pascal case =\u0026gt; Camel case\u0026lt;/dd\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]\u0026#39;",
        "operationId": "AdminGetAgeRestrictionStatusV2",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get age restriction status",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/agerestrictions  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]\u0026#39;",
        "operationId": "AdminUpdateAgeRestrictionConfigV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionRequest"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update age restriction config value",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/countries/agerestrictions": {
      "get": {
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/agerestrictions/countries  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]\u0026#39;",
        "operationId": "GetListCountryAgeRestriction",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/accountcommon.CountryAgeRestriction"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get List Country age restriction",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/countries/{countryCode}": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/agerestrictions/countries/{countryCode}  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]\u0026#39;",
        "operationId": "UpdateCountryAgeRestriction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CountryAgeRestrictionRequest"
            }
          },
          {
            "description": "Country Code ",
            "in": "path",
            "name": "countryCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.Country"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update country's age restriction",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users": {
      "get": {
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/search  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER [READ]\u0026#39;.",
        "operationId": "AdminSearchUsersV2",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "platform ID",
            "in": "query",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cursor that points to ID of first item in for the next page",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "The cursor that points to ID of last item in for the previous page",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "display name",
            "in": "query",
            "name": "displayName",
            "type": "string"
          },
          {
            "description": "the number of data retieved in a page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "login ID",
            "in": "query",
            "name": "loginId",
            "type": "string"
          },
          {
            "description": "platform user ID",
            "in": "query",
            "name": "platformUserId",
            "type": "string"
          },
          {
            "description": "role ID",
            "in": "query",
            "name": "roleId",
            "type": "string"
          },
          {
            "description": "user ID",
            "in": "query",
            "name": "userId",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.SearchUsersByPlatformIDResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Search Users",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}": {
      "get": {
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]\u0026#39;",
        "operationId": "AdminGetUserByUserIdV2",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get User By User Id",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\t\t\n\t\t\n\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\u0026#34;+\n\t\t\u0026#34;\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;This Endpoint support update user based on given data. \u0026lt;b\u0026gt;Single request can update single field or multi fields.\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; \u0026#34;+\n\t\t\u0026#34;\u0026lt;p\u0026gt;Supported field {Country, DisplayName, LanguageTag}\u0026lt;/p\u0026gt;\u0026#34;+\n\t\t\u0026#34;\u0026lt;p\u0026gt;Country use ISO3166-1 alpha-2 two letter, e.g. US.\u0026lt;/p\u0026gt;\u0026#34;+\n\t\t\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;Several case of updating email address\u0026lt;/b\u0026gt;\u0026#34;+\n\t\t\u0026#34;\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;User want to update email address of which have been verified, NewEmailAddress response field will be filled with new email address.\u0026lt;/li\u0026gt;\u0026#34;+\n\t\t\u0026#34;\u0026lt;li\u0026gt;User want to update email address of which have not been verified, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with new email address. \u0026lt;/li\u0026gt;\u0026#34;+\n\t\t\u0026#34;\u0026lt;li\u0026gt;User want to update email address of which have been verified and updated before, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with verified email before. NewEmailAddress response field will be filled with newest email address. \u0026lt;/li\u0026gt;",
        "operationId": "AdminUpdateUserV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequest"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10131\u003c/td\u003e\u003ctd\u003einvalid date of birth\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10155\u003c/td\u003e\u003ctd\u003ecountry is not defined\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10132\u003c/td\u003e\u003ctd\u003einvalid email address\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/ban": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [CREATE]\u0026#39;.",
        "operationId": "AdminBanUserV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BanCreateRequest"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Ban a single user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [READ]\u0026#39;.",
        "operationId": "AdminGetUserBanV2",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter ban to only returns the active one",
            "in": "query",
            "name": "activeOnly",
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.UserBanResponse"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user's bans",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/disable": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/status  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\n\t\tRequired permissions \u0026#39;ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]\u0026#39;\n\t\t\u0026lt;p\u0026gt;For \u0026lt;strong\u0026gt;Deletion Account\u0026lt;/strong\u0026gt; purpose fill the reason with:\u0026lt;/p\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;DeactivateAccount\u0026lt;/strong\u0026gt; : if your deletion request comes from user\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;AdminDeactivateAccount\u0026lt;/strong\u0026gt; : if your deletion request comes from admin\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;",
        "operationId": "AdminDisableUserV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.DisableUserRequest"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Disable a user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/enable": {
      "put": {
        "consumes": [
          "*/*"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/status  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\n\t\tRequired permissions \u0026#39;ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]\u0026#39;",
        "operationId": "AdminEnableUserV2",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Enable a user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/password": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/password  [PUT]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]\u0026#39;",
        "operationId": "AdminResetPasswordV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserPasswordUpdateRequest"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10142\u003c/td\u003e\u003ctd\u003enew password cannot be same with original\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10143\u003c/td\u003e\u003ctd\u003epassword not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update User Password",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}/link": {
      "delete": {
        "consumes": [
          "application/x-www-form-urlencoded",
          "text/plain"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]\u0026#39;.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steam\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oculus\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;android\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ios\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;device\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;discord\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Delete link of user\u0026#39;s account with platform. \u0026#39;justice\u0026#39; platform might have multiple accounts from different namespaces linked. platform_namespace need to be specified when the platform ID is \u0026#39;justice\u0026#39;.\n\t\t\t\u0026lt;br\u0026gt;Delete link of justice platform will enable password token grant and password update. \u0026lt;/p\u0026gt;",
        "operationId": "AdminDeletePlatformLinkV2",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace of the platform account to be deleted",
            "in": "formData",
            "name": "platform_namespace",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete the link of user's account with platform",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/roles": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: /iam/v3/admin/namespaces/{namespace}/users/{userId}/roles  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\t\n\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]\u0026#39;",
        "operationId": "AdminCreateUserRolesV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Save User Roles",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}/roles  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\n\t\tRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]\u0026#39;",
        "operationId": "AdminPutUserRolesV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update User Roles, will replace all the existing roles",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/public/namespaces/{namespace}/countries/{countryCode}/agerestrictions": {
      "get": {
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/agerestrictions/countries/{countryCode}  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\n\t\t",
        "operationId": "PublicGetCountryAgeRestriction",
        "parameters": [
          {
            "description": "Country Code ",
            "in": "path",
            "name": "countryCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.Country"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Public get age restriction by country code",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\u0026lt;ul\u0026gt;\n\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v4/public/namespaces/{namespace}/users  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Note:\u0026lt;/b\u0026gt;\n\t\u0026lt;dd\u0026gt; 1. v3 \u0026amp; v4 introduce optional verification code\u0026lt;/dd\u0026gt;\n\t\u0026lt;dd\u0026gt; 2. format difference（Pascal case =\u0026gt; Camel case)\u0026lt;/dd\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\u0026lt;p\u0026gt;Available Authentication Types:\u0026lt;/p\u0026gt;\n\u0026lt;ol\u0026gt;\n\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;EMAILPASSWD\u0026lt;/strong\u0026gt;: an authentication type used for new user registration through email.\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\n\u0026lt;p\u0026gt;Country use ISO3166-1 alpha-2 two letter, e.g. US.\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicCreateUserV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateRequest"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserCreateResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/forgotPassword": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/forgot  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Special note for publisher-game scenario:\u0026lt;/strong\u0026gt; Game Client should provide game namespace path parameter and Publisher Client should provide publisher namespace path parameter. \u0026lt;/p\u0026gt;\u0026#34;+\n\t\t\u0026#34;\u0026lt;p\u0026gt;The password reset code will be sent to the publisher account\u0026#39;s email address. \u0026lt;/p\u0026gt;",
        "operationId": "PublicForgotPasswordV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequest"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Request Password Reset Code",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/resetPassword": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/reset  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t",
        "operationId": "PublicResetPasswordV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ResetPasswordRequest"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10142\u003c/td\u003e\u003ctd\u003enew password cannot be same with original\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Reset User Password",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}": {
      "get": {
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint(Public): \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/{userId}  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint(Admin): \u0026lt;i\u0026gt;/iam/v3/admin/namespaces/{namespace}/users/{userId}  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Note:\u0026lt;/b\u0026gt;\n            \t\t\u0026lt;dd\u0026gt;format difference in response: Pascal case =\u0026gt; Camel case\u0026lt;/dd\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t",
        "operationId": "PublicGetUserByUserIDV2",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get User By User ID",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint([PUT]): \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me  [PUT]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint([PATCH]): \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint([PATCH]): \u0026lt;i\u0026gt;/iam/v4/public/namespaces/{namespace}/users/me  [PATCH]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Note:  \u0026lt;/b\u0026gt;\n\t\t\t\t\t\u0026lt;dd\u0026gt;1. Prefer [PATCH] if client support PATCH method\u0026lt;/dd\u0026gt;\n\t\t\t\t\t\u0026lt;dd\u0026gt;2. Difference in V3/v4 request body, format difference: Pascal case =\u0026gt; Camel case\u0026lt;/dd\u0026gt;\n\t\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;This Endpoint support update user based on given data. \u0026lt;b\u0026gt;Single request can update single field or multi fields.\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; \u0026#34;+\n\t\t\u0026#34;This endpoint require valid user access token to accessed. \u0026lt;p\u0026gt;Supported field {Country, DisplayName, LanguageTag}\u0026lt;/p\u0026gt;",
        "operationId": "PublicUpdateUserV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequest"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.UserResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10131\u003c/td\u003e\u003ctd\u003einvalid date of birth\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10155\u003c/td\u003e\u003ctd\u003ecountry is not defined\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10132\u003c/td\u003e\u003ctd\u003einvalid email address\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/{userId}/bans  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t",
        "operationId": "PublicGetUserBan",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter ban to only returns the active one",
            "in": "query",
            "name": "activeOnly",
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.UserBanResponse"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get user's bans",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}/password": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me/password  [PUT]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\n\t\tThis endpoint need a valid user access token",
        "operationId": "PublicUpdatePasswordV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserPasswordUpdateRequest"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10142\u003c/td\u003e\u003ctd\u003enew password cannot be same with original\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10143\u003c/td\u003e\u003ctd\u003epassword not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update User Password",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}/platforms/justice": {
      "get": {
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/{userId}/platforms/justice  [GET]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\n\t\tThis endpoint gets list justice platform account by providing publisher namespace and publisher userID.",
        "operationId": "GetListJusticePlatformAccounts",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": " Publisher User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.GetUserMapping"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get User Justice Platform Accounts",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}/platforms/{platformId}/link": {
      "delete": {
        "consumes": [
          "application/x-www-form-urlencoded",
          "text/plain"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/all  [DELETE]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\n\t\t\t\u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steam\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oculus\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;android\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ios\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;device\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;discord\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Delete link of user\u0026#39;s account with platform. \u0026#39;justice\u0026#39; platform might have multiple accounts from different namespaces linked. platform_namespace need to be specified when the platform ID is \u0026#39;justice\u0026#39;.\n\t\t\t\u0026lt;br\u0026gt;Delete link of justice platform will enable password token grant and password update. \u0026lt;/p\u0026gt;",
        "operationId": "PublicDeletePlatformLinkV2",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace of the platform account to be deleted",
            "in": "formData",
            "name": "platform_namespace",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete the link of user's account with platform",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "deprecated": true,
        "description": "\u0026lt;h2\u0026gt;The endpoint is going to be deprecated\u0026lt;/h2\u0026gt; \u0026lt;/br\u0026gt;\n\t\t\u0026lt;strong\u0026gt;Endpoint migration guide\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;b\u0026gt;Substitute endpoint: \u0026lt;i\u0026gt;/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}  [POST]\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n                \u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;Prerequisite:\u0026lt;/b\u0026gt; \n\t\tPlatform client configuration need to be added to database for specific platformId. Namespace service URL need to be specified (refer to required environment variables).\n\t\t\t\u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steam\u0026lt;/strong\u0026gt;: The ticket’s value is the authentication code returned by Steam.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt;: Steam\u0026#39;s user authentication method using OpenID 2.0. The ticket\u0026#39;s value is URL generated by Steam on web authentication\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Facebook OAuth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Google OAuth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oculus\u0026lt;/strong\u0026gt;: The ticket’s value is a string composed of Oculus\u0026#39;s user ID and the nonce separated by a colon (:).\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Twitch OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;android\u0026lt;/strong\u0026gt;: The ticket\u0026#39;s value is the Android’s device ID\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ios\u0026lt;/strong\u0026gt;: The ticket\u0026#39;s value is the iOS’s device ID.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;device\u0026lt;/strong\u0026gt;: Every device that doesn\u0026#39;t run Android and iOS is categorized as a device platform. The ticket\u0026#39;s value is the device’s ID.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;discord\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Discord OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;",
        "operationId": "PublicPlatformLinkV2",
        "parameters": [
          {
            "description": "Ticket from platform",
            "in": "formData",
            "name": "ticket",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10163\u003c/td\u003e\u003ctd\u003eplatform is already linked with the user account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Link user's account with platform",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/bans": {
      "get": {
        "description": "Required permission \u0026#39;ADMIN:BAN [READ]\u0026#39; \u0026lt;br\u0026gt;Ban type is the code\n\t\t\tavailable for ban assignment. It is applicable globally for any namespace.  \u0026lt;br\u0026gt;action code : 10201",
        "operationId": "AdminGetBansTypeV3",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.BansV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:BAN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get list of ban types",
        "tags": [
          "Bans"
        ]
      }
    },
    "/iam/v3/admin/bans/reasons": {
      "get": {
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:BAN [READ]\u0026#39;\u0026lt;/p\u0026gt;\nBan reasons is the code available to justify ban assignment. It is applicable globally for any namespace.\n\u0026lt;p\u0026gt;action code : 10202\u0026lt;/p\u0026gt;",
        "operationId": "AdminGetListBanReasonV3",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.BanReasonsV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:BAN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get list of ban reasons",
        "tags": [
          "Bans"
        ]
      }
    },
    "/iam/v3/admin/inputValidations": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:CONFIGURATION\u0026#39;[READ]\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;This endpoint is to get list of input validation configuration.\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;\u0026lt;code\u0026gt;regex\u0026lt;/code\u0026gt; parameter will be returned if \u0026lt;code\u0026gt;isCustomRegex\u0026lt;/code\u0026gt; is true. Otherwise, it will be empty.\u0026lt;/p\u0026gt;",
        "operationId": "AdminGetInputValidations",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.InputValidationsResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:CONFIGURATION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin Get Input Validations",
        "tags": [
          "InputValidations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:CONFIGURATION\u0026#39; [UPDATE]\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;This endpoint is used to update input validation configuration.\u0026lt;/p\u0026gt;\n\t\tSupported \u0026lt;code\u0026gt;field\u0026lt;/code\u0026gt;:\u0026lt;br\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;displayName\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;password\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;username\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;email\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;p\u0026gt;If \u0026lt;code\u0026gt;isCustomRegex\u0026lt;/code\u0026gt; is set to true, \u0026lt;code\u0026gt;regex\u0026lt;/code\u0026gt; parameter will be used as input validation and the other parameters will be ignored. Otherwise, \u0026lt;code\u0026gt;regex\u0026lt;/code\u0026gt; parameter will be ignored and regex for input validation will be generated based on the combination of the other parameters. \u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;If \u0026lt;code\u0026gt;allowUnicode\u0026lt;/code\u0026gt; is set to true, unicode regex pattern will be use as the input validation and the other parameters will be ignored.\u0026lt;/p\u0026gt;\n\t\tSupported \u0026lt;code\u0026gt;letterCase\u0026lt;/code\u0026gt;:\u0026lt;br\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;lowercase\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;uppercase\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;mixed: uppercase and lowercase\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;mixed: uppercase and/or lowercase\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\tflexible special character non words with \u0026lt;code\u0026gt;allowAllSpecialCharacters\u0026lt;/code\u0026gt;\u0026lt;br\u0026gt;\n\t\t\u0026lt;p\u0026gt;if \u0026lt;code\u0026gt;allowAllSpecialCharacters\u0026lt;/code\u0026gt; is set to true \u0026lt;code\u0026gt;specialCharacters\u0026lt;/code\u0026gt; will forced to empty. \u0026lt;p\u0026gt;\n\t\tSupported \u0026lt;code\u0026gt;specialCharacterLocation\u0026lt;/code\u0026gt;:\u0026lt;br\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;anywhere\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;middle\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;p\u0026gt;If \u0026lt;code\u0026gt;specialCharacters\u0026lt;/code\u0026gt; is empty, \u0026lt;code\u0026gt;specialCharacterLocation\u0026lt;/code\u0026gt; and \u0026lt;code\u0026gt;maxRepeatingSpecialCharacter\u0026lt;/code\u0026gt; will be ignored.\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;\u0026lt;code\u0026gt;minCharType\u0026lt;/code\u0026gt; is used to identify how many required criteria in the regex. The supported criteria are number, letter, special character, and letter case. If set to 0 or 1 means all criteria are optional. It can be set as much as the number of criteria enabled.\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;If \u0026lt;code\u0026gt;blockedWord\u0026lt;/code\u0026gt; is set by admin, any input from user which contain kind of blocked word(s) will be blocked for create/upgrade/update account\u0026lt;/p\u0026gt;\n\t\t",
        "operationId": "AdminUpdateInputValidations",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/model.InputValidationUpdatePayload"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:CONFIGURATION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin Update Input Validations",
        "tags": [
          "InputValidations"
        ]
      }
    },
    "/iam/v3/admin/inputValidations/{field}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:CONFIGURATION\u0026#39; [DELETE]\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;This endpoint is used to reset input validation to the default input validation configurations\u0026lt;/p\u0026gt;",
        "operationId": "AdminResetInputValidations",
        "parameters": [
          {
            "description": "Name of the input validation field to reset: email, username, displayName, or password",
            "in": "path",
            "name": "field",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:CONFIGURATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin Reset Input Validations",
        "tags": [
          "InputValidations"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/admins": {
      "get": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:USER [READ] permission.\n\nList all users that has admin role (role that has admin_role attribute set to true). \n",
        "operationId": "ListAdminsV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the next page. Composite values consist of created_at and id, the value is base64 encoded",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the previous page. Composite values consist of created_at and id, the value is base64 encoded",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "The maximum number of data that may be returned (1...100)",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.GetUsersResponseWithPaginationV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List User Admins",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/agerestrictions": {
      "get": {
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]\u0026#39;\u0026lt;br\u0026gt;action code: 10138",
        "operationId": "AdminGetAgeRestrictionStatusV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10169\u003c/td\u003e\u003ctd\u003eage restriction not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get age restriction status",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]\u0026#39; \u0026lt;br\u0026gt; action code: 10122",
        "operationId": "AdminUpdateAgeRestrictionConfigV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update age restriction config value",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/agerestrictions/countries": {
      "get": {
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]\u0026lt;br\u0026gt;action code : 10139",
        "operationId": "AdminGetListCountryAgeRestrictionV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.CountryV3Response"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get List Country age restriction",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/agerestrictions/countries/{countryCode}": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]\u0026#39;\u0026lt;br\u0026gt;action code: 10123",
        "operationId": "AdminUpdateCountryAgeRestrictionV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CountryAgeRestrictionV3Request"
            }
          },
          {
            "description": "Country Code ",
            "in": "path",
            "name": "countryCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.CountryV3Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update country's age restriction",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/bans/users": {
      "get": {
        "description": "Required permission \u0026#39;ADMIN:BAN [READ]\u0026#39; \u0026lt;br\u0026gt;Ban type is the code\n\t\t\tavailable for ban assignment. It is applicable globally for any namespace.  \u0026lt;br\u0026gt;action code : 10201",
        "operationId": "AdminGetBannedUsersV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter ban based on the ban status. If you set this, only active ban returned",
            "in": "query",
            "name": "activeOnly",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "Filter ban based on the ban type. You can see list of ban from GET /iam/v3/admin/bans",
            "in": "query",
            "name": "banType",
            "type": "string"
          },
          {
            "description": "Pagination configuration for how much data need to be retrieved in on request, should be in positive number. Default is 20",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Pagination configuration of from what point the record will be selected, should be in positive number. Default is 0",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserBanV3Response"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/model.GetUserBanV3Response"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/model.GetUserBanV3Response"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:BAN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get list of user filtered by ban types",
        "tags": [
          "Bans"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:BAN [CREATE]\u0026#39;.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Bulk ban user with specific type of ban. Ban types and reason can be queried. The maximum limit value is 100 userIDs\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;action code : 10141 \u0026lt;/p\u0026gt;\n",
        "operationId": "AdminBanUserBulkV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BulkBanCreateRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.ListBulkUserBanResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:BAN [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Bulk ban user",
        "tags": [
          "Bans"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/bans/users/disabled": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:BAN [UPDATE]\u0026#39;.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;disable bulk ban user. The maximum limit value is 100\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;action code : 10142 \u0026lt;/p\u0026gt;\n",
        "operationId": "AdminUnbanUserBulkV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BulkUnbanCreateRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.ListBulkUserBanResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:BAN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Bulk unban user",
        "tags": [
          "Bans"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/bantypes": {
      "get": {
        "description": "Required permission \u0026#39;ADMIN:BAN [READ]\u0026#39; \u0026lt;br\u0026gt;Ban type is the code\n\t\t\tavailable for ban assignment. It is applicable globally for any namespace.  \u0026lt;br\u0026gt;action code : 10201",
        "operationId": "AdminGetBansTypeWithNamespaceV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.BansV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:BAN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get list of ban types",
        "tags": [
          "Bans"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/clients": {
      "get": {
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:CLIENT [READ]\u0026#39;\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;action code: 10308\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGetClientsByNamespaceV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "the maximum number of data that may be returned (1...100)",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "the count to skip",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientsV3Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLIENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get clients by namespace",
        "tags": [
          "Clients"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add a new OAuth 2.0 client. Protected by the permission: ADMIN:NAMESPACE:{namespace}:CLIENT [CREATE]\u0026lt;br\u0026gt;\n\t\tA new client automatically granted with these scopes: commerce, account, analytics, publishing, social.\u0026lt;br\u0026gt;\n\t\taction code: 10301\u0026lt;br\u0026gt;\n\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Fields Description:\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;clientId\u0026lt;/strong\u0026gt; : The client ID. e.g f815e5c44f364993961be3b3f26a7bf4\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;clientName\u0026lt;/strong\u0026gt; : The client name. e.g E-commerce\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;secret\u0026lt;/strong\u0026gt; : The client\u0026#39;s secret. It\u0026#39;s empty if the client\u0026#39;s type is a public client. Otherwise, the client secret is required\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;namespace\u0026lt;/strong\u0026gt; : The namespace where the client lives. e.g sample-game\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;redirectUri\u0026lt;/strong\u0026gt; : Contains the redirect URI used in OAuth callback. e.g https://example.net/platform\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oauthClientType\u0026lt;/strong\u0026gt; : The OAuth 2.0 client type. The client type determines whether the authorization needs Proof Of Key Exchange or not. \n\t\t\t\t\tA public client type doesn\u0026#39;t have a client secret and should use PKCE flow. \n\t\t\t\t\tA confidential client type has a client secret and don\u0026#39;t use PKCE flow\n\t\t\t\u0026lt;ul\u0026gt;Supported oAuthClientType :\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;Public\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;Confidential\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;audiences\u0026lt;/strong\u0026gt; : List of target client IDs who is intended to receive the token. e.g [\u0026#34;eaaa65618fe24293b00a61454182b435\u0026#34;, \u0026#34;40073ee9bc3446d3a051a71b48509a5d\u0026#34;]\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;baseUri\u0026lt;/strong\u0026gt; : A base URI of the application. It is used for making sure the token is intended to be used by the client. e.g https://example.net/platform\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;clientPermissions\u0026lt;/strong\u0026gt; : Contains the client\u0026#39;s permissions\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;deletable\u0026lt;/strong\u0026gt; : The flag to identify whether client is deletable (optional). default value: true\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;clientPlatform\u0026lt;/strong\u0026gt;: available client platform (optional). default value: \u0026#34;\u0026#34;\n  \t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;Playstation\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;Xbox\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;Steam\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;Epic\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;IOS\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;GooglePlay\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;Nintendo\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;/li\u0026gt;\n        \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twoFactorEnabled\u0026lt;/strong\u0026gt;: The flag to indicate whether 2FA validation is enable for this client. default value: false\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oauthAccessTokenExpiration\u0026lt;/strong\u0026gt;: a configurable expiration time for \u0026lt;strong\u0026gt;access_token\u0026lt;/strong\u0026gt;, default value: 0 (mean fetch value from environment variable) \u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oauthRefreshTokenExpiration\u0026lt;/strong\u0026gt;: a configurable expiration time for \u0026lt;strong\u0026gt;refresh_token\u0026lt;/strong\u0026gt;, default value: 0 (mean fetch value from environment variable)\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;/p\u0026gt;\n\t\t",
        "operationId": "AdminCreateClientV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreationV3Request"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientV3Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10364\u003c/td\u003e\u003ctd\u003eclient exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLIENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create Client",
        "tags": [
          "Clients"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/clients/{clientId}": {
      "delete": {
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:CLIENT [DELETE]\u0026#39;\u0026lt;br\u0026gt;action code : 10310",
        "operationId": "AdminDeleteClientV3",
        "parameters": [
          {
            "description": "Client ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10365\u003c/td\u003e\u003ctd\u003eclient not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20009\u003c/td\u003e\u003ctd\u003erequest_conflict\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLIENT [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Client",
        "tags": [
          "Clients"
        ]
      },
      "get": {
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:CLIENT [READ]\u0026#39;\u0026lt;br\u0026gt;action code: 10309",
        "operationId": "AdminGetClientsbyNamespacebyIDV3",
        "parameters": [
          {
            "description": "Client ID",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientV3Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10365\u003c/td\u003e\u003ctd\u003eclient not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLIENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get clients by namespace and client id",
        "tags": [
          "Clients"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates an OAuth 2.0 client. Protected by the permission: ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE].\n\t\t\t\tSpecify only the fields you want to update in the request payload, e.g. {\u0026#34;ClientName\u0026#34;:\u0026#34;E-commerce\u0026#34;, \u0026#34;BaseUri\u0026#34;:\u0026#34;https://example.net\u0026#34;}\n\t\t\u0026lt;br\u0026gt; action code: 10302\u0026lt;br\u0026gt;\n\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Fields Description:\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;clientName\u0026lt;/strong\u0026gt; : The client name. It should not be empty if the field exists in the body. e.g E-commerce\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;namespace\u0026lt;/strong\u0026gt; : The namespace where the client lives. e.g sample-game\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;redirectUri\u0026lt;/strong\u0026gt; : Contains the redirect URI used in OAuth callback. It should not be empty if the field exists in the body.  e.g https://example.net/platform\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;audiences\u0026lt;/strong\u0026gt; : List of target client IDs who is intended to receive the token. e.g [\u0026#34;eaaa65618fe24293b00a61454182b435\u0026#34;, \u0026#34;40073ee9bc3446d3a051a71b48509a5d\u0026#34;]\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;baseUri\u0026lt;/strong\u0026gt; : A base URI of the application. It is used in the audience checking for making sure the token is used by the right resource server. Required if the application type is a server. e.g https://example.net/platform\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;clientPermissions\u0026lt;/strong\u0026gt; : Contains the client\u0026#39;s permissions\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;deletable\u0026lt;/strong\u0026gt; : The flag to identify whether client is deletable (optional). e.g. true\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;clientPlatform\u0026lt;/strong\u0026gt; : available client platform (optional). default value: \u0026#34;\u0026#34;.\n  \t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;Playstation\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;Xbox\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;Steam\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;Epic\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;IOS\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;GooglePlay\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;Nintendo\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;/li\u0026gt;\n        \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twoFactorEnabled\u0026lt;/strong\u0026gt;: The flag to indicate whether 2FA validation is enable for this client. default value: false\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oauthAccessTokenExpiration\u0026lt;/strong\u0026gt;: a configurable expiration time for \u0026lt;strong\u0026gt;access_token\u0026lt;/strong\u0026gt;, default value: 0 (mean fetch value from environment variable)\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oauthRefreshTokenExpiration\u0026lt;/strong\u0026gt;: a configurable expiration time for \u0026lt;strong\u0026gt;refresh_token\u0026lt;/strong\u0026gt;, default value: 0 (mean fetch value from environment variable)\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;/p\u0026gt;",
        "operationId": "AdminUpdateClientV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientUpdateV3Request"
            }
          },
          {
            "description": "Client ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientV3Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10365\u003c/td\u003e\u003ctd\u003eclient not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Client",
        "tags": [
          "Clients"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:CLIENT\u0026#39; [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;action code: 10303\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminAddClientPermissionsV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.ClientPermissionsV3"
            }
          },
          {
            "description": "Client ID, should follow UUID version 4 without hypen",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10365\u003c/td\u003e\u003ctd\u003eclient not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add Client Permissions",
        "tags": [
          "Clients"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;action code: 10307\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminUpdateClientPermissionV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.ClientPermissionsV3"
            }
          },
          {
            "description": "Client ID, should follow UUID version 4 without hypen",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10365\u003c/td\u003e\u003ctd\u003eclient not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Client Permissions",
        "tags": [
          "Clients"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions/{resource}/{action}": {
      "delete": {
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]\u0026#39;\u0026lt;br\u0026gt;action code : 10304",
        "operationId": "AdminDeleteClientPermissionV3",
        "parameters": [
          {
            "description": "Action, value must be in range 1-15",
            "in": "path",
            "name": "action",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Client ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Resource Name",
            "in": "path",
            "name": "resource",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10365\u003c/td\u003e\u003ctd\u003eclient not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Client Permission",
        "tags": [
          "Clients"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/all/clients": {
      "get": {
        "description": "This is the API to Get All Active 3rd Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:*:CLIENT [READ] resource",
        "operationId": "RetrieveAllThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "All Active Third Party Credential Retrieved",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Third Party Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PLATFORM:*:CLIENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get All Third Party Platform Credential",
        "tags": [
          "Third Party Credential"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/all/clients/active": {
      "get": {
        "description": "This is the API to Get All Active 3rd Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:*:CLIENT [READ] resource",
        "operationId": "RetrieveAllActiveThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "All Active Third Party Credential Retrieved",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Third Party Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PLATFORM:*:CLIENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get All Active Third Party Platform Active Credential",
        "tags": [
          "Third Party Credential"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/sso": {
      "get": {
        "description": "This is the API to Get All Active SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:*:SSO [READ] resource",
        "operationId": "RetrieveAllSSOLoginPlatformCredentialV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "the maximum number of data that may be returned (1...100), default 100",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Offset, default 0",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "All Active SSO Credential Retrieved",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.SSOPlatformCredentialResponse"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "SSO Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PLATFORM:*:SSO [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get All SSO Platform Credential",
        "tags": [
          "SSO Credential"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/clients": {
      "delete": {
        "description": "This is the API to Delete 3rd Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [DELETE] resource",
        "operationId": "DeleteThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete Process Successful"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Third Party Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Third Party Platform Credential",
        "tags": [
          "Third Party Credential"
        ]
      },
      "get": {
        "description": "This is the API to Get 3rd Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [READ] resource",
        "operationId": "RetrieveThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Third Party Credential Found",
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Third Party Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve Third Party Platform Credential",
        "tags": [
          "Third Party Credential"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;This is the API to Add 3rd Platform Credential.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [CREATE] resource.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;apple\u0026lt;/strong\u0026gt; is base64 encoded private key.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;No secret for \u0026lt;strong\u0026gt;awscognito\u0026lt;/strong\u0026gt;, we only need to configure AWS Cognito Region and User Pool\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;discord\u0026lt;/strong\u0026gt; is client secret of the twitch client id.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;epicgames\u0026lt;/strong\u0026gt; is client secret of the epicgames client id.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt; is client secret of the facebook client id.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt; is client secret of the google OAuth client.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;No secret for \u0026lt;strong\u0026gt;nintendo\u0026lt;/strong\u0026gt;, we only need to configure app id of the game\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;No secret for \u0026lt;strong\u0026gt;netflix\u0026lt;/strong\u0026gt;, we configure the Root, Public, Private Key certificate pem file and target environment; value: [sandbox, production]\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;oculus\u0026lt;/strong\u0026gt; is app secret of the oculus app.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;ps4, ps5, and ps4web\u0026lt;/strong\u0026gt; is client secret of the psn web server.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;stadia\u0026lt;/strong\u0026gt; is the google cloud service account in base64 encode JSON format.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;stadiaweb\u0026lt;/strong\u0026gt; is client secret of the google OAuth client.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;steam\u0026lt;/strong\u0026gt; is the Steam Web API Key.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt; is the Steam Web API Key.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt; is client secret of the twitch client.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;live\u0026lt;/strong\u0026gt; is the Relying Party Private Key in base64 encode PEM format.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;xblwebapi\u0026lt;/strong\u0026gt; is client secret of the xbl client.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;If generic oauth flow is set to true: \u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;ul\u0026gt;\n\t\t\t\t\t \u0026lt;li\u0026gt;Current supported value for TokenAuthenticationType is \u0026lt;strong\u0026gt;idToken\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\t \u0026lt;li\u0026gt;\u0026lt;code\u0026gt;TokenClaimsMapping\u0026lt;/code\u0026gt; is used to extract user info from idToken claims. \n\t\t\t\t\t Its a JSON format with key should be \u0026lt;code\u0026gt;name\u0026lt;/code\u0026gt;, \u0026lt;code\u0026gt;email\u0026lt;/code\u0026gt; and \u0026lt;code\u0026gt;avatarUrl\u0026lt;/code\u0026gt; \n\t\t\t\t\t since IAM will look up for these key when extracting user info.\u0026lt;/li\u0026gt;\n\t\t\t\t\t \u0026lt;/ul\u0026gt;\n\t\t",
        "operationId": "UpdateThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Third Party Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Third Party Platform Credential",
        "tags": [
          "Third Party Credential"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;This is the API to Add 3rd Platform Credential.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [CREATE] resource.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;apple\u0026lt;/strong\u0026gt; is base64 encoded private key.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;No secret for \u0026lt;strong\u0026gt;awscognito\u0026lt;/strong\u0026gt;, we only need to configure AWS Cognito Region and User Pool\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;discord\u0026lt;/strong\u0026gt; is client secret of the twitch client id.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;epicgames\u0026lt;/strong\u0026gt; is client secret of the epicgames client id.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt; is client secret of the facebook client id.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt; is client secret of the google OAuth client.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;No secret for \u0026lt;strong\u0026gt;nintendo\u0026lt;/strong\u0026gt;, we only need to configure app id of the game\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;No secret for \u0026lt;strong\u0026gt;netflix\u0026lt;/strong\u0026gt;, we configure the Root, Public, Private Key certificate pem file and target environment; value: [sandbox, production]\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;oculus\u0026lt;/strong\u0026gt; is app secret of the oculus app.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;ps4, ps5, and ps4web\u0026lt;/strong\u0026gt; is client secret of the psn web server.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;stadia\u0026lt;/strong\u0026gt; is the google cloud service account in base64 encode JSON format.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;stadiaweb\u0026lt;/strong\u0026gt; is client secret of the google OAuth client.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;steam\u0026lt;/strong\u0026gt; is the Steam Web API Key.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt; is the Steam Web API Key.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt; is client secret of the twitch client.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;live\u0026lt;/strong\u0026gt; is the Relying Party Private Key in base64 encode PEM format.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The secret for \u0026lt;strong\u0026gt;xblwebapi\u0026lt;/strong\u0026gt; is client secret of the xbl client.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;If generic oauth flow is set to true: \u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;ul\u0026gt;\n\t\t\t\t\t \u0026lt;li\u0026gt;Current supported value for TokenAuthenticationType is \u0026lt;strong\u0026gt;idToken\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\t \u0026lt;li\u0026gt;\u0026lt;code\u0026gt;TokenClaimsMapping\u0026lt;/code\u0026gt; is used to extract user info from idToken claims. \n\t\t\t\t\t Its a JSON format with key should be \u0026lt;code\u0026gt;name\u0026lt;/code\u0026gt;, \u0026lt;code\u0026gt;email\u0026lt;/code\u0026gt; and \u0026lt;code\u0026gt;avatarUrl\u0026lt;/code\u0026gt; \n\t\t\t\t\t since IAM will look up for these key when extracting user info.\u0026lt;/li\u0026gt;\n\t\t\t\t\t \u0026lt;/ul\u0026gt;\n\t\t",
        "operationId": "AddThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Third Party Credential Created",
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add Third Party Platform Credential",
        "tags": [
          "Third Party Credential"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/clients/domain": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;This is the API to unregister 3rd Platform domain.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;It needs ADMIN:NAMESPACE:{namespace}:CLIENTDOMAIN [DELETE] resource.\u0026lt;/p\u0026gt;\n\t\t",
        "operationId": "DeleteThirdPartyLoginPlatformDomainV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.PlatformDomainDeleteRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Domain unregister succeeded"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Platform client not found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLIENTDOMAIN [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Unregister Third Party Platform Credential's domain",
        "tags": [
          "Third Party Credential"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;This is the API to set 3rd Platform domain.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;It needs ADMIN:NAMESPACE:{namespace}:CLIENTDOMAIN [UPDATE] resource.\u0026lt;/p\u0026gt;\n\t\t",
        "operationId": "UpdateThirdPartyLoginPlatformDomainV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.PlatformDomainUpdateRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Domain config updated",
            "schema": {
              "$ref": "#/definitions/model.PlatformDomainResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Platform client not found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLIENTDOMAIN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Set Third Party Platform Credential's domain",
        "tags": [
          "Third Party Credential"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/sso": {
      "delete": {
        "description": "This is the API to Delete SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [DELETE] resource",
        "operationId": "DeleteSSOLoginPlatformCredentialV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete Process Successful"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "SSO Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete SSO Platform Credential",
        "tags": [
          "SSO Credential"
        ]
      },
      "get": {
        "description": "This is the API to Get SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [READ] resource",
        "operationId": "RetrieveSSOLoginPlatformCredential",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "SSO Credential Found",
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "SSO Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve SSO Platform Credential",
        "tags": [
          "SSO Credential"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "This is the API to Delete SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [UPDATE] resource",
        "operationId": "UpdateSSOPlatformCredential",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "SSO Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update SSO Platform Credential",
        "tags": [
          "SSO Credential"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This is the API to Add SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [CREATE] resource.\u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;discourse\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;the ssoUrl of the discourse is the discourse forum url. example: https://forum.example.com\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;azure with SAML\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;b\u0026gt;appId\u0026lt;/b\u0026gt; is an application identifier in IdP, in azure it\u0026#39;s called EntityID\n\t\t\t\u0026lt;b\u0026gt;acsUrl\u0026lt;/b\u0026gt; is an endpoint on the service provider where the identity provider will redirect to with its authentication response. example: /iam/v3/sso/saml/azuresaml/authenticate \n\t\t\t\u0026lt;b\u0026gt;federationMetadataUrl\u0026lt;/b\u0026gt; is an endpoint on the Identity Provider(IdP) to get IdP federation metadata for service provider to build trust relationship\n\t\t\t\u0026lt;/ul\u0026gt;",
        "operationId": "AddSSOLoginPlatformCredential",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "SSO Credential Created",
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add SSO Platform Credential",
        "tags": [
          "SSO Credential"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/users/{platformUserId}": {
      "get": {
        "description": "Get User By Platform User ID\n\t\t\nThis endpoint return user information by given platform ID and platform user ID \n\n\u0026lt;strong\u0026gt;nintendo platform user ID\u0026lt;/strong\u0026gt;: NSA ID need to be appended with Environment ID using colon as separator. e.g kmzwa8awaa:dd1\n",
        "operationId": "AdminGetUserByPlatformUserIDV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform User ID",
            "in": "path",
            "name": "platformUserId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Admin Get User By Platform User ID",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/roles/{roleId}/users": {
      "get": {
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER [READ]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint search admin users which have the roleId\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Notes : this endpoint only accept admin role. Admin Role is role which have admin status and members.\n\t\t\tUse endpoint [GET] /roles/{roleId}/admin to check the role status\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;action code : 10140",
        "operationId": "GetAdminUsersByRoleIdV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the next page",
            "in": "query",
            "name": "after",
            "type": "integer"
          },
          {
            "description": "The cursor that points to query data for the previous page",
            "in": "query",
            "name": "before",
            "type": "integer"
          },
          {
            "description": "The maximum number of data that may be returned (1...100)",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUsersResponseWithPaginationV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10157\u003c/td\u003e\u003ctd\u003especified role is not admin role\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10156\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Admin Users By RoleId",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users": {
      "get": {
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER [READ]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint search user who owns the given email address\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;action code : 10132",
        "operationId": "AdminGetUserByEmailAddressV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Email Address, should follow OWASP email format",
            "in": "query",
            "name": "emailAddress",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get User By Email Address",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/bulk": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "List User By User ID\nThis endpoint requires ADMIN:NAMESPACE:{namespace}:USER [READ] permission.\nThis endpoint intended to list user information from the given list of userID and namespace\n",
        "operationId": "AdminListUserIDByUserIDsV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserIDsRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ListUserInformationResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List User By User ID",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/invite": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:INVITE [CREATE]\n\nUse this endpoint to invite admin or non-admin user and assign role to them. The role must be scoped to namespace.\nSubstitute the namespace in path parameter to desired role\u0026#39;s namespace\u0026#39;. An admin user can only\nassign role to namespaces that the admin user has the required permission. \nRole is optional, if not specified then it will only assign User role\n\nThe invited admin will also assigned with \u0026#34;User\u0026#34; role by default.\n",
        "operationId": "AdminInviteUserV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.InviteUserRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.InviteUserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:INVITE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Invite User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/platforms/justice": {
      "get": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:USER [READ] permission.\n\nReturns list of users ID and namespace with their Justice platform account, under a namespace. If user\ndoesn\u0026#39;t have Justice platform account, the linkedPlatforms will be empty array.\u0026#39;\n",
        "operationId": "AdminListUsersV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "number of returned data, default 100",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "number of offset, default 0",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/accountcommon.ListUsersWithPlatformAccountsResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin List Users V3",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/search": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission ADMIN:NAMESPACE:{namespace}:USER [READ]\u0026lt;/p\u0026gt;\n               \u0026lt;p\u0026gt;Endpoint behavior :\n               \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;by default this endpoint searches all users on the specified namespace\u0026lt;/li\u0026gt;\n               \u0026lt;li\u0026gt;if query parameter is defined, endpoint will search users whose email address, display name, username, or third party partially match with the query\u0026lt;/li\u0026gt;\n               \u0026lt;li\u0026gt;if startDate and endDate parameters is defined, endpoint will search users which created on the certain date range\u0026lt;/li\u0026gt;\n               \u0026lt;li\u0026gt;if query, startDate and endDate parameters are defined, endpoint will search users whose email address and display name match and created on the certain date range\u0026lt;/li\u0026gt;\n               \u0026lt;li\u0026gt;if startDate parameter is defined, endpoint will search users that created start from the defined date\u0026lt;/li\u0026gt;\n               \u0026lt;li\u0026gt;if endDate parameter is defined, endpoint will search users that created until the defined date\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;if platformId parameter is defined and by parameter is using thirdparty, endpoint will search users based on the platformId they have linked to \u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;if platformBy parameter is defined and by parameter is using thirdparty, endpoint will search users based on the platformUserId or platformDisplayName they have linked to, example value: platformUserId or platformDisplayName\u0026lt;/li\u0026gt;\n               \u0026lt;li\u0026gt;if limit is not defined, The default limit is 100\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\u0026lt;/p\u0026gt;\n             \u0026lt;br\u0026gt;action code : 10133",
        "operationId": "AdminSearchUserV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Search by given attribute, possible values are emailAddress, displayName, username, and thirdPartyPlatform",
            "in": "query",
            "name": "by",
            "type": "string"
          },
          {
            "description": "End Date, format YYYY-MM-DD",
            "in": "query",
            "name": "endDate",
            "type": "string"
          },
          {
            "description": "the maximum number of data that may be returned (1...100), default 100",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Offset, default 0",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "Search platformBy given attribute, possible values are platformDisplayName",
            "in": "query",
            "name": "platformBy",
            "type": "string"
          },
          {
            "description": "Platform Id that want to be searched, supported values: steam, steamopenid, psn, xbox, epicgames, stadia, nintendo, oculus, aws cognito, facebook, google, discord, twitch, snapchat or amazon",
            "in": "query",
            "name": "platformId",
            "type": "string"
          },
          {
            "description": "Query, can be either email address or display name",
            "in": "query",
            "name": "query",
            "type": "string"
          },
          {
            "description": "Start Date, format YYYY-MM-DD",
            "in": "query",
            "name": "startDate",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.SearchUsersResponseWithPaginationV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Search User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/search/bulk": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER [READ]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint search user by the list of email addresses\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;action code : 10132",
        "operationId": "AdminGetBulkUserByEmailAddressV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ListEmailAddressRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ListUserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Bulk User By Email Address",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]\u0026#39;",
        "operationId": "AdminGetUserByUserIdV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin Get User By User Id",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;This Endpoint support update user based on given data. \u0026lt;b\u0026gt;Single request can update single field or multi fields.\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; \n\u0026lt;p\u0026gt;Supported field {country, displayName, emailAddress, languageTag, dateOfBirth}\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Country use ISO3166-1 alpha-2 two letter, e.g. US.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Date of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\u0026lt;/p\u0026gt;\n\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;Several case of updating email address\u0026lt;/b\u0026gt;\n\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;User want to update email address of which have been verified, NewEmailAddress response field will be filled with new email address.\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;User want to update email address of which have not been verified, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with new email address. \u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;User want to update email address of which have been verified and updated before, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with verified email before. NewEmailAddress response field will be filled with newest email address. \u0026lt;/li\u0026gt;\n\u0026lt;p\u0026gt;action code : 10103 \u0026lt;/p\u0026gt;",
        "operationId": "AdminUpdateUserV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [READ]\u0026#39;\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint retrieve the first page of the data if after and before parameters is empty\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;action code : 10126\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGetUserBanV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter ban based on the ban status. If you set this, only active ban returned",
            "in": "query",
            "name": "activeOnly",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "Filter ban based on the date creation. If you set this, only user bans created after the date returned. The date is in ISO-8601. Example value: 2019-05-18T07:17:45Z. \u003cem\u003eDoesn't work yet\u003c/em\u003e",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "Filter ban based on the date creation. If you set this, only user bans created before the date returned. The date is in ISO-8601. Example value: 2019-05-18T07:17:45Z. \u003cem\u003eDoesn't work yet\u003c/em\u003e",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "The number of data returned in one query. The maximum value of the limit is 100 and the minimum value of the limit is 1. If you set this into -1, then it returns all data. Default: -1. \u003cem\u003eDoesn't work yet\u003c/em\u003e.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserBanV3Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user's bans",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [CREATE]\u0026#39;.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Bans a user with specific type of ban. Ban types and reason can be queried. \u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;action code : 10141 \u0026lt;/p\u0026gt;\n",
        "operationId": "AdminBanUserV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BanCreateRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Ban a single user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans/{banId}": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId}\n[UPDATE] \u0026lt;br\u0026gt;Set ban status for a single user for a specific ban. Retrieve\nuser ban and choose the ban ID. Set the form parameter to true/false to enable\nor disable the ban. \u0026lt;br\u0026gt;action code : 10142\u0026#39;\n",
        "operationId": "AdminUpdateUserBanV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BanUpdateRequest"
            }
          },
          {
            "description": "Ban ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "banId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10145\u003c/td\u003e\u003ctd\u003edisallow game access publisher user's ban\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Enable or disable ban for a single user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/code/request": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;\n\u0026lt;p\u0026gt;The verification code is sent to email address.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Available contexts for use : \u0026lt;/p\u0026gt;\n\u0026lt;ol\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;UserAccountRegistration\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;p\u0026gt;a context type used for verifying email address in user account registration. It returns 409 if the email address already verified. \n\t\t\u0026lt;strong\u0026gt;\u0026lt;em\u0026gt;It is the default context if the Context field is empty\u0026lt;/em\u0026gt;\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\n\t\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;UpdateEmailAddress\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;p\u0026gt;a context type used for verify user before updating email address.(Without email address verified checking)\u0026lt;/p\u0026gt;\n\t\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;upgradeHeadlessAccount\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;p\u0026gt;The context is intended to be used whenever the email address wanted to be automatically verified on upgrading a headless account.  \n\t\t\tIf this context used, IAM rejects the request if the email address is already used by others by returning HTTP Status Code 409.\u0026lt;/p\u0026gt;\n\t\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\n\u0026lt;p\u0026gt;action code: 10116\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminSendVerificationCodeV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10146\u003c/td\u003e\u003ctd\u003euserID not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10140\u003c/td\u003e\u003ctd\u003euser verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Send verification code to user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/code/verify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Will verify account and consume code if validateOnly is set false in request body\u0026lt;/p\u0026gt;\t\n\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\nRedeems a verification code sent to a user to verify the user\u0026#39;s contact address is correct\n\u0026lt;p\u0026gt;Available ContactType : \u0026lt;b\u0026gt;email\u0026lt;b/\u0026gt; or \u0026lt;b\u0026gt;phone\u0026lt;b/\u0026gt; \u0026lt;/p\u0026gt;",
        "operationId": "AdminVerifyAccountV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserVerificationRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10149\u003c/td\u003e\u003ctd\u003everification contact type doesn't match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10148\u003c/td\u003e\u003ctd\u003everification code context doesn't match the required context\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10162\u003c/td\u003e\u003ctd\u003einvalid verification\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Verify or consume verification code sent to user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/codes": {
      "get": {
        "description": "[WARNING] This endpoint is only for testing purpose. \u0026lt;br\u0026gt;This endpoint get active user verification\n\t\tcode. There are 3 scenario of getting verification codes : after account registration, after reset password \n\t\trequest, and after headless account upgrade. All of them will be returned on this endpoint. Required permission\n \t\t\u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId}:CODE\u0026#39; [READ] \u0026lt;br\u0026gt;action code: 10146",
        "operationId": "getUserVerificationCode",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.VerificationCodeResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:CODE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get verification code sent to user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/deletion/status": {
      "get": {
        "description": "Required permissions \u0026#39;ADMIN:NAMESPACE:{namespace}:DELETIONSTATUS:USER:{userId} [READ]\u0026#39; \u0026lt;br\u0026gt;action code : 10145",
        "operationId": "AdminGetUserDeletionStatusV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserDeletionStatusResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DELETIONSTATUS:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get User Deletion Status",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permissions \u0026#39;ADMIN:NAMESPACE:{namespace}:DELETIONSTATUS:USER:{userId} [UPDATE]\u0026#39; \u0026lt;br\u0026gt;action code : 10144",
        "operationId": "AdminUpdateUserDeletionStatusV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdateUserDeletionStatusRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DELETIONSTATUS:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update User Deletion Status",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/headless/code/verify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;If validateOnly is set false, will upgrade headless account with verification code\u0026lt;/p\u0026gt; \nRequired permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;\n     \t\u0026lt;p\u0026gt;The endpoint upgrades a headless account by linking the headless account with the email address and the password.\n\tBy upgrading the headless account into a full account, the user could use the email address and password for using Justice IAM. \u0026lt;/p\u0026gt;\n     \t\u0026lt;p\u0026gt;The endpoint is a shortcut for upgrading a headless account and verifying the email address in one call. \n\tIn order to get a verification code for the endpoint, please check the send verification code endpoint. \u0026lt;/p\u0026gt;\n     \t\u0026lt;p\u0026gt;This endpoint also have an ability to update user data (if the user data field is specified) right after the upgrade account process is done.\u0026lt;br/\u0026gt;\n\tSupported user data fields :\n\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;displayName\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;dateOfBirth : format YYYY-MM-DD, e.g. 2019-04-29\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;country : format ISO3166-1 alpha-2 two letter, e.g. US\u0026lt;/li\u0026gt;\n\t\u0026lt;/ul\u0026gt;\n\u0026lt;br\u0026gt;action code : 10124\u0026lt;/p\u0026gt;",
        "operationId": "AdminUpgradeHeadlessAccountV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountWithVerificationCodeRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10155\u003c/td\u003e\u003ctd\u003ecountry is not defined\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10149\u003c/td\u003e\u003ctd\u003everification contact type doesn't match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10148\u003c/td\u003e\u003ctd\u003everification code context doesn't match the required context\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10153\u003c/td\u003e\u003ctd\u003euser exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10170\u003c/td\u003e\u003ctd\u003eaccount is already a full account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Verify or consume verification code. ",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/information": {
      "delete": {
        "description": "[WARNING] This endpoint is deleting user data from database directly by skipping GDPR flow.Required permissions \u0026#39;ADMIN:NAMESPACE:{namespace}:INFORMATION:USER:{userId} [DELETE]\u0026#39;.",
        "operationId": "AdminDeleteUserInformationV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:INFORMATION:USER:{userId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete user's information",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/logins/histories": {
      "get": {
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:HISTORY:LOGIN:USER:{userId} [READ]\u0026#39;\u0026lt;p\u0026gt;Notes for this endpoint: \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;This endpoint retrieve the first page of the data if `after` and `before` parameters is empty.\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;The maximum value of the limit is 100 and the minimum value of the limit is 1.\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;This endpoint retrieve the next page of the data if we provide `after` parameters with valid Unix timestamp.\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;This endpoint retrieve the previous page of the data if we provide `before` parameter with valid data Unix timestamp.\u0026lt;/li\u0026gt;\u0026lt;ul\u0026gt;",
        "operationId": "AdminGetUserLoginHistoriesV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the next page (In Unix timestamp formats, e.g:1545114248)",
            "in": "query",
            "name": "after",
            "type": "number"
          },
          {
            "description": "The cursor that points to query data for the previous page (In Unix timestamp formats, e.g:1545114248).",
            "in": "query",
            "name": "before",
            "type": "number"
          },
          {
            "description": "The number of data retrieved in a page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.LoginHistoriesResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:HISTORY:LOGIN:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get User's Login Histories",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/password": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]\u0026#39;",
        "operationId": "AdminResetPasswordV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserPasswordUpdateV3Request"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10142\u003c/td\u003e\u003ctd\u003enew password cannot be same with original\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10143\u003c/td\u003e\u003ctd\u003epassword not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update User Password",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/permissions": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [DELETE]\u0026#39;",
        "operationId": "AdminDeleteUserPermissionBulkV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/model.PermissionDeleteRequest"
              },
              "type": "array"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete User Permission",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [CREATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint will APPEND user\u0026#39;s permissions with the ones defined in body\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;In ranged schedule, first element will be start date, and second one will be end date\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Syntax reference\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Fields:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Seconds: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Minutes: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Hours: 0-23 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of month: 1-31 * / , - L W\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Month: 1-12 JAN-DEC * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of week: 0-6 SUN-SAT * / , - L #\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Year: 1970-2099 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Special characters:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;*: all values in the fields, e.g. * in seconds fields indicates every second\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;,: separate items of a list, e.g. MON,WED,FRI in day of week\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \u0026#34;the last Friday\u0026#34; (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \u0026#34;the nearest business day to the 15th of the month.\u0026#34;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;#: must be followed by a number between one and five. It allows you to specify constructs such as \u0026#34;the second Friday\u0026#34; of a given month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t",
        "operationId": "AdminAddUserPermissionsV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.Permissions"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add User Permissions",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint will REPLACE user\u0026#39;s permissions with the ones defined in body\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;In ranged schedule, first element will be start date, and second one will be end date\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Syntax reference\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Fields:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Seconds: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Minutes: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Hours: 0-23 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of month: 1-31 * / , - L W\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Month: 1-12 JAN-DEC * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of week: 0-6 SUN-SAT * / , - L #\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Year: 1970-2099 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Special characters:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;*: all values in the fields, e.g. * in seconds fields indicates every second\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;,: separate items of a list, e.g. MON,WED,FRI in day of week\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \u0026#34;the last Friday\u0026#34; (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \u0026#34;the nearest business day to the 15th of the month.\u0026#34;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;#: must be followed by a number between one and five. It allows you to specify constructs such as \u0026#34;the second Friday\u0026#34; of a given month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t",
        "operationId": "AdminUpdateUserPermissionV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.Permissions"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update User Permissions",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}": {
      "delete": {
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [DELETE]\u0026#39;",
        "operationId": "AdminDeleteUserPermissionV3",
        "parameters": [
          {
            "description": "Action (1..15)",
            "in": "path",
            "name": "action",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Resource Name",
            "in": "path",
            "name": "resource",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete User Permission",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms": {
      "get": {
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]\u0026#39;.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;h2\u0026gt;Justice Platform Account\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;The permission ’ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId}’ [READ] \n\t\t\t\tis required in order to read the UserID who linked with the user.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Gets platform accounts that are already linked with user account\n        \t\u0026lt;br\u0026gt;action code : 10128",
        "operationId": "AdminGetUserPlatformAccountsV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the next page",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the previous page",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "the maximum number of data that may be returned (1...100)",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.UserLinkedPlatformsResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]",
              "ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get platform accounts linked to the user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/justice": {
      "get": {
        "description": "This endpoint gets list justice platform account by providing publisher namespace and publisher userID.",
        "operationId": "AdminGetListJusticePlatformAccounts",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": " Publisher User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.GetUserMapping"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get User Justice Platform Accounts",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/justice/{targetNamespace}": {
      "get": {
        "description": "\u0026lt;p\u0026gt;This endpoint requires the client access token as the bearer token. Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [READ]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint will support publisher access to game and game access to publisher\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;If targetNamespace filled with publisher namespace then this endpoint will return its game user id and game namespace\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;If targetNamespace filled with game namespace then this endpoint will return its publisher user id and publisher namespace\u0026lt;/p\u0026gt;",
        "operationId": "AdminGetUserMapping",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Target namespace",
            "in": "path",
            "name": "targetNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserMappingV3"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user mapping",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:USER:{userId} [CREATE]\n\nCreate Justice User from Publisher User information. It will check first if Justice User on target namespace already exist.\n",
        "operationId": "AdminCreateJusticeUser",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Target namespace",
            "in": "path",
            "name": "targetNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.CreateJusticeUserResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create Justice User from Publisher User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/link": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\nForce linking platform account to user User Account. This endpoint intended for admin to forcefully link account to user.\n",
        "operationId": "AdminLinkPlatformAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.LinkPlatformAccountRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Link a Platform User Account to User Account",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]\u0026#39;.\n\t\t\t\u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steam\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oculus\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;android\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ios\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;apple\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;device\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;discord\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;awscognito\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;epicgames\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;nintendo\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;stadia\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;snapchat\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Unlink user\u0026#39;s account from a specific platform. \u0026#39;justice\u0026#39; platform might have multiple accounts from different namespaces linked.\n\t\t\t\u0026lt;br\u0026gt;\u0026lt;i\u0026gt;platformNamespace\u0026lt;/i\u0026gt; need to be specified when the platform ID is \u0026#39;justice\u0026#39;.\n\t\t\t\u0026lt;br\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Unlink user\u0026#39;s account from justice platform will enable password token grant and password update.\n\t\t\t\u0026lt;br\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;If you want to unlink user\u0026#39;s account in a game namespace, you have to specify \u0026lt;i\u0026gt;platformNamespace\u0026lt;/i\u0026gt; to that game namespace.\n\t\t\t\u0026lt;br\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;action code : 10121 \u0026lt;/p\u0026gt;",
        "operationId": "AdminPlatformUnlinkV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UnlinkUserPlatformRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Unlink user's account from specific platform",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}/link": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;Prerequisite:\u0026lt;/b\u0026gt; Platform client configuration need to be added to database for specific platformId. Namespace service URL need to be specified (refer to required environment variables).\n\u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steam\u0026lt;/strong\u0026gt;: The ticket’s value is the authentication code returned by Steam.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt;: Steam\u0026#39;s user authentication method using OpenID 2.0. The ticket\u0026#39;s value is URL generated by Steam on web authentication\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Facebook OAuth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Google OAuth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oculus\u0026lt;/strong\u0026gt;: The ticket’s value is a string composed of Oculus\u0026#39;s user ID and the nonce separated by a colon (:).\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Twitch OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;android\u0026lt;/strong\u0026gt;: The ticket\u0026#39;s value is the Android’s device ID\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ios\u0026lt;/strong\u0026gt;: The ticket\u0026#39;s value is the iOS’s device ID.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;apple\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Apple OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;device\u0026lt;/strong\u0026gt;: Every device that does’nt run Android and iOS is categorized as a device platform. The ticket\u0026#39;s value is the device’s ID.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;discord\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Discord OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;awscognito\u0026lt;/strong\u0026gt;: The ticket’s value is the aws cognito access token (JWT).\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;epicgames\u0026lt;/strong\u0026gt;: The ticket’s value is an access-token obtained from Epicgames EOS Account Service.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;nintendo\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code(id_token) returned by Nintendo OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;stadia\u0026lt;/strong\u0026gt;: The ticket’s value is a JWT Token, which can be obtained after calling the Stadia SDK\u0026#39;s function.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;",
        "operationId": "AdminPlatformLinkV3",
        "parameters": [
          {
            "description": "Ticket from platform",
            "in": "formData",
            "name": "ticket",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10163\u003c/td\u003e\u003ctd\u003eplatform is already linked with the user account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Link user's account with platform",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/roles": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [DELETE]\u0026#39;",
        "operationId": "AdminDeleteUserRolesV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete User Roles",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE] permission.\n\nUser\u0026#39;s roles will be updated with given roles (replacing current user\u0026#39;s role). Request body need to specify allowed namespace for given role to support new role restriction.\nSkipped the check whether the user performing the request is a role manager / assigner since there is a plan to discard the role manager / assigner.\n",
        "operationId": "AdminSaveUserRoleV3",
        "parameters": [
          {
            "description": "Array of Role ID to be assigned with allowed namespace",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/model.NamespaceRoleRequest"
              },
              "type": "array"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin Save User Role V3",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/roles/{roleId}": {
      "delete": {
        "description": "\u0026lt;p\u0026gt;This endpoint removes role from user. Required permission ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [DELETE]\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;action code: 10110\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminDeleteUserRoleV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10159\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10156\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete User Role",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "description": "\u0026lt;p\u0026gt;This endpoint adds role to user. Required permission ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;action code: 10109\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminAddUserRoleV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10159\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10156\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10160\u003c/td\u003e\u003ctd\u003euser already has the role\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10161\u003c/td\u003e\u003ctd\u003euser already the role member\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add User Role",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/status": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permissions \u0026#39;ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]\u0026#39;\n\t\t\u0026lt;p\u0026gt;This endpoint disable or enable user account. Set the enable status on the request body to true to enable user account or set to false to disable it. \u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;Disable user for \u0026lt;strong\u0026gt;Account Disable \u0026lt;/strong\u0026gt; purpose fill the reason with:\u0026lt;/p\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;AdminDeactivateAccount\u0026lt;/strong\u0026gt; : if your disable account request comes from admin\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;p\u0026gt;Enable user ignore field \u0026#39;reason\u0026#39; in the request body. \u0026lt;/p\u0026gt;\n\t\t\u0026lt;br\u0026gt;action code : 10143",
        "operationId": "AdminUpdateUserStatusV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdateUserStatusRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update user status",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/verify": {
      "put": {
        "description": "\u0026lt;p\u0026gt;This endpoint force verify user. Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;action code: 10118\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminVerifyUserWithoutVerificationCodeV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10140\u003c/td\u003e\u003ctd\u003euser verified\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Verify user without verification code",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/{clientId}/secret": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]\u0026#39;\u0026lt;/br\u0026gt;",
        "operationId": "AdminUpdateClientSecretV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.V3ClientUpdateSecretRequest"
            }
          },
          {
            "description": "Client ID",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Client Secret",
        "tags": [
          "Clients"
        ]
      }
    },
    "/iam/v3/admin/roles": {
      "get": {
        "description": "Required permission \u0026#39;ADMIN:ROLE [READ]\u0026#39;\u0026lt;br\u0026gt; \u0026lt;p\u0026gt;action code: 10414\u0026lt;/p\u0026gt;",
        "operationId": "AdminGetRolesV3",
        "parameters": [
          {
            "description": "The cursor that points to query data for the next page",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the previous page",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "- true if the expected result should only returns records with wildcard = true\n            - false if the expected result should only returns records with wildcard = false\n            - empty (omitted) if the expected result should returns records with no wildcard filter at all",
            "in": "query",
            "name": "isWildcard",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "the maximum number of data that may be returned (1...100)",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponseWithManagersAndPaginationV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Roles",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026#39;ADMIN:ROLE [CREATE]\u0026#39;\n\nCreate role request body:\n\t- roleName: specify role name, alphanumeric, cannot have special character (required)\n\t- permissions: specify the permission that this role have\n\t- managers: specify list of user that will act as the managers of this role\n\t- members: specify list of user that will act as the members of this role\n\t- adminRole: specify if role is for admin user (default false)\n\t- isWildcard: specify if role can be assigned to wildcard (*) namespace (default false)\n\t- deletable: specify if role can be deleted or not (default true)\n\n\u0026lt;br\u0026gt;action code: 10401",
        "operationId": "AdminCreateRoleV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleCreateV3Request"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/accountcommon.RoleV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10466\u003c/td\u003e\u003ctd\u003einvalid role members\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create Role",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v3/admin/roles/{roleId}": {
      "delete": {
        "description": "Required permission \u0026#39;\u0026#39;ADMIN:ROLE [DELETE]\u0026#39;\u0026#39; \u0026lt;br\u0026gt;action code: 10403",
        "operationId": "AdminDeleteRoleV3",
        "parameters": [
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20009\u003c/td\u003e\u003ctd\u003erequest_conflict\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Role",
        "tags": [
          "Roles"
        ]
      },
      "get": {
        "description": "Required permission \u0026#39;ADMIN:ROLE [READ]\u0026#39;\u0026lt;br\u0026gt; \u0026lt;p\u0026gt;action code: 10419\u0026lt;/p\u0026gt;",
        "operationId": "AdminGetRoleV3",
        "parameters": [
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Role",
        "tags": [
          "Roles"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;\n\nUpdate role request body:\n\t- roleName: specify role name, alphanumeric, cannot have special character (required)\n\t- isWildcard: specify if role can be assigned to wildcard (*) namespace (default false)\n\t- deletable: specify if role can be deleted or not (optional)\n\n\u0026lt;br\u0026gt;action code: 10402",
        "operationId": "AdminUpdateRoleV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleUpdateRequestV3"
            }
          },
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Role",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v3/admin/roles/{roleId}/admin": {
      "delete": {
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;\u0026lt;/p\u0026gt; code: 10413",
        "operationId": "AdminRemoveRoleAdminV3",
        "parameters": [
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Remove Role Admin Status",
        "tags": [
          "Roles"
        ]
      },
      "get": {
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:ROLE [READ]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Admin roles has its members listed in the role.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;action code: 10420\u0026lt;/p\u0026gt;",
        "operationId": "AdminGetRoleAdminStatusV3",
        "parameters": [
          {
            "description": "Role id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleAdminStatusResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Role Admin Status",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Admin roles has its members listed in the role.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Role can be set as admin role only when it has at least 1 manager.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;action code: 10412",
        "operationId": "AdminUpdateAdminRoleStatusV3",
        "parameters": [
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10467\u003c/td\u003e\u003ctd\u003erole has no manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Set Role as Admin Role",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v3/admin/roles/{roleId}/managers": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Role can only be assigned to other users by the role\u0026#39;s manager.\u0026lt;/p\u0026gt; \u0026lt;br\u0026gt; action code: 10409",
        "operationId": "AdminRemoveRoleManagersV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleManagersRequestV3"
            }
          },
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Remove Role Managers",
        "tags": [
          "Roles"
        ]
      },
      "get": {
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:ROLE [READ]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Role can only be assigned to other users by the role\u0026#39;s manager.\u0026lt;/p\u0026gt;\u0026lt;br/\u0026gt;\n\t\t\taction code: 10415",
        "operationId": "AdminGetRoleManagersV3",
        "parameters": [
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the next page",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the previous page",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "the maximum number of data that may be returned (1...100)",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleManagersResponsesV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Role Managers",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Role can only be assigned to other users by the role\u0026#39;s manager.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\u0026lt;br\u0026gt;action code: 10408",
        "operationId": "AdminAddRoleManagersV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleManagersRequestV3"
            }
          },
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10468\u003c/td\u003e\u003ctd\u003erole manager exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add Role Managers",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v3/admin/roles/{roleId}/members": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Admin roles has its members listed in the role.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Role can only be assigned to other users by the role\u0026#39;s manager.\u0026lt;/p\u0026gt; \u0026lt;br\u0026gt; action code: 10411",
        "operationId": "AdminRemoveRoleMembersV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleMembersRequestV3"
            }
          },
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10457\u003c/td\u003e\u003ctd\u003especified role is not admin role\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10459\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Remove Role Members",
        "tags": [
          "Roles"
        ]
      },
      "get": {
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:ROLE [READ]\u0026#39;\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Admin roles has its members listed in the role.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;action code: 10416\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGetRoleMembersV3",
        "parameters": [
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the next page",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the previous page",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "the maximum number of data that may be returned (1...100)",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleMembersResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Role Members",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Admin roles has its members listed in the role.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Role can only be assigned to other users by the role\u0026#39;s manager.\u0026lt;/p\u0026gt; \u0026lt;br\u0026gt;action code: 10410\u0026lt;/br\u0026gt;",
        "operationId": "AdminAddRoleMembersV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleMembersRequestV3"
            }
          },
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10457\u003c/td\u003e\u003ctd\u003especified role is not admin role\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10459\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10469\u003c/td\u003e\u003ctd\u003erole member exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add Role Members",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v3/admin/roles/{roleId}/permissions": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;",
        "operationId": "AdminDeleteRolePermissionsV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Role",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint will ATTACH permission(s) into the role\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;action code: 10404\u0026lt;br\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;In ranged schedule, first element will be start date, and second one will be end date\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Syntax reference\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Fields:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Seconds: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Minutes: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Hours: 0-23 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of month: 1-31 * / , - L W\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Month: 1-12 JAN-DEC * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of week: 0-6 SUN-SAT * / , - L #\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Year: 1970-2099 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Special characters:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;*: all values in the fields, e.g. * in seconds fields indicates every second\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;,: separate items of a list, e.g. MON,WED,FRI in day of week\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \u0026#34;the last Friday\u0026#34; (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \u0026#34;the nearest business day to the 15th of the month.\u0026#34;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;#: must be followed by a number between one and five. It allows you to specify constructs such as \u0026#34;the second Friday\u0026#34; of a given month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t",
        "operationId": "AdminAddRolePermissionsV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.PermissionsV3"
            }
          },
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add Role Permissions",
        "tags": [
          "Roles"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint will REPLACE role\u0026#39;s permissions with the ones defined in body\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;action code: 10405\u0026lt;br\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;In ranged schedule, first element will be start date, and second one will be end date\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Syntax reference\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Fields:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Seconds: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Minutes: 0-59 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Hours: 0-23 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of month: 1-31 * / , - L W\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Month: 1-12 JAN-DEC * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Day of week: 0-6 SUN-SAT * / , - L #\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Year: 1970-2099 * / , -\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Special characters:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;*: all values in the fields, e.g. * in seconds fields indicates every second\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;,: separate items of a list, e.g. MON,WED,FRI in day of week\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \u0026#34;the last Friday\u0026#34; (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \u0026#34;the nearest business day to the 15th of the month.\u0026#34;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;#: must be followed by a number between one and five. It allows you to specify constructs such as \u0026#34;the second Friday\u0026#34; of a given month.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ol\u0026gt;\n\t\t\t",
        "operationId": "AdminUpdateRolePermissionsV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.PermissionsV3"
            }
          },
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Role Permissions",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v3/admin/roles/{roleId}/permissions/{resource}/{action}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39; \u0026lt;br\u0026gt;action code: 10406\u0026lt;br\u0026gt;",
        "operationId": "AdminDeleteRolePermissionV3",
        "parameters": [
          {
            "description": "Action, value must be in range 1-15",
            "in": "path",
            "name": "action",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Resource Name",
            "in": "path",
            "name": "resource",
            "required": true,
            "type": "string"
          },
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Role Permission",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v3/admin/users/me": {
      "get": {
        "description": "\u0026lt;p\u0026gt;Require valid user authorization\u0026lt;br\u0026gt;Get my user data\u0026lt;br\u0026gt;action code : 10147 \u0026lt;/p\u0026gt;",
        "operationId": "AdminGetMyUserV3",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get My User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/authenticate": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "This endpoint is being used to authenticate a user account. \nIt validates user\u0026#39;s email / username and password.\nDeactivated or login-banned users are unable to login.\nRedirect URI and Client ID must be specified as a pair and only used to redirect to the specified redirect URI in case the requestId is no longer valid.\n\n\u0026lt;h2\u0026gt;Device Cookie Validation\u0026lt;/h2\u0026gt;\n\nDevice Cookie is used to protect the user account from brute force login attack, \u0026lt;a target=\u0026#34;_blank\u0026#34; href=\u0026#34;https://owasp.org/www-community/Slow_Down_Online_Guessing_Attacks_with_Device_Cookies\u0026#34;\u0026gt;more detail from OWASP\u0026lt;a\u0026gt;.\nThis endpoint will read device cookie from cookie \u0026lt;b\u0026gt;auth-trust-id\u0026lt;/b\u0026gt;. If device cookie not found, it will generate a new one and set it into cookie when successfully authenticate.\n\nAction code: 10801",
        "operationId": "UserAuthenticationV3",
        "parameters": [
          {
            "description": "Account password",
            "in": "formData",
            "name": "password",
            "required": true,
            "type": "string"
          },
          {
            "description": "Request ID",
            "in": "formData",
            "name": "request_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Account username",
            "in": "formData",
            "name": "user_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Client ID",
            "in": "formData",
            "name": "client_id",
            "type": "string"
          },
          {
            "description": "Extend expiration date of refresh token",
            "in": "formData",
            "name": "extend_exp",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "Redirect URI",
            "in": "formData",
            "name": "redirect_uri",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "302": {
            "description": "Found. Redirect successful requests to consent page with \"list of consent\" in query params.",
            "headers": {
              "Location": {
                "description": "The Location header",
                "type": "string"
              }
            }
          }
        },
        "summary": "Authentication API",
        "tags": [
          "OAuth2.0 - Extension"
        ],
        "x-location-query": "code"
      }
    },
    "/iam/v3/authenticateWithLink": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "This endpoint is being used to authenticate a user account and perform platform link. \nIt validates user\u0026#39;s email / username and password. \nIf user already enable 2FA, then invoke \u0026lt;i\u0026gt;/mfa/verify\u0026lt;/i\u0026gt; using \u0026lt;b\u0026gt;mfa_token\u0026lt;/b\u0026gt; from this endpoint response.\n\n\u0026lt;h2\u0026gt;Device Cookie Validation\u0026lt;/h2\u0026gt;\n\nDevice Cookie is used to protect the user account from brute force login attack, \u0026lt;a target=\u0026#34;_blank\u0026#34; href=\u0026#34;https://owasp.org/www-community/Slow_Down_Online_Guessing_Attacks_with_Device_Cookies\u0026#34;\u0026gt;more detail from OWASP\u0026lt;a\u0026gt;.\nThis endpoint will read device cookie from cookie \u0026lt;b\u0026gt;auth-trust-id\u0026lt;/b\u0026gt;. If device cookie not found, it will generate a new one and set it into cookie when successfully authenticate.\n",
        "operationId": "AuthenticationWithPlatformLinkV3",
        "parameters": [
          {
            "description": "Client ID",
            "in": "formData",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform linking Token",
            "in": "formData",
            "name": "linkingToken",
            "required": true,
            "type": "string"
          },
          {
            "description": "Account password",
            "in": "formData",
            "name": "password",
            "required": true,
            "type": "string"
          },
          {
            "description": "Account username",
            "in": "formData",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "Extend expiration date of refresh token",
            "in": "formData",
            "name": "extend_exp",
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Succeed to authenticate and link platform account.",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponseV3"
            }
          },
          "400": {
            "description": "Invalid username or password.",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Need 2FA.",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "409": {
            "description": "User already link this platform's another account'.",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Authentication with platform link",
        "tags": [
          "OAuth2.0 - Extension"
        ]
      }
    },
    "/iam/v3/headless/token": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint is being used to create headless account after 3rd platform authenticated, and response token . \n\t\t\t\t\tThe \u0026#39;linkingToken\u0026#39; in request body is received from \u0026#34;/platforms/{platformId}/token\u0026#34; \n\t\t\t\t\twhen 3rd platform account is not linked to justice account yet.\u0026#39;\u0026lt;/p\u0026gt;",
        "operationId": "GenerateTokenByNewHeadlessAccountV3",
        "parameters": [
          {
            "description": "Platform linking Token",
            "in": "formData",
            "name": "linkingToken",
            "required": true,
            "type": "string"
          },
          {
            "description": "Extend expiration date of refresh token",
            "in": "formData",
            "name": "extend_exp",
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Succeed to create headless account and response token info.",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponseV3"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create headless account and response token",
        "tags": [
          "OAuth2.0 - Extension"
        ]
      }
    },
    "/iam/v3/location/country": {
      "get": {
        "consumes": [
          ""
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint get country location based on the request.\u0026lt;/p\u0026gt;",
        "operationId": "GetCountryLocationV3",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Country Location info returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.CountryLocationResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get Country Location",
        "tags": [
          "OAuth2.0 - Extension"
        ]
      }
    },
    "/iam/v3/logout": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint is used to remove \u0026lt;b\u0026gt;access_token\u0026lt;/b\u0026gt;, \u0026lt;b\u0026gt;refresh_token\u0026lt;/b\u0026gt; from cookie and revoke token from usage.\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;Supported methods:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;VerifyToken to verify token from header\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;AddTokenToRevocationList to revoke token with TTL\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;",
        "operationId": "Logout",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Logout successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Logout",
        "tags": [
          "OAuth2.0 - Extension"
        ]
      }
    },
    "/iam/v3/namespace/{namespace}/token/request": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint is being used to request the code to generate publisher user\u0026#39;s game token.\u0026lt;br\u0026gt;\n\t\tIt require a valid user token with publisher namespace.\u0026lt;br\u0026gt;\n\t\tPath namespace should be a game namespace.\u0026lt;br\u0026gt;\n\t\tClient ID should match the target namespace.\n\t\tIt response a code and it can be consumed by \u0026lt;strong\u0026gt;/iam/v3/token/exchange\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;/p\u0026gt;",
        "operationId": "RequestGameTokenCodeResponseV3",
        "parameters": [
          {
            "description": "Client ID for target namespace",
            "in": "formData",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Succeed to generate token.",
            "schema": {
              "$ref": "#/definitions/oauthmodel.GameTokenCodeResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Request code to get game token",
        "tags": [
          "OAuth2.0 - Extension"
        ]
      }
    },
    "/iam/v3/oauth/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}/platformToken": {
      "get": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Admin Retrieve User Third Party Platform Token\u0026lt;br/\u0026gt;\n\u0026lt;p\u0026gt;\nThis endpoint used for retrieving third party platform token for user that login using third party,\n         if user have not link requested platform in game namespace, will try to retrieving third party platform token from publisher namespace.\nPassing platform group name or it\u0026#39;s member will return same access token that can be used across the platform members. \n\u0026lt;/p\u0026gt;\n         \u0026lt;p\u0026gt;Notes:\u0026lt;/p\u0026gt;\n       \u0026lt;ul\u0026gt;\n                 \u0026lt;li\u0026gt;Required permission: ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]\u0026lt;/li\u0026gt;\n             \u0026lt;/ul\u0026gt;\n\u0026lt;p\u0026gt;The third party platform and platform group covered for this is:\u0026lt;/p\u0026gt;\n\u0026lt;ul\u0026gt;\t\t\t\t\n\t\u0026lt;li\u0026gt;(psn) ps4web\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;(psn) ps4\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;(psn) ps5\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;xbox live\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;steam\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;",
        "operationId": "AdminRetrieveUserThirdPartyPlatformTokenV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "UserId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenThirdPartyResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized access",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "404": {
            "description": "Platform Token Not Found",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin Retrieve User Third Party Platform Token",
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/iam/v3/oauth/admin/namespaces/{namespace}/users/{userId}/revoke": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint revokes all access tokens and refresh tokens a user has prior the revocation time.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint requires authorized requests header with valid access token.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;It is a convenient feature for the developer (or admin) who wanted to revokes all user\u0026#39;s access tokens and refresh tokens generated before some period of time.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;action code : 10707\u0026lt;/p\u0026gt;",
        "operationId": "RevokeUserV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User to be revoked",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "user revoked"
          },
          "400": {
            "description": "invalid input",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Token is not exist, expired, or invalid",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "403": {
            "description": "insufficient permission",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Revokes user's tokens'",
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/iam/v3/oauth/authorize": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Initializes OAuth2.0 authorization code flow\u0026lt;br/\u0026gt;\n\u0026lt;p\u0026gt;The endpoint stores authorization request and redirects to login page with the authorization request id.\n\tThe user can then do the authentication on the login page. \n\tThe user will be redirected back to the requesting client with authorization code if successfully authenticated. \n\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Only authorization code flow supported by this endpoint, implicit flow is not supported.\u0026lt;/p\u0026gt;\n\u0026lt;ul\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Authorize success\u0026lt;/strong\u0026gt;: \n\t\tredirects to login page with the following information: ?request_id={authorization_request_id}\u0026lt;/p\u0026gt;\n\t\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Authorize failure\u0026lt;/strong\u0026gt;: \n\t\tredirects to the given redirect uri with the following information:\n\t\t?error={error_code}\u0026amp;error_description={error description}\u0026lt;/p\u0026gt;\n\t\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\t\u0026lt;p\u0026gt;Following are the error code based on the specification:\u0026lt;/p\u0026gt;\n\u0026lt;ul\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;invalid_request: The request is missing a required parameter, \n\t\tincludes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.\u0026lt;/p\u0026gt;\n\t\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;server_error: \n\t\tThe authorization server encountered an unexpected condition that prevented it from fulfilling the request.\u0026lt;/p\u0026gt;\n\t\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;unauthorized_client: The client is not authorized to request a token using this method.\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;access_denied: The resource owner or authorization server denied the request.\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;invalid_scope: The requested scope is invalid, unknown, or malformed.\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;unsupported_response_type: The authorization server does not support obtaining a token using this method.\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;temporarily_unavailable: The authorization server is currently unable to handle the request \n\t\tdue to a temporary overloading or maintenance of the server.\u0026lt;/p\u0026gt;\n\t\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\t\u0026lt;p\u0026gt;Please refer to the RFC for more information about authorization code flow: https://tools.ietf.org/html/rfc6749#section-4.1\u0026lt;/p\u0026gt;\u0026lt;br\u0026gt;\n\taction code: 10701\n\n",
        "operationId": "AuthorizeV3",
        "parameters": [
          {
            "description": "Registered client ID",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "default": "code",
            "description": "Supported response type : 'code'",
            "enum": [
              "code"
            ],
            "in": "query",
            "name": "response_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Value generated by transforming code verifier using code challenge method. Mandatory for public client.",
            "in": "query",
            "name": "code_challenge",
            "type": "string"
          },
          {
            "default": "plain",
            "description": "Method that is used to transform code verifier to code challenge",
            "enum": [
              "S256",
              "plain"
            ],
            "in": "query",
            "name": "code_challenge_method",
            "type": "string"
          },
          {
            "default": true,
            "description": "If create new headless account when login by new third platform user",
            "in": "query",
            "name": "createHeadless",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "Redirect URI registered for requesting client. Required if client registered with multiple redirect URI. Registered redirect uri will be assigned if left empty.",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          },
          {
            "default": "commerce account social publishing analytics",
            "description": "Defines the requested access request scope. Can be multiple values delimited by whitespace.",
            "in": "query",
            "name": "scope",
            "type": "string"
          },
          {
            "description": "Random value for preventing cross-site request forgery used by client.",
            "in": "query",
            "name": "state",
            "type": "string"
          },
          {
            "description": "Custom query to tell authorization web which page to present to user",
            "in": "query",
            "name": "target_auth_page",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "302": {
            "description": "Found. Redirected to login page with either request_id or error.",
            "headers": {
              "Location": {
                "description": "The Location header",
                "type": "string"
              }
            }
          }
        },
        "summary": "OAuth2 authorize API",
        "tags": [
          "OAuth2.0"
        ],
        "x-location-query": "request_id"
      }
    },
    "/iam/v3/oauth/introspect": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint returns information about an access token intended to be used by resource servers or other internal servers.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;This endpoint requires authorized requests header with valid basic or bearer token.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;action code : 10705\u0026lt;/p\u0026gt;",
        "operationId": "TokenIntrospectionV3",
        "parameters": [
          {
            "description": "Access Token / Refresh Token",
            "in": "formData",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenIntrospectResponse"
            }
          },
          "400": {
            "description": "invalid input",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "invalid bearer or basic authorization header",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "basic": []
          },
          {
            "authorization": []
          }
        ],
        "summary": "OAuth2 token introspection API",
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/iam/v3/oauth/jwks": {
      "get": {
        "consumes": [
          ""
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint serves public keys for verifying JWT access tokens generated by this service.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;When a client application wants to verify a JWT token, it needs to get the \u0026#39;kid\u0026#39; value found in the JWT token header and use it\n\t\t\tto look up the corresponding public key from a set returned by this endpoint. The client application can then use that public key to verify the JWT.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;A client application might cache the keys so it doesn\u0026#39;t need to do request every time it needs to verify a JWT token. If a client application\n\t\t\tcaches the keys and a key with the same \u0026#39;kid\u0026#39; cannot be found in the cache, it should then try to refresh the keys by making a request to this\n\t\t\tendpoint again.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Please refer to the RFC for more information about JWK (JSON Web Key): https://tools.ietf.org/html/rfc7517\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;action code : 10709",
        "operationId": "GetJWKSV3",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "JWKS returned",
            "schema": {
              "$ref": "#/definitions/oauthcommon.JWKSet"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "JSON Web Key Set for verifying JWT",
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/iam/v3/oauth/mfa/factor/change": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Change 2FA method\u0026lt;br/\u0026gt;\n\u0026lt;p\u0026gt;This endpoint is used for change 2FA method. Only enabled methods are accepted.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Supported methods:\u0026lt;/p\u0026gt;\n\u0026lt;ul\u0026gt;\n\t\u0026lt;li\u0026gt;authenticator\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;backupCodes\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n",
        "operationId": "Change2FAMethod",
        "parameters": [
          {
            "description": "factor",
            "in": "formData",
            "name": "factor",
            "required": true,
            "type": "string"
          },
          {
            "description": "mfa token",
            "in": "formData",
            "name": "mfaToken",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Method changed"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10189\u003c/td\u003e\u003ctd\u003einvalid factor\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Change 2FA method",
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/iam/v3/oauth/mfa/verify": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Verify 2FA code\u0026lt;br/\u0026gt;\n\u0026lt;p\u0026gt;This endpoint is used for verifying 2FA code.\u0026lt;/p\u0026gt;\n         \u0026lt;h2\u0026gt;2FA remember device\u0026lt;/h2\u0026gt;\n         \u0026lt;p\u0026gt;To remember device for 2FA, should provide cookie: device_token or header: Device-Token\u0026lt;/p\u0026gt;\n",
        "operationId": "Verify2FACode",
        "parameters": [
          {
            "description": "code",
            "in": "formData",
            "name": "code",
            "required": true,
            "type": "string"
          },
          {
            "description": "factor",
            "in": "formData",
            "name": "factor",
            "required": true,
            "type": "string"
          },
          {
            "description": "mfa token",
            "in": "formData",
            "name": "mfaToken",
            "required": true,
            "type": "string"
          },
          {
            "description": "remember device",
            "in": "formData",
            "name": "rememberDevice",
            "required": true,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponseV3"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Verify 2FA code",
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/iam/v3/oauth/namespaces/{namespace}/users/{userId}/platforms/{platformId}/platformToken": {
      "get": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Retrieve User Third Party Platform Token\u0026lt;br/\u0026gt;\n\u0026lt;p\u0026gt;\nThis endpoint used for retrieving third party platform token for user that login using third party,\nif user have not link requested platform in game namespace, will try to retrieving third party platform token from publisher namespace.\nPassing platform group name or it\u0026#39;s member will return same access token that can be used across the platform members. \n\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;The third party platform and platform group covered for this is:\u0026lt;/p\u0026gt;\n\u0026lt;ul\u0026gt;\t\t\t\t\n\t\u0026lt;li\u0026gt;(psn) ps4web\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;(psn) ps4\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;(psn) ps5\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;epicgames\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;twitch\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;awscognito\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;",
        "operationId": "RetrieveUserThirdPartyPlatformTokenV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "UserId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenThirdPartyResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized access",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "404": {
            "description": "Platform Token Not Found",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Retrieve User Third Party Platform Token",
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/iam/v3/oauth/platforms/{platformId}/authorize": {
      "get": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Generate url to request auth code from third party platform \u0026lt;br\u0026gt;\n               \u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\u0026lt;ul\u0026gt;\n               \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;This endpoint redirects to steam login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating user steam.\n               \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;xblweb\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;This endpoint redirects to xbox login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating xbox user.\n               \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ps4web\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;This endpoint redirects to psn login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating psn user.\n               \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;epicgames\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;This endpoint redirects to Epicgames OAuth login page. then redirect to platform\n               authenticate endpoint after successfully authenticating an Epicgames credential\n               \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;This endpoint redirects to twitch login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating twitch user.\n               \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;azure\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;This endpoint redirects to azure login page, then redirect back to platform\n               authenticate(saml) endpoint after successfully authenticating azure user.\n               \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;This endpoint redirects to facebook login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating facebook user.\n               \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;This endpoint redirects to google login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating google user.\n\t\t\t\t\t\t\t \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;snapchat\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;This endpoint redirects to snapchat login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating snapchat user.\n\t\t\t\t\t\t\t \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;discord\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;This endpoint redirects to discord login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating discord user.\n               \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;amazon\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;This endpoint redirects to amazon login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating amazon user.\n               \u0026lt;/ul\u0026gt; action code : 10702\u0026#39;",
        "operationId": "AuthCodeRequestV3",
        "parameters": [
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Request ID retrieved from authorize endpoint ([GET] iam/v3/oauth/authorize)",
            "in": "query",
            "name": "request_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Client ID",
            "in": "query",
            "name": "client_id",
            "type": "string"
          },
          {
            "description": "Redirect URI",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "302": {
            "description": "Found. Redirect to client’s redirect URI with either code or error on the query parameter",
            "headers": {
              "Location": {
                "description": "The Location header",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Generate url to request auth code from third party platform.",
        "tags": [
          "OAuth2.0"
        ],
        "x-location-query": "code"
      }
    },
    "/iam/v3/oauth/platforms/{platformId}/token": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "\u0026lt;p\u0026gt;Platform token grant specifically used for performing token grant using platform, e.g. Steam, Justice, etc. The endpoint automatically create an account if the account associated with the platform is not exists yet.\n\t\t\tThis endpoint requires all requests to have Authorization header set with Basic access authentication\n\t\t\tconstructed from client id and client secret. For publisher-game namespace schema : Specify only either platform_token or device_id. Device token grant\n\t\t\tshould be requested along with device_id parameter against game namespace. Another 3rd party platform token grant should be requested\n\t\t\talong with platform_token parameter against publisher namespace.\u0026lt;/p\u0026gt;\u0026lt;br/\u0026gt;\n            \u0026lt;h2\u0026gt;2FA remember device\u0026lt;/h2\u0026gt;\n            \u0026lt;p\u0026gt;To remember device for 2FA, should provide cookie: device_token or header: Device-Token\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steam\u0026lt;/strong\u0026gt;: The platform_token’s value is the authentication code returned by Steam.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt;: Steam\u0026#39;s user authentication method using OpenID 2.0. The platform_token\u0026#39;s value is URL generated by Steam on web authentication\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Facebook OAuth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Google OAuth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oculus\u0026lt;/strong\u0026gt;: The platform_token’s value is a string composed of Oculus\u0026#39;s user ID and the nonce separated by a colon (:).\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Twitch OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;discord\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Discord OAuth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;android\u0026lt;/strong\u0026gt;: The device_id is the Android’s device ID\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ios\u0026lt;/strong\u0026gt;: The device_id is the iOS’s device ID.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;apple\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Apple OAuth.(We will use this code to generate APP token)\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;device\u0026lt;/strong\u0026gt;: Every device that does’nt run Android and iOS is categorized as a device. The device_id is the device’s ID.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;justice\u0026lt;/strong\u0026gt;: The platform_token’s value is the designated user’s access token.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;epicgames\u0026lt;/strong\u0026gt;: The platform_token’s value is an access-token obtained from Epicgames EOS Account Service.\u0026lt;/li\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;stadia\u0026lt;/strong\u0026gt;: The platform_token\u0026#39;s value is a JWT Token, which can be obtained after calling the Stadia SDK\u0026#39;s function.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ps4\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Sony OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ps5\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Sony OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;nintendo\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code(id_token) returned by Nintendo OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;awscognito\u0026lt;/strong\u0026gt;: The platform_token’s value is the aws cognito access token or id token (JWT).\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;live\u0026lt;/strong\u0026gt;: The platform_token’s value is xbox XSTS token\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;xblweb\u0026lt;/strong\u0026gt;: The platform_token’s value is code returned by xbox after login\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;netflix\u0026lt;/strong\u0026gt;: The platform_token’s value is GAT (Gamer Access Token) returned by Netflix backend\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;snapchat\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Snapchat OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;h2\u0026gt;Account Group\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Several platforms are grouped under account groups. The accounts on these platforms have the same platform user id. \n\t\t\tLogin using one of these platform will returns the same IAM user. \u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Following is the current registered account grouping: \u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt; (psn) ps4web \u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt; (psn) ps4 \u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt; (psn) ps5 \u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;h2\u0026gt;Access Token Content\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Following is the access token’s content:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;namespace\u0026lt;/strong\u0026gt;. It is the namespace the token was generated from.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;display_name\u0026lt;/strong\u0026gt;. The display name of the sub. It is empty if the token is generated from the client credential\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;roles\u0026lt;/strong\u0026gt;. The sub’s roles. It is empty if the token is generated from the client credential\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;namespace_roles\u0026lt;/strong\u0026gt;. The sub’s roles scoped to namespace. Improvement from roles, which make the role scoped to specific namespace instead of global to publisher namespace\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;permissions\u0026lt;/strong\u0026gt;. The sub or aud’ permissions\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;bans\u0026lt;/strong\u0026gt;. The sub’s list of bans. It is used by the IAM client for validating the token.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;jflgs\u0026lt;/strong\u0026gt;. It stands for Justice Flags. It is a special flag used for storing additional status information regarding the sub. It is implemented as a bit mask. Following explains what each bit represents:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;1: Email Address Verified\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;2: Phone Number Verified\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;4: Anonymous\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;8: Suspicious Login\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;aud\u0026lt;/strong\u0026gt;. The aud is the client ID.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;iat\u0026lt;/strong\u0026gt;. The time the token issues at. It is in Epoch time format\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;exp\u0026lt;/strong\u0026gt;. The time the token expires. It is in Epoch time format\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;sub\u0026lt;/strong\u0026gt;. The UserID. The sub is omitted if the token is generated from client credential\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;h2\u0026gt;Bans\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;The JWT contains user\u0026#39;s active bans with its expiry date. List of ban types can be obtained from /bans.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;action code : 10704",
        "operationId": "PlatformTokenGrantV3",
        "parameters": [
          {
            "description": "Platform ID to login with",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Client ID, only accept UUID version 4 without hyphen",
            "in": "formData",
            "name": "client_id",
            "type": "string"
          },
          {
            "default": true,
            "description": "If directly create new account when not linked yet",
            "in": "formData",
            "name": "createHeadless",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "Device/hardware identifier",
            "in": "formData",
            "name": "device_id",
            "type": "string"
          },
          {
            "description": "Mac address of device",
            "in": "formData",
            "name": "macAddress",
            "type": "string"
          },
          {
            "description": "Token from platform auth",
            "in": "formData",
            "name": "platform_token",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponse"
            }
          },
          "400": {
            "description": "General request error",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        },
        "summary": "OAuth2 access token generation specific to platform",
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/iam/v3/oauth/revocationlist": {
      "get": {
        "consumes": [
          ""
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint will return a list of revoked users and revoked tokens. List of revoked tokens in bloom filter format.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;This endpoint requires authorized requests header with valid access token.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;The bloom filter uses MurmurHash3 algorithm for hashing the values\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;action code : 10708\u0026lt;/p\u0026gt;",
        "operationId": "GetRevocationListV3",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Revocation list returned",
            "schema": {
              "$ref": "#/definitions/oauthapi.RevocationList"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "OAuth2 revocation list API",
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/iam/v3/oauth/revoke": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint revokes a token.\u0026lt;/p\u0026gt;\n\t\t\t\t\t \u0026lt;p\u0026gt;This endpoint requires authorized requests header with Basic Authentication from client that establish the token.\u0026lt;/p\u0026gt;\u0026lt;br\u0026gt;action code: 10706",
        "operationId": "TokenRevocationV3",
        "parameters": [
          {
            "description": "Access token / Refresh token",
            "in": "formData",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Token revoked or does not exist"
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid basic auth header",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        },
        "summary": "OAuth2 token revocation API",
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/iam/v3/oauth/token": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint supports grant type:\u0026lt;/p\u0026gt;\u0026lt;ol\u0026gt;\n\t \t\t\u0026lt;li\u0026gt;Grant Type == \u0026lt;code\u0026gt;authorization_code\u0026lt;/code\u0026gt;:\u0026lt;br /\u0026gt;\n\t\t\t\t\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp; It generates the user token by given the authorization\n\t\t\t\tcode which generated in \u0026#34;/iam/v3/authenticate\u0026#34; API response. It should also pass\n\t\t\t\tin the redirect_uri, which should be the same as generating the\n\t\t\t\tauthorization code request.\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Grant Type == \u0026lt;code\u0026gt;password\u0026lt;/code\u0026gt;:\u0026lt;br /\u0026gt;\n\t \t\t\t\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp; The grant type to use for authenticating a user, whether it\u0026#39;s by email / username and password combination\n\t\t\t\tor through platform.\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Grant Type == \u0026lt;code\u0026gt;refresh_token\u0026lt;/code\u0026gt;:\u0026lt;br /\u0026gt;\n\t \t\t\t\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp; Used to get a new access token for a valid refresh token.\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;Grant Type == \u0026lt;code\u0026gt;client_credentials\u0026lt;/code\u0026gt;:\u0026lt;br /\u0026gt;\n\t \t\t\t\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp; It generates a token by checking the client credentials provided through Authorization header.\n\t\t\t\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt;\n\t\t\t\u0026lt;h2\u0026gt;Access Token Content\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Following is the access token’s content:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;namespace\u0026lt;/strong\u0026gt;. It is the namespace the token was generated from.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;display_name\u0026lt;/strong\u0026gt;. The display name of the sub. It is empty if the token is generated from the client credential\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;roles\u0026lt;/strong\u0026gt;. The sub’s roles. It is empty if the token is generated from the client credential\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;namespace_roles\u0026lt;/strong\u0026gt;. The sub’s roles scoped to namespace. Improvement from roles, which make the role scoped to specific namespace instead of global to publisher namespace\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;permissions\u0026lt;/strong\u0026gt;. The sub or aud’ permissions\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;bans\u0026lt;/strong\u0026gt;. The sub’s list of bans. It is used by the IAM client for validating the token.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;jflgs\u0026lt;/strong\u0026gt;. It stands for Justice Flags. It is a special flag used for storing additional status information regarding the sub. It is implemented as a bit mask. Following explains what each bit represents:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;1: Email Address Verified\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;2: Phone Number Verified\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;4: Anonymous\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;8: Suspicious Login\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;aud\u0026lt;/strong\u0026gt;. The aud is the targeted resource server.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;iat\u0026lt;/strong\u0026gt;. The time the token issues at. It is in Epoch time format\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;exp\u0026lt;/strong\u0026gt;. The time the token expires. It is in Epoch time format\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;client_id\u0026lt;/strong\u0026gt;. The UserID. The sub is omitted if the token is generated from client credential\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\t\n\t\t\t\u0026lt;li\u0026gt;\n\t\t\t\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;scope\u0026lt;/strong\u0026gt;. The scope of the access request, expressed as a list of space-delimited, case-sensitive strings\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;h2\u0026gt;Bans\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;The JWT contains user\u0026#39;s active bans with its expiry date. List of ban types can be obtained from /bans.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;h2\u0026gt;Device Cookie Validation\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;\u0026lt;i\u0026gt;\u0026lt;b\u0026gt;For grant type \u0026#34;password\u0026#34; only\u0026lt;/b\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Device Cookie is used to protect the user account from brute force login attack, \u0026lt;a target=\u0026#34;_blank\u0026#34; href=\u0026#34;https://owasp.org/www-community/Slow_Down_Online_Guessing_Attacks_with_Device_Cookies\u0026#34;\u0026gt;more detail from OWASP\u0026lt;a\u0026gt;.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint will read device cookie from request header \u0026lt;b\u0026gt;Auth-Trust-Id\u0026lt;/b\u0026gt;. If device cookie not found, it will generate a new one and set it into response body \u0026lt;b\u0026gt;auth_trust_id\u0026lt;/b\u0026gt; when successfully login.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;h2\u0026gt;Track Login History\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint will track login history to detect suspicious login activity, please provide \u0026lt;b\u0026gt;Device-Id\u0026lt;/b\u0026gt; (alphanumeric) in request header parameter otherwise it will set to \u0026#34;unknown\u0026#34;.\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Align with General Data Protection Regulation in Europe, user login history will be kept within 28 days by default\u0026#34;\u0026lt;/p\u0026gt;\n            \u0026lt;h2\u0026gt;2FA remember device\u0026lt;/h2\u0026gt;\n            \u0026lt;p\u0026gt;To remember device for 2FA, should provide cookie: device_token or header: Device-Token\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;action code: 10703",
        "operationId": "TokenGrantV3",
        "parameters": [
          {
            "default": "authorization_code",
            "description": "Grant Type",
            "enum": [
              "authorization_code",
              "client_credentials",
              "password",
              "refresh_token"
            ],
            "in": "formData",
            "name": "grant_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "client_id (used with grant type 'authorization_code')",
            "in": "formData",
            "name": "client_id",
            "type": "string"
          },
          {
            "description": "The authorization code received from the authorization server (used with grant type 'authorization_code')",
            "in": "formData",
            "name": "code",
            "type": "string"
          },
          {
            "description": "Code verifier received from the authorization server",
            "in": "formData",
            "name": "code_verifier",
            "type": "string"
          },
          {
            "description": "Extend expiration date of refresh token. Only available for grant type 'password'",
            "in": "formData",
            "name": "extend_exp",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "Password (used with grant type 'password'",
            "in": "formData",
            "name": "password",
            "type": "string"
          },
          {
            "description": "Redirect URI (used with grant type 'authorization_code')",
            "in": "formData",
            "name": "redirect_uri",
            "type": "string"
          },
          {
            "description": "Refresh Token (used with grant type 'refresh_token'). This field is optional if the request header provides the \"refresh_token\" cookie",
            "in": "formData",
            "name": "refresh_token",
            "type": "string"
          },
          {
            "description": "User Name (used with grant type 'password'",
            "in": "formData",
            "name": "username",
            "type": "string"
          },
          {
            "description": "Auth-Trust-Id for Device Cookie Validation (Used on grant type 'password')",
            "in": "header",
            "name": "Auth-Trust-Id",
            "type": "string"
          },
          {
            "description": "DeviceID (Used on grant type 'password' to track login history) ex. 90252d14544846d79f367148e3f9a3d9",
            "in": "header",
            "name": "device_id",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenWithDeviceCookieResponseV3"
            }
          },
          "400": {
            "description": "InvalidRequest",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized access",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "429": {
            "description": "Too many failed auth attempt",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        },
        "summary": "OAuth2 access token generation endpoint",
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/iam/v3/oauth/verify": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "This endpoint requires all requests to have Authorization header set with Basic access authentication constructed from client id and client secret.",
        "operationId": "VerifyTokenV3",
        "parameters": [
          {
            "description": "Token to be verified",
            "in": "formData",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Access Token verified",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponseV3"
            }
          },
          "400": {
            "description": "Access Token not exist or expired"
          }
        },
        "summary": "OAuth2 token verification API",
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/iam/v3/platforms/{platformId}/authenticate": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "This endpoint authenticates user platform. It validates user to its\n          respective platforms. Deactivated or login-banned users are unable to login. \u0026lt;br\u0026gt;\n\t\t  \u0026lt;p\u0026gt;If already linked with justice account or match SSO condition, will redirect to client\u0026#39;s redirect url with code. then invoke \u0026#39;/iam/v3/oauth/token\u0026#39; with grant_type=authorization_code\u0026lt;/p\u0026gt;\t\n\t\t  \u0026lt;p\u0026gt;If already not linked with justice account and not match SSO condition, will redirect to client\u0026#39;s account linking page\u0026lt;/p\u0026gt;\t\n          \u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\u0026lt;ul\u0026gt;\n          \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;Steam login page will redirects to this endpoint after login success\n          as previously defined on openID request parameter \u0026lt;code\u0026gt;openid.return_to\u0026lt;/code\u0026gt; when request login to steam\n          https://openid.net/specs/openid-authentication-2_0.html#anchor27\n          \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ps4web\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;PS4 login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter \u0026lt;code\u0026gt;redirect_uri\u0026lt;/code\u0026gt; \n\t\t  https://ps4.siedev.net/resources/documents/WebAPI/1/Auth_WebAPI-Reference/0002.html#0GetAccessTokenUsingAuthorizationCode\n          \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;xblweb\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;XBL login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter \u0026lt;code\u0026gt;redirect_uri\u0026lt;/code\u0026gt; \n          \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;epicgames\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;Epicgames login page will redirects to this endpoint after login success\n          or an error occurred. If error, it redirects to the login page.\n          \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;Twitch login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter \u0026lt;code\u0026gt;redirect_uri\u0026lt;/code\u0026gt;\n          \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;Facebook login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter \u0026lt;code\u0026gt;redirect_uri\u0026lt;/code\u0026gt;\n          \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;Google login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter \u0026lt;code\u0026gt;redirect_uri\u0026lt;/code\u0026gt;\n\t\t  \t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;snapchat\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;Snapchat login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter \u0026lt;code\u0026gt;redirect_uri\u0026lt;/code\u0026gt;\n\t\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;discord\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;Discord login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter \u0026lt;code\u0026gt;redirect_uri\u0026lt;/code\u0026gt;\n          \u0026lt;/ul\u0026gt; action code : 10709",
        "operationId": "PlatformAuthenticationV3",
        "parameters": [
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "State that contains request ID retrieved from authorize endpoint ([GET] iam/v3/oauth/authorize)",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          },
          {
            "description": "The authorization code from 3rd party OAuth server",
            "in": "query",
            "name": "code",
            "type": "string"
          },
          {
            "description": "The error message from 3rd party OAuth server",
            "in": "query",
            "name": "error",
            "type": "string"
          },
          {
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "in": "query",
            "name": "openid.assoc_handle",
            "type": "string"
          },
          {
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "in": "query",
            "name": "openid.claimed_id",
            "type": "string"
          },
          {
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "in": "query",
            "name": "openid.identity",
            "type": "string"
          },
          {
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "in": "query",
            "name": "openid.mode",
            "type": "string"
          },
          {
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "in": "query",
            "name": "openid.ns",
            "type": "string"
          },
          {
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "in": "query",
            "name": "openid.op_endpoint",
            "type": "string"
          },
          {
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "in": "query",
            "name": "openid.response_nonce",
            "type": "string"
          },
          {
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "in": "query",
            "name": "openid.return_to",
            "type": "string"
          },
          {
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "in": "query",
            "name": "openid.sig",
            "type": "string"
          },
          {
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "in": "query",
            "name": "openid.signed",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "302": {
            "description": "Found. Redirect to clients redirection URL with either code or error on the query parameter",
            "headers": {
              "Location": {
                "description": "The Location header",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Platform Authentication API",
        "tags": [
          "OAuth2.0 - Extension"
        ],
        "x-location-query": "PLACEHOLDER"
      }
    },
    "/iam/v3/public/inputValidations": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;No role required\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;This endpoint is to get list of input validation configuration.\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;\u0026lt;code\u0026gt;regex\u0026lt;/code\u0026gt; parameter will be returned if \u0026lt;code\u0026gt;isCustomRegex\u0026lt;/code\u0026gt; is true. Otherwise, it will be empty.\u0026lt;/p\u0026gt;\n\t\t",
        "operationId": "PublicGetInputValidations",
        "parameters": [
          {
            "default": true,
            "description": "default true, will return default language if languageCode is empty or language not available",
            "in": "query",
            "name": "defaultOnEmpty",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "Language Code for description",
            "in": "query",
            "name": "languageCode",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.InputValidationsPublicResponse"
            }
          },
          "404": {
            "description": "Data not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Public Get Input Validations",
        "tags": [
          "InputValidations"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/agerestrictions/countries/{countryCode}": {
      "get": {
        "description": "Get age restriction by country code. It will always get by publisher namespace",
        "operationId": "PublicGetCountryAgeRestrictionV3",
        "parameters": [
          {
            "description": "Country Code ",
            "in": "path",
            "name": "countryCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.CountryV3Response"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Public get age restriction by country code",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/platforms/clients/active": {
      "get": {
        "description": "This is the Public API to Get All Active 3rd Platform Credential.",
        "operationId": "RetrieveAllActiveThirdPartyLoginPlatformCredentialPublicV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "All Active Third Party Credential Retrieved",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.PublicThirdPartyPlatformInfo"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Third Party Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get All Active Third Party Platform Active Credential for Public Usage",
        "tags": [
          "Third Party Credential"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/platforms/clients/oidc": {
      "get": {
        "description": "This is the Public API to Get All Active OIDC Platform Credential By Client ID",
        "operationId": "RetrieveActiveOIDCClientsPublicV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Client ID",
            "in": "query",
            "name": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "All Active OIDC Credential Retrieved",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.PublicThirdPartyPlatformInfo"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "OIDC Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get Active OIDC Platform Credential By Client ID",
        "tags": [
          "Third Party Credential"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/platforms/{platformId}/users": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "List User ID By Platform User ID\nThis endpoint intended to list game user ID from the given namespace\nThis endpoint return list of user ID by given platform ID and list of platform user ID \n\n\u0026lt;strong\u0026gt;nintendo platform user ID\u0026lt;/strong\u0026gt;: NSA ID need to be appended with Environment ID using colon as separator. e.g kmzwa8awaa:dd1\n",
        "operationId": "PublicListUserIDByPlatformUserIDsV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.PlatformUserIDRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.UserPlatforms"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List User ID By Platform User ID",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/platforms/{platformId}/users/{platformUserId}": {
      "get": {
        "description": "Get User By Platform User ID\n\t\t\nThis endpoint return user information by given platform ID and platform user ID \n\n\u0026lt;strong\u0026gt;nintendo platform user ID\u0026lt;/strong\u0026gt;: NSA ID need to be appended with Environment ID using colon as separator. e.g kmzwa8awaa:dd1\n",
        "operationId": "PublicGetUserByPlatformUserIDV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform User ID",
            "in": "path",
            "name": "platformUserId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get User By Platform User ID",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/requests/{requestId}/async/status": {
      "get": {
        "description": "This endpoint is used to get linking status.",
        "operationId": "PublicGetAsyncStatus",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Request ID of the link status",
            "in": "path",
            "name": "requestId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.LinkRequest"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get Linking Progress Status",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users": {
      "get": {
        "description": "\u0026lt;p\u0026gt;Requires valid user access token\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;This endpoint search all users on the specified namespace that match the query on these fields: display name, and username.\n\t\t\tThe query length should greater than 1，otherwise will not query the database. The default limit value is 100\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;action code : 10132",
        "operationId": "PublicSearchUserV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Search by given attribute, possible values are displayName and username",
            "in": "query",
            "name": "by",
            "type": "string"
          },
          {
            "description": "The number of data retrieved in a page, default 100",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "number of offset, default 0",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "Query, can be either display name or username",
            "in": "query",
            "name": "query",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUserInformationResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Search User",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\n\t\t\u0026lt;p\u0026gt;Available Authentication Types:\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;ol\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;EMAILPASSWD\u0026lt;/strong\u0026gt;: an authentication type used for new user registration through email.\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ol\u0026gt;\n\t\t\u0026lt;p\u0026gt;Country use ISO3166-1 alpha-2 two letter, e.g. US.\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;Date of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;This endpoint support accepting agreements for the created user. Supply the accepted agreements in acceptedPolicies attribute.\u0026lt;/p\u0026gt;",
        "operationId": "PublicCreateUserV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserCreateResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/availability": {
      "get": {
        "description": "Check user\u0026#39;s account availability. \nAvailable field :\n\t- displayName\n\nIf request include access token with user ID data, that user ID will be excluded from availability check.\nFor example, in case user update his emailAddress, he can use his own emailAddress to update his account.\n\nResponse Code :\n\t- Account Available : 404 (not found)\n\t- Account Not Available : 204 (no content)\n",
        "operationId": "CheckUserAvailability",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "field name that want to be checked",
            "in": "query",
            "name": "field",
            "required": true,
            "type": "string"
          },
          {
            "description": "query or value that want to be checked",
            "in": "query",
            "name": "query",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Check user's account availability",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/bulk/basic": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Notes:\u0026lt;/p\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;This endpoint bulk get users\u0026#39; basic info by userId, max allowed 100 at a time\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;If namespace is game, will search by game user Id, other wise will search by publisher namespace\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;Result will include displayName(if it exists)\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t",
        "operationId": "PublicBulkGetUsers",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserIDsRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ListBulkUserResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10185\u003c/td\u003e\u003ctd\u003epublisher namespace not allowed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Bulk get users' basic info by user Id",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/code/request": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoint will validate the request\u0026#39;s email address.\n\nIf it already been used, will response 409.\n\nIf it is available, we will send a verification code to this email address. \nThis code can be verified by this \u0026lt;a href=\u0026#34;#operations-Users-PublicVerifyRegistrationCode\u0026#34;\u0026gt;endpoint\u0026lt;/a\u0026gt;.\n",
        "operationId": "PublicSendRegistrationCode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendRegisterVerificationCodeRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Send verification code to new unregistered account's email address",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/code/verify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Verify the registration code\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicVerifyRegistrationCode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.VerifyRegistrationCode"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Code is valid"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Verify the registration code",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/forgot": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Special note for publisher-game scenario:\u0026lt;/strong\u0026gt; \nGame Client should provide game namespace path parameter and Publisher \nClient should provide publisher namespace path parameter. \u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;The password reset code will be sent to the publisher account\u0026#39;s email address. \u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;action code : 10104 \u0026lt;/p\u0026gt;\n",
        "operationId": "PublicForgotPasswordV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ForgotPasswordRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Request Password Reset Code",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/invite/{invitationId}": {
      "get": {
        "description": "Endpoint to validate user invitation. When not found, it could also means the invitation has expired.\n",
        "operationId": "GetAdminInvitationV3",
        "parameters": [
          {
            "description": "Invitation ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "invitationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserInvitationV3"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10180\u003c/td\u003e\u003ctd\u003eadmin invitation not found or expired\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get User Invitation",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoint create user from saved roles when creating invitation and submitted data.\nUser will be able to login after completing submitting the data through this endpoint.\nAvailable Authentication Types:\n\n\tEMAILPASSWD: an authentication type used for new user registration through email.\n\nCountry use ISO3166-1 alpha-2 two letter, e.g. US.\n\nDate of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\n",
        "operationId": "CreateUserFromInvitationV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateFromInvitationRequestV3"
            }
          },
          {
            "description": "Invitation ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "invitationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserCreateResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10180\u003c/td\u003e\u003ctd\u003eadmin invitation not found or expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create User From Invitation",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Requires valid user access token \u0026lt;/p\u0026gt;\n\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;This Endpoint support update user based on given data. \u0026lt;b\u0026gt;Single request can update single field or multi fields.\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; \n\u0026lt;p\u0026gt;Supported field {country, displayName, languageTag, dateOfBirth, avatarUrl}\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Country use ISO3166-1 alpha-2 two letter, e.g. US.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Date of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\u0026lt;/p\u0026gt;\n\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;Several case of updating email address\u0026lt;/b\u0026gt;\n\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;User want to update email address of which have been verified, newEmailAddress response field will be filled with new email address.\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;User want to update email address of which have not been verified, { oldEmailAddress, emailAddress} response field will be filled with new email address. \u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;User want to update email address of which have been verified and updated before, { oldEmailAddress, emailAddress} response field will be filled with verified email before. newEmailAddress response field will be filled with newest email address. \u0026lt;/li\u0026gt;\n\u0026lt;p\u0026gt;action code : 10103 \u0026lt;/p\u0026gt;",
        "operationId": "PublicPartialUpdateUserV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update User",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Requires valid user access token \u0026lt;/p\u0026gt;\n\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;This Endpoint support update user based on given data. \u0026lt;b\u0026gt;Single request can update single field or multi fields.\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; \n\u0026lt;p\u0026gt;Supported field {country, displayName, languageTag, dateOfBirth, avatarUrl}\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Country use ISO3166-1 alpha-2 two letter, e.g. US.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Date of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\u0026lt;/p\u0026gt;\n\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;Several case of updating email address\u0026lt;/b\u0026gt;\n\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;User want to update email address of which have been verified, newEmailAddress response field will be filled with new email address.\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;User want to update email address of which have not been verified, { oldEmailAddress, emailAddress} response field will be filled with new email address. \u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;User want to update email address of which have been verified and updated before, { oldEmailAddress, emailAddress} response field will be filled with verified email before. newEmailAddress response field will be filled with newest email address. \u0026lt;/li\u0026gt;\n\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;Important notes:\u0026lt;/b\u0026gt;\n\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;This endpoint provides support for client that doesn\u0026#39;t have PATCH support, i.e. UE4 before v4.23 released.\n\u0026lt;br\u0026gt;If the client support PATCH method, use [PATCH] /iam/v3/public/namespaces/{namespace}/users/me instead\u0026lt;/p\u0026gt;\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;action code : 10103 \u0026lt;/p\u0026gt;",
        "operationId": "UpdateUserV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/code/request": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required valid user authorization\n\u0026lt;p\u0026gt;The verification code is sent to email address\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Available contexts for use : \u0026lt;/p\u0026gt;\n\u0026lt;ol\u0026gt;\n\t\u0026lt;li\u0026gt;\n\t\t\u0026lt;strong\u0026gt;UserAccountRegistration\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;p\u0026gt;a context type used for verifying email address in user account registration. It returns 409 if the email address already verified. \n\t\t\u0026lt;strong\u0026gt;\u0026lt;em\u0026gt;It is the default context if the Context field is empty\u0026lt;/em\u0026gt;\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;\n\t\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;\n\t\t\u0026lt;strong\u0026gt;UpdateEmailAddress\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;p\u0026gt;a context type used for verify user before updating email address.(Without email address verified checking)\u0026lt;/p\u0026gt;\n\t\u0026lt;/li\u0026gt;\n\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;upgradeHeadlessAccount\u0026lt;/strong\u0026gt;\n\t\t\u0026lt;p\u0026gt;The context is intended to be used whenever the email address wanted to be automatically verified on upgrading a headless account.  \n\t\tIf this context used, IAM rejects the request if the email address is already used by others by returning HTTP Status Code 409.\u0026lt;/p\u0026gt;\n\t\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\n\u0026lt;p\u0026gt;action code: 10116\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicSendVerificationCodeV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10140\u003c/td\u003e\u003ctd\u003euser verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Send verification code to user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/code/verify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Will consume code if validateOnly is set false\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Required valid user authorization\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Redeems a verification code sent to a user to verify the user\u0026#39;s contact address is correct\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Available ContactType : \u0026lt;b\u0026gt;email\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;action code: 10107\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicUserVerificationV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserVerificationRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10149\u003c/td\u003e\u003ctd\u003everification contact type doesn't match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10148\u003c/td\u003e\u003ctd\u003everification code context doesn't match the required context\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10141\u003c/td\u003e\u003ctd\u003eemail verified\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Validate or consume verification code sent to user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/headless/code/verify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;If validateOnly is set false, consume code and upgrade headless account and automatically verified the email address if it is succeeded\u0026lt;/p\u0026gt;\nRequire valid user access token.\n     \t\u0026lt;p\u0026gt;The endpoint upgrades a headless account by linking the headless account with the email address and the password. \nBy upgrading the headless account into a full account, the user could use the email address and password for using Justice IAM. \u0026lt;/p\u0026gt;\n     \t\u0026lt;p\u0026gt;The endpoint is a shortcut for upgrading a headless account and verifying the email address in one call. \nIn order to get a verification code for the endpoint, please check the send verification code endpoint.\u0026lt;/p\u0026gt;\n     \t\u0026lt;p\u0026gt;This endpoint also have an ability to update user data (if the user data field is specified) right after the upgrade account process is done.\u0026lt;br/\u0026gt;\n\tSupported user data fields :\n\t\u0026lt;ul\u0026gt;\n\t\t\u0026lt;li\u0026gt;displayName\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;dateOfBirth : format YYYY-MM-DD, e.g. 2019-04-29\u0026lt;/li\u0026gt;\n\t\t\u0026lt;li\u0026gt;country : format ISO3166-1 alpha-2 two letter, e.g. US\u0026lt;/li\u0026gt;\n\t\u0026lt;/ul\u0026gt;\n     \t\u0026lt;br\u0026gt;action code : 10124\u0026lt;/p\u0026gt;",
        "operationId": "PublicUpgradeHeadlessAccountV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountWithVerificationCodeRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10155\u003c/td\u003e\u003ctd\u003ecountry is not defined\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10149\u003c/td\u003e\u003ctd\u003everification contact type doesn't match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10148\u003c/td\u003e\u003ctd\u003everification code context doesn't match the required context\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10153\u003c/td\u003e\u003ctd\u003euser exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10170\u003c/td\u003e\u003ctd\u003eaccount is already a full account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Verify or consume verification code.",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/headless/verify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Require valid user authorization\u0026lt;br\u0026gt;action code : 10124 \u0026lt;/p\u0026gt;",
        "operationId": "PublicVerifyHeadlessAccountV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountV3Request"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10153\u003c/td\u003e\u003ctd\u003euser exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10170\u003c/td\u003e\u003ctd\u003eaccount is already a full account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Upgrade user account to full account (with email)",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/password": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Required valid user authorization. \u0026lt;br\u0026gt; action code: 10107",
        "operationId": "PublicUpdatePasswordV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserPasswordUpdateV3Request"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10142\u003c/td\u003e\u003ctd\u003enew password cannot be same with original\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10143\u003c/td\u003e\u003ctd\u003epassword not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update User Password",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/justice/{targetNamespace}": {
      "post": {
        "description": "Create Justice User from Publisher User information. It will check first if Justice User on target namespace already exist.\n",
        "operationId": "PublicCreateJusticeUser",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Target namespace",
            "in": "path",
            "name": "targetNamespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.CreateJusticeUserResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create Justice User from Publisher User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required valid user authorization.\n\t\t\t\u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steam\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oculus\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;android\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ios\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;apple\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;device\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;discord\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;awscognito\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;epicgames\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;nintendo\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;stadia\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\t\u0026lt;p\u0026gt;Unlink user\u0026#39;s account from a specific platform. \u0026#39;justice\u0026#39; platform might have multiple accounts from different namespaces linked.\n\t\t\t\u0026lt;br\u0026gt;\u0026lt;i\u0026gt;platformNamespace\u0026lt;/i\u0026gt; need to be specified when the platform ID is \u0026#39;justice\u0026#39;.\n\t\t\t\u0026lt;br\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;Unlink user\u0026#39;s account from justice platform will enable password token grant and password update.\n\t\t\t\u0026lt;br\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;If you want to unlink user\u0026#39;s account in a game namespace, you have to specify \u0026lt;i\u0026gt;platformNamespace\u0026lt;/i\u0026gt; to that game namespace.\n\t\t\t\u0026lt;br\u0026gt;\n\t\t\t\u0026lt;br\u0026gt;action code : 10121 \u0026lt;/p\u0026gt;",
        "operationId": "PublicPlatformUnlinkV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UnlinkUserPlatformRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Unlink user's account from specific platform",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Required valid user authorization.\n\t\t\u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;Prerequisite:\u0026lt;/b\u0026gt; \n\t\tPlatform client configuration need to be added to database for specific platformId. Namespace service URL need to be specified (refer to required environment variables).\n\t\t\t\u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steam\u0026lt;/strong\u0026gt;: The ticket’s value is the authentication code returned by Steam.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt;: Steam\u0026#39;s user authentication method using OpenID 2.0. The ticket\u0026#39;s value is URL generated by Steam on web authentication\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Facebook OAuth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Google OAuth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oculus\u0026lt;/strong\u0026gt;: The ticket’s value is a string composed of Oculus\u0026#39;s user ID and the nonce separated by a colon (:).\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Twitch OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;android\u0026lt;/strong\u0026gt;: The ticket\u0026#39;s value is the Android’s device ID\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ios\u0026lt;/strong\u0026gt;: The ticket\u0026#39;s value is the iOS’s device ID.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;apple\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Apple OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;device\u0026lt;/strong\u0026gt;: Every device that doesn\u0026#39;t run Android and iOS is categorized as a device platform. The ticket\u0026#39;s value is the device’s ID.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;discord\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by Discord OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ps4web\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by PSN OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;xblweb\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code returned by XBox Live OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;awscognito\u0026lt;/strong\u0026gt;: The ticket’s value is the aws cognito access token (JWT).\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;epicgames\u0026lt;/strong\u0026gt;: The ticket’s value is an access-token obtained from Epicgames EOS Account Service.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;nintendo\u0026lt;/strong\u0026gt;: The ticket’s value is the authorization code(id_token) returned by Nintendo OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;stadia\u0026lt;/strong\u0026gt;: The ticket’s value is a JWT Token, which can be obtained after calling the Stadia SDK\u0026#39;s function.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t\u0026lt;br\u0026gt;action code : 10144",
        "operationId": "PublicPlatformLinkV3",
        "parameters": [
          {
            "description": "Ticket from platform, not contain whitespace",
            "in": "formData",
            "name": "ticket",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "[Special case for ps4web and xblweb platform] The same redirectUri as when the client request authorization code. The redirectUri when client request auth code need to be exactly same with redirectUri when IAM requesting exchange token to the Platform (ps4web, xblweb)",
            "in": "formData",
            "name": "redirectUri",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10174\u003c/td\u003e\u003ctd\u003eplatform client not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10163\u003c/td\u003e\u003ctd\u003eplatform is already linked with the user account\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10172\u003c/td\u003e\u003ctd\u003eplatform user is already linked with the account\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10173\u003c/td\u003e\u003ctd\u003eplatform is already linked with another user account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Link user's account with platform",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/all": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required valid user authorization.\n\t\t\t\u0026lt;p\u0026gt;Unlink user\u0026#39;s account from for all third platforms. \u0026lt;/p\u0026gt;",
        "operationId": "PublicPlatformUnlinkAllV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Unlink user's account from specific platform",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/force": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Force linking user account with platform. \n\t\t\t\u0026lt;br\u0026gt; If this platform account was already linked to another user account, this endpoint will perform force linking and remove platform from that conflict user, not only from the current request namespace but also include all the enrolled namespaces.\u0026lt;/br\u0026gt; \n\t\t\t\u0026lt;br\u0026gt; If current user have linked to this platform with another platform account (include once linked but it is unlinked now), it will not allow user to perform linking.\u0026lt;/br\u0026gt; \n\t\t\t\u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\n\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steam\u0026lt;/strong\u0026gt;: The platform_token’s value is the authentication code returned by Steam.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;steamopenid\u0026lt;/strong\u0026gt;: Steam\u0026#39;s user authentication method using OpenID 2.0. The platform_token\u0026#39;s value is URL generated by Steam on web authentication\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;facebook\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Facebook OAuth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;google\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Google OAuth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;oculus\u0026lt;/strong\u0026gt;: The platform_token’s value is a string composed of Oculus\u0026#39;s user ID and the nonce separated by a colon (:).\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;twitch\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Twitch OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;discord\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Discord OAuth\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;android\u0026lt;/strong\u0026gt;: The device_id is the Android’s device ID\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ios\u0026lt;/strong\u0026gt;: The device_id is the iOS’s device ID.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;apple\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Apple OAuth.(We will use this code to generate APP token)\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;device\u0026lt;/strong\u0026gt;: Every device that does’nt run Android and iOS is categorized as a device. The device_id is the device’s ID.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;justice\u0026lt;/strong\u0026gt;: The platform_token’s value is the designated user’s access token.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;epicgames\u0026lt;/strong\u0026gt;: The platform_token’s value is an access-token obtained from Epicgames EOS Account Service.\u0026lt;/li\u0026gt;\n                \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;stadia\u0026lt;/strong\u0026gt;: The platform_token\u0026#39;s value is a JWT Token, which can be obtained after calling the Stadia SDK\u0026#39;s function.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ps4\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Sony OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;ps5\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Sony OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;nintendo\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code(id_token) returned by Nintendo OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;awscognito\u0026lt;/strong\u0026gt;: The platform_token’s value is the aws cognito access token or id token (JWT).\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;live\u0026lt;/strong\u0026gt;: The platform_token’s value is xbox XSTS token\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;xblweb\u0026lt;/strong\u0026gt;: The platform_token’s value is code returned by xbox after login\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;netflix\u0026lt;/strong\u0026gt;: The platform_token’s value is GAT (Gamer Access Token) returned by Netflix backend\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;snapchat\u0026lt;/strong\u0026gt;: The platform_token’s value is the authorization code returned by Snapchat OAuth.\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;/ul\u0026gt;\n\t\t",
        "operationId": "PublicForcePlatformLinkV3",
        "parameters": [
          {
            "description": "Token from platform auth",
            "in": "formData",
            "name": "ticket",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10174\u003c/td\u003e\u003ctd\u003eplatform client not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10163\u003c/td\u003e\u003ctd\u003eplatform is already linked with the user account\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10172\u003c/td\u003e\u003ctd\u003eplatform user is already linked with the account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Force linking user's account with platform",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/web/link": {
      "get": {
        "description": "This endpoint is used to generate third party login page which will redirected to establish endpoint.",
        "operationId": "PublicWebLinkPlatform",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform Id to be linked",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Client ID",
            "in": "query",
            "name": "clientId",
            "type": "string"
          },
          {
            "description": "Redirect URI",
            "in": "query",
            "name": "redirectUri",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.WebLinkingResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10365\u003c/td\u003e\u003ctd\u003eclient not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create Public Web Linking",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/web/link/establish": {
      "get": {
        "description": "This endpoint is used by third party to redirect the code for the purpose of linking the account third party to IAM account.",
        "operationId": "PublicWebLinkPlatformEstablish",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform Id to be linked",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "state from third party redirect",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "302": {
            "description": "Handle Redirect from third party",
            "headers": {
              "Location": {
                "description": "The Location header",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Establish Link Progress ",
        "tags": [
          "Users"
        ],
        "x-location-query": "PLACEHOLDER"
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/reset": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;action code: 10105\u0026lt;/p\u0026gt;",
        "operationId": "ResetPasswordV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ResetPasswordRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10142\u003c/td\u003e\u003ctd\u003enew password cannot be same with original\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Reset User Password",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}": {
      "get": {
        "description": "\u0026lt;p\u0026gt;This endpoint retrieve user attributes. action code: 10129\u0026lt;/p\u0026gt;",
        "operationId": "PublicGetUserByUserIdV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get User By User ID",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "description": "Required valid user authorization.\n\t\t\u0026lt;p\u0026gt;Notes:\u0026lt;/p\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;This endpoint retrieve the first page of the data if after and before parameters is empty\u0026lt;/li\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;The pagination is not working yet\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t",
        "operationId": "PublicGetUserBanHistoryV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter ban based on the ban status. If you set this, only active ban returned",
            "in": "query",
            "name": "activeOnly",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "Filter ban based on the date creation. If you set this, only user bans created after the date returned. The date is in ISO-8601. Example value: 2019-05-18T07:17:45Z. \u003cem\u003eDoesn't work yet\u003c/em\u003e",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "Filter ban based on the date creation. If you set this, only user bans created before the date returned. The date is in ISO-8601. Example value: 2019-05-18T07:17:45Z. \u003cem\u003eDoesn't work yet\u003c/em\u003e",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "The number of data returned in one query. The maximum value of the limit is 100 and the minimum value of the limit is 1. If you set this into -1, then it returns all data. Default: -1. \u003cem\u003eDoesn't work yet\u003c/em\u003e.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserBanV3Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get user's bans",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/distinctPlatforms": {
      "get": {
        "description": "\u0026lt;p\u0026gt;This endpoint retrieves platform accounts linked to user.\n\t\t\t\t\t\u0026lt;br\u0026gt;It will query all linked platform accounts and result will be distinct \u0026amp; grouped, same platform we will pick oldest linked one. \n\t\t\t\t\t\u0026lt;br\u0026gt;Required valid user authorization.\u0026lt;/p\u0026gt;",
        "operationId": "PublicListUserAllPlatformAccountsDistinctV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.DistinctPlatformResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get distinct platform accounts linked to the user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/information": {
      "get": {
        "description": "\u0026lt;p\u0026gt;This endpoint retrieves user info and linked platform accounts.\n\t\t\t\t\tRequired permissions \u0026#39;NAMESPACE:{namespace}:INFORMATION:USER:{userId} [READ]\u0026#39;\u0026lt;/p\u0026gt;",
        "operationId": "PublicGetUserInformationV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.UserInformationV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:INFORMATION:USER:{userId} [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user's information v3",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/logins/histories": {
      "get": {
        "description": "Required valid user authorization.\u0026lt;p\u0026gt;Notes for this endpoint: \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;This endpoint retrieve the first page of the data if `after` and `before` parameters is empty.\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;The maximum value of the limit is 100 and the minimum value of the limit is 1.\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;This endpoint retrieve the next page of the data if we provide `after` parameters with valid Unix timestamp.\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;This endpoint retrieve the previous page of the data if we provide `before` parameter with valid data Unix timestamp.\u0026lt;/li\u0026gt;\u0026lt;ul\u0026gt;",
        "operationId": "PublicGetUserLoginHistoriesV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the next page (In Unix timestamp formats, e.g:1545114248)",
            "in": "query",
            "name": "after",
            "type": "number"
          },
          {
            "description": "The cursor that points to query data for the previous page (In Unix timestamp formats, e.g:1545114248).",
            "in": "query",
            "name": "before",
            "type": "number"
          },
          {
            "description": "The number of data retrieved in a page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.LoginHistoriesResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get User's Login Histories",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/platforms": {
      "get": {
        "description": "\u0026lt;p\u0026gt;This endpoint retrieves platform accounts linked to user. Required valid user authorization.\n\t\t\t\t\t\u0026lt;br\u0026gt;action code: 10128 \u0026lt;/p\u0026gt;",
        "operationId": "PublicGetUserPlatformAccountsV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the next page",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the previous page",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "the maximum number of data that may be returned (1...100)",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.UserLinkedPlatformsResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get platform accounts linked to the user",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/platforms/justice": {
      "get": {
        "description": "This endpoint gets list justice platform account by providing publisher namespace and publisher userID\u0026lt;/br\u0026gt;\n\u0026lt;p\u0026gt;Requires valid user access token \u0026lt;/p\u0026gt;\u0026lt;/br\u0026gt;",
        "operationId": "PublicListJusticePlatformAccountsV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": " Publisher User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/model.GetUserMappingV3"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get User Justice Platform Accounts",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/platforms/link": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "It is going to be \u0026lt;strong\u0026gt;DEPRECATED\u0026lt;/strong\u0026gt;.\nUpdate Platform Account relation to current User Account.\nNote: Game progression data (statistics, reward, etc) associated with previous User Account will not be \ntransferred. If the data is tight to game user ID, the user will have the game progression data.\n",
        "operationId": "PublicLinkPlatformAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.LinkPlatformAccountRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Current user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Link a Platform User Account to User Account",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/platforms/linkWithProgression": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Force update other account\u0026#39;s Platform Account relation to current User Account. \u0026lt;br\u0026gt;\nThis endpoint can transfer progression from 3rd platform binding account\u0026#39;s to current account.\nThis endpoint need the same requestID which also used in \u0026lt;a href=\u0026#34;#operations-Users-PublicGetAsyncStatus\u0026#34;\u0026gt;Get link status\u0026lt;/a\u0026gt;.\n",
        "operationId": "PublicForceLinkPlatformWithProgression",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.LinkPlatformAccountWithProgressionRequest"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Current user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Force link 3rd platform account and transfer progression",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/publisher": {
      "get": {
        "description": "\u0026lt;p\u0026gt;Required permissions \u0026#39;NAMESPACE:{namespace}:USER:{userId}:PUBLISHER [READ].\u0026lt;/p\u0026gt;\n\t\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Restriction:\u0026lt;/strong\u0026gt;\n\t\tPath Parameter \u0026lt;strong\u0026gt;namespace\u0026lt;/strong\u0026gt; can be provided only with game namespace\u0026lt;/p\u0026gt;",
        "operationId": "PublicGetPublisherUserV3",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetPublisherUserV3Response"
            }
          },
          "400": {
            "description": "Error Code: 7239 - Error Message: wrong namespace: required game namespace",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PUBLISHER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Publisher User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/validate": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "This endpoint is used to validate the user password. Required valid user authorization and valid user ID.\n\t\t\u0026lt;p\u0026gt;Notes:\u0026lt;/p\u0026gt;\n\t\t\u0026lt;ul\u0026gt;\n\t\t\t\u0026lt;li\u0026gt;This endpoint validate the user password by specifying the userId and password\u0026lt;/li\u0026gt;\n\t\t\u0026lt;/ul\u0026gt;\n\t\t",
        "operationId": "PublicValidateUserByUserIDAndPasswordV3",
        "parameters": [
          {
            "description": "User password",
            "in": "formData",
            "name": "password",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10143\u003c/td\u003e\u003ctd\u003epassword not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Validate user password by user ID and password",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/roles": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": " \u0026lt;br\u0026gt;This endpoint is used to get all non-admin role.  \u0026lt;br\u0026gt; \u0026lt;p\u0026gt;action code: 10418\u0026lt;/p\u0026gt;",
        "operationId": "PublicGetRolesV3",
        "parameters": [
          {
            "description": "The cursor that points to query data for the next page",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the previous page",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "- true if the expected result should only returns records with wildcard = true\n            - false if the expected result should only returns records with wildcard = false\n            - empty (omitted) if the expected result should returns records with no wildcard filter at all\n",
            "in": "query",
            "name": "isWildcard",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "the maximum number of data that may be returned (1...100)",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleNamesResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get Roles",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v3/public/roles/{roleId}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": " \u0026lt;br\u0026gt;This endpoint is used to get non-admin role based on specify roleId.  \u0026lt;br\u0026gt;action code : 10417",
        "operationId": "PublicGetRoleV3",
        "parameters": [
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get Public Role",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v3/public/users/me": {
      "get": {
        "description": "\u0026lt;p\u0026gt;Require valid user authorization\u0026lt;br\u0026gt;Get my user data\u0026lt;br\u0026gt;action code : 10147 \u0026lt;/p\u0026gt;",
        "operationId": "PublicGetMyUserV3",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get My User",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/users/me/verify_link/request": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required valid user authorization\n\u0026lt;p\u0026gt;The verification link is sent to email address\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;It will not send request if user email is already verified\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicSendVerificationLinkV3",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationLinkRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10140\u003c/td\u003e\u003ctd\u003euser verified\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Send verification link to user, this link will point to '/iam/v3/public/users/verify_link/verify'",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/public/users/verify_link/verify": {
      "get": {
        "operationId": "PublicVerifyUserByLinkV3",
        "parameters": [
          {
            "description": "Verification code, it can be get from `/users/me/verify_link/request`",
            "in": "query",
            "name": "code",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "302": {
            "description": "Found. Redirected to verification finish page.",
            "headers": {
              "Location": {
                "description": "The Location header",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Verify user email by the verification link code",
        "tags": [
          "Users"
        ]
      }
    },
    "/iam/v3/sso/saml/platforms/{platformId}/authenticate": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "This endpoint authenticates user platform for SAML protocol. It validates user to its\n          respective platforms. Deactivated or login-banned users are unable to login. \u0026lt;br\u0026gt;\n          \u0026lt;h2\u0026gt;Supported platforms:\u0026lt;/h2\u0026gt;\u0026lt;ul\u0026gt;\n          \u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;azure\u0026lt;/strong\u0026gt;\u0026lt;/li\u0026gt;Microsoft login page will redirects to this endpoint after login success\n          as previously defined on authentication request SAML\n          \u0026lt;/ul\u0026gt;",
        "operationId": "platformAuthenticateSAMLV3Handler",
        "parameters": [
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "State that contains request ID retrieved from authorize endpoint ([GET] iam/v3/oauth/authorize)",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          },
          {
            "description": "The authorization code from 3rd party OAuth server",
            "in": "query",
            "name": "code",
            "type": "string"
          },
          {
            "description": "The error message from Identity Provider (IdP)",
            "in": "query",
            "name": "error",
            "type": "string"
          }
        ],
        "responses": {
          "302": {
            "description": "Found. Redirect to clients redirection URL with either code or error on the query parameter",
            "headers": {
              "Location": {
                "description": "The Location header",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "SAML platform Authentication API",
        "tags": [
          "SSO SAML 2.0"
        ],
        "x-location-query": "PLACEHOLDER"
      }
    },
    "/iam/v3/sso/{platformId}": {
      "get": {
        "operationId": "LoginSSOClient",
        "parameters": [
          {
            "description": "SSO Client ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Key value payload received from SSO client, if any, and must be escaped",
            "in": "query",
            "name": "payload",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Login to SSO client with provided platformId",
        "tags": [
          "SSO"
        ]
      }
    },
    "/iam/v3/sso/{platformId}/logout": {
      "post": {
        "description": "Logout user\u0026#39;s session on platform that logged in using SSO.\n\nSupported platforms:\n- discourse\n",
        "operationId": "LogoutSSOClient",
        "parameters": [
          {
            "description": "SSO Client ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Logout",
        "tags": [
          "SSO"
        ]
      }
    },
    "/iam/v3/token/exchange": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint is being used to generate publisher user\u0026#39;s game token.\u0026lt;br\u0026gt;\n\t\tIt require basic header with ClientID and Secret, it should match the ClientID when call \u0026lt;strong\u0026gt;/iam/v3/namespace/{namespace}/token/request\u0026lt;/strong\u0026gt;\u0026lt;br\u0026gt;\n\t\tIt required a code which can be generated from \u0026lt;strong\u0026gt;/iam/v3/namespace/{namespace}/token/request\u0026lt;/strong\u0026gt;.\u0026lt;br\u0026gt;\n\t\t\u0026lt;/p\u0026gt;",
        "operationId": "RequestGameTokenResponseV3",
        "parameters": [
          {
            "description": "code from request game token",
            "in": "formData",
            "name": "code",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Succeed to generate token.",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponseV3"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Generate game token by code",
        "tags": [
          "OAuth2.0 - Extension"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "      \u0026lt;p\u0026gt;This is the endpoint for an admin to get devices a user ever used to login.\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;Required permission \u0026lt;pre\u0026gt;\u0026#39;ADMIN:NAMESPACE:{namespace}:DEVICE [READ]\u0026#39;\u0026lt;/pre\u0026gt;\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGetDevicesByUserV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user id",
            "in": "query",
            "name": "userId",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DevicesResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20021\u003c/td\u003e\u003ctd\u003einvalid pagination parameter\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DEVICE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin get devices by user id",
        "tags": [
          "Devices V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/banned": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "      \u0026lt;p\u0026gt;This is the endpoint for an admin to get banned devices.\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;Required permission \u0026lt;pre\u0026gt;\u0026#39;ADMIN:NAMESPACE:{namespace}:DEVICE [READ]\u0026#39;\u0026lt;/pre\u0026gt;\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGetBannedDevicesV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "device type",
            "in": "query",
            "name": "deviceType",
            "type": "string"
          },
          {
            "description": "end date",
            "in": "query",
            "name": "endDate",
            "type": "string"
          },
          {
            "description": "the maximum number of data that may be returned (1...100)",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "the count to skip",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "start date",
            "in": "query",
            "name": "startDate",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DeviceBannedResponseV4"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DEVICE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin get banned devices",
        "tags": [
          "Devices V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/bans": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "      \u0026lt;p\u0026gt;This is the endpoint for an admin to get device bans of user.\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;Required permission \u0026lt;pre\u0026gt;\u0026#39;ADMIN:NAMESPACE:{namespace}:DEVICE [READ]\u0026#39;\u0026lt;/pre\u0026gt;\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGetUserDeviceBansV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user id",
            "in": "query",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DeviceBansResponseV4"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DEVICE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin get device bans of user",
        "tags": [
          "Devices V4"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "      \u0026lt;p\u0026gt;This is the endpoint for an admin to ban a device.\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;Required permission \u0026lt;pre\u0026gt;\u0026#39;ADMIN:NAMESPACE:{namespace}:DEVICE [CREATE]\u0026#39;\u0026lt;/pre\u0026gt;\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminBanDeviceV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.DeviceBanRequestV4"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10204\u003c/td\u003e\u003ctd\u003edevice can not be banned\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10202\u003c/td\u003e\u003ctd\u003eactive device ban config already exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DEVICE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin Ban a device",
        "tags": [
          "Devices V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/bans/{banId}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "      \u0026lt;p\u0026gt;This is the endpoint for an admin to get device ban config.\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;Required permission \u0026lt;pre\u0026gt;\u0026#39;ADMIN:NAMESPACE:{namespace}:DEVICE [READ]\u0026#39;\u0026lt;/pre\u0026gt;\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGetDeviceBanV4",
        "parameters": [
          {
            "description": "device id",
            "in": "path",
            "name": "banId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DeviceBanResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DEVICE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin get device ban config",
        "tags": [
          "Devices V4"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "      \u0026lt;p\u0026gt;This is the endpoint for an admin to update a device ban config.\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;Required permission \u0026lt;pre\u0026gt;\u0026#39;ADMIN:NAMESPACE:{namespace}:DEVICE [UPDATE]\u0026#39;\u0026lt;/pre\u0026gt;\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminUpdateDeviceBanV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.DeviceBanUpdateRequestV4"
            }
          },
          {
            "description": "Ban ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "banId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10202\u003c/td\u003e\u003ctd\u003eactive device ban config already exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DEVICE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin update device ban config",
        "tags": [
          "Devices V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/report": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "      \u0026lt;p\u0026gt;This is the endpoint for an admin to generate device report.\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;Required permission \u0026lt;pre\u0026gt;\u0026#39;ADMIN:NAMESPACE:{namespace}:DEVICE [READ]\u0026#39;\u0026lt;/pre\u0026gt;\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGenerateReportV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "device type",
            "in": "query",
            "name": "deviceType",
            "required": true,
            "type": "string"
          },
          {
            "description": "end date",
            "in": "query",
            "name": "endDate",
            "type": "string"
          },
          {
            "description": "start date",
            "in": "query",
            "name": "startDate",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DEVICE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin generate device report",
        "tags": [
          "Devices V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/types": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "      \u0026lt;p\u0026gt;This is the endpoint for an admin to get device types.\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;Required permission \u0026lt;pre\u0026gt;\u0026#39;ADMIN:NAMESPACE:{namespace}:DEVICE [READ]\u0026#39;\u0026lt;/pre\u0026gt;\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGetDeviceTypesV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DeviceTypesResponseV4"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DEVICE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin get device types",
        "tags": [
          "Devices V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/{deviceId}/bans": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "      \u0026lt;p\u0026gt;This is the endpoint for an admin to get device ban list.\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;Required permission \u0026lt;pre\u0026gt;\u0026#39;ADMIN:NAMESPACE:{namespace}:DEVICE [READ]\u0026#39;\u0026lt;/pre\u0026gt;\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGetDeviceBansV4",
        "parameters": [
          {
            "description": "device id",
            "in": "path",
            "name": "deviceId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DeviceBansResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DEVICE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin get device ban list",
        "tags": [
          "Devices V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/{deviceId}/decrypt": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "      \u0026lt;p\u0026gt;This is the endpoint for an admin to decrypt device id.\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;Required permission \u0026lt;pre\u0026gt;\u0026#39;ADMIN:NAMESPACE:{namespace}:DEVICE [READ]\u0026#39;\u0026lt;/pre\u0026gt;\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminDecryptDeviceV4",
        "parameters": [
          {
            "description": "device id",
            "in": "path",
            "name": "deviceId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DeviceIDDecryptResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DEVICE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin decrypt device id",
        "tags": [
          "Devices V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/{deviceId}/unban": {
      "put": {
        "description": "      \u0026lt;p\u0026gt;This is the endpoint for an admin to unban device.\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;Required permission \u0026lt;pre\u0026gt;\u0026#39;ADMIN:NAMESPACE:{namespace}:DEVICE [UPDATE]\u0026#39;\u0026lt;/pre\u0026gt;\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminUnbanDeviceV4",
        "parameters": [
          {
            "description": "device id",
            "in": "path",
            "name": "deviceId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DEVICE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin unban device",
        "tags": [
          "Devices V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/{deviceId}/users": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "      \u0026lt;p\u0026gt;This is the endpoint for an admin to get users that ever login on the device.\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;Required permission \u0026lt;pre\u0026gt;\u0026#39;ADMIN:NAMESPACE:{namespace}:USER [READ]\u0026#39;\u0026lt;/pre\u0026gt;\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGetUsersByDeviceV4",
        "parameters": [
          {
            "description": "device id",
            "in": "path",
            "name": "deviceId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DeviceUsersResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin get users by device id",
        "tags": [
          "Devices V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/test_users": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create test users and not send verification code email.\n        \u0026lt;p\u0026gt;Required Permission: ADMIN:NAMESPACE:{namespace}:USER\u0026lt;/p\u0026gt;\n\t\t",
        "operationId": "AdminCreateTestUsersV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account.createTestUsersRequestV4"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/account.createTestUsersResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "501": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER []"
            ],
            "authorization": []
          }
        ],
        "summary": "[TEST FACILITY ONLY]Create test Users",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/users/bulk/validate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Use this endpoint to check if userID exists or not\n\t\t\t\u0026lt;br\u0026gt;Required permission \u0026#39; ADMIN:NAMESPACE:{namespace}:USER [READ]\u0026#39;\n\t\t\t\u0026lt;br\u0026gt;Maximum number of userID to be checked is 50",
        "operationId": "AdminBulkCheckValidUserIDV4",
        "parameters": [
          {
            "description": "Object of Request to check valid userIDs",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CheckValidUserIDRequestV4"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.ListValidUserIDResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin Check Valid User ID",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/users/{userId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint requires ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE] permission\u0026lt;/p\u0026gt;\n\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;This Endpoint support update user based on given data. \u0026lt;b\u0026gt;Single request can update single field or multi fields.\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; \n\u0026lt;p\u0026gt;Supported field {country, displayName, languageTag, dateOfBirth}\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Country use ISO3166-1 alpha-2 two letter, e.g. US.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Date of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\u0026lt;/p\u0026gt;\n\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;Several case of updating email address\u0026lt;/b\u0026gt;\n\u0026lt;p\u0026gt;action code : 10103 \u0026lt;/p\u0026gt;",
        "operationId": "AdminUpdateUserV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update User",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/users/{userId}/email": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026lt;pre\u0026gt;\u0026#39;ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u0026#39;\u0026lt;/pre\u0026gt;\u0026lt;/p\u0026gt;\n\n\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;This is the endpoint for an admin to update a user email address.\nThis endpoint need a valid user token from an admin to verify its identity (email) before updating a user.\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminUpdateUserEmailAddressV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.EmailUpdateRequestV4"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update a User Email Address",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/users/{userId}/mfa/disable": {
      "delete": {
        "description": "\u0026lt;p\u0026gt;This endpoint requires ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE] permission\u0026lt;/p\u0026gt;\n\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;This endpoint is used to disable user 2FA.\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt;",
        "operationId": "AdminDisableUserMFAV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10193\u003c/td\u003e\u003ctd\u003emfa not enabled\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Disable User 2FA",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/users/{userId}/roles": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [Delete] permission.\n\nRemove a role from user\u0026#39;s roles.\n",
        "operationId": "AdminRemoveUserRoleV4",
        "parameters": [
          {
            "description": "Object of Role ID with allowed namespaces to be removed",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RemoveUserRoleV4Request"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10183\u003c/td\u003e\u003ctd\u003eunprocessable entity\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [Delete]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin Remove User Role v4",
        "tags": [
          "Users V4"
        ]
      },
      "get": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [READ] permission.\n\nList roles assigned to a user\n",
        "operationId": "AdminListUserRolesV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.ListUserRolesV4Response"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin List User's Roles V4",
        "tags": [
          "Users V4"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [UPDATE] permission.\n\nNew role will be appended to user\u0026#39;s current roles. Request body need to specify allowed namespace for given role to support new role restriction.\nSkipped the check whether the user performing the request is a role manager / assigner since there is a plan to discard the role manager / assigner.\n",
        "operationId": "AdminAddUserRoleV4",
        "parameters": [
          {
            "description": "Object of Role ID to be assigned with allowed namespaces",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AddUserRoleV4Request"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.ListUserRolesV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin Add User's Role V4",
        "tags": [
          "Users V4"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [UPDATE] permission.\n\nUser\u0026#39;s roles will be replaced with roles from request body.\n",
        "operationId": "AdminUpdateUserRoleV4",
        "parameters": [
          {
            "description": "Object of Role ID to be assigned with allowed namespaces",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AddUserRoleV4Request"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.ListUserRolesV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10183\u003c/td\u003e\u003ctd\u003eunprocessable entity\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin Update User's Role V4",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/roles": {
      "get": {
        "description": "Required permission ADMIN:ROLE [READ]\n\naction code: 10414",
        "operationId": "AdminGetRolesV4",
        "parameters": [
          {
            "description": "- true if the expected result should only returns records with adminRole = true\n            - false if the expected result should only returns records with adminRole = false\n            - empty (omitted) if the expected result should returns records with no wildcard filter at all",
            "in": "query",
            "name": "adminRole",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "- true if the expected result should only returns records with wildcard = true\n            - false if the expected result should only returns records with wildcard = false\n            - empty (omitted) if the expected result should returns records with no wildcard filter at all",
            "in": "query",
            "name": "isWildcard",
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "the maximum number of data that may be returned (1...100)",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "the count to skip",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ListRoleV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Roles",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission: ADMIN:ROLE [CREATE]\n\nCreate role request body:\n- roleName: specify role name, alphanumeric, cannot have special character (required)\n- adminRole: specify if role is for admin user (default false)\n- isWildcard: specify if role can be assigned to wildcard (*) namespace (default false)\n- deletable: specify if role can be deleted (default true)\n\naction code: 10401",
        "operationId": "AdminCreateRoleV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleV4Request"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10466\u003c/td\u003e\u003ctd\u003einvalid role members\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create Role",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v4/admin/roles/{roleId}": {
      "delete": {
        "description": "Required permission ADMIN:ROLE [DELETE]\n\nRemoves role ID from user\u0026#39;s Roles and NamespaceRoles before deleting the role.\n\naction code: 10403",
        "operationId": "AdminDeleteRoleV4",
        "parameters": [
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Role",
        "tags": [
          "Roles"
        ]
      },
      "get": {
        "description": "Required permission ADMIN:ROLE [READ]\n\naction code: 10419",
        "operationId": "AdminGetRoleV4",
        "parameters": [
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Role",
        "tags": [
          "Roles"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:ROLE [UPDATE]\n\nUpdate role request body:\n- roleName: specify role name, alphanumeric, cannot have special character (required)\n- adminRole: specify if role is for admin user (default false)\n- isWildcard: specify if role can be assigned to wildcard (*) namespace (default false)\n- deletable: specify if role can be deleted (optional)\n\naction code: 10402",
        "operationId": "AdminUpdateRoleV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleV4Request"
            }
          },
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Role",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v4/admin/roles/{roleId}/permissions": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:ROLE [UPDATE]\n",
        "operationId": "AdminDeleteRolePermissionsV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete Role Permission V4",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint will ATTACH permission(s) into the role\u0026lt;/p\u0026gt;\n\u0026lt;br\u0026gt;action code: 10404\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;In ranged schedule, first element will be start date, and second one will be end date\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Syntax reference\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Fields:\u0026lt;/p\u0026gt;\n\u0026lt;ol\u0026gt;\n\u0026lt;li\u0026gt;Seconds: 0-59 * / , -\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;Minutes: 0-59 * / , -\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;Hours: 0-23 * / , -\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;Day of month: 1-31 * / , - L W\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;Month: 1-12 JAN-DEC * / , -\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;Day of week: 0-6 SUN-SAT * / , - L #\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;Year: 1970-2099 * / , -\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\n\u0026lt;p\u0026gt;Special characters:\u0026lt;/p\u0026gt;\n\u0026lt;ol\u0026gt;\n\u0026lt;li\u0026gt;*: all values in the fields, e.g. * in seconds fields indicates every second\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;,: separate items of a list, e.g. MON,WED,FRI in day of week\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \u0026#34;the last Friday\u0026#34; (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \u0026#34;the nearest business day to the 15th of the month.\u0026#34;\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;#: must be followed by a number between one and five. It allows you to specify constructs such as \u0026#34;the second Friday\u0026#34; of a given month.\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\n",
        "operationId": "AdminAddRolePermissionsV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.PermissionsV3"
            }
          },
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add Role Permissions V4",
        "tags": [
          "Roles"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Required permission \u0026#39;ADMIN:ROLE [UPDATE]\u0026#39;\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint will REPLACE role\u0026#39;s permissions with the ones defined in body\u0026lt;/p\u0026gt;\n\u0026lt;br\u0026gt;action code: 10405\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;Schedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Both schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;In ranged schedule, first element will be start date, and second one will be end date\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;If schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Syntax reference\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Fields:\u0026lt;/p\u0026gt;\n\u0026lt;ol\u0026gt;\n\u0026lt;li\u0026gt;Seconds: 0-59 * / , -\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;Minutes: 0-59 * / , -\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;Hours: 0-23 * / , -\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;Day of month: 1-31 * / , - L W\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;Month: 1-12 JAN-DEC * / , -\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;Day of week: 0-6 SUN-SAT * / , - L #\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;Year: 1970-2099 * / , -\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\n\u0026lt;p\u0026gt;Special characters:\u0026lt;/p\u0026gt;\n\u0026lt;ol\u0026gt;\n\u0026lt;li\u0026gt;*: all values in the fields, e.g. * in seconds fields indicates every second\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;,: separate items of a list, e.g. MON,WED,FRI in day of week\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;L: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \u0026#34;the last Friday\u0026#34; (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;W: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \u0026#34;the nearest business day to the 15th of the month.\u0026#34;\u0026lt;/li\u0026gt;\n\u0026lt;li\u0026gt;#: must be followed by a number between one and five. It allows you to specify constructs such as \u0026#34;the second Friday\u0026#34; of a given month.\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\n",
        "operationId": "AdminUpdateRolePermissionsV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.PermissionsV3"
            }
          },
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Role Permissions",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v4/admin/roles/{roleId}/users": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:ROLE [UPDATE]\n\nCurrent implementation will revoke user from role in all assigned namespaces.\n\nParameters:\n- userId: string  (required)\n- namespace: string (user’s namespace)  (required)\n\naction code: 10411",
        "operationId": "AdminRevokeUserFromRoleV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RevokeUserV4Request"
            }
          },
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10457\u003c/td\u003e\u003ctd\u003especified role is not admin role\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10459\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Revoke User from Role",
        "tags": [
          "Roles"
        ]
      },
      "get": {
        "description": "Required permission ADMIN:ROLE [READ]\nQuery all users that has the specified role.\naction code: 10416\n",
        "operationId": "AdminListAssignedUsersV4",
        "parameters": [
          {
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the next page",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "The cursor that points to query data for the previous page",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "the maximum number of data that may be returned (1...100)",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ListAssignedUsersV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Role's Assigned Users",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission ADMIN:ROLE [UPDATE]\n\nParameters:\n- userId: string  (required)\n- namespace: string (user’s namespace)  (required)\n- assignedNamespaces: array of string (namespaces to be assigned on role) (required)\n\naction code: 10410",
        "operationId": "AdminAssignUserToRoleV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AssignUserV4Request"
            }
          },
          {
            "description": "Role id",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.AssignedUserV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10457\u003c/td\u003e\u003ctd\u003especified role is not admin role\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10459\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10469\u003c/td\u003e\u003ctd\u003erole member exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10183\u003c/td\u003e\u003ctd\u003eunprocessable entity\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:ROLE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Assign User to Role",
        "tags": [
          "Roles"
        ]
      }
    },
    "/iam/v4/admin/users/me": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Requires valid user access token \u0026lt;/p\u0026gt;\n\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;This Endpoint support update user based on given data. \u0026lt;b\u0026gt;Single request can update single field or multi fields.\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; \n\u0026lt;p\u0026gt;Supported field {country, displayName, languageTag, dateOfBirth, userName}\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Country use ISO3166-1 alpha-2 two letter, e.g. US.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Date of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;action code : 10103 \u0026lt;/p\u0026gt;",
        "operationId": "AdminUpdateMyUserV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10177\u003c/td\u003e\u003ctd\u003eusername already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Admin Update My User",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/users/me/mfa/authenticator/disable": {
      "delete": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to disable 2FA authenticator.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminDisableMyAuthenticatorV4",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Authenticator disabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Disable 2FA authenticator",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/users/me/mfa/authenticator/enable": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint is used to enable 2FA authenticator.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminEnableMyAuthenticatorV4",
        "parameters": [
          {
            "description": "code",
            "in": "formData",
            "name": "code",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Authenticator enabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10190\u003c/td\u003e\u003ctd\u003eauth secret key expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10194\u003c/td\u003e\u003ctd\u003efactor already enabled\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Enable 2FA authenticator",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/users/me/mfa/authenticator/key": {
      "post": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to generate a secret key for 3rd-party authenticator app. \nA QR code URI is also returned so that frontend can generate QR code image.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGenerateMyAuthenticatorKeyV4",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Key generated",
            "schema": {
              "$ref": "#/definitions/model.AuthenticatorKeyResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Generate secret key for 3rd-party authenticate app",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/users/me/mfa/backupCode": {
      "get": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to get 8-digits backup codes. \nEach code is a one-time code and will be deleted once used.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGetMyBackupCodesV4",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get backup codes",
            "schema": {
              "$ref": "#/definitions/model.BackupCodesResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get backup codes",
        "tags": [
          "Users V4"
        ]
      },
      "post": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to generate 8-digits backup codes. \nEach code is a one-time code and will be deleted once used.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGenerateMyBackupCodesV4",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Backup codes generated",
            "schema": {
              "$ref": "#/definitions/model.BackupCodesResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Generate backup codes",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/users/me/mfa/backupCode/disable": {
      "delete": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to enable 2FA backup codes.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminDisableMyBackupCodesV4",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Backup codes disabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Disable 2FA backup codes",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/users/me/mfa/backupCode/download": {
      "get": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to download backup codes.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminDownloadMyBackupCodesV4",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Backup codes downloaded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10195\u003c/td\u003e\u003ctd\u003eno valid backup code found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Download user backup codes",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/users/me/mfa/backupCode/enable": {
      "post": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to enable 2FA backup codes.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminEnableMyBackupCodesV4",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Backup codes enabled",
            "schema": {
              "$ref": "#/definitions/model.BackupCodesResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10194\u003c/td\u003e\u003ctd\u003efactor already enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10194\u003c/td\u003e\u003ctd\u003efactor already enabled\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Enable 2FA backup codes",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/users/me/mfa/factor": {
      "get": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to get user enabled factors.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminGetMyEnabledFactorsV4",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Methods returned",
            "schema": {
              "$ref": "#/definitions/model.EnabledFactorsResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10193\u003c/td\u003e\u003ctd\u003emfa not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get user enabled factors",
        "tags": [
          "Users V4"
        ]
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint is used to make 2FA factor default.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "AdminMakeFactorMyDefaultV4",
        "parameters": [
          {
            "description": "method",
            "in": "formData",
            "name": "factor",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Default method changed"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10189\u003c/td\u003e\u003ctd\u003einvalid factor\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Make 2FA factor default",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/admin/users/users/invite": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Required permission \u0026#39;ADMIN:USER:INVITE [CREATE]\n\nUse this endpoint to invite admin or non-admin user and assign role to them. The role must be scoped to namespace. An admin user can only\nassign role with namespaces that the admin user has required permission which is same as the required permission of endpoint: [AdminAddUserRoleV4].\nRole is optional, if not specified then it will only assign User role\n\nThe invited admin will also assigned with \u0026#34;User\u0026#34; role by default.\n",
        "operationId": "AdminInviteUserV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.InviteUserRequestV4"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.InviteUserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "HasPermission": [
              "ADMIN:USER:INVITE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin invite User v4",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/test_users": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a test user and not send verification code email\n\t\t\u0026lt;p\u0026gt;\n\t\t\u0026lt;b\u0026gt;Required attributes:\u0026lt;/b\u0026gt;\n\t\t- verified: this new user is verified or not\n\t\t- authType: possible value is EMAILPASSWD\n\t\t- emailAddress: Please refer to the rule from /v3/public/inputValidations API.\n\t\t- username: Please refer to the rule from /v3/public/inputValidations API.\n\t\t- password: Please refer to the rule from /v3/public/inputValidations API.\n\t\t- country: ISO3166-1 alpha-2 two letter, e.g. US.\n\t\t- dateOfBirth: YYYY-MM-DD, e.g. 1990-01-01. valid values are between 1905-01-01 until current date.\n\t\t\u0026lt;br/\u0026gt;\n\t\t\u0026lt;b\u0026gt;Not required attributes:\u0026lt;/b\u0026gt;\t\n\t\t- displayName: Please refer to the rule from /v3/public/inputValidations API.\n\t\t\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;This endpoint support accepting agreements for the created user. Supply the accepted agreements in acceptedPolicies attribute.\u0026lt;/p\u0026gt;\n\t\t",
        "operationId": "PublicCreateTestUserV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account.createTestUserRequestV4"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/account.createUserResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10177\u003c/td\u003e\u003ctd\u003eusername already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "[TEST FACILITY ONLY]Create test User",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new user with unique email address and username.\n\t\t\u0026lt;p\u0026gt;\n\t\t\u0026lt;b\u0026gt;Required attributes:\u0026lt;/b\u0026gt;\n\t\t- authType: possible value is EMAILPASSWD\n\t\t- emailAddress: Please refer to the rule from /v3/public/inputValidations API.\n\t\t- username: Please refer to the rule from /v3/public/inputValidations API.\n\t\t- password: Please refer to the rule from /v3/public/inputValidations API.\n\t\t- country: ISO3166-1 alpha-2 two letter, e.g. US.\n\t\t- dateOfBirth: YYYY-MM-DD, e.g. 1990-01-01. valid values are between 1905-01-01 until current date.\n\t\t\u0026lt;br/\u0026gt;\n\t\t\u0026lt;b\u0026gt;Not required attributes:\u0026lt;/b\u0026gt;\t\n\t\t- displayName: Please refer to the rule from /v3/public/inputValidations API.\n\t\t\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;This endpoint support accepting agreements for the created user. Supply the accepted agreements in acceptedPolicies attribute.\u0026lt;/p\u0026gt;\n\t\t",
        "operationId": "PublicCreateUserV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account.createUserRequestV4"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/account.createUserResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10177\u003c/td\u003e\u003ctd\u003eusername already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create User",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/invite/{invitationId}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoint create user from saved roles when creating invitation and submitted data.\nUser will be able to login after completing submitting the data through this endpoint.\nAvailable Authentication Types:\n\n\tEMAILPASSWD: an authentication type used for new user registration through email.\n\nCountry use ISO3166-1 alpha-2 two letter, e.g. US.\n\nDate of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\n\nRequired attributes:\n- authType: possible value is EMAILPASSWD (see above)\n- country: ISO3166-1 alpha-2 two letter, e.g. US.\n- dateOfBirth: YYYY-MM-DD, e.g. 1990-01-01. valid values are between 1905-01-01 until current date.\n- displayName: Please refer to the rule from /v3/public/inputValidations API.\n- password: Please refer to the rule from /v3/public/inputValidations API.\n- username: Please refer to the rule from /v3/public/inputValidations API.\n",
        "operationId": "CreateUserFromInvitationV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateFromInvitationRequestV4"
            }
          },
          {
            "description": "Invitation ID, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "invitationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/account.createUserResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10180\u003c/td\u003e\u003ctd\u003eadmin invitation not found or expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create User From Invitation",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;Requires valid user access token \u0026lt;/p\u0026gt;\n\u0026lt;br\u0026gt;\u0026lt;p\u0026gt;This Endpoint support update user based on given data. \u0026lt;b\u0026gt;Single request can update single field or multi fields.\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; \n\u0026lt;p\u0026gt;Supported field {country, displayName, languageTag, dateOfBirth}\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Country use ISO3166-1 alpha-2 two letter, e.g. US.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;Date of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\u0026lt;/p\u0026gt;\n\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;Several case of updating email address\u0026lt;/b\u0026gt;\n\u0026lt;p\u0026gt;action code : 10103 \u0026lt;/p\u0026gt;",
        "operationId": "PublicUpdateUserV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update User",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/email": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "\u0026lt;p\u0026gt;The endpoint to update my email address. \u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;It requires a verification code from \u0026lt;pre\u0026gt;/users/me/code/request\u0026lt;/pre\u0026gt; with \u0026lt;b\u0026gt;UpdateEmailAddress\u0026lt;/b\u0026gt; context.\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicUpdateUserEmailAddressV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.EmailUpdateRequestV4"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update My Email Address",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/headless/code/verify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Require valid user access token.\n        \tThe endpoint upgrades a headless account by linking the headless account with the email address, username, and password. \n\t\t\tBy upgrading the headless account into a full account, the user could use the email address, username, and password for using Justice IAM.\n        \t\u0026lt;br\u0026gt;\n\t\t\tThe endpoint is a shortcut for upgrading a headless account and verifying the email address in one call. \n\t\t\tIn order to get a verification code for the endpoint, please check the \u0026lt;a href=\u0026#34;#operations-Users-PublicSendVerificationCodeV3\u0026#34;\u0026gt;send verification code endpoint\u0026lt;/a\u0026gt;.\n        \t\u0026lt;br\u0026gt;\n\t\t\tThis endpoint also have an ability to update user data (if the user data field is specified) right after the upgrade account process is done.\n\t\t\tSupported user data fields:\n\t\t\t\t\u0026lt;ul\u0026gt;\n\t\t\t\t\t\u0026lt;li\u0026gt;displayName\u0026lt;/li\u0026gt;\n\t\t\t\t\t\u0026lt;li\u0026gt;dateOfBirth : format YYYY-MM-DD, e.g. 2019-04-29\u0026lt;/li\u0026gt;\n\t\t\t\t\t\u0026lt;li\u0026gt;country : format ISO3166-1 alpha-2 two letter, e.g. US\u0026lt;/li\u0026gt;\n\t\t\t\t\u0026lt;/ul\u0026gt;\n        \taction code : 10124",
        "operationId": "PublicUpgradeHeadlessAccountWithVerificationCodeV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account.upgradeHeadlessAccountWithVerificationCodeRequestV4"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/account.UserResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10155\u003c/td\u003e\u003ctd\u003ecountry is not defined\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10149\u003c/td\u003e\u003ctd\u003everification contact type doesn't match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10148\u003c/td\u003e\u003ctd\u003everification code context doesn't match the required context\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10153\u003c/td\u003e\u003ctd\u003euser exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10170\u003c/td\u003e\u003ctd\u003eaccount is already a full account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Upgrade headless account and automatically verified the email address if it is succeeded",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/headless/verify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Require valid user authorization\n\t\t\tUpgrade headless account to full account without verifying email address. Client does not need to provide verification code which sent to email address.\n\t\t\t\u0026lt;br\u0026gt;action code : 10124 \u0026lt;/p\u0026gt;",
        "operationId": "PublicUpgradeHeadlessAccountV4",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account.upgradeHeadlessAccountRequestV4"
            }
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/account.UserResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10153\u003c/td\u003e\u003ctd\u003euser exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10170\u003c/td\u003e\u003ctd\u003eaccount is already a full account\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10177\u003c/td\u003e\u003ctd\u003eusername already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Upgrade user account to full account",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/authenticator/disable": {
      "delete": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to disable 2FA authenticator.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicDisableMyAuthenticatorV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Authenticator disabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Disable 2FA authenticator",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/authenticator/enable": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint is used to enable 2FA authenticator.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicEnableMyAuthenticatorV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "code",
            "in": "formData",
            "name": "code",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Authenticator enabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10190\u003c/td\u003e\u003ctd\u003eauth secret key expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10194\u003c/td\u003e\u003ctd\u003efactor already enabled\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Enable 2FA authenticator",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/authenticator/key": {
      "post": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to generate a secret key for 3rd-party authenticator app. \nA QR code URI is also returned so that frontend can generate QR code image.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicGenerateMyAuthenticatorKeyV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Key generated",
            "schema": {
              "$ref": "#/definitions/model.AuthenticatorKeyResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Generate secret key for 3rd-party authenticate app",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/backupCode": {
      "get": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to get 8-digits backup codes. \nEach code is a one-time code and will be deleted once used.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicGetMyBackupCodesV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get backup codes",
            "schema": {
              "$ref": "#/definitions/model.BackupCodesResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get backup codes",
        "tags": [
          "Users V4"
        ]
      },
      "post": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to generate 8-digits backup codes. \nEach code is a one-time code and will be deleted once used.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicGenerateMyBackupCodesV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Backup codes generated",
            "schema": {
              "$ref": "#/definitions/model.BackupCodesResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Generate backup codes",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/backupCode/disable": {
      "delete": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to enable 2FA backup codes.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicDisableMyBackupCodesV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Backup codes disabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Disable 2FA backup codes",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/backupCode/download": {
      "get": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to download backup codes.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicDownloadMyBackupCodesV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Backup codes downloaded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10195\u003c/td\u003e\u003ctd\u003eno valid backup code found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Download user backup codes",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/backupCode/enable": {
      "post": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to enable 2FA backup codes.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicEnableMyBackupCodesV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Backup codes enabled",
            "schema": {
              "$ref": "#/definitions/model.BackupCodesResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10194\u003c/td\u003e\u003ctd\u003efactor already enabled\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Enable 2FA backup codes",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/device": {
      "delete": {
        "description": "\u0026lt;p\u0026gt;(Only for test)This endpoint is used to remove trusted device.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\u0026lt;br/\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires device_token in cookie\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicRemoveTrustedDeviceV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "header",
            "name": "Cookie",
            "required": false,
            "type": "string",
            "x-keys": [
              "device_token"
            ],
            "x-required": [
              "device_token"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Device removed"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Remove Trusted Device",
        "tags": [
          "Users V4"
        ]
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/factor": {
      "get": {
        "description": "\u0026lt;p\u0026gt;This endpoint is used to get user enabled factors.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicGetMyEnabledFactorsV4",
        "parameters": [
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Methods returned",
            "schema": {
              "$ref": "#/definitions/model.EnabledFactorsResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10193\u003c/td\u003e\u003ctd\u003emfa not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get user enabled factors",
        "tags": [
          "Users V4"
        ]
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "\u0026lt;p\u0026gt;This endpoint is used to make 2FA factor default.\u0026lt;/p\u0026gt;\n\u0026lt;p\u0026gt;This endpoint Requires valid user access token\u0026lt;/p\u0026gt;\n",
        "operationId": "PublicMakeFactorMyDefaultV4",
        "parameters": [
          {
            "description": "factor",
            "in": "formData",
            "name": "factor",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Default method changed"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10189\u003c/td\u003e\u003ctd\u003einvalid factor\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Make 2FA factor default",
        "tags": [
          "Users V4"
        ]
      }
    }
  },
  "definitions": {
    ".BannedBy": {
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "DisplayName",
        "userId"
      ]
    },
    ".validation": {
      "properties": {
        "allowAllSpecialCharacters": {
          "description": "allow all special Characters non words.",
          "type": "boolean",
          "x-omitempty": false
        },
        "allowDigit": {
          "type": "boolean",
          "x-omitempty": false
        },
        "allowLetter": {
          "type": "boolean",
          "x-omitempty": false
        },
        "allowSpace": {
          "type": "boolean",
          "x-omitempty": false
        },
        "allowUnicode": {
          "type": "boolean",
          "x-omitempty": false
        },
        "blockedWord": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "items": {
            "$ref": "#/definitions/.validation.description"
          },
          "type": "array"
        },
        "isCustomRegex": {
          "type": "boolean",
          "x-omitempty": false
        },
        "letterCase": {
          "type": "string"
        },
        "maxLength": {
          "format": "int32",
          "type": "integer"
        },
        "maxRepeatingAlphaNum": {
          "format": "int32",
          "type": "integer"
        },
        "maxRepeatingSpecialCharacter": {
          "format": "int32",
          "type": "integer"
        },
        "minCharType": {
          "format": "int32",
          "type": "integer"
        },
        "minLength": {
          "format": "int32",
          "type": "integer"
        },
        "regex": {
          "type": "string"
        },
        "specialCharacterLocation": {
          "type": "string"
        },
        "specialCharacters": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "allowAllSpecialCharacters",
        "allowDigit",
        "allowLetter",
        "allowSpace",
        "allowUnicode",
        "blockedWord",
        "description",
        "isCustomRegex",
        "letterCase",
        "maxLength",
        "maxRepeatingAlphaNum",
        "maxRepeatingSpecialCharacter",
        "minCharType",
        "minLength",
        "regex",
        "specialCharacterLocation",
        "specialCharacters"
      ]
    },
    ".validation.description": {
      "properties": {
        "language": {
          "type": "string"
        },
        "message": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "language",
        "message"
      ]
    },
    "account.UserActiveBanResponseV4": {
      "properties": {
        "ban": {
          "type": "string"
        },
        "banId": {
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "ban",
        "banId",
        "endDate"
      ]
    },
    "account.UserPermissionsResponseV4": {
      "properties": {
        "action": {
          "format": "int32",
          "type": "integer"
        },
        "resource": {
          "type": "string"
        },
        "schedAction": {
          "format": "int32",
          "type": "integer"
        },
        "schedCron": {
          "type": "string"
        },
        "schedRange": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "action",
        "resource"
      ]
    },
    "account.UserResponseV4": {
      "properties": {
        "authType": {
          "type": "string"
        },
        "bans": {
          "items": {
            "$ref": "#/definitions/account.UserActiveBanResponseV4"
          },
          "type": "array"
        },
        "country": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "dateOfBirth": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "deletionStatus": {
          "type": "boolean",
          "x-omitempty": false
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean",
          "x-omitempty": false
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "lastDateOfBirthChangedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "lastEnabledChangedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "type": "string"
        },
        "newEmailAddress": {
          "type": "string"
        },
        "oldEmailAddress": {
          "type": "string"
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/account.UserPermissionsResponseV4"
          },
          "type": "array"
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneVerified": {
          "type": "boolean",
          "x-omitempty": false
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "authType",
        "bans",
        "country",
        "createdAt",
        "dateOfBirth",
        "deletionStatus",
        "displayName",
        "emailAddress",
        "emailVerified",
        "enabled",
        "lastDateOfBirthChangedTime",
        "lastEnabledChangedTime",
        "namespace",
        "oldEmailAddress",
        "permissions",
        "phoneVerified",
        "roles",
        "userId"
      ]
    },
    "account.createTestUserRequestV4": {
      "properties": {
        "acceptedPolicies": {
          "items": {
            "$ref": "#/definitions/legal.AcceptedPoliciesRequest"
          },
          "type": "array"
        },
        "authType": {
          "default": "EMAILPASSWD",
          "enum": [
            "EMAILPASSWD"
          ],
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "passwordMD5Sum": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "authType",
        "country",
        "dateOfBirth",
        "displayName",
        "emailAddress",
        "password",
        "passwordMD5Sum",
        "username",
        "verified"
      ]
    },
    "account.createTestUserResponseV4": {
      "properties": {
        "authType": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "authType",
        "country",
        "dateOfBirth",
        "displayName",
        "emailAddress",
        "namespace",
        "password",
        "userId",
        "username",
        "verified"
      ]
    },
    "account.createTestUsersRequestV4": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "count"
      ]
    },
    "account.createTestUsersResponseV4": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/account.createTestUserResponseV4"
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ]
    },
    "account.createUserRequestV4": {
      "properties": {
        "acceptedPolicies": {
          "items": {
            "$ref": "#/definitions/legal.AcceptedPoliciesRequest"
          },
          "type": "array"
        },
        "authType": {
          "default": "EMAILPASSWD",
          "enum": [
            "EMAILPASSWD"
          ],
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "passwordMD5Sum": {
          "type": "string"
        },
        "reachMinimumAge": {
          "type": "boolean",
          "x-omitempty": false
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "authType",
        "country",
        "emailAddress",
        "username"
      ]
    },
    "account.createUserResponseV4": {
      "properties": {
        "authType": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "authType",
        "country",
        "dateOfBirth",
        "displayName",
        "emailAddress",
        "namespace",
        "userId",
        "username"
      ]
    },
    "account.upgradeHeadlessAccountRequestV4": {
      "properties": {
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "emailAddress",
        "password",
        "username"
      ]
    },
    "account.upgradeHeadlessAccountWithVerificationCodeRequestV4": {
      "properties": {
        "code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "reachMinimumAge": {
          "type": "boolean",
          "x-omitempty": false
        },
        "username": {
          "type": "string"
        },
        "validateOnly": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "code",
        "emailAddress",
        "password",
        "username"
      ]
    },
    "accountcommon.Ban": {
      "properties": {
        "Ban": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      },
      "required": [
        "Ban",
        "Description"
      ]
    },
    "accountcommon.BanReason": {
      "properties": {
        "Description": {
          "type": "string"
        },
        "Reason": {
          "type": "string"
        }
      },
      "required": [
        "Description",
        "Reason"
      ]
    },
    "accountcommon.BanReasonV3": {
      "properties": {
        "description": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "reason"
      ]
    },
    "accountcommon.BanReasons": {
      "properties": {
        "Reasons": {
          "items": {
            "$ref": "#/definitions/accountcommon.BanReason"
          },
          "type": "array"
        }
      },
      "required": [
        "Reasons"
      ]
    },
    "accountcommon.BanReasonsV3": {
      "properties": {
        "reasons": {
          "items": {
            "$ref": "#/definitions/accountcommon.BanReasonV3"
          },
          "type": "array"
        }
      },
      "required": [
        "reasons"
      ]
    },
    "accountcommon.BanV3": {
      "properties": {
        "ban": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "descriptions": {
          "$ref": "#/definitions/accountcommon.Description"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "ban",
        "type"
      ]
    },
    "accountcommon.BannedByV3": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "displayName",
        "userId"
      ]
    },
    "accountcommon.Bans": {
      "properties": {
        "Bans": {
          "items": {
            "$ref": "#/definitions/accountcommon.Ban"
          },
          "type": "array"
        }
      },
      "required": [
        "Bans"
      ]
    },
    "accountcommon.BansV3": {
      "properties": {
        "bans": {
          "items": {
            "$ref": "#/definitions/accountcommon.BanV3"
          },
          "type": "array"
        }
      },
      "required": [
        "bans"
      ]
    },
    "accountcommon.ClientPermission": {
      "properties": {
        "Action": {
          "format": "int32",
          "type": "integer"
        },
        "Resource": {
          "type": "string"
        }
      },
      "required": [
        "Action",
        "Resource"
      ]
    },
    "accountcommon.ClientPermissionV3": {
      "properties": {
        "action": {
          "format": "int32",
          "type": "integer"
        },
        "resource": {
          "type": "string"
        }
      },
      "required": [
        "action",
        "resource"
      ]
    },
    "accountcommon.ClientPermissions": {
      "properties": {
        "Permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.ClientPermission"
          },
          "type": "array"
        }
      },
      "required": [
        "Permissions"
      ]
    },
    "accountcommon.ClientPermissionsV3": {
      "properties": {
        "permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.ClientPermissionV3"
          },
          "type": "array"
        }
      },
      "required": [
        "permissions"
      ]
    },
    "accountcommon.ConflictedUserPlatformAccounts": {
      "properties": {
        "platformUserID": {
          "type": "string"
        },
        "publisherAccounts": {
          "items": {
            "$ref": "#/definitions/accountcommon.UserWithLinkedPlatformAccounts"
          },
          "type": "array"
        }
      },
      "required": [
        "platformUserID",
        "publisherAccounts"
      ]
    },
    "accountcommon.Country": {
      "properties": {
        "AgeRestriction": {
          "format": "int32",
          "type": "integer"
        },
        "CountryCode": {
          "type": "string"
        },
        "CountryName": {
          "type": "string"
        },
        "Enable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "Namespace": {
          "type": "string"
        }
      },
      "required": [
        "AgeRestriction",
        "CountryCode",
        "CountryName",
        "Enable",
        "Namespace"
      ]
    },
    "accountcommon.CountryAgeRestriction": {
      "properties": {
        "AgeRestriction": {
          "format": "int32",
          "type": "integer"
        },
        "CountryCode": {
          "type": "string"
        },
        "CountryName": {
          "type": "string"
        },
        "Enable": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "AgeRestriction",
        "CountryCode",
        "CountryName",
        "Enable"
      ]
    },
    "accountcommon.Description": {
      "properties": {
        "en-US": {
          "type": "string"
        },
        "zh-CN": {
          "type": "string"
        }
      },
      "required": [
        "en-US",
        "zh-CN"
      ]
    },
    "accountcommon.DistinctLinkedPlatformV3": {
      "properties": {
        "details": {
          "items": {
            "$ref": "#/definitions/accountcommon.SimpleUserPlatformInfoV3"
          },
          "type": "array"
        },
        "linkedAt": {
          "type": "string"
        },
        "platformName": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        }
      },
      "required": [
        "details",
        "linkedAt",
        "platformName"
      ]
    },
    "accountcommon.DistinctPlatformResponseV3": {
      "properties": {
        "platforms": {
          "items": {
            "$ref": "#/definitions/accountcommon.DistinctLinkedPlatformV3"
          },
          "type": "array"
        }
      },
      "required": [
        "platforms"
      ]
    },
    "accountcommon.InputValidationDescription": {
      "properties": {
        "language": {
          "type": "string"
        },
        "message": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "language",
        "message"
      ]
    },
    "accountcommon.JWTBanV3": {
      "properties": {
        "ban": {
          "type": "string"
        },
        "disabledDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "endDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "targetedNamespace": {
          "type": "string"
        }
      },
      "required": [
        "ban",
        "enabled",
        "endDate",
        "targetedNamespace"
      ]
    },
    "accountcommon.ListUsersWithPlatformAccountsResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/accountcommon.UserWithPlatformAccounts"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        },
        "totalData": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "data",
        "paging",
        "totalData"
      ]
    },
    "accountcommon.NamespaceRole": {
      "properties": {
        "namespace": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "roleId"
      ]
    },
    "accountcommon.NetflixCertificates": {
      "properties": {
        "encryptedPrivateKey": {
          "type": "string"
        },
        "encryptedPrivateKeyName": {
          "type": "string"
        },
        "publicCertificate": {
          "type": "string"
        },
        "publicCertificateName": {
          "type": "string"
        },
        "rootCertificate": {
          "type": "string"
        },
        "rootCertificateName": {
          "type": "string"
        }
      },
      "required": [
        "encryptedPrivateKey",
        "encryptedPrivateKeyName",
        "publicCertificate",
        "publicCertificateName",
        "rootCertificate",
        "rootCertificateName"
      ]
    },
    "accountcommon.Pagination": {
      "properties": {
        "First": {
          "type": "string"
        },
        "Last": {
          "type": "string"
        },
        "Next": {
          "type": "string"
        },
        "Previous": {
          "type": "string"
        }
      },
      "required": [
        "First",
        "Last",
        "Next",
        "Previous"
      ]
    },
    "accountcommon.PaginationV3": {
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      },
      "required": [
        "first",
        "last",
        "next",
        "previous"
      ]
    },
    "accountcommon.Permission": {
      "properties": {
        "Action": {
          "format": "int32",
          "type": "integer"
        },
        "Resource": {
          "type": "string"
        },
        "SchedAction": {
          "format": "int32",
          "type": "integer"
        },
        "SchedCron": {
          "type": "string"
        },
        "SchedRange": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "Action",
        "Resource"
      ]
    },
    "accountcommon.PermissionV3": {
      "properties": {
        "action": {
          "format": "int32",
          "type": "integer"
        },
        "resource": {
          "type": "string"
        },
        "schedAction": {
          "format": "int32",
          "type": "integer"
        },
        "schedCron": {
          "type": "string"
        },
        "schedRange": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "action",
        "resource"
      ]
    },
    "accountcommon.Permissions": {
      "properties": {
        "Permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          },
          "type": "array"
        }
      },
      "required": [
        "Permissions"
      ]
    },
    "accountcommon.PermissionsV3": {
      "properties": {
        "permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          },
          "type": "array"
        }
      },
      "required": [
        "permissions"
      ]
    },
    "accountcommon.PlatformAccount": {
      "properties": {
        "namespace": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "platformUserId"
      ]
    },
    "accountcommon.PlatformUserInformationV3": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "linkedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "xboxUserId": {
          "type": "string"
        }
      },
      "required": [
        "linkedAt",
        "namespace",
        "platformId",
        "platformUserId"
      ]
    },
    "accountcommon.RegisteredDomain": {
      "properties": {
        "affectedClientIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "domain": {
          "type": "string"
        },
        "namespaces": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "roleId": {
          "type": "string"
        }
      },
      "required": [
        "affectedClientIDs",
        "domain",
        "namespaces",
        "roleId"
      ]
    },
    "accountcommon.Role": {
      "properties": {
        "AdminRole": {
          "type": "boolean",
          "x-omitempty": false
        },
        "Deletable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "IsWildcard": {
          "type": "boolean",
          "x-omitempty": false
        },
        "Managers": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          },
          "type": "array"
        },
        "Members": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMember"
          },
          "type": "array"
        },
        "Permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          },
          "type": "array"
        },
        "RoleId": {
          "type": "string"
        },
        "RoleName": {
          "type": "string"
        }
      },
      "required": [
        "AdminRole",
        "Deletable",
        "IsWildcard",
        "Managers",
        "Members",
        "Permissions",
        "RoleId",
        "RoleName"
      ]
    },
    "accountcommon.RoleManager": {
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      },
      "required": [
        "DisplayName",
        "Namespace",
        "UserId"
      ]
    },
    "accountcommon.RoleManagerV3": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "displayName",
        "namespace",
        "userId"
      ]
    },
    "accountcommon.RoleMember": {
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      },
      "required": [
        "DisplayName",
        "Namespace",
        "UserId"
      ]
    },
    "accountcommon.RoleMemberV3": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "displayName",
        "namespace",
        "userId"
      ]
    },
    "accountcommon.RoleV3": {
      "properties": {
        "adminRole": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isWildcard": {
          "type": "boolean",
          "x-omitempty": false
        },
        "managers": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          },
          "type": "array"
        },
        "members": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMemberV3"
          },
          "type": "array"
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          },
          "type": "array"
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      },
      "required": [
        "adminRole",
        "isWildcard",
        "managers",
        "members",
        "permissions",
        "roleId",
        "roleName"
      ]
    },
    "accountcommon.SimpleUserPlatformInfoV3": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "linkedAt": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "originNamespace": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        }
      },
      "required": [
        "linkedAt",
        "namespace",
        "originNamespace"
      ]
    },
    "accountcommon.UserInformationV3": {
      "properties": {
        "country": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddresses": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "phoneNumber": {
          "type": "string"
        },
        "platformUsers": {
          "items": {
            "$ref": "#/definitions/accountcommon.PlatformUserInformationV3"
          },
          "type": "array"
        },
        "username": {
          "type": "string"
        },
        "xboxUserId": {
          "type": "string"
        }
      },
      "required": [
        "emailAddresses",
        "platformUsers"
      ]
    },
    "accountcommon.UserLinkedPlatform": {
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "LinkedAt": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "OriginNamespace": {
          "type": "string"
        },
        "PlatformId": {
          "type": "string"
        },
        "PlatformUserId": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      },
      "required": [
        "LinkedAt",
        "Namespace",
        "OriginNamespace",
        "UserId"
      ]
    },
    "accountcommon.UserLinkedPlatformV3": {
      "properties": {
        "accountGroup": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "linkedAt": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "originNamespace": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "accountGroup",
        "linkedAt",
        "namespace",
        "originNamespace",
        "userId"
      ]
    },
    "accountcommon.UserLinkedPlatformsResponseV3": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/accountcommon.UserLinkedPlatformV3"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "accountcommon.UserPlatformInfo": {
      "properties": {
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "platformId",
        "platformUserId",
        "userId"
      ]
    },
    "accountcommon.UserPlatforms": {
      "properties": {
        "userIdPlatforms": {
          "items": {
            "$ref": "#/definitions/accountcommon.UserPlatformInfo"
          },
          "type": "array"
        }
      },
      "required": [
        "userIdPlatforms"
      ]
    },
    "accountcommon.UserSearchByPlatformIDResult": {
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "LinkedPlatforms": {
          "items": {
            "$ref": "#/definitions/accountcommon.UserLinkedPlatform"
          },
          "type": "array"
        },
        "PhoneNumber": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      },
      "required": [
        "DisplayName",
        "EmailAddress",
        "LinkedPlatforms",
        "PhoneNumber",
        "UserId"
      ]
    },
    "accountcommon.UserSearchResult": {
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "LinkedPlatforms": {
          "items": {
            "$ref": "#/definitions/accountcommon.UserLinkedPlatform"
          },
          "type": "array"
        },
        "PhoneNumber": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      },
      "required": [
        "DisplayName",
        "EmailAddress",
        "LinkedPlatforms",
        "PhoneNumber",
        "UserId"
      ]
    },
    "accountcommon.UserWithLinkedPlatformAccounts": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "linkedPlatforms": {
          "items": {
            "$ref": "#/definitions/accountcommon.PlatformAccount"
          },
          "type": "array"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "displayName",
        "emailAddress",
        "linkedPlatforms",
        "namespace",
        "userId"
      ]
    },
    "accountcommon.UserWithPlatformAccounts": {
      "properties": {
        "linkedPlatforms": {
          "items": {
            "$ref": "#/definitions/accountcommon.PlatformAccount"
          },
          "type": "array"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "linkedPlatforms",
        "namespace",
        "userId"
      ]
    },
    "bloom.FilterJSON": {
      "properties": {
        "bits": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "k": {
          "format": "integer",
          "type": "integer"
        },
        "m": {
          "format": "integer",
          "type": "integer"
        }
      },
      "required": [
        "bits",
        "k",
        "m"
      ]
    },
    "clientmodel.ClientCreateRequest": {
      "properties": {
        "ClientId": {
          "type": "string"
        },
        "ClientName": {
          "type": "string"
        },
        "ClientPermissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          },
          "type": "array"
        },
        "Namespace": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "Secret": {
          "type": "string"
        },
        "TwoFactorEnabled": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "ClientId",
        "ClientName",
        "ClientPermissions",
        "Namespace",
        "RedirectUri",
        "Secret",
        "TwoFactorEnabled"
      ]
    },
    "clientmodel.ClientCreationResponse": {
      "properties": {
        "ClientId": {
          "type": "string"
        },
        "ClientName": {
          "type": "string"
        },
        "ClientPermissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          },
          "type": "array"
        },
        "Namespace": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "TwoFactorEnabled": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "ClientId",
        "ClientName",
        "ClientPermissions",
        "Namespace",
        "RedirectUri",
        "TwoFactorEnabled"
      ]
    },
    "clientmodel.ClientCreationV3Request": {
      "properties": {
        "audiences": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "baseUri": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientName": {
          "type": "string"
        },
        "clientPermissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          },
          "type": "array"
        },
        "clientPlatform": {
          "type": "string"
        },
        "deletable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "namespace": {
          "type": "string"
        },
        "oauthAccessTokenExpiration": {
          "description": "min value 1 second, max value 86400 seconds",
          "format": "int32",
          "type": "integer"
        },
        "oauthClientType": {
          "type": "string"
        },
        "oauthRefreshTokenExpiration": {
          "description": "min value 1 seconds, max value 2592000 seconds",
          "format": "int32",
          "type": "integer"
        },
        "redirectUri": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "twoFactorEnabled": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "audiences",
        "baseUri",
        "clientId",
        "clientName",
        "clientPermissions",
        "clientPlatform",
        "namespace",
        "oauthClientType",
        "redirectUri",
        "secret"
      ]
    },
    "clientmodel.ClientResponse": {
      "properties": {
        "ClientId": {
          "type": "string"
        },
        "ClientName": {
          "type": "string"
        },
        "ClientPermissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          },
          "type": "array"
        },
        "CreatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "Namespace": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "TwoFactorEnabled": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "ClientId",
        "ClientName",
        "ClientPermissions",
        "CreatedAt",
        "Namespace",
        "RedirectUri",
        "TwoFactorEnabled"
      ]
    },
    "clientmodel.ClientUpdateRequest": {
      "properties": {
        "ClientName": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "TwoFactorEnabled": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "ClientName",
        "RedirectUri",
        "TwoFactorEnabled"
      ]
    },
    "clientmodel.ClientUpdateSecretRequest": {
      "properties": {
        "NewSecret": {
          "type": "string"
        }
      },
      "required": [
        "NewSecret"
      ]
    },
    "clientmodel.ClientUpdateV3Request": {
      "properties": {
        "audiences": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "baseUri": {
          "type": "string"
        },
        "clientName": {
          "type": "string"
        },
        "clientPermissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          },
          "type": "array"
        },
        "clientPlatform": {
          "type": "string"
        },
        "deletable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "namespace": {
          "type": "string"
        },
        "oauthAccessTokenExpiration": {
          "description": "min value 1 second, max value 86400 seconds",
          "format": "int32",
          "type": "integer"
        },
        "oauthRefreshTokenExpiration": {
          "description": "min value 1 seconds, max value 2592000 seconds",
          "format": "int32",
          "type": "integer"
        },
        "redirectUri": {
          "type": "string"
        },
        "twoFactorEnabled": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "clientPlatform"
      ]
    },
    "clientmodel.ClientV3Response": {
      "properties": {
        "audiences": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "baseUri": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientName": {
          "type": "string"
        },
        "clientPermissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          },
          "type": "array"
        },
        "clientPlatform": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "modifiedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "type": "string"
        },
        "oauthAccessTokenExpiration": {
          "format": "int32",
          "type": "integer"
        },
        "oauthClientType": {
          "type": "string"
        },
        "oauthRefreshTokenExpiration": {
          "format": "int32",
          "type": "integer"
        },
        "redirectUri": {
          "type": "string"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "twoFactorEnabled": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "audiences",
        "baseUri",
        "clientId",
        "clientName",
        "clientPermissions",
        "clientPlatform",
        "createdAt",
        "modifiedAt",
        "namespace",
        "oauthClientType",
        "redirectUri",
        "scopes",
        "twoFactorEnabled"
      ]
    },
    "clientmodel.ClientsV3Response": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/clientmodel.ClientV3Response"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "clientmodel.V3ClientUpdateSecretRequest": {
      "properties": {
        "newSecret": {
          "type": "string"
        }
      },
      "required": [
        "newSecret"
      ]
    },
    "legal.AcceptedPoliciesRequest": {
      "properties": {
        "isAccepted": {
          "type": "boolean",
          "x-omitempty": false
        },
        "localizedPolicyVersionId": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "policyVersionId": {
          "type": "string"
        }
      },
      "required": [
        "isAccepted",
        "localizedPolicyVersionId",
        "policyId",
        "policyVersionId"
      ]
    },
    "model.AddUserRoleV4Request": {
      "properties": {
        "assignedNamespaces": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "roleId": {
          "type": "string"
        }
      },
      "required": [
        "assignedNamespaces",
        "roleId"
      ]
    },
    "model.AgeRestrictionRequest": {
      "properties": {
        "AgeRestriction": {
          "format": "int32",
          "type": "integer"
        },
        "Enable": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "AgeRestriction",
        "Enable"
      ]
    },
    "model.AgeRestrictionRequestV3": {
      "properties": {
        "ageRestriction": {
          "format": "int32",
          "type": "integer"
        },
        "enable": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "ageRestriction",
        "enable"
      ]
    },
    "model.AgeRestrictionResponse": {
      "properties": {
        "AgeRestriction": {
          "format": "int32",
          "type": "integer"
        },
        "Enable": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "AgeRestriction",
        "Enable"
      ]
    },
    "model.AgeRestrictionResponseV3": {
      "properties": {
        "ageRestriction": {
          "format": "int32",
          "type": "integer"
        },
        "enable": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "ageRestriction",
        "enable"
      ]
    },
    "model.AssignUserV4Request": {
      "properties": {
        "assignedNamespaces": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "assignedNamespaces",
        "namespace",
        "userId"
      ]
    },
    "model.AssignedUserV4Response": {
      "properties": {
        "assignedNamespaces": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "displayName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "assignedNamespaces",
        "displayName",
        "email",
        "roleId",
        "userId"
      ]
    },
    "model.AuthenticatorKeyResponseV4": {
      "properties": {
        "secretKey": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      },
      "required": [
        "secretKey",
        "uri"
      ]
    },
    "model.BackupCodesResponseV4": {
      "properties": {
        "generatedAt": {
          "format": "int64",
          "type": "integer"
        },
        "invalidCodes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "validCodes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "generatedAt",
        "validCodes"
      ]
    },
    "model.BanCreateRequest": {
      "properties": {
        "ban": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "skipNotif": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "ban",
        "comment",
        "endDate",
        "reason",
        "skipNotif"
      ]
    },
    "model.BanUpdateRequest": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "skipNotif": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "enabled",
        "skipNotif"
      ]
    },
    "model.BulkBanCreateRequestV3": {
      "properties": {
        "ban": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "skipNotif": {
          "type": "boolean",
          "x-omitempty": false
        },
        "userIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "ban",
        "comment",
        "endDate",
        "reason",
        "skipNotif",
        "userIds"
      ]
    },
    "model.BulkUnbanCreateRequestV3": {
      "properties": {
        "bans": {
          "items": {
            "$ref": "#/definitions/model.userUnbanCreateRequestV3"
          },
          "type": "array"
        }
      }
    },
    "model.CheckValidUserIDRequestV4": {
      "properties": {
        "userIds": {
          "description": "only valid uuid is allowed",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "userIds"
      ]
    },
    "model.Country": {
      "properties": {
        "AgeRestriction": {
          "format": "int32",
          "type": "integer"
        },
        "CountryCode": {
          "type": "string"
        },
        "CountryName": {
          "type": "string"
        },
        "Enable": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "AgeRestriction",
        "CountryCode",
        "CountryName",
        "Enable"
      ]
    },
    "model.CountryAgeRestrictionRequest": {
      "properties": {
        "AgeRestriction": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "AgeRestriction"
      ]
    },
    "model.CountryAgeRestrictionV3Request": {
      "properties": {
        "ageRestriction": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "ageRestriction"
      ]
    },
    "model.CountryV3Response": {
      "properties": {
        "ageRestriction": {
          "format": "int32",
          "type": "integer"
        },
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "enable": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "ageRestriction",
        "countryCode",
        "countryName",
        "enable"
      ]
    },
    "model.CreateJusticeUserResponse": {
      "properties": {
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "userId"
      ]
    },
    "model.DeviceBanRequestV4": {
      "properties": {
        "comment": {
          "type": "string"
        },
        "deviceId": {
          "type": "string"
        },
        "deviceType": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "endDate": {
          "type": "string"
        },
        "ext": {
          "type": "object"
        },
        "reason": {
          "type": "string"
        }
      },
      "required": [
        "comment",
        "deviceId",
        "deviceType",
        "enabled",
        "endDate",
        "ext",
        "reason"
      ]
    },
    "model.DeviceBanResponseV4": {
      "properties": {
        "bannedAt": {
          "format": "int64",
          "type": "integer"
        },
        "bannedBy": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "deviceId": {
          "type": "string"
        },
        "deviceType": {
          "type": "string"
        },
        "disabledAt": {
          "format": "int64",
          "type": "integer"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "endDate": {
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "targetNamespace": {
          "type": "string"
        }
      },
      "required": [
        "bannedAt",
        "bannedBy",
        "comment",
        "deviceId",
        "deviceType",
        "disabledAt",
        "enabled",
        "endDate",
        "id",
        "namespace",
        "reason",
        "targetNamespace"
      ]
    },
    "model.DeviceBanUpdateRequestV4": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "enabled"
      ]
    },
    "model.DeviceBannedResponseV4": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.DeviceBanResponseV4"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.Pagination"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.DeviceBansResponseV4": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.DeviceBanResponseV4"
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ]
    },
    "model.DeviceIDDecryptResponseV4": {
      "properties": {
        "deviceId": {
          "type": "string"
        }
      },
      "required": [
        "deviceId"
      ]
    },
    "model.DeviceResponseV4": {
      "properties": {
        "ban": {
          "$ref": "#/definitions/model.DeviceBanResponseV4"
        },
        "deviceId": {
          "type": "string"
        },
        "deviceType": {
          "type": "string"
        },
        "ext": {
          "type": "object"
        },
        "ip": {
          "type": "string"
        },
        "lastLoginTime": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "deviceId",
        "deviceType",
        "ip",
        "lastLoginTime"
      ]
    },
    "model.DeviceTypeResponseV4": {
      "properties": {
        "deviceType": {
          "type": "string"
        }
      },
      "required": [
        "deviceType"
      ]
    },
    "model.DeviceTypesResponseV4": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.DeviceTypeResponseV4"
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ]
    },
    "model.DeviceUserResponseV4": {
      "properties": {
        "ext": {
          "type": "object"
        },
        "ip": {
          "type": "string"
        },
        "lastLoginTime": {
          "format": "int64",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "ip",
        "lastLoginTime",
        "namespace",
        "userId"
      ]
    },
    "model.DeviceUsersResponseV4": {
      "properties": {
        "users": {
          "items": {
            "$ref": "#/definitions/model.DeviceUserResponseV4"
          },
          "type": "array"
        }
      },
      "required": [
        "users"
      ]
    },
    "model.DevicesResponseV4": {
      "properties": {
        "devices": {
          "items": {
            "$ref": "#/definitions/model.DeviceResponseV4"
          },
          "type": "array"
        }
      },
      "required": [
        "devices"
      ]
    },
    "model.DisableUserRequest": {
      "properties": {
        "Reason": {
          "type": "string"
        }
      }
    },
    "model.EmailUpdateRequestV4": {
      "properties": {
        "code": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "emailAddress"
      ]
    },
    "model.EnabledFactorsResponseV4": {
      "properties": {
        "default": {
          "type": "string"
        },
        "enabled": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "default",
        "enabled"
      ]
    },
    "model.FailedBanUnbanUserV3": {
      "properties": {
        "reason": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "reason",
        "userId"
      ]
    },
    "model.ForgotPasswordRequestV3": {
      "properties": {
        "emailAddress": {
          "type": "string"
        },
        "languageTag": {
          "type": "string"
        }
      },
      "required": [
        "emailAddress"
      ]
    },
    "model.GetAdminUsersResponse": {
      "properties": {
        "Data": {
          "items": {
            "$ref": "#/definitions/model.UserResponse"
          },
          "type": "array"
        },
        "Paging": {
          "$ref": "#/definitions/accountcommon.Pagination"
        }
      },
      "required": [
        "Data",
        "Paging"
      ]
    },
    "model.GetPublisherUserResponse": {
      "properties": {
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      },
      "required": [
        "Namespace",
        "UserId"
      ]
    },
    "model.GetPublisherUserV3Response": {
      "properties": {
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "userId"
      ]
    },
    "model.GetUserBanV3Response": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.UserBanResponseV3"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.GetUserJusticePlatformAccountResponse": {
      "properties": {
        "DesignatedNamespace": {
          "type": "string"
        },
        "UserID": {
          "type": "string"
        }
      },
      "required": [
        "DesignatedNamespace",
        "UserID"
      ]
    },
    "model.GetUserMapping": {
      "properties": {
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      },
      "required": [
        "Namespace",
        "UserId"
      ]
    },
    "model.GetUserMappingV3": {
      "properties": {
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "userId"
      ]
    },
    "model.GetUsersResponseWithPaginationV3": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.UserResponseV3"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.InputValidationData": {
      "properties": {
        "field": {
          "type": "string"
        },
        "validation": {
          "$ref": "#/definitions/model.ValidationDetail"
        }
      },
      "required": [
        "field",
        "validation"
      ]
    },
    "model.InputValidationDataPublic": {
      "properties": {
        "field": {
          "type": "string"
        },
        "validation": {
          "$ref": "#/definitions/model.ValidationDetailPublic"
        }
      },
      "required": [
        "field",
        "validation"
      ]
    },
    "model.InputValidationUpdatePayload": {
      "properties": {
        "field": {
          "type": "string"
        },
        "validation": {
          "$ref": "#/definitions/.validation"
        }
      },
      "required": [
        "field",
        "validation"
      ]
    },
    "model.InputValidationsPublicResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.InputValidationDataPublic"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "data",
        "version"
      ]
    },
    "model.InputValidationsResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.InputValidationData"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "data",
        "version"
      ]
    },
    "model.InviteUserRequestV3": {
      "properties": {
        "emailAddresses": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isAdmin": {
          "type": "boolean",
          "x-omitempty": false
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "emailAddresses",
        "isAdmin",
        "roles"
      ]
    },
    "model.InviteUserRequestV4": {
      "properties": {
        "assignedNamespaces": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "emailAddresses": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isAdmin": {
          "type": "boolean",
          "x-omitempty": false
        },
        "roleId": {
          "type": "string"
        }
      },
      "required": [
        "assignedNamespaces",
        "emailAddresses",
        "isAdmin",
        "roleId"
      ]
    },
    "model.InviteUserResponseV3": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.UserInvitationV3"
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ]
    },
    "model.LinkPlatformAccountRequest": {
      "properties": {
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        }
      },
      "required": [
        "platformId",
        "platformUserId"
      ]
    },
    "model.LinkPlatformAccountWithProgressionRequest": {
      "properties": {
        "chosenNamespaces": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requestId": {
          "type": "string"
        }
      },
      "required": [
        "chosenNamespaces",
        "requestId"
      ]
    },
    "model.LinkRequest": {
      "properties": {
        "client_id": {
          "type": "string"
        },
        "conflict_publisher_user_id": {
          "type": "string"
        },
        "conflict_user_linked_games": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "current_user_linked_games": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "error": {
          "$ref": "#/definitions/rest.ErrorResponseWithConflictedUserPlatformAccounts"
        },
        "expiration": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "operation_name": {
          "type": "string"
        },
        "payload": {
          "type": "object"
        },
        "platformDisplayName": {
          "type": "string"
        },
        "platformID": {
          "type": "string"
        },
        "platform_user_id": {
          "type": "string"
        },
        "redirect_uri": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "request_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "required": [
        "client_id",
        "namespace",
        "operation_name",
        "payload",
        "redirect_uri",
        "request_id",
        "status"
      ]
    },
    "model.ListAssignedUsersV4Response": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.AssignedUserV4Response"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.ListBulkUserBanResponseV3": {
      "properties": {
        "failedBans": {
          "items": {
            "$ref": "#/definitions/model.FailedBanUnbanUserV3"
          },
          "type": "array"
        },
        "successBans": {
          "items": {
            "$ref": "#/definitions/model.UserBanResponseV3"
          },
          "type": "array"
        }
      },
      "required": [
        "failedBans",
        "successBans"
      ]
    },
    "model.ListBulkUserResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.UserBaseInfo"
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ]
    },
    "model.ListEmailAddressRequest": {
      "properties": {
        "listEmailAddressRequest": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "listEmailAddressRequest"
      ]
    },
    "model.ListRoleV4Response": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.RoleV4Response"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.ListUserInformationResult": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.UserInfoResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ]
    },
    "model.ListUserResponseV3": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.UserResponseV3"
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ]
    },
    "model.ListUserRolesV4Response": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.UserRolesV4Response"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.ListValidUserIDResponseV4": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.ValidUserIDResponseV4"
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ]
    },
    "model.LoginHistoriesResponse": {
      "properties": {
        "Data": {
          "items": {
            "$ref": "#/definitions/model.UserLoginHistoryResponse"
          },
          "type": "array"
        },
        "Paging": {
          "$ref": "#/definitions/accountcommon.Pagination"
        }
      },
      "required": [
        "Data",
        "Paging"
      ]
    },
    "model.NamespaceRoleRequest": {
      "properties": {
        "namespace": {
          "description": "required",
          "type": "string"
        },
        "roleId": {
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "roleId"
      ]
    },
    "model.PermissionDeleteRequest": {
      "properties": {
        "Action": {
          "format": "int32",
          "type": "integer"
        },
        "Resource": {
          "type": "string"
        }
      },
      "required": [
        "Action",
        "Resource"
      ]
    },
    "model.PlatformDomainDeleteRequest": {
      "properties": {
        "domain": {
          "type": "string"
        }
      },
      "required": [
        "domain"
      ]
    },
    "model.PlatformDomainResponse": {
      "properties": {
        "registeredDomains": {
          "items": {
            "$ref": "#/definitions/accountcommon.RegisteredDomain"
          },
          "type": "array"
        }
      },
      "required": [
        "registeredDomains"
      ]
    },
    "model.PlatformDomainUpdateRequest": {
      "properties": {
        "affectedClientIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "assignedNamespaces": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "domain": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        }
      },
      "required": [
        "affectedClientIDs",
        "assignedNamespaces",
        "domain",
        "roleId"
      ]
    },
    "model.PlatformUserIDRequest": {
      "properties": {
        "platformUserIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "platformUserIds"
      ]
    },
    "model.PlatformUserInformation": {
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "LinkedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "Namespace": {
          "type": "string"
        },
        "PlatformID": {
          "type": "string"
        },
        "PlatformUserID": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      },
      "required": [
        "DisplayName",
        "LinkedAt",
        "Namespace",
        "PlatformID",
        "PlatformUserID"
      ]
    },
    "model.PublicThirdPartyPlatformInfo": {
      "properties": {
        "AppId": {
          "type": "string"
        },
        "ClientId": {
          "type": "string"
        },
        "Environment": {
          "type": "string"
        },
        "IsActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "PlatformId": {
          "type": "string"
        },
        "PlatformName": {
          "type": "string"
        }
      },
      "required": [
        "AppId",
        "ClientId",
        "Environment",
        "IsActive",
        "PlatformId",
        "PlatformName"
      ]
    },
    "model.PublicUserInformationResponseV3": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.PublicUserInformationV3"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.PublicUserInformationV3": {
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "displayName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "displayName",
        "namespace",
        "userId",
        "userName"
      ]
    },
    "model.PublicUserResponse": {
      "properties": {
        "AuthType": {
          "type": "string"
        },
        "Bans": {
          "items": {
            "$ref": "#/definitions/model.UserActiveBanResponse"
          },
          "type": "array"
        },
        "CreatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "DeletionStatus": {
          "type": "boolean",
          "x-omitempty": false
        },
        "DisplayName": {
          "type": "string"
        },
        "EmailVerified": {
          "type": "boolean",
          "x-omitempty": false
        },
        "Enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "LastEnabledChangedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "LoginId": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "NamespaceRoles": {
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          },
          "type": "array"
        },
        "Permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          },
          "type": "array"
        },
        "PhoneVerified": {
          "type": "boolean",
          "x-omitempty": false
        },
        "PlatformId": {
          "type": "string"
        },
        "PlatformUserId": {
          "type": "string"
        },
        "Roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "UserId": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      },
      "required": [
        "AuthType",
        "Bans",
        "CreatedAt",
        "DeletionStatus",
        "DisplayName",
        "EmailVerified",
        "Enabled",
        "LastEnabledChangedTime",
        "LoginId",
        "Namespace",
        "NamespaceRoles",
        "Permissions",
        "PhoneVerified",
        "Roles",
        "UserId"
      ]
    },
    "model.PublicUserResponseV3": {
      "properties": {
        "authType": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "bans": {
          "items": {
            "$ref": "#/definitions/model.UserActiveBanResponseV3"
          },
          "type": "array"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "deletionStatus": {
          "type": "boolean",
          "x-omitempty": false
        },
        "displayName": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean",
          "x-omitempty": false
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "lastDateOfBirthChangedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "lastEnabledChangedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "type": "string"
        },
        "namespaceRoles": {
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          },
          "type": "array"
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/model.UserPermissionsResponseV3"
          },
          "type": "array"
        },
        "phoneVerified": {
          "type": "boolean",
          "x-omitempty": false
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      },
      "required": [
        "authType",
        "bans",
        "createdAt",
        "deletionStatus",
        "displayName",
        "emailVerified",
        "enabled",
        "lastDateOfBirthChangedTime",
        "lastEnabledChangedTime",
        "namespace",
        "namespaceRoles",
        "permissions",
        "phoneVerified",
        "roles",
        "userId"
      ]
    },
    "model.PublicUsersResponse": {
      "properties": {
        "Users": {
          "items": {
            "$ref": "#/definitions/model.PublicUserResponse"
          },
          "type": "array"
        }
      }
    },
    "model.RemoveUserRoleV4Request": {
      "properties": {
        "assignedNamespaces": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "roleId": {
          "type": "string"
        }
      },
      "required": [
        "assignedNamespaces",
        "roleId"
      ]
    },
    "model.ResetPasswordRequest": {
      "properties": {
        "Code": {
          "type": "string"
        },
        "LoginID": {
          "type": "string"
        },
        "NewPassword": {
          "type": "string"
        }
      },
      "required": [
        "Code",
        "LoginID",
        "NewPassword"
      ]
    },
    "model.ResetPasswordRequestV3": {
      "properties": {
        "code": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "emailAddress",
        "newPassword"
      ]
    },
    "model.RevokeUserV4Request": {
      "properties": {
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "userId"
      ]
    },
    "model.RoleAdminStatusResponse": {
      "properties": {
        "AdminRole": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "AdminRole"
      ]
    },
    "model.RoleAdminStatusResponseV3": {
      "properties": {
        "adminRole": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "adminRole"
      ]
    },
    "model.RoleCreateRequest": {
      "properties": {
        "AdminRole": {
          "type": "boolean",
          "x-omitempty": false
        },
        "Managers": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          },
          "type": "array"
        },
        "Members": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMember"
          },
          "type": "array"
        },
        "Permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          },
          "type": "array"
        },
        "RoleName": {
          "type": "string"
        }
      },
      "required": [
        "AdminRole",
        "Managers",
        "Members",
        "Permissions",
        "RoleName"
      ]
    },
    "model.RoleCreateV3Request": {
      "properties": {
        "adminRole": {
          "type": "boolean",
          "x-omitempty": false
        },
        "deletable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isWildcard": {
          "type": "boolean",
          "x-omitempty": false
        },
        "managers": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          },
          "type": "array"
        },
        "members": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMemberV3"
          },
          "type": "array"
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          },
          "type": "array"
        },
        "roleName": {
          "type": "string"
        }
      },
      "required": [
        "adminRole",
        "isWildcard",
        "managers",
        "members",
        "permissions",
        "roleName"
      ]
    },
    "model.RoleManagersRequest": {
      "properties": {
        "Managers": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          },
          "type": "array"
        }
      },
      "required": [
        "Managers"
      ]
    },
    "model.RoleManagersRequestV3": {
      "properties": {
        "managers": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          },
          "type": "array"
        }
      },
      "required": [
        "managers"
      ]
    },
    "model.RoleManagersResponse": {
      "properties": {
        "Managers": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          },
          "type": "array"
        }
      },
      "required": [
        "Managers"
      ]
    },
    "model.RoleManagersResponsesV3": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.RoleMembersRequest": {
      "properties": {
        "Members": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMember"
          },
          "type": "array"
        }
      },
      "required": [
        "Members"
      ]
    },
    "model.RoleMembersRequestV3": {
      "properties": {
        "members": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMemberV3"
          },
          "type": "array"
        }
      },
      "required": [
        "members"
      ]
    },
    "model.RoleMembersResponse": {
      "properties": {
        "Members": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMember"
          },
          "type": "array"
        }
      },
      "required": [
        "Members"
      ]
    },
    "model.RoleMembersResponseV3": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMemberV3"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.RoleNamesResponseV3": {
      "properties": {
        "data": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.RoleResponse": {
      "properties": {
        "IsWildcard": {
          "type": "boolean",
          "x-omitempty": false
        },
        "Permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          },
          "type": "array"
        },
        "RoleId": {
          "type": "string"
        },
        "RoleName": {
          "type": "string"
        }
      },
      "required": [
        "IsWildcard",
        "Permissions",
        "RoleId",
        "RoleName"
      ]
    },
    "model.RoleResponseV3": {
      "properties": {
        "adminRole": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isWildcard": {
          "type": "boolean",
          "x-omitempty": false
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          },
          "type": "array"
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      },
      "required": [
        "adminRole",
        "isWildcard",
        "permissions",
        "roleId",
        "roleName"
      ]
    },
    "model.RoleResponseWithManagers": {
      "properties": {
        "IsWildcard": {
          "type": "boolean",
          "x-omitempty": false
        },
        "Managers": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          },
          "type": "array"
        },
        "Permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          },
          "type": "array"
        },
        "RoleId": {
          "type": "string"
        },
        "RoleName": {
          "type": "string"
        }
      },
      "required": [
        "IsWildcard",
        "Managers",
        "Permissions",
        "RoleId",
        "RoleName"
      ]
    },
    "model.RoleResponseWithManagersAndPaginationV3": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.RoleResponseWithManagersV3"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      },
      "required": [
        "data",
        "paging"
      ]
    },
    "model.RoleResponseWithManagersV3": {
      "properties": {
        "adminRole": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isWildcard": {
          "type": "boolean",
          "x-omitempty": false
        },
        "managers": {
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          },
          "type": "array"
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          },
          "type": "array"
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      },
      "required": [
        "adminRole",
        "isWildcard",
        "managers",
        "permissions",
        "roleId",
        "roleName"
      ]
    },
    "model.RoleUpdateRequest": {
      "properties": {
        "RoleName": {
          "type": "string"
        }
      },
      "required": [
        "RoleName"
      ]
    },
    "model.RoleUpdateRequestV3": {
      "properties": {
        "deletable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isWildcard": {
          "type": "boolean",
          "x-omitempty": false
        },
        "roleName": {
          "type": "string"
        }
      },
      "required": [
        "isWildcard",
        "roleName"
      ]
    },
    "model.RoleV4Request": {
      "properties": {
        "adminRole": {
          "default": false,
          "type": "boolean",
          "x-omitempty": false
        },
        "deletable": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isWildcard": {
          "default": false,
          "type": "boolean",
          "x-omitempty": false
        },
        "roleName": {
          "type": "string"
        }
      },
      "required": [
        "adminRole",
        "isWildcard",
        "roleName"
      ]
    },
    "model.RoleV4Response": {
      "properties": {
        "adminRole": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isWildcard": {
          "type": "boolean",
          "x-omitempty": false
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          },
          "type": "array"
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      },
      "required": [
        "adminRole",
        "isWildcard",
        "permissions",
        "roleId",
        "roleName"
      ]
    },
    "model.SSOPlatformCredentialRequest": {
      "properties": {
        "acsUrl": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "federationMetadataUrl": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "redirectUri": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "ssoUrl": {
          "type": "string"
        }
      },
      "required": [
        "acsUrl",
        "apiKey",
        "appId",
        "federationMetadataUrl",
        "isActive",
        "redirectUri",
        "secret",
        "ssoUrl"
      ]
    },
    "model.SSOPlatformCredentialResponse": {
      "properties": {
        "acsUrl": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "federationMetadataUrl": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "namespace": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "redirectUri": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "ssoUrl": {
          "type": "string"
        },
        "truncatedApiKey": {
          "description": "first few characters of key",
          "type": "string"
        }
      },
      "required": [
        "acsUrl",
        "appId",
        "federationMetadataUrl",
        "isActive",
        "namespace",
        "platformId",
        "redirectUri",
        "secret",
        "ssoUrl",
        "truncatedApiKey"
      ]
    },
    "model.SearchUsersByPlatformIDResponse": {
      "properties": {
        "Data": {
          "items": {
            "$ref": "#/definitions/accountcommon.UserSearchByPlatformIDResult"
          },
          "type": "array"
        },
        "Paging": {
          "$ref": "#/definitions/accountcommon.Pagination"
        }
      },
      "required": [
        "Data",
        "Paging"
      ]
    },
    "model.SearchUsersResponse": {
      "properties": {
        "Data": {
          "items": {
            "$ref": "#/definitions/accountcommon.UserSearchResult"
          },
          "type": "array"
        }
      },
      "required": [
        "Data"
      ]
    },
    "model.SearchUsersResponseWithPaginationV3": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/model.UserResponseV3"
          },
          "type": "array"
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        },
        "totalData": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "data",
        "paging",
        "totalData"
      ]
    },
    "model.SendRegisterVerificationCodeRequest": {
      "properties": {
        "emailAddress": {
          "type": "string"
        },
        "languageTag": {
          "type": "string"
        }
      },
      "required": [
        "emailAddress"
      ]
    },
    "model.SendVerificationCodeRequest": {
      "properties": {
        "Context": {
          "type": "string"
        },
        "LanguageTag": {
          "type": "string"
        },
        "LoginID": {
          "type": "string"
        }
      },
      "required": [
        "LanguageTag",
        "LoginID"
      ]
    },
    "model.SendVerificationCodeRequestV3": {
      "properties": {
        "context": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "languageTag": {
          "type": "string"
        }
      },
      "required": [
        "emailAddress"
      ]
    },
    "model.SendVerificationLinkRequest": {
      "properties": {
        "languageTag": {
          "type": "string"
        }
      }
    },
    "model.ThirdPartyLoginPlatformCredentialRequest": {
      "properties": {
        "ACSURL": {
          "description": "ACSURL is an endpoint on the service provider where the identity provider will redirect to with its authentication response",
          "type": "string"
        },
        "AWSCognitoRegion": {
          "description": "AWSCognitoRegion is aws region where user pool reside",
          "type": "string"
        },
        "AWSCognitoUserPool": {
          "description": "AWSCognitoUserPool is aws cognito user pool id",
          "type": "string"
        },
        "AllowedClients": {
          "description": "allowed clients that can show this login method",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "AppId": {
          "type": "string"
        },
        "AuthorizationEndpoint": {
          "description": "third party authorization endpoint to obtain authorization code",
          "type": "string"
        },
        "ClientId": {
          "type": "string"
        },
        "Environment": {
          "type": "string"
        },
        "FederationMetadataURL": {
          "description": "FederationMetadataURL is an endpoint on the Identity Provider(IdP) to get IdP federation metadata for service provider to build trust relationship",
          "type": "string"
        },
        "GenericOauthFlow": {
          "type": "boolean",
          "x-omitempty": false
        },
        "IsActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "Issuer": {
          "description": "Issuer of 3rd party identity provider. Used for generic oauth flow.",
          "type": "string"
        },
        "JWKSEndpoint": {
          "description": "JWKS endpoint to validate 3rd party user id token. Used for generic oauth flow.",
          "type": "string"
        },
        "KeyID": {
          "description": "apple key id",
          "type": "string"
        },
        "NetflixCertificates": {
          "$ref": "#/definitions/accountcommon.NetflixCertificates",
          "description": "A json containing credentials for netflix integration. Only for netflix platformId"
        },
        "OrganizationId": {
          "type": "string"
        },
        "PlatformName": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "RegisteredDomains": {
          "description": "domains that are allowed to create user and grant roles",
          "items": {
            "$ref": "#/definitions/accountcommon.RegisteredDomain"
          },
          "type": "array"
        },
        "Secret": {
          "type": "string"
        },
        "TeamID": {
          "description": "apple team id",
          "type": "string"
        },
        "TokenAuthenticationType": {
          "description": "Token authentication type indicating what token will be used to authenticate 3rd party user. Currently support: idToken. Used for generic oauth flow.",
          "type": "string"
        },
        "TokenClaimsMapping": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A JSON containing how IAM service retrieve value from id token claims. Used for generic oauth flow. Currently allowed fields list [userIdentity, name, email, avatarUrl]",
          "type": "object"
        },
        "TokenEndpoint": {
          "description": "third party token endpoint to obtain token",
          "type": "string"
        }
      },
      "required": [
        "ACSURL",
        "AWSCognitoRegion",
        "AWSCognitoUserPool",
        "AllowedClients",
        "AppId",
        "AuthorizationEndpoint",
        "ClientId",
        "Environment",
        "FederationMetadataURL",
        "GenericOauthFlow",
        "IsActive",
        "Issuer",
        "JWKSEndpoint",
        "KeyID",
        "NetflixCertificates",
        "OrganizationId",
        "PlatformName",
        "RedirectUri",
        "RegisteredDomains",
        "Secret",
        "TeamID",
        "TokenAuthenticationType",
        "TokenClaimsMapping",
        "TokenEndpoint"
      ]
    },
    "model.ThirdPartyLoginPlatformCredentialResponse": {
      "properties": {
        "ACSURL": {
          "description": "ACSURL is an endpoint on the service provider where the identity provider will redirect to with its authentication response",
          "type": "string"
        },
        "AWSCognitoRegion": {
          "description": "AWSCognitoRegion is aws region where user pool reside",
          "type": "string"
        },
        "AWSCognitoUserPool": {
          "description": "AWSCognitoUserPool is aws cognito user pool id",
          "type": "string"
        },
        "AllowedClients": {
          "description": "allowed clients that can show this login method",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "AppId": {
          "type": "string"
        },
        "AuthorizationEndpoint": {
          "description": "third party authorization endpoint to obtain authorization code",
          "type": "string"
        },
        "ClientId": {
          "type": "string"
        },
        "Environment": {
          "type": "string"
        },
        "FederationMetadataURL": {
          "description": "FederationMetadataURL is an endpoint on the Identity Provider(IdP) to get IdP federation metadata for service provider to build trust relationship",
          "type": "string"
        },
        "GenericOauthFlow": {
          "default": false,
          "description": "GenericOauthFlow is a flag that indicate this client is using generic oauth/open id flow or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "IsActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "Issuer": {
          "description": "Issuer of 3rd party identity provider. Used for generic oauth flow.",
          "type": "string"
        },
        "JWKSEndpoint": {
          "description": "JWKS endpoint to validate 3rd party user id token. Used for generic oauth flow.",
          "type": "string"
        },
        "KeyID": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "NetflixCertificates": {
          "$ref": "#/definitions/accountcommon.NetflixCertificates",
          "description": "A json containing Credentials for netflix integration."
        },
        "OrganizationId": {
          "type": "string"
        },
        "PlatformId": {
          "type": "string"
        },
        "PlatformName": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "Secret": {
          "type": "string"
        },
        "TeamID": {
          "type": "string"
        },
        "TokenAuthenticationType": {
          "description": "Token authentication type indicating what token will be used to authenticate 3rd party user. Currently support: idToken. Used for generic oauth flow.",
          "type": "string"
        },
        "TokenClaimsMapping": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A JSON containing how IAM service retrieve value from id token claims. Used for generic oauth flow.",
          "type": "object"
        },
        "TokenEndpoint": {
          "description": "third party token endpoint to obtain token",
          "type": "string"
        },
        "registeredDomains": {
          "items": {
            "$ref": "#/definitions/accountcommon.RegisteredDomain"
          },
          "type": "array"
        }
      },
      "required": [
        "ACSURL",
        "AWSCognitoRegion",
        "AWSCognitoUserPool",
        "AllowedClients",
        "AppId",
        "ClientId",
        "Environment",
        "FederationMetadataURL",
        "GenericOauthFlow",
        "IsActive",
        "Issuer",
        "JWKSEndpoint",
        "KeyID",
        "Namespace",
        "OrganizationId",
        "PlatformId",
        "PlatformName",
        "RedirectUri",
        "Secret",
        "TeamID",
        "TokenAuthenticationType",
        "TokenClaimsMapping",
        "registeredDomains"
      ]
    },
    "model.UnlinkUserPlatformRequest": {
      "properties": {
        "platformNamespace": {
          "type": "string"
        }
      }
    },
    "model.UpdatePermissionScheduleRequest": {
      "properties": {
        "SchedAction": {
          "format": "int32",
          "type": "integer"
        },
        "SchedCron": {
          "type": "string"
        },
        "SchedRange": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "model.UpdateUserDeletionStatusRequest": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "enabled"
      ]
    },
    "model.UpdateUserStatusRequest": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "reason": {
          "type": "string"
        }
      },
      "required": [
        "enabled",
        "reason"
      ]
    },
    "model.UpgradeHeadlessAccountRequest": {
      "properties": {
        "LoginID": {
          "description": "new email address or phone number",
          "type": "string"
        },
        "Password": {
          "description": "new password",
          "type": "string"
        }
      },
      "required": [
        "LoginID",
        "Password"
      ]
    },
    "model.UpgradeHeadlessAccountV3Request": {
      "properties": {
        "emailAddress": {
          "description": "new email address",
          "type": "string"
        },
        "password": {
          "description": "new password",
          "type": "string"
        }
      },
      "required": [
        "emailAddress",
        "password"
      ]
    },
    "model.UpgradeHeadlessAccountWithVerificationCodeRequest": {
      "properties": {
        "Code": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "loginId": {
          "type": "string"
        }
      },
      "required": [
        "Code",
        "Password",
        "loginId"
      ]
    },
    "model.UpgradeHeadlessAccountWithVerificationCodeRequestV3": {
      "properties": {
        "code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "validateOnly": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "code",
        "emailAddress",
        "password"
      ]
    },
    "model.UserActiveBanResponse": {
      "properties": {
        "Ban": {
          "type": "string"
        },
        "BanId": {
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "Ban",
        "BanId",
        "EndDate"
      ]
    },
    "model.UserActiveBanResponseV3": {
      "properties": {
        "ban": {
          "type": "string"
        },
        "banId": {
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "ban",
        "banId",
        "endDate"
      ]
    },
    "model.UserBanResponse": {
      "properties": {
        "Ban": {
          "type": "string"
        },
        "BanId": {
          "type": "string"
        },
        "BannedBy": {
          "$ref": "#/definitions/.BannedBy"
        },
        "Comment": {
          "type": "string"
        },
        "CreatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "DisabledDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "Enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "EndDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "Namespace": {
          "type": "string"
        },
        "Reason": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      },
      "required": [
        "Ban",
        "BanId",
        "BannedBy",
        "Comment",
        "CreatedAt",
        "Enabled",
        "EndDate",
        "Namespace",
        "Reason",
        "UserId"
      ]
    },
    "model.UserBanResponseV3": {
      "properties": {
        "ban": {
          "type": "string"
        },
        "banId": {
          "type": "string"
        },
        "bannedBy": {
          "$ref": "#/definitions/accountcommon.BannedByV3"
        },
        "comment": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "disabledDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "endDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "ban",
        "banId",
        "bannedBy",
        "comment",
        "createdAt",
        "disabledDate",
        "enabled",
        "endDate",
        "namespace",
        "reason",
        "userId"
      ]
    },
    "model.UserBaseInfo": {
      "properties": {
        "avatarUrl": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "platformUserIds": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "avatarUrl",
        "displayName",
        "platformUserIds",
        "userId"
      ]
    },
    "model.UserCreateFromInvitationRequestV3": {
      "properties": {
        "acceptedPolicies": {
          "items": {
            "$ref": "#/definitions/legal.AcceptedPoliciesRequest"
          },
          "type": "array"
        },
        "authType": {
          "default": "EMAILPASSWD",
          "enum": [
            "EMAILPASSWD"
          ],
          "type": "string"
        },
        "country": {
          "default": "ID",
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "reachMinimumAge": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "authType",
        "country",
        "displayName",
        "password",
        "reachMinimumAge"
      ]
    },
    "model.UserCreateFromInvitationRequestV4": {
      "properties": {
        "acceptedPolicies": {
          "items": {
            "$ref": "#/definitions/legal.AcceptedPoliciesRequest"
          },
          "type": "array"
        },
        "authType": {
          "default": "EMAILPASSWD",
          "enum": [
            "EMAILPASSWD"
          ],
          "type": "string"
        },
        "country": {
          "default": "ID",
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "reachMinimumAge": {
          "type": "boolean",
          "x-omitempty": false
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "authType",
        "country",
        "displayName",
        "password",
        "reachMinimumAge",
        "username"
      ]
    },
    "model.UserCreateRequest": {
      "properties": {
        "AuthType": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "LoginId": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "PasswordMD5Sum": {
          "type": "string"
        }
      },
      "required": [
        "AuthType",
        "Country",
        "DisplayName",
        "LoginId",
        "Password"
      ]
    },
    "model.UserCreateRequestV3": {
      "properties": {
        "PasswordMD5Sum": {
          "type": "string"
        },
        "acceptedPolicies": {
          "items": {
            "$ref": "#/definitions/legal.AcceptedPoliciesRequest"
          },
          "type": "array"
        },
        "authType": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "reachMinimumAge": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "authType",
        "code",
        "country",
        "displayName",
        "emailAddress",
        "password",
        "reachMinimumAge"
      ]
    },
    "model.UserCreateResponse": {
      "properties": {
        "AuthType": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "DateOfBirth": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "DisplayName": {
          "type": "string"
        },
        "LoginId": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      },
      "required": [
        "AuthType",
        "Country",
        "DateOfBirth",
        "DisplayName",
        "LoginId",
        "Namespace",
        "UserId"
      ]
    },
    "model.UserCreateResponseV3": {
      "properties": {
        "authType": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "authType",
        "country",
        "dateOfBirth",
        "displayName",
        "emailAddress",
        "namespace",
        "userId"
      ]
    },
    "model.UserDeletionStatusResponse": {
      "properties": {
        "deletionStatus": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "deletionStatus"
      ]
    },
    "model.UserIDsRequest": {
      "properties": {
        "userIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "userIds"
      ]
    },
    "model.UserInfoResponse": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "displayName",
        "emailAddress",
        "namespace",
        "userId"
      ]
    },
    "model.UserInformation": {
      "properties": {
        "Country": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "EmailAddresses": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "LinkedPlatformAccounts": {
          "items": {
            "$ref": "#/definitions/model.PlatformUserInformation"
          },
          "type": "array"
        },
        "PhoneNumber": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      },
      "required": [
        "Country",
        "DisplayName",
        "EmailAddresses",
        "LinkedPlatformAccounts",
        "PhoneNumber",
        "Username"
      ]
    },
    "model.UserInvitationV3": {
      "properties": {
        "email": {
          "type": "string"
        },
        "expiredAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "id": {
          "type": "string"
        },
        "roles": {
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          },
          "type": "array"
        }
      },
      "required": [
        "email",
        "expiredAt",
        "roles"
      ]
    },
    "model.UserLoginHistoryResponse": {
      "properties": {
        "ApplicationName": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "DeviceId": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "Timestamp": {
          "format": "int64",
          "type": "integer"
        },
        "deviceName": {
          "type": "string"
        }
      },
      "required": [
        "ApplicationName",
        "City",
        "Country",
        "DeviceId",
        "State",
        "Timestamp",
        "deviceName"
      ]
    },
    "model.UserPasswordUpdateRequest": {
      "properties": {
        "LanguageTag": {
          "type": "string"
        },
        "NewPassword": {
          "type": "string"
        },
        "OldPassword": {
          "type": "string"
        }
      },
      "required": [
        "LanguageTag",
        "NewPassword",
        "OldPassword"
      ]
    },
    "model.UserPasswordUpdateV3Request": {
      "properties": {
        "languageTag": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        }
      },
      "required": [
        "languageTag",
        "newPassword",
        "oldPassword"
      ]
    },
    "model.UserPermissionsResponseV3": {
      "properties": {
        "action": {
          "format": "int32",
          "type": "integer"
        },
        "resource": {
          "type": "string"
        },
        "schedAction": {
          "format": "int32",
          "type": "integer"
        },
        "schedCron": {
          "type": "string"
        },
        "schedRange": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "action",
        "resource"
      ]
    },
    "model.UserResponse": {
      "properties": {
        "AuthType": {
          "type": "string"
        },
        "AvatarUrl": {
          "type": "string"
        },
        "Bans": {
          "items": {
            "$ref": "#/definitions/model.UserActiveBanResponse"
          },
          "type": "array"
        },
        "Country": {
          "type": "string"
        },
        "CreatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "DateOfBirth": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "DeletionStatus": {
          "type": "boolean",
          "x-omitempty": false
        },
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "EmailVerified": {
          "type": "boolean",
          "x-omitempty": false
        },
        "Enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "LastDateOfBirthChangedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "LastEnabledChangedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "LoginId": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "NamespaceRoles": {
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          },
          "type": "array"
        },
        "NewEmailAddress": {
          "type": "string"
        },
        "OldEmailAddress": {
          "type": "string"
        },
        "Permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          },
          "type": "array"
        },
        "PhoneNumber": {
          "type": "string"
        },
        "PhoneVerified": {
          "type": "boolean",
          "x-omitempty": false
        },
        "PlatformId": {
          "type": "string"
        },
        "PlatformUserId": {
          "type": "string"
        },
        "Roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "UserId": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      },
      "required": [
        "AuthType",
        "Bans",
        "Country",
        "CreatedAt",
        "DateOfBirth",
        "DeletionStatus",
        "DisplayName",
        "EmailVerified",
        "Enabled",
        "LastDateOfBirthChangedTime",
        "LastEnabledChangedTime",
        "LoginId",
        "Namespace",
        "NamespaceRoles",
        "OldEmailAddress",
        "Permissions",
        "PhoneVerified",
        "Roles",
        "UserId"
      ]
    },
    "model.UserResponseV3": {
      "properties": {
        "authType": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "bans": {
          "items": {
            "$ref": "#/definitions/model.UserActiveBanResponseV3"
          },
          "type": "array"
        },
        "country": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "dateOfBirth": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "deletionStatus": {
          "type": "boolean",
          "x-omitempty": false
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean",
          "x-omitempty": false
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "lastDateOfBirthChangedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "lastEnabledChangedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        },
        "namespace": {
          "type": "string"
        },
        "namespaceRoles": {
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          },
          "type": "array"
        },
        "newEmailAddress": {
          "type": "string"
        },
        "oldEmailAddress": {
          "type": "string"
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/model.UserPermissionsResponseV3"
          },
          "type": "array"
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneVerified": {
          "type": "boolean",
          "x-omitempty": false
        },
        "platformAvatarUrl": {
          "type": "string"
        },
        "platformDisplayName": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      },
      "required": [
        "authType",
        "bans",
        "country",
        "createdAt",
        "dateOfBirth",
        "deletionStatus",
        "displayName",
        "emailAddress",
        "emailVerified",
        "enabled",
        "lastDateOfBirthChangedTime",
        "lastEnabledChangedTime",
        "namespace",
        "namespaceRoles",
        "oldEmailAddress",
        "permissions",
        "phoneVerified",
        "roles",
        "userId"
      ]
    },
    "model.UserRolesV4Response": {
      "properties": {
        "assignedNamespaces": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      },
      "required": [
        "assignedNamespaces",
        "roleId",
        "roleName"
      ]
    },
    "model.UserUpdateRequest": {
      "properties": {
        "Country": {
          "type": "string"
        },
        "DateOfBirth": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "LanguageTag": {
          "type": "string"
        }
      }
    },
    "model.UserUpdateRequestV3": {
      "properties": {
        "avatarUrl": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "languageTag": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "model.UserVerificationRequest": {
      "properties": {
        "Code": {
          "type": "string"
        },
        "ContactType": {
          "type": "string"
        },
        "LanguageTag": {
          "type": "string"
        },
        "validateOnly": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "Code",
        "ContactType",
        "LanguageTag",
        "validateOnly"
      ]
    },
    "model.UserVerificationRequestV3": {
      "properties": {
        "code": {
          "type": "string"
        },
        "contactType": {
          "type": "string"
        },
        "languageTag": {
          "type": "string"
        },
        "validateOnly": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "code",
        "contactType"
      ]
    },
    "model.ValidUserIDResponseV4": {
      "properties": {
        "exists": {
          "description": "indicate if user is exist or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "exists",
        "userId"
      ]
    },
    "model.ValidationDetail": {
      "properties": {
        "allowAllSpecialCharacters": {
          "type": "boolean",
          "x-omitempty": false
        },
        "allowDigit": {
          "type": "boolean",
          "x-omitempty": false
        },
        "allowLetter": {
          "type": "boolean",
          "x-omitempty": false
        },
        "allowSpace": {
          "type": "boolean",
          "x-omitempty": false
        },
        "allowUnicode": {
          "type": "boolean",
          "x-omitempty": false
        },
        "blockedWord": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "items": {
            "$ref": "#/definitions/accountcommon.InputValidationDescription"
          },
          "type": "array"
        },
        "isCustomRegex": {
          "type": "boolean",
          "x-omitempty": false
        },
        "letterCase": {
          "type": "string"
        },
        "maxLength": {
          "format": "int32",
          "type": "integer"
        },
        "maxRepeatingAlphaNum": {
          "format": "int32",
          "type": "integer"
        },
        "maxRepeatingSpecialCharacter": {
          "format": "int32",
          "type": "integer"
        },
        "minCharType": {
          "format": "int32",
          "type": "integer"
        },
        "minLength": {
          "format": "int32",
          "type": "integer"
        },
        "regex": {
          "type": "string"
        },
        "specialCharacterLocation": {
          "type": "string"
        },
        "specialCharacters": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "allowAllSpecialCharacters",
        "allowDigit",
        "allowLetter",
        "allowSpace",
        "allowUnicode",
        "blockedWord",
        "description",
        "isCustomRegex",
        "letterCase",
        "maxLength",
        "maxRepeatingAlphaNum",
        "maxRepeatingSpecialCharacter",
        "minCharType",
        "minLength",
        "regex",
        "specialCharacterLocation",
        "specialCharacters"
      ]
    },
    "model.ValidationDetailPublic": {
      "properties": {
        "allowAllSpecialCharacters": {
          "type": "boolean",
          "x-omitempty": false
        },
        "allowDigit": {
          "type": "boolean",
          "x-omitempty": false
        },
        "allowLetter": {
          "type": "boolean",
          "x-omitempty": false
        },
        "allowSpace": {
          "type": "boolean",
          "x-omitempty": false
        },
        "allowUnicode": {
          "type": "boolean",
          "x-omitempty": false
        },
        "blockedWord": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "$ref": "#/definitions/accountcommon.InputValidationDescription"
        },
        "isCustomRegex": {
          "type": "boolean",
          "x-omitempty": false
        },
        "letterCase": {
          "type": "string"
        },
        "maxLength": {
          "format": "int32",
          "type": "integer"
        },
        "maxRepeatingAlphaNum": {
          "format": "int32",
          "type": "integer"
        },
        "maxRepeatingSpecialCharacter": {
          "format": "int32",
          "type": "integer"
        },
        "minCharType": {
          "format": "int32",
          "type": "integer"
        },
        "minLength": {
          "format": "int32",
          "type": "integer"
        },
        "regex": {
          "type": "string"
        },
        "specialCharacterLocation": {
          "type": "string"
        },
        "specialCharacters": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "allowAllSpecialCharacters",
        "allowDigit",
        "allowLetter",
        "allowSpace",
        "allowUnicode",
        "blockedWord",
        "description",
        "isCustomRegex",
        "letterCase",
        "maxLength",
        "maxRepeatingAlphaNum",
        "maxRepeatingSpecialCharacter",
        "minCharType",
        "minLength",
        "regex",
        "specialCharacterLocation",
        "specialCharacters"
      ]
    },
    "model.VerificationCodeResponse": {
      "properties": {
        "accountRegistration": {
          "type": "string"
        },
        "accountUpgrade": {
          "type": "string"
        },
        "passwordReset": {
          "type": "string"
        },
        "updateEmail": {
          "type": "string"
        }
      },
      "required": [
        "accountRegistration",
        "accountUpgrade",
        "passwordReset",
        "updateEmail"
      ]
    },
    "model.VerifyRegistrationCode": {
      "properties": {
        "code": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "emailAddress"
      ]
    },
    "model.WebLinkingResponse": {
      "properties": {
        "third_party_url": {
          "type": "string"
        }
      },
      "required": [
        "third_party_url"
      ]
    },
    "model.userUnbanCreateRequestV3": {
      "properties": {
        "banId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "banId",
        "userId"
      ]
    },
    "oauthapi.RevocationList": {
      "properties": {
        "revoked_tokens": {
          "$ref": "#/definitions/bloom.FilterJSON"
        },
        "revoked_users": {
          "items": {
            "$ref": "#/definitions/oauthcommon.UserRevocationListRecord"
          },
          "type": "array"
        }
      },
      "required": [
        "revoked_tokens",
        "revoked_users"
      ]
    },
    "oauthcommon.JWKKey": {
      "properties": {
        "alg": {
          "type": "string"
        },
        "e": {
          "type": "string"
        },
        "kid": {
          "type": "string"
        },
        "kty": {
          "type": "string"
        },
        "n": {
          "type": "string"
        },
        "use": {
          "type": "string"
        }
      },
      "required": [
        "kty"
      ]
    },
    "oauthcommon.JWKSet": {
      "properties": {
        "keys": {
          "items": {
            "$ref": "#/definitions/oauthcommon.JWKKey"
          },
          "type": "array"
        }
      },
      "required": [
        "keys"
      ]
    },
    "oauthcommon.UserRevocationListRecord": {
      "properties": {
        "id": {
          "type": "string"
        },
        "revoked_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "id",
        "revoked_at"
      ]
    },
    "oauthmodel.CountryLocationResponse": {
      "properties": {
        "city": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "required": [
        "city",
        "countryCode",
        "countryName",
        "state"
      ]
    },
    "oauthmodel.ErrorResponse": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "default_factor": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "error_description": {
          "type": "string"
        },
        "error_uri": {
          "type": "string"
        },
        "factors": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "linkingToken": {
          "type": "string"
        },
        "messageVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "mfa_token": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        }
      },
      "required": [
        "error"
      ]
    },
    "oauthmodel.GameTokenCodeResponse": {
      "properties": {
        "code": {
          "type": "string"
        }
      },
      "required": [
        "code"
      ]
    },
    "oauthmodel.TokenIntrospectResponse": {
      "properties": {
        "active": {
          "type": "boolean",
          "x-omitempty": false
        },
        "aud": {
          "type": "string"
        },
        "client_id": {
          "type": "string"
        },
        "exp": {
          "format": "int64",
          "type": "integer"
        },
        "iat": {
          "format": "int64",
          "type": "integer"
        },
        "scope": {
          "type": "string"
        },
        "sub": {
          "type": "string"
        }
      },
      "required": [
        "active"
      ]
    },
    "oauthmodel.TokenResponse": {
      "properties": {
        "access_token": {
          "type": "string"
        },
        "bans": {
          "items": {
            "$ref": "#/definitions/accountcommon.JWTBanV3"
          },
          "type": "array"
        },
        "display_name": {
          "type": "string"
        },
        "expires_in": {
          "format": "int32",
          "type": "integer"
        },
        "is_comply": {
          "type": "boolean",
          "x-omitempty": false
        },
        "jflgs": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "namespace_roles": {
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          },
          "type": "array"
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          },
          "type": "array"
        },
        "platform_id": {
          "type": "string"
        },
        "platform_user_id": {
          "type": "string"
        },
        "refresh_expires_in": {
          "format": "int32",
          "type": "integer"
        },
        "refresh_token": {
          "type": "string"
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "token_type": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      },
      "required": [
        "access_token",
        "bans",
        "display_name",
        "expires_in",
        "namespace",
        "namespace_roles",
        "permissions",
        "refresh_token",
        "roles",
        "token_type",
        "user_id"
      ]
    },
    "oauthmodel.TokenResponseV3": {
      "properties": {
        "access_token": {
          "type": "string"
        },
        "bans": {
          "items": {
            "$ref": "#/definitions/accountcommon.JWTBanV3"
          },
          "type": "array"
        },
        "display_name": {
          "type": "string"
        },
        "expires_in": {
          "format": "int32",
          "type": "integer"
        },
        "is_comply": {
          "type": "boolean",
          "x-omitempty": false
        },
        "jflgs": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "namespace_roles": {
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          },
          "type": "array"
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          },
          "type": "array"
        },
        "platform_id": {
          "type": "string"
        },
        "platform_user_id": {
          "type": "string"
        },
        "refresh_expires_in": {
          "description": "present if it is user token",
          "format": "int32",
          "type": "integer"
        },
        "refresh_token": {
          "description": "present if it is user token",
          "type": "string"
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "scope": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        },
        "user_id": {
          "description": "present if it is user token",
          "type": "string"
        },
        "xuid": {
          "type": "string"
        }
      },
      "required": [
        "access_token",
        "bans",
        "expires_in",
        "namespace",
        "namespace_roles",
        "permissions",
        "roles",
        "scope",
        "token_type"
      ]
    },
    "oauthmodel.TokenThirdPartyResponse": {
      "properties": {
        "platform_token": {
          "type": "string"
        },
        "sand_box_id": {
          "type": "string"
        }
      },
      "required": [
        "platform_token"
      ]
    },
    "oauthmodel.TokenWithDeviceCookieResponseV3": {
      "properties": {
        "access_token": {
          "type": "string"
        },
        "auth_trust_id": {
          "description": "Authentication Trust Id for device cookie validation. Only exist when login using grant_type=password and no existing Auth-Trust-Id given from request header",
          "type": "string"
        },
        "bans": {
          "items": {
            "$ref": "#/definitions/accountcommon.JWTBanV3"
          },
          "type": "array"
        },
        "display_name": {
          "type": "string"
        },
        "expires_in": {
          "format": "int32",
          "type": "integer"
        },
        "is_comply": {
          "type": "boolean",
          "x-omitempty": false
        },
        "jflgs": {
          "format": "int32",
          "type": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "namespace_roles": {
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          },
          "type": "array"
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          },
          "type": "array"
        },
        "platform_id": {
          "type": "string"
        },
        "platform_user_id": {
          "type": "string"
        },
        "refresh_expires_in": {
          "description": "present if it is user token",
          "format": "int32",
          "type": "integer"
        },
        "refresh_token": {
          "description": "present if it is user token",
          "type": "string"
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "scope": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        },
        "user_id": {
          "description": "present if it is user token",
          "type": "string"
        },
        "xuid": {
          "type": "string"
        }
      },
      "required": [
        "access_token",
        "bans",
        "expires_in",
        "namespace",
        "namespace_roles",
        "permissions",
        "roles",
        "scope",
        "token_type"
      ]
    },
    "rest.ErrorResponse": {
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorMessage": {
          "type": "string"
        },
        "messageVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "required": [
        "errorCode",
        "errorMessage"
      ]
    },
    "rest.ErrorResponseWithConflictedUserPlatformAccounts": {
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorMessage": {
          "type": "string"
        },
        "messageVariables": {
          "$ref": "#/definitions/accountcommon.ConflictedUserPlatformAccounts"
        }
      },
      "required": [
        "errorCode",
        "errorMessage"
      ]
    },
    "restapi.ErrorResponse": {
      "properties": {
        "Code": {
          "format": "int32",
          "type": "integer"
        },
        "Message": {
          "type": "string"
        }
      },
      "required": [
        "Message"
      ]
    }
  }
}