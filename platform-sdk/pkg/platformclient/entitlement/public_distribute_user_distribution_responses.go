// Code generated by go-swagger; DO NOT EDIT.

package entitlement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/platform-sdk/pkg/platformclientmodels"
)

// PublicDistributeUserDistributionReader is a Reader for the PublicDistributeUserDistribution structure.
type PublicDistributeUserDistributionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PublicDistributeUserDistributionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPublicDistributeUserDistributionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPublicDistributeUserDistributionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPublicDistributeUserDistributionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PUT /public/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/distribute returns an error %d: %s", response.Code(), string(data))
	}
}

// NewPublicDistributeUserDistributionOK creates a PublicDistributeUserDistributionOK with default headers values
func NewPublicDistributeUserDistributionOK() *PublicDistributeUserDistributionOK {
	return &PublicDistributeUserDistributionOK{}
}

/*PublicDistributeUserDistributionOK handles this case with default header values.

  successful operation
*/
type PublicDistributeUserDistributionOK struct {
	Payload *platformclientmodels.EntitlementInfo
}

func (o *PublicDistributeUserDistributionOK) Error() string {
	return fmt.Sprintf("[PUT /public/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/distribute][%d] publicDistributeUserDistributionOK  %+v", 200, o.Payload)
}

func (o *PublicDistributeUserDistributionOK) GetPayload() *platformclientmodels.EntitlementInfo {
	return o.Payload
}

func (o *PublicDistributeUserDistributionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.EntitlementInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicDistributeUserDistributionBadRequest creates a PublicDistributeUserDistributionBadRequest with default headers values
func NewPublicDistributeUserDistributionBadRequest() *PublicDistributeUserDistributionBadRequest {
	return &PublicDistributeUserDistributionBadRequest{}
}

/*PublicDistributeUserDistributionBadRequest handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31121</td><td>Entitlement [{entitlementId}] is not distributable</td></tr><tr><td>31122</td><td>Exceed entitlement available distribute quantity</td></tr><tr><td>31123</td><td>Publisher namespace [{namespace}] is not distributable</td></tr></table>
*/
type PublicDistributeUserDistributionBadRequest struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *PublicDistributeUserDistributionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /public/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/distribute][%d] publicDistributeUserDistributionBadRequest  %+v", 400, o.Payload)
}

func (o *PublicDistributeUserDistributionBadRequest) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *PublicDistributeUserDistributionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublicDistributeUserDistributionNotFound creates a PublicDistributeUserDistributionNotFound with default headers values
func NewPublicDistributeUserDistributionNotFound() *PublicDistributeUserDistributionNotFound {
	return &PublicDistributeUserDistributionNotFound{}
}

/*PublicDistributeUserDistributionNotFound handles this case with default header values.

  <table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20017</td><td>user [{userId}] in namespace [{namespaceA}] does not linked in [{namespaceB}]</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr><tr><td>31241</td><td>Distribution receiver of user [{userId}] and extUserId [{extUserId}] does not exist in namespace [{namespace}]</td></tr></table>
*/
type PublicDistributeUserDistributionNotFound struct {
	Payload *platformclientmodels.ErrorEntity
}

func (o *PublicDistributeUserDistributionNotFound) Error() string {
	return fmt.Sprintf("[PUT /public/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/distribute][%d] publicDistributeUserDistributionNotFound  %+v", 404, o.Payload)
}

func (o *PublicDistributeUserDistributionNotFound) GetPayload() *platformclientmodels.ErrorEntity {
	return o.Payload
}

func (o *PublicDistributeUserDistributionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(platformclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
