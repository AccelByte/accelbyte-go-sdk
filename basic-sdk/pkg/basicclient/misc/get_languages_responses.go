// Code generated by go-swagger; DO NOT EDIT.

package misc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/basic-sdk/pkg/basicclientmodels"
)

// GetLanguagesReader is a Reader for the GetLanguages structure.
type GetLanguagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLanguagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLanguagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLanguagesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetLanguagesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /basic/v1/admin/namespaces/{namespace}/misc/languages returns an error %d: %s", response.Code(), string(data))
	}
}

// NewGetLanguagesOK creates a GetLanguagesOK with default headers values
func NewGetLanguagesOK() *GetLanguagesOK {
	return &GetLanguagesOK{}
}

/*GetLanguagesOK handles this case with default header values.

  successful operation
*/
type GetLanguagesOK struct {
	Payload map[string]interface{}
}

func (o *GetLanguagesOK) Error() string {
	return fmt.Sprintf("[GET /basic/v1/admin/namespaces/{namespace}/misc/languages][%d] getLanguagesOK  %+v", 200, o.Payload)
}

func (o *GetLanguagesOK) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *GetLanguagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguagesBadRequest creates a GetLanguagesBadRequest with default headers values
func NewGetLanguagesBadRequest() *GetLanguagesBadRequest {
	return &GetLanguagesBadRequest{}
}

/*GetLanguagesBadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type GetLanguagesBadRequest struct {
	Payload *basicclientmodels.ValidationErrorEntity
}

func (o *GetLanguagesBadRequest) Error() string {
	return fmt.Sprintf("[GET /basic/v1/admin/namespaces/{namespace}/misc/languages][%d] getLanguagesBadRequest  %+v", 400, o.Payload)
}

func (o *GetLanguagesBadRequest) GetPayload() *basicclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *GetLanguagesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLanguagesUnauthorized creates a GetLanguagesUnauthorized with default headers values
func NewGetLanguagesUnauthorized() *GetLanguagesUnauthorized {
	return &GetLanguagesUnauthorized{}
}

/*GetLanguagesUnauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>
*/
type GetLanguagesUnauthorized struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *GetLanguagesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /basic/v1/admin/namespaces/{namespace}/misc/languages][%d] getLanguagesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLanguagesUnauthorized) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *GetLanguagesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
