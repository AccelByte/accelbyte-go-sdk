// Code generated by go-swagger; DO NOT EDIT.

package user_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/basic-sdk/pkg/basicclientmodels"
)

// GetUserZipCodeReader is a Reader for the GetUserZipCode structure.
type GetUserZipCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserZipCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserZipCodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetUserZipCodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetUserZipCodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /v1/public/namespaces/{namespace}/users/me/profiles/zipCode returns an error %d: %s", response.Code(), string(data))
	}
}

// NewGetUserZipCodeOK creates a GetUserZipCodeOK with default headers values
func NewGetUserZipCodeOK() *GetUserZipCodeOK {
	return &GetUserZipCodeOK{}
}

/*GetUserZipCodeOK handles this case with default header values.

  Successful operation
*/
type GetUserZipCodeOK struct {
	Payload *basicclientmodels.UserZipCode
}

func (o *GetUserZipCodeOK) Error() string {
	return fmt.Sprintf("[GET /v1/public/namespaces/{namespace}/users/me/profiles/zipCode][%d] getUserZipCodeOK  %+v", 200, o.Payload)
}

func (o *GetUserZipCodeOK) GetPayload() *basicclientmodels.UserZipCode {
	return o.Payload
}

func (o *GetUserZipCodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.UserZipCode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserZipCodeUnauthorized creates a GetUserZipCodeUnauthorized with default headers values
func NewGetUserZipCodeUnauthorized() *GetUserZipCodeUnauthorized {
	return &GetUserZipCodeUnauthorized{}
}

/*GetUserZipCodeUnauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>
*/
type GetUserZipCodeUnauthorized struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *GetUserZipCodeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/public/namespaces/{namespace}/users/me/profiles/zipCode][%d] getUserZipCodeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserZipCodeUnauthorized) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *GetUserZipCodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserZipCodeForbidden creates a GetUserZipCodeForbidden with default headers values
func NewGetUserZipCodeForbidden() *GetUserZipCodeForbidden {
	return &GetUserZipCodeForbidden{}
}

/*GetUserZipCodeForbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>
*/
type GetUserZipCodeForbidden struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *GetUserZipCodeForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/public/namespaces/{namespace}/users/me/profiles/zipCode][%d] getUserZipCodeForbidden  %+v", 403, o.Payload)
}

func (o *GetUserZipCodeForbidden) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *GetUserZipCodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
