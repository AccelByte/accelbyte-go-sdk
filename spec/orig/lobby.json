{
  "swagger": "2.0",
  "info": {
    "description": "Justice Lobby Server",
    "title": "justice-lobby-server",
    "version": "staging"
  },
  "paths": {
    "/friends/namespaces/{namespace}/me": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "friends"
        ],
        "summary": "get list of friends",
        "operationId": "getUserFriends",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "maximum number of data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "numbers of row to skip within the result",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.GetUserFriendsResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/friends/namespaces/{namespace}/me/incoming": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "friends"
        ],
        "summary": "get list of incoming friends",
        "operationId": "getUserIncomingFriends",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.GetUserIncomingFriendsResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/friends/namespaces/{namespace}/me/outgoing": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "friends"
        ],
        "summary": "get list of outgoing friends",
        "operationId": "getUserOutgoingFriends",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.GetUserOutgoingFriendsResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/friends/namespaces/{namespace}/me/request": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "friends"
        ],
        "summary": "user add friend",
        "operationId": "userRequestFriend",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "add friend content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RequestFriendsRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/friends/namespaces/{namespace}/me/request/accept": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "friends"
        ],
        "summary": "user accept friend",
        "operationId": "userAcceptFriendRequest",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "accept friend content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserAcceptFriendRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/friends/namespaces/{namespace}/me/request/cancel": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "friends"
        ],
        "summary": "user cancel a friend request",
        "operationId": "userCancelFriendRequest",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "cancel friend request content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCancelFriendRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/friends/namespaces/{namespace}/me/request/reject": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "friends"
        ],
        "summary": "user reject a friend request",
        "operationId": "userRejectFriendRequest",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "reject friend request content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserRejectFriendRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/friends/namespaces/{namespace}/me/status/{friendId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "friends"
        ],
        "summary": "user get friendship status",
        "operationId": "userGetFriendshipStatus",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Friend ID",
            "name": "friendId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserGetFriendshipStatusResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/friends/namespaces/{namespace}/me/unfriend": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "friends"
        ],
        "summary": "user unfriend a friend",
        "operationId": "userUnfriendRequest",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "unfriend request content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUnfriendRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/friends/namespaces/{namespace}/users/{userId}/add/bulk": {
      "post": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:USER:{userId}:FRIENDS [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>friends request in a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "friends"
        ],
        "summary": "Add friends without confirmation",
        "operationId": "addFriendsWithoutConfirmation",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "friends request content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BulkAddFriendsRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/chat/namespaces/{namespace}/users/{userId}/friend/{friendId}": {
      "get": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:USER:{userId}:CHAT [READ]</code> with scope <code>social</code>\n\t\t\t<br>load personal chat history in a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "chat"
        ],
        "summary": "load personal chat history",
        "operationId": "personalChatHistory",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID that receive the chat",
            "name": "friendId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.ChatMessageResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/chat/namespaces/{namespace}/users/{userId}/friends/{friendId}": {
      "get": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:USER:{userId}:CHAT [READ]</code> with scope <code>social</code>\n\t\t\t<br>get chat history in a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "chat"
        ],
        "summary": "admin get chat history",
        "operationId": "adminChatHistory",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID that receive the chat",
            "name": "friendId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.ChatMessageResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/config": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:*:LOBBY:CONFIG [READ]</code> with scope <code>social</code>\n\t\t\t<br>get lobby config of all namespaces.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "admin get all namespaces config",
        "operationId": "adminGetAllConfigV1",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ConfigList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/config/namespaces/{namespace}": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [READ]</code> with scope <code>social</code>\n\t\t\t<br>get lobby config of a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "admin get namespace config",
        "operationId": "adminGetConfigV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ConfigReq"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "put": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>update lobby config of a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "admin update namespace config",
        "operationId": "adminUpdateConfigV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "lobby config",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ConfigReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ConfigReq"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/config/namespaces/{namespace}/export": {
      "get": {
        "description": "\n\t\t\t\tRequired permission ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [READ]\n\n\t\t\t\tRequired Scope: social\n\n\t\t\t\tExport lobby configuration to a json file. The file can then be imported from the /import endpoint. \n\t\t\t",
        "tags": [
          "config"
        ],
        "summary": "Export lobby config to a json file.",
        "operationId": "ExportConfig",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/models.ConfigExport"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/config/namespaces/{namespace}/import": {
      "post": {
        "description": "\n\t\t\t\tRequired permission ADMIN:NAMESPACE:{namespace}:LOBBY:CONFIG [UPDATE]\n\n\t\t\t\tRequired Scope: social\n\n\t\t\t\tImport config configuration from file. The existing configuration will be replaced.\n\t\t\t\tThe json file to import can be obtained from the /export endpoint. \n\t\t\t",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Import lobby config from a json file.",
        "operationId": "ImportConfig",
        "parameters": [
          {
            "type": "file",
            "description": "file to be imported",
            "name": "file",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ImportConfigResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/friend/namespaces/{namespace}/users/{userId}": {
      "get": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:USER:{userId}:FRIENDS [READ]</code> with scope <code>social</code>\n<br>get list of friends in a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "friends"
        ],
        "summary": "get list of friends",
        "operationId": "get list of friends",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "maximum number of data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "numbers of row to skip within the result",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/model.GetFriendsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/bulkUsers/freeform/notify": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Sends notification to multiple user.\n\t\t\tAction Code: 50211",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "send freeform notification to multiple users",
        "operationId": "sendMultipleUsersFreeformNotificationV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "notification content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BulkUsersFreeFormNotificationRequestV1"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/freeform/notify": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Sends notification to all connected users in a namespace.<br>\n\t\t\tAction Code: 50201",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "send freeform notification to connected users",
        "operationId": "sendUsersFreeformNotificationV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "notification content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.FreeFormNotificationRequestV1"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/parties/{partyId}/freeform/notify": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]</code> with scope <code>social</code>\n\t\t\t\t\t<br>Sends notification to a party.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "send freeform notification to a party",
        "operationId": "sendPartyFreeformNotificationV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "party ID",
            "name": "partyId",
            "in": "path",
            "required": true
          },
          {
            "description": "notification content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.FreeFormNotificationRequestV1"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/parties/{partyId}/templates/notify": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]</code> with scope <code>social</code>\n\t\t\t\t\t<br>Sends templated notification to a party.\n\t\t\t\t\t<br>In the request body, specify which template slug (template identifier) to use and the template language. \n\t\t\t\t\t<br>NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content. \n\t\t\t\t\tTemplate need to be published before it can be use to send notifications<br>",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "send templated notification to a party",
        "operationId": "sendPartyTemplatedNotificationV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "party ID",
            "name": "partyId",
            "in": "path",
            "required": true
          },
          {
            "description": "notification content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.NotificationWithTemplateRequestV1"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/templates": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]</code> with scope <code>social</code>\n\t\t\t<br>Get all templates in a namespace<br>\n\t\t\tAction Code: 50203",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "get all notification template in a namespace",
        "operationId": "getAllNotificationTemplatesV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.NotificationTemplateResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      },
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Create new notification template. Include handlebars {{key}} for replaceable contexts. The key inside \n\t\t\thandlebars will be the key to be replaced when sending notification. Already existing template with the same \n\t\t\tslug and language can not be created.\n\t\t\t<br>Check model description for detailed input restrictions.<br>\n\t\t\tAction Code: 50204",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "create new notification template",
        "operationId": "createNotificationTemplateV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "create template input",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CreateTemplateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/templates/notify": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Sends notification to all connected users in a namespace with predefined template. \n\t\t\t<br>In the request body, specify which template slug (template identifier) to use and the template language. \n\t\t\t<br>NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content. \n\t\t\tTemplate need to be published before it can be use to send notifications<br/>\n\t\t\tAction Code: 50202",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "send notification to connected users with template",
        "operationId": "sendUsersTemplatedNotificationV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "notification content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.NotificationWithTemplateRequestV1"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/templates/{templateSlug}": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]</code> with scope <code>social</code>\n\t\t\t<br>Get all templates in a namespace<br>\n\t\t\tAction Code: 50205",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "get all notification template localization in a slug",
        "operationId": "getTemplateSlugLocalizationsTemplateV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template slug",
            "name": "templateSlug",
            "in": "path",
            "required": true
          },
          {
            "type": "int",
            "description": "size of displayed data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "first language code of next page",
            "name": "before",
            "in": "query"
          },
          {
            "type": "string",
            "description": "last language code of previous page",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetAllNotificationTemplateSlugResp"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [DELETE]</code> with scope <code>social</code>\n\t\t\t<br>Delete template slug in notification template<br>\n\t\t\tAction Code: 50206",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "delete template slug in notification template",
        "operationId": "deleteNotificationTemplateSlugV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template slug",
            "name": "templateSlug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/templates/{templateSlug}/languages/{templateLanguage}": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]</code> with scope <code>social</code>\n\t\t\t<br>Get a template localization<br/>\n\t\t\tAction Code: 50207",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "get a template localization",
        "operationId": "getSingleTemplateLocalizationV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Template Identifier, only alphabet characters and hyphens are permitted",
            "name": "templateSlug",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template language, follows IETF BCP 47 standard",
            "name": "templateLanguage",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.Localization"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      },
      "put": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br/>update template localization<br/>\n\t\t\tAction Code: 50208",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "update template localization",
        "operationId": "updateTemplateLocalizationV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Template Identifier, only alphabet characters and hyphens are permitted",
            "name": "templateSlug",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template language, follows IETF BCP 47 standard",
            "name": "templateLanguage",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdateTemplateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [DELETE]</code> with scope <code>social</code>\n\t\t\t<br>delete template localization<br/>\n\t\t\tAction Code: 50209",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "delete template localization",
        "operationId": "deleteTemplateLocalizationV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Template Identifier, only alphabet characters and hyphens are permitted",
            "name": "templateSlug",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template language, follows IETF BCP 47 standard",
            "name": "templateLanguage",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/templates/{templateSlug}/languages/{templateLanguage}/publish": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Publish notification template draft. Empty draft can not be published.<br/>\n\t\t\tAction Code: 50210",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "publish template localization draft",
        "operationId": "publishTemplateLocalizationV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Template Identifier, only alphabet characters and hyphens are permitted",
            "name": "templateSlug",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template language, follows IETF BCP 47 standard",
            "name": "templateLanguage",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/topics": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]</code> with scope <code>social</code>\n\t\t\t<br>get topic by namespace.<br/>\n\t\t\tAction Code: 50213",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "get topic by namespace",
        "operationId": "getAllNotificationTopicsV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "int",
            "description": "size of displayed data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "first topic name of next page",
            "name": "before",
            "in": "query"
          },
          {
            "type": "string",
            "description": "last topic name of previous page",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetAllNotificationTopicsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      },
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Create new notification topic.\n\t\t\t<br>topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST. \n\t\t\tAlready existing topic can not be created<br/>\n\t\t\tAction Code: 50214",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "create new notification topic",
        "operationId": "createNotificationTopicV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "create topic input",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CreateTopicRequestV1"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/topics/{topicName}": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [READ]</code> with scope <code>social</code>\n\t\t\t<br>get topic information by topic name.<br/>\n\t\t\tAction Code: 50215",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "get topic information by topic name",
        "operationId": "getNotificationTopicV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic name",
            "name": "topicName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.NotificationTopicResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      },
      "put": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>update topic information by topic name.\n\t\t\t<br>topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST. \n\t\t\tAlready existing topic can not be created <br/>\n\t\t\tAction Code: 50216",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "update topic information by topic name",
        "operationId": "updateNotificationTopicV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic name",
            "name": "topicName",
            "in": "path",
            "required": true
          },
          {
            "description": "update topic input",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdateTopicRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [DELETE]</code> with scope <code>social</code>\n\t\t\t<br>delete topic information by topic name.\n\t\t\t<br>topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST. \n\t\t\tAlready existing topic can not be created <br/>\n\t\t\tAction Code: 50217",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "delete topic information by topic name",
        "operationId": "deleteNotificationTopicV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic name",
            "name": "topicName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/users/{userId}/freeform/notify": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Sends notification to a user.\n\t\t\tAction Code: 50211",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "send freeform notification to a user",
        "operationId": "sendSpecificUserFreeformNotificationV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "notification content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.FreeFormNotificationRequestV1"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/notification/namespaces/{namespace}/users/{userId}/templates/notify": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:NOTIFICATION [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Sends templated notification to a user.\n\t\t\t<br>In the request body, specify which template slug (template identifier) to use and the template language. \n\t\t\t<br>NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content. \n\t\t\tTemplate need to be published before it can be use to send notifications<br>\n\t\t\tAction Code: 50212",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "send templated notification to specific user",
        "operationId": "sendSpecificUserTemplatedNotificationV1Admin",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "notification content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.NotificationWithTemplateRequestV1"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/party/namespaces/{namespace}/parties/{partyId}": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [READ]</code> with scope <code>social</code>\n\t\t\t<br>get party data in a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "party"
        ],
        "summary": "admin get party data",
        "operationId": "adminGetPartyDataV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "party ID",
            "name": "partyId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PartyData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/party/namespaces/{namespace}/parties/{partyId}/attributes": {
      "put": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>update party attributes in a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "admin update party attributes",
        "operationId": "adminUpdatePartyAttributesV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "party ID",
            "name": "partyId",
            "in": "path",
            "required": true
          },
          {
            "description": "party custom attributes",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PartyPUTCustomAttributesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PartyData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/party/namespaces/{namespace}/users/{userId}/party": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PARTY:STORAGE [READ]</code> with scope <code>social</code>\n\t\t\t<br>get party data in a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "party"
        ],
        "summary": "admin get user party data",
        "operationId": "adminGetUserPartyV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PartyData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/player/namespaces/{namespace}/ccu": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:LOBBY:CCU [READ]</code> with scope <code>social</code>\n\t\t\t<br>Get the number of players connected to the Lobby in the given namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "player"
        ],
        "summary": "admin get number of players currently connected to the lobby.",
        "operationId": "adminGetLobbyCCU",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetLobbyCcuResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/player/namespaces/{namespace}/users/{userId}/attributes": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:ATTRIBUTES [READ]</code> with scope <code>social</code>\n\t\t\t<br>get all player's session attribute by user id in a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "player"
        ],
        "summary": "admin get all player's session attribute",
        "operationId": "adminGetAllPlayerSessionAttribute",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetAllPlayerSessionAttributeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "put": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:ATTRIBUTES [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>set player's session attribute by user id in a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "player"
        ],
        "summary": "admin set player's session attribute",
        "operationId": "adminSetPlayerSessionAttribute",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "player attributes",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.SetPlayerSessionAttributeRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/player/namespaces/{namespace}/users/{userId}/attributes/{attribute}": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:ATTRIBUTES [READ]</code> with scope <code>social</code>\n\t\t\t<br>get player's specific session attribute by user id in a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "player"
        ],
        "summary": "admin get player's session attribute",
        "operationId": "adminGetPlayerSessionAttribute",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "attribute key",
            "name": "attribute",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetPlayerSessionAttributeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/player/namespaces/{namespace}/users/{userId}/blocked": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [READ]</code> with scope <code>social</code>\n\t\t\t<br>get blocked players data by user id in a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "player"
        ],
        "summary": "admin get blocked players by user id",
        "operationId": "adminGetPlayerBlockedPlayersV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetAllPlayerBlockedUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/player/namespaces/{namespace}/users/{userId}/blocked-by": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [READ]</code> with scope <code>social</code>\n\t\t\t<br>load get players who blocked this player in a namespace based on user id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "player"
        ],
        "summary": "get players who blocked this player by user id",
        "operationId": "adminGetPlayerBlockedByPlayersV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetAllPlayerBlockedByUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/player/namespaces/{namespace}/users/{userId}/bulk/block": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:USER:{userId}:PLAYER:BLOCK [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Bulk block player in a namespace by list of user id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "player"
        ],
        "summary": "Admin bulk blocks player by list user id",
        "operationId": "adminBulkBlockPlayersV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "list of blocked player request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ListBlockedPlayerRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "type": "int"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/filters/debug": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]</code> with scope <code>social</code>\n\t\t\t<br>get the list of filters that would modify the phrase",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profanity"
        ],
        "summary": "get the list of filters that would modify the phrase",
        "operationId": "adminDebugProfanityFilters",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.DebugProfanityFilterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/*models.ProfanityFilter"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/list/{list}/filters": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]</code> with scope <code>social</code>\n\t\t\t<br>get the list of filters inside the list.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profanity"
        ],
        "summary": "get the list of filters inside the list",
        "operationId": "adminGetProfanityListFiltersV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "list",
            "name": "list",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.AdminGetProfanityListFiltersV1Response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PROFANITY [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>add a single filter into the list",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profanity"
        ],
        "summary": "add a single filter into the list",
        "operationId": "adminAddProfanityFilterIntoList",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "list",
            "name": "list",
            "in": "path",
            "required": true
          },
          {
            "description": "request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminAddProfanityFilterIntoListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/list/{list}/filters/bulk": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PROFANITY [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>add multiple filters into the list",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profanity"
        ],
        "summary": "add multiple filters into the list",
        "operationId": "adminAddProfanityFilters",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "list",
            "name": "list",
            "in": "path",
            "required": true
          },
          {
            "description": "request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminAddProfanityFiltersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/list/{list}/filters/bulk-file": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PROFANITY [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>import a file with filters",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profanity"
        ],
        "summary": "import a file with filters",
        "operationId": "adminImportProfanityFiltersFromFile",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "list",
            "name": "list",
            "in": "path",
            "required": true
          },
          {
            "description": "file",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/list/{list}/filters/delete": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PROFANITY [DELETE]</code> with scope <code>social</code>\n\t\t\t<br>delete the filter from the list",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profanity"
        ],
        "summary": "delete the filter from the list",
        "operationId": "adminDeleteProfanityFilter",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "list",
            "name": "list",
            "in": "path",
            "required": true
          },
          {
            "description": "request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminDeleteProfanityFilterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/*models.ProfanityFilter"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/lists": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]</code> with scope <code>social</code>\n\t\t\t<br>get lists",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profanity"
        ],
        "summary": "get lists",
        "operationId": "adminGetProfanityLists",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/models.AdminGetProfanityListsListResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PROFANITY [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>create a new list",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profanity"
        ],
        "summary": "create a new list",
        "operationId": "adminCreateProfanityList",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminCreateProfanityListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/lists/{list}": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PROFANITY [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>update the list",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profanity"
        ],
        "summary": "update the list",
        "operationId": "adminCreateProfanityList",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "list",
            "name": "list",
            "in": "path",
            "required": true
          },
          {
            "description": "request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminUpdateProfanityList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PROFANITY [DELETE]</code> with scope <code>social</code>\n\t\t\t<br>delete a list include all filters inside of it",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profanity"
        ],
        "summary": "delete a list include all filters inside of it",
        "operationId": "adminDeleteProfanityList",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "list",
            "name": "list",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/rule": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]</code> with scope <code>social</code>\n\t\t\t<br>get current profanity rule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profanity"
        ],
        "summary": "get current profanity rule",
        "operationId": "adminGetProfanityRule",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ProfanityRule"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PROFANITY [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>set current profanity rule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profanity"
        ],
        "summary": "set current profanity rule",
        "operationId": "adminSetProfanityRuleForNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminSetProfanityRuleForNamespaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/profanity/namespaces/{namespace}/verify": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:PROFANITY [READ]</code> with scope <code>social</code>\n\t\t\t<br>verify a message directly from the UI or other services",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profanity"
        ],
        "summary": "verify a message directly from the UI or other services",
        "operationId": "adminVerifyMessageProfanityResponse",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminVerifyMessageProfanityRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.AdminVerifyMessageProfanityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/admin/thirdparty/namespaces/{namespace}/config/steam": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [READ]</code> with scope <code>social</code>\n\t\t\t<br>get third party config for specified namespace.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "thirdParty"
        ],
        "summary": "Get Third Party Steam Config",
        "operationId": "adminGetThirdPartyConfig",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetConfigResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      },
      "put": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>Update third party config in a namespace.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "thirdParty"
        ],
        "summary": "Update Third Party Steam Config",
        "operationId": "adminUpdateThirdPartyConfig",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "third party config",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UpdateConfigResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      },
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>create third party config in a namespace.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "thirdParty"
        ],
        "summary": "Create Third Party Steam Config",
        "operationId": "adminCreateThirdPartyConfig",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "third party config",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateConfigRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateConfigResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:THIRDPARTY:CONFIG [DELETE]</code> with scope <code>social</code>\n\t\t\t<br>delete third party config in a namespace.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "thirdParty"
        ],
        "summary": "Delete Third Party Steam Config",
        "operationId": "adminDeleteThirdPartyConfig",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseV1"
            }
          }
        }
      }
    },
    "/lobby/v1/messages": {
      "get": {
        "description": "get the list of messages.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "get service messages",
        "operationId": "publicGetMessages",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/log.AppMessageDeclaration"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/public/chat/namespaces/{namespace}/users/me/friends/{friendId}": {
      "get": {
        "description": "Required valid user authorization <br/>\n\t\t\t<br>load personal chat history in a namespace based on Friend User ID <br/>\n\t\t\tAction Code: 50101",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "chat"
        ],
        "summary": "load personal chat history",
        "operationId": "getPersonalChatHistoryV1Public",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Friend User ID, should follow UUID version 4 without hyphen",
            "name": "friendId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.ChatMessageResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/public/party/namespaces/{namespace}/parties/{partyId}": {
      "get": {
        "description": "Required valid user authorization <br/>\n\t\t\t<br>load personal party data in a namespace based on Party ID <br/>\n\t\t\tAction Code: 50101",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "party"
        ],
        "summary": "get party data by party id",
        "operationId": "publicGetPartyDataV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Party ID, should follow UUID version 4 without hyphen",
            "name": "partyId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PartyData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/public/party/namespaces/{namespace}/parties/{partyId}/attributes": {
      "put": {
        "description": "Required valid user authorization <br/>\n\t\t\t<br>update party attributes in a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "party"
        ],
        "summary": "update party attributes",
        "operationId": "publicUpdatePartyAttributesV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "party ID",
            "name": "partyId",
            "in": "path",
            "required": true
          },
          {
            "description": "party custom attributes",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PartyPUTCustomAttributesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PartyData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/public/player/namespaces/{namespace}/users/me/blocked": {
      "get": {
        "description": "Required valid user authorization <br/>\n\t\t\t<br>load blocked players in a namespace based on user id <br/>\n\t\t\tAction Code: 50101",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "player"
        ],
        "summary": "get blocked players by user id",
        "operationId": "publicGetPlayerBlockedPlayersV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetAllPlayerBlockedUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/public/player/namespaces/{namespace}/users/me/blocked-by": {
      "get": {
        "description": "Required valid user authorization <br/>\n\t\t\t<br>load get players who blocked this player in a namespace based on user id <br/>\n\t\t\tAction Code: 50101",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "player"
        ],
        "summary": "get players who blocked this player by user id",
        "operationId": "publicGetPlayerBlockedByPlayersV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetAllPlayerBlockedByUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/lobby/v1/public/presence/namespaces/{namespace}/users/presence": {
      "get": {
        "description": "Query users presence with given namespace and userIds.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "presence"
        ],
        "summary": "Query users presence",
        "operationId": "UsersPresenceHandlerV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Comma separated value of userIds",
            "name": "userIds",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "description": "return only number of players for each availability status",
            "name": "countOnly",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/handlers.GetUsersPresenceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/notification/namespaces/{namespace}/freeform": {
      "post": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:NOTIFICATION [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Sends notification to all connected users in a namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "send freeform notification to a user",
        "operationId": "freeFormNotification",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "notification content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.FreeFormNotificationRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/notification/namespaces/{namespace}/templated": {
      "post": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:NOTIFICATION [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Sends notification to all connected users in a namespace with predefined template. \n\t\t\t<br>In the request body, specify which template slug (template identifier) to use and the template language. \n\t\t\t<br>NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content. \n\t\t\tTemplate need to be published before it can be use to send notifications",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "send notification to a user with template",
        "operationId": "notificationWithTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "notification content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.NotificationWithTemplateRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/notification/namespaces/{namespace}/templates": {
      "get": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:TEMPLATE [READ]</code> with scope <code>social</code>\n\t\t\t<br>Get all templates in a namespace",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "get all notification template in a namespace",
        "operationId": "getGameTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.TemplateResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "post": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:TEMPLATE [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Create new notification template. Include handlebars {{key}} for replaceable contexts. The the key inside \n\t\t\thandlebars will be the key to be replaced when sending notification. Already existing template with the same \n\t\t\tslug and language can not be created.\n\t\t\t<br>Check model description for detailed input restrictions.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "create new notification template",
        "operationId": "createTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "create template input",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CreateTemplateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/notification/namespaces/{namespace}/templates/{templateSlug}": {
      "get": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:TEMPLATE [READ]</code> with scope <code>social</code>\n\t\t\t<br>Get all templates in a namespace",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "get all notification template in a slug",
        "operationId": "getSlugTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template slug",
            "name": "templateSlug",
            "in": "path",
            "required": true
          },
          {
            "type": "int",
            "description": "size of displayed data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "first language code of next page",
            "name": "before",
            "in": "query"
          },
          {
            "type": "string",
            "description": "last language code of previous page",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.TemplateLocalizationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:TEMPLATE [DELETE]</code> with scope <code>social</code>\n\t\t\t<br>Delete localization template",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "delete template localization",
        "operationId": "deleteTemplateSlug",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template slug",
            "name": "templateSlug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/notification/namespaces/{namespace}/templates/{templateSlug}/languages/{templateLanguage}": {
      "get": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:TEMPLATE [READ]</code> with scope <code>social</code>\n\t\t\t<br>Get a template localization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "get a template localization",
        "operationId": "getLocalizationTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template slug",
            "name": "templateSlug",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template language",
            "name": "templateLanguage",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.TemplateLocalization"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "put": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:TEMPLATE [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>Modify draft template",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "update template draft",
        "operationId": "updateLocalizationTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template slug",
            "name": "templateSlug",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template language",
            "name": "templateLanguage",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdateTemplateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:TEMPLATE [DELETE]</code> with scope <code>social</code>\n\t\t\t<br>Delete all template in a slug",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "delete template localization",
        "operationId": "deleteTemplateLocalization",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template slug",
            "name": "templateSlug",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template language",
            "name": "templateLanguage",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/notification/namespaces/{namespace}/templates/{templateSlug}/languages/{templateLanguage}/publish": {
      "post": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:TEMPLATE [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Publish notification template draft. Empty draft can not be published.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "publish draft template",
        "operationId": "publishTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template slug",
            "name": "templateSlug",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "template language",
            "name": "templateLanguage",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/notification/namespaces/{namespace}/topics": {
      "get": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:TOPIC [READ]</code> with scope <code>social</code>\n\t\t\t<br>get topic by namespace.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "get topic by namespace",
        "operationId": "getTopicByNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "int",
            "description": "size of displayed data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "first topic name of next page",
            "name": "before",
            "in": "query"
          },
          {
            "type": "string",
            "description": "last topic name of previous page",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.TopicByNamespacesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "post": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:TOPIC [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Create new notification topic.\n\t\t\t<br>topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST. \n\t\t\tAlready existing topic can not be created",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "create new notification topic",
        "operationId": "createTopic",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "create topic input",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CreateTopicRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/notification/namespaces/{namespace}/topics/{topic}": {
      "get": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:TOPIC [READ]</code> with scope <code>social</code>\n\t\t\t<br>get topic information by topic name.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "get topic information by topic name",
        "operationId": "getTopicByTopicName",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic name",
            "name": "topic",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.NotificationTopicResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "put": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:TOPIC [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>update topic information by topic name.\n\t\t\t<br>topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST. \n\t\t\tAlready existing topic can not be created",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "update topic information by topic name",
        "operationId": "updateTopicByTopicName",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic name",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "description": "update topic input",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdateTopicRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:TOPIC [DELETE]</code> with scope <code>social</code>\n\t\t\t<br>delete topic information by topic name.\n\t\t\t<br>topic should be alphabets, no special char except underscore, uppercase and no spacing. for example: TOPIC_TEST. \n\t\t\tAlready existing topic can not be created",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "delete topic information by topic name",
        "operationId": "deleteTopicByTopicName",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic name",
            "name": "topic",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/notification/namespaces/{namespace}/users/{userId}/freeform": {
      "post": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:USER:{userId}:NOTIFICATION [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Sends notification to a user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "send freeform notification to a user",
        "operationId": "freeFormNotificationByUserID",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "notification content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.FreeFormNotificationRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/notification/namespaces/{namespace}/users/{userId}/templated": {
      "post": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:USER:{userId}:NOTIFICATION [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>Sends notification to a user with predefined template.\n\t\t\t<br>In the request body, specify which template slug (template identifier) to use and the template language. \n\t\t\t<br>NotificationTemplate context is the key-value pair defining the value of each handlebar specified in the template content. \n\t\t\tTemplate need to be published before it can be use to send notifications",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "notification"
        ],
        "summary": "send notification to a user with template",
        "operationId": "notificationWithTemplateByUserID",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "notification content",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.NotificationWithTemplateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "*models.ProfanityFilter": {},
    "handlers.GetUsersPresenceResponse": {
      "required": [
        "busy",
        "data",
        "invisible",
        "offline",
        "online"
      ],
      "properties": {
        "busy": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/handlers.UserPresence"
          }
        },
        "invisible": {
          "type": "integer",
          "format": "int32"
        },
        "offline": {
          "type": "integer",
          "format": "int32"
        },
        "online": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "handlers.UserPresence": {
      "required": [
        "activity",
        "availability",
        "lastSeenAt",
        "namespace",
        "userID"
      ],
      "properties": {
        "activity": {
          "type": "string"
        },
        "availability": {
          "type": "string"
        },
        "lastSeenAt": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userID": {
          "type": "string"
        }
      }
    },
    "log.AppMessageDeclaration": {
      "required": [
        "Attributes",
        "Code",
        "CodeName",
        "Section",
        "Service",
        "Text"
      ],
      "properties": {
        "Attributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Code": {
          "type": "string"
        },
        "CodeName": {
          "type": "string"
        },
        "Section": {
          "type": "string"
        },
        "Service": {
          "type": "string"
        },
        "Text": {
          "type": "string"
        }
      }
    },
    "model.BulkAddFriendsRequest": {
      "required": [
        "friendIds"
      ],
      "properties": {
        "friendIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.BulkUsersFreeFormNotificationRequestV1": {
      "required": [
        "message",
        "topicName",
        "userIds"
      ],
      "properties": {
        "message": {
          "description": "free form message",
          "type": "string"
        },
        "topicName": {
          "type": "string"
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.ChatMessageResponse": {
      "required": [
        "from",
        "id",
        "payload",
        "receivedAt",
        "to"
      ],
      "properties": {
        "from": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "payload": {
          "type": "string"
        },
        "receivedAt": {
          "type": "integer",
          "format": "int64"
        },
        "to": {
          "type": "string"
        }
      }
    },
    "model.CreateTemplateRequest": {
      "required": [
        "templateContent",
        "templateLanguage",
        "templateSlug"
      ],
      "properties": {
        "templateContent": {
          "description": "template content, use handle bar {{key}} for replaceable context",
          "type": "string"
        },
        "templateLanguage": {
          "description": "template language, follows IETF BCP 47 standard",
          "type": "string"
        },
        "templateSlug": {
          "description": "template identifier, only alphabet characters and hyphens are permitted",
          "type": "string"
        }
      }
    },
    "model.CreateTopicRequest": {
      "required": [
        "description",
        "topic"
      ],
      "properties": {
        "description": {
          "description": "topic description",
          "type": "string"
        },
        "topic": {
          "description": "topic name, should be alphabets, no special char except underscore, uppercase and no spacing",
          "type": "string"
        }
      }
    },
    "model.CreateTopicRequestV1": {
      "required": [
        "description",
        "topicName"
      ],
      "properties": {
        "description": {
          "description": "topic description",
          "type": "string"
        },
        "topicName": {
          "description": "topic name, should be alphabets, no special char except underscore, uppercase and no spacing",
          "type": "string"
        }
      }
    },
    "model.FreeFormNotificationRequest": {
      "required": [
        "message",
        "topic"
      ],
      "properties": {
        "message": {
          "description": "free form message",
          "type": "string"
        },
        "topic": {
          "type": "string"
        }
      }
    },
    "model.FreeFormNotificationRequestV1": {
      "required": [
        "message",
        "topicName"
      ],
      "properties": {
        "message": {
          "description": "free form message",
          "type": "string"
        },
        "topicName": {
          "type": "string"
        }
      }
    },
    "model.GetAllNotificationTemplateSlugResp": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.Localization"
          }
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      }
    },
    "model.GetAllNotificationTopicsResponse": {
      "required": [
        "data",
        "paging"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.NotificationTopicResponseV1"
          }
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      }
    },
    "model.GetFriendsResponse": {
      "required": [
        "friendIDs",
        "paging"
      ],
      "properties": {
        "friendIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      }
    },
    "model.GetUserFriendsResponse": {
      "required": [
        "friendIDs",
        "paging"
      ],
      "properties": {
        "friendIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      }
    },
    "model.GetUserIncomingFriendsResponse": {
      "required": [
        "friendIDs",
        "paging"
      ],
      "properties": {
        "friendIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      }
    },
    "model.GetUserOutgoingFriendsResponse": {
      "required": [
        "friendIDs",
        "paging"
      ],
      "properties": {
        "friendIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "paging": {
          "$ref": "#/definitions/model.Pagination"
        }
      }
    },
    "model.Localization": {
      "required": [
        "lastDraftAt",
        "lastPublishedAt",
        "templateContent",
        "templateLanguage"
      ],
      "properties": {
        "lastDraftAt": {
          "type": "string"
        },
        "lastPublishedAt": {
          "type": "string"
        },
        "templateContent": {
          "$ref": "#/definitions/model.TemplateContent"
        },
        "templateLanguage": {
          "type": "string"
        }
      }
    },
    "model.NotificationTemplateResponse": {
      "required": [
        "templateLocalizations",
        "templateSlug"
      ],
      "properties": {
        "templateLocalizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.Localization"
          }
        },
        "templateSlug": {
          "type": "string"
        }
      }
    },
    "model.NotificationTopicResponse": {
      "required": [
        "createdAt",
        "description",
        "namespace",
        "topic"
      ],
      "properties": {
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "topic": {
          "description": "topic name, should be alphabets, no special char except underscore, uppercase and no spacing",
          "type": "string"
        }
      }
    },
    "model.NotificationTopicResponseV1": {
      "required": [
        "createdAt",
        "description",
        "namespace",
        "topicName"
      ],
      "properties": {
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "topicName": {
          "description": "topic name, should be alphabets, no special char except underscore, uppercase and no spacing",
          "type": "string"
        }
      }
    },
    "model.NotificationWithTemplateRequest": {
      "required": [
        "templateContext",
        "templateLanguage",
        "templateSlug",
        "topic"
      ],
      "properties": {
        "templateContext": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "templateLanguage": {
          "type": "string"
        },
        "templateSlug": {
          "type": "string"
        },
        "topic": {
          "type": "string"
        }
      }
    },
    "model.NotificationWithTemplateRequestV1": {
      "required": [
        "templateContext",
        "templateLanguage",
        "templateSlug",
        "topicName"
      ],
      "properties": {
        "templateContext": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "templateLanguage": {
          "type": "string"
        },
        "templateSlug": {
          "type": "string"
        },
        "topicName": {
          "type": "string"
        }
      }
    },
    "model.Pagination": {
      "required": [
        "first",
        "last",
        "next",
        "previous"
      ],
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      }
    },
    "model.RequestFriendsRequest": {
      "required": [
        "friendId"
      ],
      "properties": {
        "friendId": {
          "type": "string"
        }
      }
    },
    "model.TemplateContent": {
      "required": [
        "draft",
        "published"
      ],
      "properties": {
        "draft": {
          "type": "string"
        },
        "published": {
          "type": "string"
        }
      }
    },
    "model.TemplateLocalization": {
      "required": [
        "lastDraftAt",
        "lastPublishedAt",
        "templateContent",
        "templateLanguage",
        "templateSlug"
      ],
      "properties": {
        "lastDraftAt": {
          "type": "string"
        },
        "lastPublishedAt": {
          "type": "string"
        },
        "templateContent": {
          "$ref": "#/definitions/model.TemplateContent"
        },
        "templateLanguage": {
          "type": "string"
        },
        "templateSlug": {
          "type": "string"
        }
      }
    },
    "model.TemplateLocalizationResponse": {
      "required": [
        "first",
        "last",
        "next",
        "previous",
        "templateLocalization"
      ],
      "properties": {
        "first": {
          "description": "url for first page",
          "type": "string"
        },
        "last": {
          "description": "url for last page",
          "type": "string"
        },
        "next": {
          "description": "url for next page",
          "type": "string"
        },
        "previous": {
          "description": "url for previous page",
          "type": "string"
        },
        "templateLocalization": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.TemplateLocalization"
          }
        }
      }
    },
    "model.TemplateResponse": {
      "required": [
        "localizations",
        "templateSlug"
      ],
      "properties": {
        "localizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.Localization"
          }
        },
        "templateSlug": {
          "type": "string"
        }
      }
    },
    "model.TopicByNamespacesResponse": {
      "required": [
        "first",
        "last",
        "next",
        "previous",
        "topics"
      ],
      "properties": {
        "first": {
          "description": "url for first page",
          "type": "string"
        },
        "last": {
          "description": "url for last page",
          "type": "string"
        },
        "next": {
          "description": "url for next page",
          "type": "string"
        },
        "previous": {
          "description": "url for previous page",
          "type": "string"
        },
        "topics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.NotificationTopicResponse"
          }
        }
      }
    },
    "model.UpdateTemplateRequest": {
      "required": [
        "templateContent"
      ],
      "properties": {
        "templateContent": {
          "type": "string"
        }
      }
    },
    "model.UpdateTopicRequest": {
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "description": "topic description",
          "type": "string"
        }
      }
    },
    "model.UserAcceptFriendRequest": {
      "required": [
        "friendId"
      ],
      "properties": {
        "friendId": {
          "type": "string"
        }
      }
    },
    "model.UserCancelFriendRequest": {
      "required": [
        "friendId"
      ],
      "properties": {
        "friendId": {
          "type": "string"
        }
      }
    },
    "model.UserGetFriendshipStatusResponse": {
      "required": [
        "code",
        "name"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "model.UserRejectFriendRequest": {
      "required": [
        "friendId"
      ],
      "properties": {
        "friendId": {
          "type": "string"
        }
      }
    },
    "model.UserUnfriendRequest": {
      "required": [
        "friendId"
      ],
      "properties": {
        "friendId": {
          "type": "string"
        }
      }
    },
    "models.AdminAddProfanityFilterIntoListRequest": {
      "required": [
        "filter",
        "note"
      ],
      "properties": {
        "filter": {
          "type": "string"
        },
        "note": {
          "type": "string"
        }
      }
    },
    "models.AdminAddProfanityFiltersFilterRequest": {
      "required": [
        "filter",
        "note"
      ],
      "properties": {
        "filter": {
          "type": "string"
        },
        "note": {
          "type": "string"
        }
      }
    },
    "models.AdminAddProfanityFiltersRequest": {
      "required": [
        "filters"
      ],
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.AdminAddProfanityFiltersFilterRequest"
          }
        }
      }
    },
    "models.AdminCreateProfanityListRequest": {
      "required": [
        "isEnabled",
        "isMandatory",
        "name"
      ],
      "properties": {
        "isEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "models.AdminDeleteProfanityFilterRequest": {
      "required": [
        "filter"
      ],
      "properties": {
        "filter": {
          "type": "string"
        }
      }
    },
    "models.AdminGetProfanityListFiltersV1Response": {
      "required": [
        "filters"
      ],
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.ProfanityFilter"
          }
        }
      }
    },
    "models.AdminGetProfanityListsListResponse": {
      "required": [
        "isEnabled",
        "isMandatory",
        "name"
      ],
      "properties": {
        "isEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "models.AdminSetProfanityRuleForNamespaceRequest": {
      "required": [
        "rule"
      ],
      "properties": {
        "rule": {
          "type": "string"
        }
      }
    },
    "models.AdminUpdateProfanityList": {
      "required": [
        "isEnabled",
        "isMandatory",
        "newName"
      ],
      "properties": {
        "isEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        },
        "newName": {
          "type": "string"
        }
      }
    },
    "models.AdminVerifyMessageProfanityRequest": {
      "required": [
        "message",
        "profanityLevel"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "profanityLevel": {
          "type": "string"
        }
      }
    },
    "models.AdminVerifyMessageProfanityResponse": {
      "required": [
        "filteredMessage",
        "hasProfanity"
      ],
      "properties": {
        "filteredMessage": {
          "type": "string"
        },
        "hasProfanity": {
          "type": "boolean"
        }
      }
    },
    "models.BlockedByPlayerData": {
      "required": [
        "blockedAt",
        "userId"
      ],
      "properties": {
        "blockedAt": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.BlockedPlayerData": {
      "required": [
        "blockedAt",
        "blockedUserId"
      ],
      "properties": {
        "blockedAt": {
          "type": "string",
          "format": "date-time"
        },
        "blockedUserId": {
          "type": "string"
        }
      }
    },
    "models.Config": {
      "properties": {
        "autoKickOnDisconnect": {
          "type": "boolean"
        },
        "autoKickOnDisconnectDelay": {
          "type": "integer",
          "format": "integer"
        },
        "cancelTicketOnDisconnect": {
          "type": "boolean"
        },
        "chatRateLimitBurst": {
          "type": "integer",
          "format": "int32"
        },
        "chatRateLimitDuration": {
          "type": "integer",
          "format": "integer"
        },
        "concurrentUsersLimit": {
          "type": "integer",
          "format": "int32"
        },
        "enableChat": {
          "type": "boolean"
        },
        "entitlementCheck": {
          "type": "boolean"
        },
        "entitlementItemID": {
          "type": "string"
        },
        "generalRateLimitBurst": {
          "type": "integer",
          "format": "int32"
        },
        "generalRateLimitDuration": {
          "type": "integer",
          "format": "integer"
        },
        "maxPartyMember": {
          "type": "integer",
          "format": "int32"
        },
        "namespace": {
          "type": "string"
        },
        "profanityFilter": {
          "type": "boolean"
        },
        "readyConsentTimeout": {
          "type": "integer",
          "format": "integer"
        }
      }
    },
    "models.ConfigExport": {
      "required": [
        "autoKickOnDisconnect",
        "autoKickOnDisconnectDelay",
        "cancelTicketOnDisconnect",
        "chatRateLimitBurst",
        "chatRateLimitDuration",
        "concurrentUsersLimit",
        "enableChat",
        "entitlementCheck",
        "entitlementItemID",
        "generalRateLimitBurst",
        "generalRateLimitDuration",
        "maxPartyMember",
        "namespace",
        "profanityFilter",
        "readyConsentTimeout"
      ],
      "properties": {
        "autoKickOnDisconnect": {
          "type": "boolean"
        },
        "autoKickOnDisconnectDelay": {
          "type": "integer",
          "format": "integer"
        },
        "cancelTicketOnDisconnect": {
          "type": "boolean"
        },
        "chatRateLimitBurst": {
          "type": "integer",
          "format": "int32"
        },
        "chatRateLimitDuration": {
          "type": "integer",
          "format": "integer"
        },
        "concurrentUsersLimit": {
          "type": "integer",
          "format": "int32"
        },
        "enableChat": {
          "type": "boolean"
        },
        "entitlementCheck": {
          "type": "boolean"
        },
        "entitlementItemID": {
          "type": "string"
        },
        "generalRateLimitBurst": {
          "type": "integer",
          "format": "int32"
        },
        "generalRateLimitDuration": {
          "type": "integer",
          "format": "integer"
        },
        "maxPartyMember": {
          "type": "integer",
          "format": "int32"
        },
        "namespace": {
          "type": "string"
        },
        "profanityFilter": {
          "type": "boolean"
        },
        "readyConsentTimeout": {
          "type": "integer",
          "format": "integer"
        }
      }
    },
    "models.ConfigList": {
      "required": [
        "configs"
      ],
      "properties": {
        "configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.Config"
          }
        }
      }
    },
    "models.ConfigReq": {
      "properties": {
        "autoKickOnDisconnect": {
          "type": "boolean"
        },
        "autoKickOnDisconnectDelay": {
          "type": "integer",
          "format": "integer"
        },
        "cancelTicketOnDisconnect": {
          "type": "boolean"
        },
        "chatRateLimitBurst": {
          "type": "integer",
          "format": "int32"
        },
        "chatRateLimitDuration": {
          "type": "integer",
          "format": "integer"
        },
        "concurrentUsersLimit": {
          "type": "integer",
          "format": "int32"
        },
        "enableChat": {
          "type": "boolean"
        },
        "entitlementCheck": {
          "type": "boolean"
        },
        "entitlementItemID": {
          "type": "string"
        },
        "generalRateLimitBurst": {
          "type": "integer",
          "format": "int32"
        },
        "generalRateLimitDuration": {
          "type": "integer",
          "format": "integer"
        },
        "maxPartyMember": {
          "type": "integer",
          "format": "int32"
        },
        "profanityFilter": {
          "type": "boolean"
        },
        "readyConsentTimeout": {
          "type": "integer",
          "format": "integer"
        }
      }
    },
    "models.CreateConfigRequest": {
      "required": [
        "apiKey"
      ],
      "properties": {
        "apiKey": {
          "type": "string"
        }
      }
    },
    "models.CreateConfigResponse": {
      "required": [
        "apiKey",
        "namespace"
      ],
      "properties": {
        "apiKey": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "models.DebugProfanityFilterRequest": {
      "required": [
        "text"
      ],
      "properties": {
        "text": {
          "type": "string"
        }
      }
    },
    "models.GetAllPlayerBlockedByUsersResponse": {
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.BlockedByPlayerData"
          }
        }
      }
    },
    "models.GetAllPlayerBlockedUsersResponse": {
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.BlockedPlayerData"
          }
        }
      }
    },
    "models.GetAllPlayerSessionAttributeResponse": {
      "required": [
        "attributes"
      ],
      "properties": {
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "models.GetConfigResponse": {
      "required": [
        "apiKey",
        "namespace"
      ],
      "properties": {
        "apiKey": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "models.GetLobbyCcuResponse": {
      "required": [
        "countCurrentUsers"
      ],
      "properties": {
        "countCurrentUsers": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "models.GetPlayerSessionAttributeResponse": {
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "models.ImportConfigResponse": {
      "required": [
        "failedConfigs",
        "ignoredConfigs",
        "newConfigs",
        "replacedConfigs"
      ],
      "properties": {
        "failedConfigs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ignoredConfigs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "newConfigs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "replacedConfigs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.ListBlockedPlayerRequest": {
      "required": [
        "listBlockedUserId"
      ],
      "properties": {
        "listBlockedUserId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.PartyData": {
      "required": [
        "custom_attribute",
        "invitees",
        "leader",
        "members",
        "namespace",
        "partyId",
        "updatedAt"
      ],
      "properties": {
        "custom_attribute": {
          "type": "object"
        },
        "invitees": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "leader": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "namespace": {
          "type": "string"
        },
        "partyId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "models.PartyPUTCustomAttributesRequest": {
      "required": [
        "custom_attribute",
        "updatedAt"
      ],
      "properties": {
        "custom_attribute": {
          "type": "object"
        },
        "updatedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "models.ProfanityFilter": {
      "required": [
        "filter",
        "listName",
        "namespace",
        "note"
      ],
      "properties": {
        "filter": {
          "type": "string"
        },
        "listName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "note": {
          "type": "string"
        }
      }
    },
    "models.ProfanityRule": {
      "required": [
        "Namespace",
        "Rule"
      ],
      "properties": {
        "Namespace": {
          "type": "string"
        },
        "Rule": {
          "type": "string"
        }
      }
    },
    "models.SetPlayerSessionAttributeRequest": {
      "required": [
        "attributes"
      ],
      "properties": {
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "models.UpdateConfigRequest": {
      "required": [
        "apiKey"
      ],
      "properties": {
        "apiKey": {
          "type": "string"
        }
      }
    },
    "models.UpdateConfigResponse": {
      "required": [
        "apiKey",
        "namespace"
      ],
      "properties": {
        "apiKey": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "response.Error": {
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "restapi.ErrorResponseBody": {
      "required": [
        "ErrorCode",
        "ErrorMessage"
      ],
      "properties": {
        "ErrorCode": {
          "type": "integer",
          "format": "int32"
        },
        "ErrorMessage": {
          "type": "string"
        }
      }
    },
    "restapi.ErrorResponseV1": {
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "authorization": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "authorization": []
    }
  ]
}