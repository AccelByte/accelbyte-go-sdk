// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package anonymization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/basic-sdk/pkg/basicclientmodels"
)

// AnonymizeUserProfileReader is a Reader for the AnonymizeUserProfile structure.
type AnonymizeUserProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AnonymizeUserProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAnonymizeUserProfileNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAnonymizeUserProfileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAnonymizeUserProfileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAnonymizeUserProfileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested DELETE /basic/v1/admin/namespaces/{namespace}/users/{userId}/anonymization/profiles returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAnonymizeUserProfileNoContent creates a AnonymizeUserProfileNoContent with default headers values
func NewAnonymizeUserProfileNoContent() *AnonymizeUserProfileNoContent {
	return &AnonymizeUserProfileNoContent{}
}

/*AnonymizeUserProfileNoContent handles this case with default header values.

  Anonymized profile successfully
*/
type AnonymizeUserProfileNoContent struct {
}

func (o *AnonymizeUserProfileNoContent) Error() string {
	return fmt.Sprintf("[DELETE /basic/v1/admin/namespaces/{namespace}/users/{userId}/anonymization/profiles][%d] anonymizeUserProfileNoContent ", 204)
}

func (o *AnonymizeUserProfileNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAnonymizeUserProfileBadRequest creates a AnonymizeUserProfileBadRequest with default headers values
func NewAnonymizeUserProfileBadRequest() *AnonymizeUserProfileBadRequest {
	return &AnonymizeUserProfileBadRequest{}
}

/*AnonymizeUserProfileBadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type AnonymizeUserProfileBadRequest struct {
	Payload *basicclientmodels.ValidationErrorEntity
}

func (o *AnonymizeUserProfileBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /basic/v1/admin/namespaces/{namespace}/users/{userId}/anonymization/profiles][%d] anonymizeUserProfileBadRequest  %+v", 400, o.Payload)
}

func (o *AnonymizeUserProfileBadRequest) GetPayload() *basicclientmodels.ValidationErrorEntity {
	return o.Payload
}

func (o *AnonymizeUserProfileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnonymizeUserProfileUnauthorized creates a AnonymizeUserProfileUnauthorized with default headers values
func NewAnonymizeUserProfileUnauthorized() *AnonymizeUserProfileUnauthorized {
	return &AnonymizeUserProfileUnauthorized{}
}

/*AnonymizeUserProfileUnauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>
*/
type AnonymizeUserProfileUnauthorized struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *AnonymizeUserProfileUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /basic/v1/admin/namespaces/{namespace}/users/{userId}/anonymization/profiles][%d] anonymizeUserProfileUnauthorized  %+v", 401, o.Payload)
}

func (o *AnonymizeUserProfileUnauthorized) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *AnonymizeUserProfileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnonymizeUserProfileForbidden creates a AnonymizeUserProfileForbidden with default headers values
func NewAnonymizeUserProfileForbidden() *AnonymizeUserProfileForbidden {
	return &AnonymizeUserProfileForbidden{}
}

/*AnonymizeUserProfileForbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>
*/
type AnonymizeUserProfileForbidden struct {
	Payload *basicclientmodels.ErrorEntity
}

func (o *AnonymizeUserProfileForbidden) Error() string {
	return fmt.Sprintf("[DELETE /basic/v1/admin/namespaces/{namespace}/users/{userId}/anonymization/profiles][%d] anonymizeUserProfileForbidden  %+v", 403, o.Payload)
}

func (o *AnonymizeUserProfileForbidden) GetPayload() *basicclientmodels.ErrorEntity {
	return o.Payload
}

func (o *AnonymizeUserProfileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(basicclientmodels.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
