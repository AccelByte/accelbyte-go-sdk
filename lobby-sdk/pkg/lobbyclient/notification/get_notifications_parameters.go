// Code generated by go-swagger; DO NOT EDIT.

package notification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetNotificationsParams creates a new GetNotificationsParams object
// with the default values initialized.
func NewGetNotificationsParams() *GetNotificationsParams {
	var ()
	return &GetNotificationsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNotificationsParamsWithTimeout creates a new GetNotificationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNotificationsParamsWithTimeout(timeout time.Duration) *GetNotificationsParams {
	var ()
	return &GetNotificationsParams{

		timeout: timeout,
	}
}

// NewGetNotificationsParamsWithContext creates a new GetNotificationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNotificationsParamsWithContext(ctx context.Context) *GetNotificationsParams {
	var ()
	return &GetNotificationsParams{

		Context: ctx,
	}
}

// NewGetNotificationsParamsWithHTTPClient creates a new GetNotificationsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNotificationsParamsWithHTTPClient(client *http.Client) *GetNotificationsParams {
	var ()
	return &GetNotificationsParams{
		HTTPClient: client,
	}
}

/*GetNotificationsParams contains all the parameters to send to the API endpoint
for the get notifications operation typically these are written to a http.Request
*/
type GetNotificationsParams struct {

	/*Namespace
	  namespace

	*/
	Namespace string
	/*UserID
	  user ID

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get notifications params
func (o *GetNotificationsParams) WithTimeout(timeout time.Duration) *GetNotificationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get notifications params
func (o *GetNotificationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get notifications params
func (o *GetNotificationsParams) WithContext(ctx context.Context) *GetNotificationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get notifications params
func (o *GetNotificationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get notifications params
func (o *GetNotificationsParams) WithHTTPClient(client *http.Client) *GetNotificationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get notifications params
func (o *GetNotificationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNamespace adds the namespace to the get notifications params
func (o *GetNotificationsParams) WithNamespace(namespace string) *GetNotificationsParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get notifications params
func (o *GetNotificationsParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithUserID adds the userID to the get notifications params
func (o *GetNotificationsParams) WithUserID(userID string) *GetNotificationsParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get notifications params
func (o *GetNotificationsParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetNotificationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
