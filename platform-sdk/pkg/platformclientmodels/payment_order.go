// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentOrder payment order
//
// swagger:model PaymentOrder
type PaymentOrder struct {

	// authorised time
	// Format: date-time
	AuthorisedTime *strfmt.DateTime `json:"authorisedTime,omitempty"`

	// channel
	// Enum: [EXTERNAL INTERNAL]
	Channel string `json:"channel,omitempty"`

	// chargeback reversed time
	// Format: date-time
	ChargebackReversedTime *strfmt.DateTime `json:"chargebackReversedTime,omitempty"`

	// chargeback time
	// Format: date-time
	ChargebackTime *strfmt.DateTime `json:"chargebackTime,omitempty"`

	// charged time
	// Format: date-time
	ChargedTime *strfmt.DateTime `json:"chargedTime,omitempty"`

	// charging
	Charging bool `json:"charging,omitempty"`

	// created at
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt,omitempty"`

	// created time
	// Format: date-time
	CreatedTime *strfmt.DateTime `json:"createdTime,omitempty"`

	// currency
	Currency *CurrencySummary `json:"currency,omitempty"`

	// custom parameters
	CustomParameters map[string]interface{} `json:"customParameters,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ext order no
	ExtOrderNo string `json:"extOrderNo,omitempty"`

	// ext user Id
	ExtUserID string `json:"extUserId,omitempty"`

	// item type
	// Enum: [APP COINS INGAMEITEM BUNDLE CODE SUBSCRIPTION SEASON MEDIA]
	ItemType string `json:"itemType,omitempty"`

	// language
	Language string `json:"language,omitempty"`

	// metadata
	Metadata map[string]string `json:"metadata,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// notify Url
	NotifyURL string `json:"notifyUrl,omitempty"`

	// omit notification
	OmitNotification bool `json:"omitNotification,omitempty"`

	// payment method
	PaymentMethod string `json:"paymentMethod,omitempty"`

	// payment method fee
	PaymentMethodFee int32 `json:"paymentMethodFee,omitempty"`

	// payment order no
	PaymentOrderNo string `json:"paymentOrderNo,omitempty"`

	// payment provider
	// Enum: [WALLET XSOLLA ADYEN STRIPE CHECKOUT ALIPAY WXPAY PAYPAL]
	PaymentProvider string `json:"paymentProvider,omitempty"`

	// payment provider fee
	PaymentProviderFee int32 `json:"paymentProviderFee,omitempty"`

	// payment station Url
	PaymentStationURL string `json:"paymentStationUrl,omitempty"`

	// price
	Price int32 `json:"price,omitempty"`

	// recurring payment order no
	RecurringPaymentOrderNo string `json:"recurringPaymentOrderNo,omitempty"`

	// refunded time
	// Format: date-time
	RefundedTime *strfmt.DateTime `json:"refundedTime,omitempty"`

	// region
	Region string `json:"region,omitempty"`

	// return Url
	ReturnURL string `json:"returnUrl,omitempty"`

	// rvn
	Rvn int32 `json:"rvn,omitempty"`

	// sales tax
	SalesTax int32 `json:"salesTax,omitempty"`

	// sandbox
	Sandbox bool `json:"sandbox,omitempty"`

	// sku
	Sku string `json:"sku,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// status
	// Enum: [INIT AUTHORISED AUTHORISE_FAILED CHARGED CHARGE_FAILED NOTIFICATION_OF_CHARGEBACK REQUEST_FOR_INFORMATION CHARGEBACK CHARGEBACK_REVERSED REFUNDING REFUNDED REFUND_FAILED DELETED]
	Status string `json:"status,omitempty"`

	// status reason
	StatusReason string `json:"statusReason,omitempty"`

	// subscription Id
	SubscriptionID string `json:"subscriptionId,omitempty"`

	// subtotal price
	SubtotalPrice int32 `json:"subtotalPrice,omitempty"`

	// target namespace
	TargetNamespace string `json:"targetNamespace,omitempty"`

	// target user Id
	TargetUserID string `json:"targetUserId,omitempty"`

	// tax
	Tax int32 `json:"tax,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// total price
	TotalPrice int32 `json:"totalPrice,omitempty"`

	// total tax
	TotalTax int32 `json:"totalTax,omitempty"`

	// transactions
	Transactions []*Transaction `json:"transactions"`

	// updated at
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`

	// vat
	Vat int32 `json:"vat,omitempty"`

	// zip code
	ZipCode string `json:"zipCode,omitempty"`
}

// Validate validates this payment order
func (m *PaymentOrder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorisedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargebackReversedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargebackTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentOrder) validateAuthorisedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthorisedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("authorisedTime", "body", "date-time", m.AuthorisedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var paymentOrderTypeChannelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EXTERNAL","INTERNAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentOrderTypeChannelPropEnum = append(paymentOrderTypeChannelPropEnum, v)
	}
}

const (

	// PaymentOrderChannelEXTERNAL captures enum value "EXTERNAL"
	PaymentOrderChannelEXTERNAL string = "EXTERNAL"

	// PaymentOrderChannelINTERNAL captures enum value "INTERNAL"
	PaymentOrderChannelINTERNAL string = "INTERNAL"
)

// prop value enum
func (m *PaymentOrder) validateChannelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentOrderTypeChannelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentOrder) validateChannel(formats strfmt.Registry) error {

	if swag.IsZero(m.Channel) { // not required
		return nil
	}

	// value enum
	if err := m.validateChannelEnum("channel", "body", m.Channel); err != nil {
		return err
	}

	return nil
}

func (m *PaymentOrder) validateChargebackReversedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ChargebackReversedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("chargebackReversedTime", "body", "date-time", m.ChargebackReversedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentOrder) validateChargebackTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ChargebackTime) { // not required
		return nil
	}

	if err := validate.FormatOf("chargebackTime", "body", "date-time", m.ChargebackTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentOrder) validateChargedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ChargedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("chargedTime", "body", "date-time", m.ChargedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentOrder) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentOrder) validateCreatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createdTime", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentOrder) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

var paymentOrderTypeItemTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["APP","COINS","INGAMEITEM","BUNDLE","CODE","SUBSCRIPTION","SEASON","MEDIA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentOrderTypeItemTypePropEnum = append(paymentOrderTypeItemTypePropEnum, v)
	}
}

const (

	// PaymentOrderItemTypeAPP captures enum value "APP"
	PaymentOrderItemTypeAPP string = "APP"

	// PaymentOrderItemTypeCOINS captures enum value "COINS"
	PaymentOrderItemTypeCOINS string = "COINS"

	// PaymentOrderItemTypeINGAMEITEM captures enum value "INGAMEITEM"
	PaymentOrderItemTypeINGAMEITEM string = "INGAMEITEM"

	// PaymentOrderItemTypeBUNDLE captures enum value "BUNDLE"
	PaymentOrderItemTypeBUNDLE string = "BUNDLE"

	// PaymentOrderItemTypeCODE captures enum value "CODE"
	PaymentOrderItemTypeCODE string = "CODE"

	// PaymentOrderItemTypeSUBSCRIPTION captures enum value "SUBSCRIPTION"
	PaymentOrderItemTypeSUBSCRIPTION string = "SUBSCRIPTION"

	// PaymentOrderItemTypeSEASON captures enum value "SEASON"
	PaymentOrderItemTypeSEASON string = "SEASON"

	// PaymentOrderItemTypeMEDIA captures enum value "MEDIA"
	PaymentOrderItemTypeMEDIA string = "MEDIA"
)

// prop value enum
func (m *PaymentOrder) validateItemTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentOrderTypeItemTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentOrder) validateItemType(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemType) { // not required
		return nil
	}

	// value enum
	if err := m.validateItemTypeEnum("itemType", "body", m.ItemType); err != nil {
		return err
	}

	return nil
}

var paymentOrderTypePaymentProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WALLET","XSOLLA","ADYEN","STRIPE","CHECKOUT","ALIPAY","WXPAY","PAYPAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentOrderTypePaymentProviderPropEnum = append(paymentOrderTypePaymentProviderPropEnum, v)
	}
}

const (

	// PaymentOrderPaymentProviderWALLET captures enum value "WALLET"
	PaymentOrderPaymentProviderWALLET string = "WALLET"

	// PaymentOrderPaymentProviderXSOLLA captures enum value "XSOLLA"
	PaymentOrderPaymentProviderXSOLLA string = "XSOLLA"

	// PaymentOrderPaymentProviderADYEN captures enum value "ADYEN"
	PaymentOrderPaymentProviderADYEN string = "ADYEN"

	// PaymentOrderPaymentProviderSTRIPE captures enum value "STRIPE"
	PaymentOrderPaymentProviderSTRIPE string = "STRIPE"

	// PaymentOrderPaymentProviderCHECKOUT captures enum value "CHECKOUT"
	PaymentOrderPaymentProviderCHECKOUT string = "CHECKOUT"

	// PaymentOrderPaymentProviderALIPAY captures enum value "ALIPAY"
	PaymentOrderPaymentProviderALIPAY string = "ALIPAY"

	// PaymentOrderPaymentProviderWXPAY captures enum value "WXPAY"
	PaymentOrderPaymentProviderWXPAY string = "WXPAY"

	// PaymentOrderPaymentProviderPAYPAL captures enum value "PAYPAL"
	PaymentOrderPaymentProviderPAYPAL string = "PAYPAL"
)

// prop value enum
func (m *PaymentOrder) validatePaymentProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentOrderTypePaymentProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentOrder) validatePaymentProvider(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentProvider) { // not required
		return nil
	}

	// value enum
	if err := m.validatePaymentProviderEnum("paymentProvider", "body", m.PaymentProvider); err != nil {
		return err
	}

	return nil
}

func (m *PaymentOrder) validateRefundedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.RefundedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("refundedTime", "body", "date-time", m.RefundedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var paymentOrderTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INIT","AUTHORISED","AUTHORISE_FAILED","CHARGED","CHARGE_FAILED","NOTIFICATION_OF_CHARGEBACK","REQUEST_FOR_INFORMATION","CHARGEBACK","CHARGEBACK_REVERSED","REFUNDING","REFUNDED","REFUND_FAILED","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentOrderTypeStatusPropEnum = append(paymentOrderTypeStatusPropEnum, v)
	}
}

const (

	// PaymentOrderStatusINIT captures enum value "INIT"
	PaymentOrderStatusINIT string = "INIT"

	// PaymentOrderStatusAUTHORISED captures enum value "AUTHORISED"
	PaymentOrderStatusAUTHORISED string = "AUTHORISED"

	// PaymentOrderStatusAUTHORISEFAILED captures enum value "AUTHORISE_FAILED"
	PaymentOrderStatusAUTHORISEFAILED string = "AUTHORISE_FAILED"

	// PaymentOrderStatusCHARGED captures enum value "CHARGED"
	PaymentOrderStatusCHARGED string = "CHARGED"

	// PaymentOrderStatusCHARGEFAILED captures enum value "CHARGE_FAILED"
	PaymentOrderStatusCHARGEFAILED string = "CHARGE_FAILED"

	// PaymentOrderStatusNOTIFICATIONOFCHARGEBACK captures enum value "NOTIFICATION_OF_CHARGEBACK"
	PaymentOrderStatusNOTIFICATIONOFCHARGEBACK string = "NOTIFICATION_OF_CHARGEBACK"

	// PaymentOrderStatusREQUESTFORINFORMATION captures enum value "REQUEST_FOR_INFORMATION"
	PaymentOrderStatusREQUESTFORINFORMATION string = "REQUEST_FOR_INFORMATION"

	// PaymentOrderStatusCHARGEBACK captures enum value "CHARGEBACK"
	PaymentOrderStatusCHARGEBACK string = "CHARGEBACK"

	// PaymentOrderStatusCHARGEBACKREVERSED captures enum value "CHARGEBACK_REVERSED"
	PaymentOrderStatusCHARGEBACKREVERSED string = "CHARGEBACK_REVERSED"

	// PaymentOrderStatusREFUNDING captures enum value "REFUNDING"
	PaymentOrderStatusREFUNDING string = "REFUNDING"

	// PaymentOrderStatusREFUNDED captures enum value "REFUNDED"
	PaymentOrderStatusREFUNDED string = "REFUNDED"

	// PaymentOrderStatusREFUNDFAILED captures enum value "REFUND_FAILED"
	PaymentOrderStatusREFUNDFAILED string = "REFUND_FAILED"

	// PaymentOrderStatusDELETED captures enum value "DELETED"
	PaymentOrderStatusDELETED string = "DELETED"
)

// prop value enum
func (m *PaymentOrder) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentOrderTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentOrder) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PaymentOrder) validateTransactions(formats strfmt.Registry) error {

	if swag.IsZero(m.Transactions) { // not required
		return nil
	}

	for i := 0; i < len(m.Transactions); i++ {
		if swag.IsZero(m.Transactions[i]) { // not required
			continue
		}

		if m.Transactions[i] != nil {
			if err := m.Transactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PaymentOrder) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentOrder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentOrder) UnmarshalBinary(b []byte) error {
	var res PaymentOrder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
