// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// AdminCreateClientV3Reader is a Reader for the AdminCreateClientV3 structure.
type AdminCreateClientV3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminCreateClientV3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAdminCreateClientV3Created()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminCreateClientV3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminCreateClientV3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAdminCreateClientV3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewAdminCreateClientV3Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /iam/v3/admin/namespaces/{namespace}/clients returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminCreateClientV3Created creates a AdminCreateClientV3Created with default headers values
func NewAdminCreateClientV3Created() *AdminCreateClientV3Created {
	return &AdminCreateClientV3Created{}
}

/*AdminCreateClientV3Created handles this case with default header values.

  Created
*/
type AdminCreateClientV3Created struct {
	Payload *iamclientmodels.ClientmodelClientV3Response
}

func (o *AdminCreateClientV3Created) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/clients][%d] adminCreateClientV3Created  %+v", 201, o.Payload)
}

func (o *AdminCreateClientV3Created) GetPayload() *iamclientmodels.ClientmodelClientV3Response {
	return o.Payload
}

func (o *AdminCreateClientV3Created) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.ClientmodelClientV3Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminCreateClientV3BadRequest creates a AdminCreateClientV3BadRequest with default headers values
func NewAdminCreateClientV3BadRequest() *AdminCreateClientV3BadRequest {
	return &AdminCreateClientV3BadRequest{}
}

/*AdminCreateClientV3BadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>
*/
type AdminCreateClientV3BadRequest struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminCreateClientV3BadRequest) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/clients][%d] adminCreateClientV3BadRequest  %+v", 400, o.Payload)
}

func (o *AdminCreateClientV3BadRequest) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminCreateClientV3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminCreateClientV3Unauthorized creates a AdminCreateClientV3Unauthorized with default headers values
func NewAdminCreateClientV3Unauthorized() *AdminCreateClientV3Unauthorized {
	return &AdminCreateClientV3Unauthorized{}
}

/*AdminCreateClientV3Unauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>
*/
type AdminCreateClientV3Unauthorized struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminCreateClientV3Unauthorized) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/clients][%d] adminCreateClientV3Unauthorized  %+v", 401, o.Payload)
}

func (o *AdminCreateClientV3Unauthorized) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminCreateClientV3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminCreateClientV3Forbidden creates a AdminCreateClientV3Forbidden with default headers values
func NewAdminCreateClientV3Forbidden() *AdminCreateClientV3Forbidden {
	return &AdminCreateClientV3Forbidden{}
}

/*AdminCreateClientV3Forbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr></table>
*/
type AdminCreateClientV3Forbidden struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminCreateClientV3Forbidden) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/clients][%d] adminCreateClientV3Forbidden  %+v", 403, o.Payload)
}

func (o *AdminCreateClientV3Forbidden) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminCreateClientV3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminCreateClientV3Conflict creates a AdminCreateClientV3Conflict with default headers values
func NewAdminCreateClientV3Conflict() *AdminCreateClientV3Conflict {
	return &AdminCreateClientV3Conflict{}
}

/*AdminCreateClientV3Conflict handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10364</td><td>client exists</td></tr></table>
*/
type AdminCreateClientV3Conflict struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminCreateClientV3Conflict) Error() string {
	return fmt.Sprintf("[POST /iam/v3/admin/namespaces/{namespace}/clients][%d] adminCreateClientV3Conflict  %+v", 409, o.Payload)
}

func (o *AdminCreateClientV3Conflict) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminCreateClientV3Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
