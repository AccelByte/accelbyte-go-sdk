// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdatePasswordReader is a Reader for the UpdatePassword structure.
type UpdatePasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdatePasswordNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdatePasswordUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdatePasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdatePasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewUpdatePasswordInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PUT /iam/namespaces/{namespace}/users/{userId}/password returns an error %d: %s", response.Code(), string(data))
	}
}

// NewUpdatePasswordNoContent creates a UpdatePasswordNoContent with default headers values
func NewUpdatePasswordNoContent() *UpdatePasswordNoContent {
	return &UpdatePasswordNoContent{}
}

/*UpdatePasswordNoContent handles this case with default header values.

  Operation succeeded
*/
type UpdatePasswordNoContent struct {
}

func (o *UpdatePasswordNoContent) Error() string {
	return fmt.Sprintf("[PUT /iam/namespaces/{namespace}/users/{userId}/password][%d] updatePasswordNoContent ", 204)
}

func (o *UpdatePasswordNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePasswordBadRequest creates a UpdatePasswordBadRequest with default headers values
func NewUpdatePasswordBadRequest() *UpdatePasswordBadRequest {
	return &UpdatePasswordBadRequest{}
}

/*UpdatePasswordBadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>10142</td><td>new password cannot be same with original</td></tr><tr><td>10143</td><td>password not match</td></tr></table>
*/
type UpdatePasswordBadRequest struct {
}

func (o *UpdatePasswordBadRequest) Error() string {
	return fmt.Sprintf("[PUT /iam/namespaces/{namespace}/users/{userId}/password][%d] updatePasswordBadRequest ", 400)
}

func (o *UpdatePasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePasswordUnauthorized creates a UpdatePasswordUnauthorized with default headers values
func NewUpdatePasswordUnauthorized() *UpdatePasswordUnauthorized {
	return &UpdatePasswordUnauthorized{}
}

/*UpdatePasswordUnauthorized handles this case with default header values.

  Unauthorized access
*/
type UpdatePasswordUnauthorized struct {
}

func (o *UpdatePasswordUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /iam/namespaces/{namespace}/users/{userId}/password][%d] updatePasswordUnauthorized ", 401)
}

func (o *UpdatePasswordUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePasswordForbidden creates a UpdatePasswordForbidden with default headers values
func NewUpdatePasswordForbidden() *UpdatePasswordForbidden {
	return &UpdatePasswordForbidden{}
}

/*UpdatePasswordForbidden handles this case with default header values.

  Forbidden
*/
type UpdatePasswordForbidden struct {
}

func (o *UpdatePasswordForbidden) Error() string {
	return fmt.Sprintf("[PUT /iam/namespaces/{namespace}/users/{userId}/password][%d] updatePasswordForbidden ", 403)
}

func (o *UpdatePasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePasswordNotFound creates a UpdatePasswordNotFound with default headers values
func NewUpdatePasswordNotFound() *UpdatePasswordNotFound {
	return &UpdatePasswordNotFound{}
}

/*UpdatePasswordNotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>
*/
type UpdatePasswordNotFound struct {
}

func (o *UpdatePasswordNotFound) Error() string {
	return fmt.Sprintf("[PUT /iam/namespaces/{namespace}/users/{userId}/password][%d] updatePasswordNotFound ", 404)
}

func (o *UpdatePasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePasswordInternalServerError creates a UpdatePasswordInternalServerError with default headers values
func NewUpdatePasswordInternalServerError() *UpdatePasswordInternalServerError {
	return &UpdatePasswordInternalServerError{}
}

/*UpdatePasswordInternalServerError handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>
*/
type UpdatePasswordInternalServerError struct {
}

func (o *UpdatePasswordInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /iam/namespaces/{namespace}/users/{userId}/password][%d] updatePasswordInternalServerError ", 500)
}

func (o *UpdatePasswordInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
