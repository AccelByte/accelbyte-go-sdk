// Code generated by go-swagger; DO NOT EDIT.

package socialclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SlotInfo slot info
//
// swagger:model SlotInfo
type SlotInfo struct {

	// base64 encoded md5
	Checksum string `json:"checksum,omitempty"`

	// custom attribute
	CustomAttribute string `json:"customAttribute,omitempty"`

	// date accessed
	// Format: date-time
	DateAccessed *strfmt.DateTime `json:"dateAccessed,omitempty"`

	// date created
	// Format: date-time
	DateCreated *strfmt.DateTime `json:"dateCreated,omitempty"`

	// date modified
	// Format: date-time
	DateModified *strfmt.DateTime `json:"dateModified,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// mime type
	MimeType string `json:"mimeType,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// original name
	OriginalName string `json:"originalName,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// slot Id
	SlotID string `json:"slotId,omitempty"`

	// stored name
	StoredName string `json:"storedName,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// Validate validates this slot info
func (m *SlotInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateAccessed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SlotInfo) validateDateAccessed(formats strfmt.Registry) error {

	if swag.IsZero(m.DateAccessed) { // not required
		return nil
	}

	if err := validate.FormatOf("dateAccessed", "body", "date-time", m.DateAccessed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SlotInfo) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SlotInfo) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SlotInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SlotInfo) UnmarshalBinary(b []byte) error {
	var res SlotInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
