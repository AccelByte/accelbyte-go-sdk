// Code generated by go-swagger; DO NOT EDIT.

package nr_admin_content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"reflect"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new nr admin content API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nr admin content API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AdminDeleteContent(params *AdminDeleteContentParams, authInfo runtime.ClientAuthInfoWriter) (*AdminDeleteContentOK, *AdminDeleteContentUnauthorized, *AdminDeleteContentNotFound, *AdminDeleteContentInternalServerError, error)

	AdminDownloadContentPreview(params *AdminDownloadContentPreviewParams, authInfo runtime.ClientAuthInfoWriter) (*AdminDownloadContentPreviewOK, *AdminDownloadContentPreviewUnauthorized, *AdminDownloadContentPreviewNotFound, *AdminDownloadContentPreviewInternalServerError, error)

	AdminGetContent(params *AdminGetContentParams, authInfo runtime.ClientAuthInfoWriter) (*AdminGetContentOK, *AdminGetContentUnauthorized, *AdminGetContentNotFound, *AdminGetContentInternalServerError, error)

	AdminGetSpecificContent(params *AdminGetSpecificContentParams, authInfo runtime.ClientAuthInfoWriter) (*AdminGetSpecificContentOK, *AdminGetSpecificContentUnauthorized, *AdminGetSpecificContentNotFound, *AdminGetSpecificContentInternalServerError, error)

	AdminHideUserContent(params *AdminHideUserContentParams, authInfo runtime.ClientAuthInfoWriter) (*AdminHideUserContentOK, *AdminHideUserContentUnauthorized, *AdminHideUserContentNotFound, *AdminHideUserContentInternalServerError, error)

	AdminSearchChannelSpecificContent(params *AdminSearchChannelSpecificContentParams, authInfo runtime.ClientAuthInfoWriter) (*AdminSearchChannelSpecificContentOK, *AdminSearchChannelSpecificContentUnauthorized, *AdminSearchChannelSpecificContentNotFound, *AdminSearchChannelSpecificContentInternalServerError, error)

	AdminSearchContent(params *AdminSearchContentParams, authInfo runtime.ClientAuthInfoWriter) (*AdminSearchContentOK, *AdminSearchContentUnauthorized, *AdminSearchContentNotFound, *AdminSearchContentInternalServerError, error)

	AdminUpdateContentDirect(params *AdminUpdateContentDirectParams, authInfo runtime.ClientAuthInfoWriter) (*AdminUpdateContentDirectOK, *AdminUpdateContentDirectBadRequest, *AdminUpdateContentDirectUnauthorized, *AdminUpdateContentDirectNotFound, *AdminUpdateContentDirectInternalServerError, error)

	AdminUpdateContentS3(params *AdminUpdateContentS3Params, authInfo runtime.ClientAuthInfoWriter) (*AdminUpdateContentS3OK, *AdminUpdateContentS3BadRequest, *AdminUpdateContentS3Unauthorized, *AdminUpdateContentS3NotFound, *AdminUpdateContentS3InternalServerError, error)

	AdminUploadContentDirect(params *AdminUploadContentDirectParams, authInfo runtime.ClientAuthInfoWriter) (*AdminUploadContentDirectCreated, *AdminUploadContentDirectBadRequest, *AdminUploadContentDirectUnauthorized, *AdminUploadContentDirectInternalServerError, error)

	AdminUploadContentS3(params *AdminUploadContentS3Params, authInfo runtime.ClientAuthInfoWriter) (*AdminUploadContentS3Created, *AdminUploadContentS3BadRequest, *AdminUploadContentS3Unauthorized, *AdminUploadContentS3InternalServerError, error)

	SingleAdminDeleteContent(params *SingleAdminDeleteContentParams, authInfo runtime.ClientAuthInfoWriter) (*SingleAdminDeleteContentOK, *SingleAdminDeleteContentUnauthorized, *SingleAdminDeleteContentNotFound, *SingleAdminDeleteContentInternalServerError, error)

	SingleAdminGetContent(params *SingleAdminGetContentParams, authInfo runtime.ClientAuthInfoWriter) (*SingleAdminGetContentOK, *SingleAdminGetContentUnauthorized, *SingleAdminGetContentNotFound, *SingleAdminGetContentInternalServerError, error)

	SingleAdminUpdateContentDirect(params *SingleAdminUpdateContentDirectParams, authInfo runtime.ClientAuthInfoWriter) (*SingleAdminUpdateContentDirectOK, *SingleAdminUpdateContentDirectBadRequest, *SingleAdminUpdateContentDirectUnauthorized, *SingleAdminUpdateContentDirectNotFound, *SingleAdminUpdateContentDirectInternalServerError, error)

	SingleAdminUpdateContentS3(params *SingleAdminUpdateContentS3Params, authInfo runtime.ClientAuthInfoWriter) (*SingleAdminUpdateContentS3OK, *SingleAdminUpdateContentS3BadRequest, *SingleAdminUpdateContentS3Unauthorized, *SingleAdminUpdateContentS3NotFound, *SingleAdminUpdateContentS3InternalServerError, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AdminDeleteContent deletes content

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]</b>.
*/
func (a *Client) AdminDeleteContent(params *AdminDeleteContentParams, authInfo runtime.ClientAuthInfoWriter) (*AdminDeleteContentOK, *AdminDeleteContentUnauthorized, *AdminDeleteContentNotFound, *AdminDeleteContentInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminDeleteContentParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminDeleteContent",
		Method:             "DELETE",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/{contentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminDeleteContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminDeleteContentOK:
		return v, nil, nil, nil, nil
	case *AdminDeleteContentUnauthorized:
		return nil, v, nil, nil, nil
	case *AdminDeleteContentNotFound:
		return nil, nil, v, nil, nil
	case *AdminDeleteContentInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  AdminDownloadContentPreview gets content preview

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]</b>
*/
func (a *Client) AdminDownloadContentPreview(params *AdminDownloadContentPreviewParams, authInfo runtime.ClientAuthInfoWriter) (*AdminDownloadContentPreviewOK, *AdminDownloadContentPreviewUnauthorized, *AdminDownloadContentPreviewNotFound, *AdminDownloadContentPreviewInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminDownloadContentPreviewParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminDownloadContentPreview",
		Method:             "GET",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/contents/{contentId}/preview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminDownloadContentPreviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminDownloadContentPreviewOK:
		return v, nil, nil, nil, nil
	case *AdminDownloadContentPreviewUnauthorized:
		return nil, v, nil, nil, nil
	case *AdminDownloadContentPreviewNotFound:
		return nil, nil, v, nil, nil
	case *AdminDownloadContentPreviewInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  AdminGetContent gets user s generated contents

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]</b>.
*/
func (a *Client) AdminGetContent(params *AdminGetContentParams, authInfo runtime.ClientAuthInfoWriter) (*AdminGetContentOK, *AdminGetContentUnauthorized, *AdminGetContentNotFound, *AdminGetContentInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminGetContentParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminGetContent",
		Method:             "GET",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/contents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminGetContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminGetContentOK:
		return v, nil, nil, nil, nil
	case *AdminGetContentUnauthorized:
		return nil, v, nil, nil, nil
	case *AdminGetContentNotFound:
		return nil, nil, v, nil, nil
	case *AdminGetContentInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  AdminGetSpecificContent gets user specific content

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]</b>.
*/
func (a *Client) AdminGetSpecificContent(params *AdminGetSpecificContentParams, authInfo runtime.ClientAuthInfoWriter) (*AdminGetSpecificContentOK, *AdminGetSpecificContentUnauthorized, *AdminGetSpecificContentNotFound, *AdminGetSpecificContentInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminGetSpecificContentParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminGetSpecificContent",
		Method:             "GET",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/contents/{contentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminGetSpecificContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminGetSpecificContentOK:
		return v, nil, nil, nil, nil
	case *AdminGetSpecificContentUnauthorized:
		return nil, v, nil, nil, nil
	case *AdminGetSpecificContentNotFound:
		return nil, nil, v, nil, nil
	case *AdminGetSpecificContentInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  AdminHideUserContent hides unhide user s generated contents

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]</b>.
*/
func (a *Client) AdminHideUserContent(params *AdminHideUserContentParams, authInfo runtime.ClientAuthInfoWriter) (*AdminHideUserContentOK, *AdminHideUserContentUnauthorized, *AdminHideUserContentNotFound, *AdminHideUserContentInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminHideUserContentParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminHideUserContent",
		Method:             "PUT",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/contents/{contentId}/hide",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminHideUserContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminHideUserContentOK:
		return v, nil, nil, nil, nil
	case *AdminHideUserContentUnauthorized:
		return nil, v, nil, nil, nil
	case *AdminHideUserContentNotFound:
		return nil, nil, v, nil, nil
	case *AdminHideUserContentInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  AdminSearchChannelSpecificContent searches contents specific to a channel

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [CREATE]</b>
*/
func (a *Client) AdminSearchChannelSpecificContent(params *AdminSearchChannelSpecificContentParams, authInfo runtime.ClientAuthInfoWriter) (*AdminSearchChannelSpecificContentOK, *AdminSearchChannelSpecificContentUnauthorized, *AdminSearchChannelSpecificContentNotFound, *AdminSearchChannelSpecificContentInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminSearchChannelSpecificContentParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminSearchChannelSpecificContent",
		Method:             "GET",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminSearchChannelSpecificContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminSearchChannelSpecificContentOK:
		return v, nil, nil, nil, nil
	case *AdminSearchChannelSpecificContentUnauthorized:
		return nil, v, nil, nil, nil
	case *AdminSearchChannelSpecificContentNotFound:
		return nil, nil, v, nil, nil
	case *AdminSearchChannelSpecificContentInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  AdminSearchContent searches contents

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [CREATE]</b>
*/
func (a *Client) AdminSearchContent(params *AdminSearchContentParams, authInfo runtime.ClientAuthInfoWriter) (*AdminSearchContentOK, *AdminSearchContentUnauthorized, *AdminSearchContentNotFound, *AdminSearchContentInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminSearchContentParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminSearchContent",
		Method:             "GET",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/contents/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminSearchContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminSearchContentOK:
		return v, nil, nil, nil, nil
	case *AdminSearchContentUnauthorized:
		return nil, v, nil, nil, nil
	case *AdminSearchContentNotFound:
		return nil, nil, v, nil, nil
	case *AdminSearchContentInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  AdminUpdateContentDirect updates content to a channel

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]</b>.\n
					All request body are required except preview and tags.

*/
func (a *Client) AdminUpdateContentDirect(params *AdminUpdateContentDirectParams, authInfo runtime.ClientAuthInfoWriter) (*AdminUpdateContentDirectOK, *AdminUpdateContentDirectBadRequest, *AdminUpdateContentDirectUnauthorized, *AdminUpdateContentDirectNotFound, *AdminUpdateContentDirectInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminUpdateContentDirectParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminUpdateContentDirect",
		Method:             "PUT",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/{contentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminUpdateContentDirectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminUpdateContentDirectOK:
		return v, nil, nil, nil, nil, nil
	case *AdminUpdateContentDirectBadRequest:
		return nil, v, nil, nil, nil, nil
	case *AdminUpdateContentDirectUnauthorized:
		return nil, nil, v, nil, nil, nil
	case *AdminUpdateContentDirectNotFound:
		return nil, nil, nil, v, nil, nil
	case *AdminUpdateContentDirectInternalServerError:
		return nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  AdminUpdateContentS3 updates content to s3 bucket

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]</b>.\n
						All request body are required except payload, preview, and tags.
*/
func (a *Client) AdminUpdateContentS3(params *AdminUpdateContentS3Params, authInfo runtime.ClientAuthInfoWriter) (*AdminUpdateContentS3OK, *AdminUpdateContentS3BadRequest, *AdminUpdateContentS3Unauthorized, *AdminUpdateContentS3NotFound, *AdminUpdateContentS3InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminUpdateContentS3Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminUpdateContentS3",
		Method:             "PUT",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/s3/{contentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminUpdateContentS3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminUpdateContentS3OK:
		return v, nil, nil, nil, nil, nil
	case *AdminUpdateContentS3BadRequest:
		return nil, v, nil, nil, nil, nil
	case *AdminUpdateContentS3Unauthorized:
		return nil, nil, v, nil, nil, nil
	case *AdminUpdateContentS3NotFound:
		return nil, nil, nil, v, nil, nil
	case *AdminUpdateContentS3InternalServerError:
		return nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  AdminUploadContentDirect uploads content to a channel

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]</b>.\n
				All request body are required except preview and tags.

*/
func (a *Client) AdminUploadContentDirect(params *AdminUploadContentDirectParams, authInfo runtime.ClientAuthInfoWriter) (*AdminUploadContentDirectCreated, *AdminUploadContentDirectBadRequest, *AdminUploadContentDirectUnauthorized, *AdminUploadContentDirectInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminUploadContentDirectParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminUploadContentDirect",
		Method:             "POST",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminUploadContentDirectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminUploadContentDirectCreated:
		return v, nil, nil, nil, nil
	case *AdminUploadContentDirectBadRequest:
		return nil, v, nil, nil, nil
	case *AdminUploadContentDirectUnauthorized:
		return nil, nil, v, nil, nil
	case *AdminUploadContentDirectInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  AdminUploadContentS3 uploads content to s3 bucket

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]</b>.\n
						All request body are required except preview and tags.

*/
func (a *Client) AdminUploadContentS3(params *AdminUploadContentS3Params, authInfo runtime.ClientAuthInfoWriter) (*AdminUploadContentS3Created, *AdminUploadContentS3BadRequest, *AdminUploadContentS3Unauthorized, *AdminUploadContentS3InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminUploadContentS3Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminUploadContentS3",
		Method:             "POST",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents/s3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminUploadContentS3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *AdminUploadContentS3Created:
		return v, nil, nil, nil, nil
	case *AdminUploadContentS3BadRequest:
		return nil, v, nil, nil, nil
	case *AdminUploadContentS3Unauthorized:
		return nil, nil, v, nil, nil
	case *AdminUploadContentS3InternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  SingleAdminDeleteContent deletes content

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]</b>.
*/
func (a *Client) SingleAdminDeleteContent(params *SingleAdminDeleteContentParams, authInfo runtime.ClientAuthInfoWriter) (*SingleAdminDeleteContentOK, *SingleAdminDeleteContentUnauthorized, *SingleAdminDeleteContentNotFound, *SingleAdminDeleteContentInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSingleAdminDeleteContentParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SingleAdminDeleteContent",
		Method:             "DELETE",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents/{contentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SingleAdminDeleteContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *SingleAdminDeleteContentOK:
		return v, nil, nil, nil, nil
	case *SingleAdminDeleteContentUnauthorized:
		return nil, v, nil, nil, nil
	case *SingleAdminDeleteContentNotFound:
		return nil, nil, v, nil, nil
	case *SingleAdminDeleteContentInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  SingleAdminGetContent gets user s generated contents

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]</b>.
*/
func (a *Client) SingleAdminGetContent(params *SingleAdminGetContentParams, authInfo runtime.ClientAuthInfoWriter) (*SingleAdminGetContentOK, *SingleAdminGetContentUnauthorized, *SingleAdminGetContentNotFound, *SingleAdminGetContentInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSingleAdminGetContentParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SingleAdminGetContent",
		Method:             "GET",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/contents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SingleAdminGetContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *SingleAdminGetContentOK:
		return v, nil, nil, nil, nil
	case *SingleAdminGetContentUnauthorized:
		return nil, v, nil, nil, nil
	case *SingleAdminGetContentNotFound:
		return nil, nil, v, nil, nil
	case *SingleAdminGetContentInternalServerError:
		return nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  SingleAdminUpdateContentDirect updates content to a channel

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]</b>.\n
					All request body are required except preview and tags.

*/
func (a *Client) SingleAdminUpdateContentDirect(params *SingleAdminUpdateContentDirectParams, authInfo runtime.ClientAuthInfoWriter) (*SingleAdminUpdateContentDirectOK, *SingleAdminUpdateContentDirectBadRequest, *SingleAdminUpdateContentDirectUnauthorized, *SingleAdminUpdateContentDirectNotFound, *SingleAdminUpdateContentDirectInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSingleAdminUpdateContentDirectParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SingleAdminUpdateContentDirect",
		Method:             "PUT",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents/{contentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SingleAdminUpdateContentDirectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *SingleAdminUpdateContentDirectOK:
		return v, nil, nil, nil, nil, nil
	case *SingleAdminUpdateContentDirectBadRequest:
		return nil, v, nil, nil, nil, nil
	case *SingleAdminUpdateContentDirectUnauthorized:
		return nil, nil, v, nil, nil, nil
	case *SingleAdminUpdateContentDirectNotFound:
		return nil, nil, nil, v, nil, nil
	case *SingleAdminUpdateContentDirectInternalServerError:
		return nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
  SingleAdminUpdateContentS3 updates content to s3 bucket

  Required permission <b>ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]</b>.\n
						All request body are required except payload, preview, and tags.
*/
func (a *Client) SingleAdminUpdateContentS3(params *SingleAdminUpdateContentS3Params, authInfo runtime.ClientAuthInfoWriter) (*SingleAdminUpdateContentS3OK, *SingleAdminUpdateContentS3BadRequest, *SingleAdminUpdateContentS3Unauthorized, *SingleAdminUpdateContentS3NotFound, *SingleAdminUpdateContentS3InternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSingleAdminUpdateContentS3Params()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SingleAdminUpdateContentS3",
		Method:             "PUT",
		PathPattern:        "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents/s3/{contentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SingleAdminUpdateContentS3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}

	switch v := result.(type) {

	case *SingleAdminUpdateContentS3OK:
		return v, nil, nil, nil, nil, nil
	case *SingleAdminUpdateContentS3BadRequest:
		return nil, v, nil, nil, nil, nil
	case *SingleAdminUpdateContentS3Unauthorized:
		return nil, nil, v, nil, nil, nil
	case *SingleAdminUpdateContentS3NotFound:
		return nil, nil, nil, v, nil, nil
	case *SingleAdminUpdateContentS3InternalServerError:
		return nil, nil, nil, nil, v, nil
	default:
		return nil, nil, nil, nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
