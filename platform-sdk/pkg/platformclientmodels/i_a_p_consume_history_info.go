// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IAPConsumeHistoryInfo i a p consume history info
//
// swagger:model IAPConsumeHistoryInfo
type IAPConsumeHistoryInfo struct {

	// client request parameter
	ClientRequestParameter *ClientRequestParameter `json:"clientRequestParameter,omitempty"`

	// consume items
	ConsumeItems []*ConsumeItem `json:"consumeItems"`

	// iap type
	// Enum: [APPLE EPICGAMES GOOGLE PLAYSTATION STADIA STEAM TWITCH XBOX]
	IapType string `json:"iapType,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// request body
	RequestBody interface{} `json:"requestBody,omitempty"`

	// request histories
	RequestHistories []*RequestHistory `json:"requestHistories"`

	// request Url
	RequestURL string `json:"requestUrl,omitempty"`

	// status
	// Enum: [FAIL PENDING SUCCESS]
	Status string `json:"status,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// Validate validates this i a p consume history info
func (m *IAPConsumeHistoryInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientRequestParameter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsumeItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIapType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestHistories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IAPConsumeHistoryInfo) validateClientRequestParameter(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientRequestParameter) { // not required
		return nil
	}

	if m.ClientRequestParameter != nil {
		if err := m.ClientRequestParameter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientRequestParameter")
			}
			return err
		}
	}

	return nil
}

func (m *IAPConsumeHistoryInfo) validateConsumeItems(formats strfmt.Registry) error {

	if swag.IsZero(m.ConsumeItems) { // not required
		return nil
	}

	for i := 0; i < len(m.ConsumeItems); i++ {
		if swag.IsZero(m.ConsumeItems[i]) { // not required
			continue
		}

		if m.ConsumeItems[i] != nil {
			if err := m.ConsumeItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consumeItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var iAPConsumeHistoryInfoTypeIapTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["APPLE","EPICGAMES","GOOGLE","PLAYSTATION","STADIA","STEAM","TWITCH","XBOX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iAPConsumeHistoryInfoTypeIapTypePropEnum = append(iAPConsumeHistoryInfoTypeIapTypePropEnum, v)
	}
}

const (

	// IAPConsumeHistoryInfoIapTypeAPPLE captures enum value "APPLE"
	IAPConsumeHistoryInfoIapTypeAPPLE string = "APPLE"

	// IAPConsumeHistoryInfoIapTypeEPICGAMES captures enum value "EPICGAMES"
	IAPConsumeHistoryInfoIapTypeEPICGAMES string = "EPICGAMES"

	// IAPConsumeHistoryInfoIapTypeGOOGLE captures enum value "GOOGLE"
	IAPConsumeHistoryInfoIapTypeGOOGLE string = "GOOGLE"

	// IAPConsumeHistoryInfoIapTypePLAYSTATION captures enum value "PLAYSTATION"
	IAPConsumeHistoryInfoIapTypePLAYSTATION string = "PLAYSTATION"

	// IAPConsumeHistoryInfoIapTypeSTADIA captures enum value "STADIA"
	IAPConsumeHistoryInfoIapTypeSTADIA string = "STADIA"

	// IAPConsumeHistoryInfoIapTypeSTEAM captures enum value "STEAM"
	IAPConsumeHistoryInfoIapTypeSTEAM string = "STEAM"

	// IAPConsumeHistoryInfoIapTypeTWITCH captures enum value "TWITCH"
	IAPConsumeHistoryInfoIapTypeTWITCH string = "TWITCH"

	// IAPConsumeHistoryInfoIapTypeXBOX captures enum value "XBOX"
	IAPConsumeHistoryInfoIapTypeXBOX string = "XBOX"
)

// prop value enum
func (m *IAPConsumeHistoryInfo) validateIapTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, iAPConsumeHistoryInfoTypeIapTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IAPConsumeHistoryInfo) validateIapType(formats strfmt.Registry) error {

	if swag.IsZero(m.IapType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIapTypeEnum("iapType", "body", m.IapType); err != nil {
		return err
	}

	return nil
}

func (m *IAPConsumeHistoryInfo) validateRequestHistories(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestHistories) { // not required
		return nil
	}

	for i := 0; i < len(m.RequestHistories); i++ {
		if swag.IsZero(m.RequestHistories[i]) { // not required
			continue
		}

		if m.RequestHistories[i] != nil {
			if err := m.RequestHistories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requestHistories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var iAPConsumeHistoryInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FAIL","PENDING","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iAPConsumeHistoryInfoTypeStatusPropEnum = append(iAPConsumeHistoryInfoTypeStatusPropEnum, v)
	}
}

const (

	// IAPConsumeHistoryInfoStatusFAIL captures enum value "FAIL"
	IAPConsumeHistoryInfoStatusFAIL string = "FAIL"

	// IAPConsumeHistoryInfoStatusPENDING captures enum value "PENDING"
	IAPConsumeHistoryInfoStatusPENDING string = "PENDING"

	// IAPConsumeHistoryInfoStatusSUCCESS captures enum value "SUCCESS"
	IAPConsumeHistoryInfoStatusSUCCESS string = "SUCCESS"
)

// prop value enum
func (m *IAPConsumeHistoryInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, iAPConsumeHistoryInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IAPConsumeHistoryInfo) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IAPConsumeHistoryInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IAPConsumeHistoryInfo) UnmarshalBinary(b []byte) error {
	var res IAPConsumeHistoryInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
