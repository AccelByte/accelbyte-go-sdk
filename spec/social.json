{
  "swagger": "2.0",
  "info": {
    "description": "Justice Social Service",
    "version": "1.18.1",
    "title": "justice-social-service",
    "contact": {
      "name": "Engineering Team at AccelByte",
      "url": "https://accelbyte.io",
      "email": "engineering@accelbyte.io"
    }
  },
  "basePath": "/social",
  "tags": [
    {
      "name": "GameProfile"
    },
    {
      "name": "GlobalStatistic"
    },
    {
      "name": "UserStatistic"
    },
    {
      "name": "StatConfiguration"
    },
    {
      "name": "SlotConfig"
    },
    {
      "name": "Slot"
    }
  ],
  "paths": {
    "/admin/namespaces/{namespace}/users/{userId}/profiles": {
      "get": {
        "tags": [
          "GameProfile"
        ],
        "summary": "Returns all profiles' header for a user",
        "description": "Returns all profiles' header for a user.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE\", action=2 (READ)</li><li><i>Returns</i>: list of profiles</li></ul>",
        "operationId": "getUserProfiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GameProfileHeader"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/profiles/{profileId}": {
      "get": {
        "tags": [
          "GameProfile"
        ],
        "summary": "Returns profile for a user",
        "description": "Returns profile for a user.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE\", action=2 (READ)</li><li><i>Returns</i>: game profile info</li></ul>",
        "operationId": "getProfile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "path",
            "description": "Game profile ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GameProfileInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12041</td><td>Game profile with id [{profileId}] is not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/profiles": {
      "get": {
        "tags": [
          "GameProfile"
        ],
        "summary": "Returns all profiles' header for a user",
        "description": "Returns all profiles' header for a user.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE\", action=2 (READ)</li><li><i>Returns</i>: list of profiles</li></ul>",
        "operationId": "publicGetUserProfiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GameProfileHeader"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE",
          "action": "2"
        }
      },
      "post": {
        "tags": [
          "GameProfile"
        ],
        "summary": "Create a new profile for user",
        "description": "Create new profile for user.<br>Other detail info:<ul><li><i>Required permission</li>: resource=\"NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE\", action=1 (CREATE)</li><li><i>Returns</li>: created game profile</li></ul>",
        "operationId": "publicCreateProfile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GameProfileRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Profile has been created"
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE",
          "action": "1"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/profiles/{profileId}/attributes/{attributeName}": {
      "get": {
        "tags": [
          "GameProfile"
        ],
        "summary": "Returns game profile attribute",
        "description": "Returns game profile attribute.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE\", action=2 (READ)</li><li><i>Returns</i>: attribute info</li></ul>",
        "operationId": "publicGetProfileAttribute",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "path",
            "description": "Game profile ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "Attribute Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12041</td><td>Game profile with id [{profileId}] is not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "GameProfile"
        ],
        "summary": "Updates game profile attribute",
        "description": "Updates game profile attribute, returns updated profile.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE\", action=4 (UPDATE)</li><li><i>Returns</i>: updated attribute</li></ul>",
        "operationId": "publicUpdateAttribute",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "path",
            "description": "Game profile ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "Attribute Name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Attribute"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GameProfileInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12022</td><td>Game profile attribute name [{attrName1}] passed in request url mismatch the name [{attrName2}] in body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12041</td><td>Game profile with id [{profileId}] is not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE",
          "action": "8"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/profiles/{profileId}": {
      "get": {
        "tags": [
          "GameProfile"
        ],
        "summary": "Returns profile for a user",
        "description": "Returns profile for a user.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE\", action=2 (READ)</li><li><i>Returns</i>: game profile info</li></ul>",
        "operationId": "publicGetProfile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "path",
            "description": "Game profile ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GameProfileInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12041</td><td>Game profile with id [{profileId}] is not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "GameProfile"
        ],
        "summary": "Updates user game profile",
        "description": "Updates user game profile, returns updated profile.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE\", action=4 (UPDATE)</li><li><i>Returns</i>: updated game profile</li></ul>",
        "operationId": "publicUpdateProfile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "path",
            "description": "Game profile ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GameProfileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GameProfileInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12041</td><td>Game profile with id [{profileId}] is not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "GameProfile"
        ],
        "summary": "Deletes game profile",
        "description": "Deletes game profile.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE\", action=8 (DELETE)</li></ul>",
        "operationId": "publicDeleteProfile",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "path",
            "description": "Game profile ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Game profile has been deleted"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12041</td><td>Game profile with id [{profileId}] is not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:GAMEPROFILE",
          "action": "8"
        }
      }
    },
    "/public/namespaces/{namespace}/profiles": {
      "get": {
        "tags": [
          "GameProfile"
        ],
        "summary": "Returns all profiles for specified users",
        "description": "Returns all profiles for specified users.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:GAMEPROFILE\", action=2 (READ)\n<li><i>Returns</i>: list of profiles</ul>",
        "operationId": "publicGetUserGameProfiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userIds",
            "in": "query",
            "description": "User IDs",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserGameProfiles"
              }
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12021</td><td>{totalUser} users is requested. Cannot retrieve more than {limitUser} users at once</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:GAMEPROFILE",
          "action": "2"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/globalstatitems": {
      "get": {
        "tags": [
          "GlobalStatistic"
        ],
        "summary": "List global statItems",
        "description": "List global statItems by pagination.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STATITEM\", action=2 (READ)</li><li><i>Returns</i>: stat items</li>ul",
        "operationId": "getGlobalStatItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GlobalStatItemPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STATITEM",
          "action": "2"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/statitems/value/bulk": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Bulk update multiple user's statitems value",
        "description": "Bulk update multiple user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STATITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li></ul>",
        "operationId": "bulkIncUserStatItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkUserStatItemInc"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STATITEM",
          "action": "4"
        }
      },
      "patch": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Bulk update multiple user's statitems value",
        "description": "Bulk update multiple user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STATITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li></ul>",
        "operationId": "bulkIncUserStatItemValue",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkUserStatItemInc"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/statitems/bulk": {
      "get": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Bulk fetch statitems value",
        "description": "Bulk fetch multiple user's statitem value for a given namespace and statCode.  \nOther detail info:\n+ *Required permission*: resource=\"ADMIN:NAMESPACE:{namespace}:STATITEM\", action=2 (READ)\n+ *Returns*: list of user's statItem",
        "operationId": "bulkFetchStatItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "query",
            "description": "stat code",
            "required": true,
            "type": "string"
          },
          {
            "name": "userIds",
            "in": "query",
            "description": "comma separated user Ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserStatItemInfo"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STATITEM",
          "action": "2"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/statitems/value/reset/bulk": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Bulk reset multiple user's statitems value",
        "description": "Bulk reset multiple user's statitems value.\nUser's statitem value will be reset to the default value defined in the statistic configuration.\n\nOther detail info:\n+ *Required permission*: resource=\"ADMIN:NAMESPACE:{namespace}:STATITEM\", action=4 (UPDATE)\n+ *Returns*: bulk updated result",
        "operationId": "bulkResetUserStatItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkUserStatItemReset"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/stats/{statCode}": {
      "get": {
        "tags": [
          "StatConfiguration"
        ],
        "summary": "Get stat by statCode",
        "description": "Get stat by statCode.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STAT\", action=2 (READ)</li><li><i>Returns</i>: stat info</ul>",
        "operationId": "getStat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat Code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StatInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12241</td><td>Stat [{statCode}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STAT",
          "action": "2"
        }
      },
      "delete": {
        "tags": [
          "StatConfiguration"
        ],
        "summary": "Deletes stat",
        "description": "Deletes stat template.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STAT\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteStat",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful delete of stat"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12241</td><td>Stat [{statCode}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STAT",
          "action": "8"
        }
      },
      "patch": {
        "tags": [
          "StatConfiguration"
        ],
        "summary": "Update stat",
        "description": "Update stat.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STAT\", action=4 (UPDATE)</li><li><i>Returns</i>: updated stat</li></ul>",
        "operationId": "updateStat",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat code",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StatUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful update of stat",
            "schema": {
              "$ref": "#/definitions/StatInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12241</td><td>Stat [{statCode}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STAT",
          "action": "4"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/stats": {
      "get": {
        "tags": [
          "StatConfiguration"
        ],
        "summary": "List stats",
        "description": "List stats by pagination.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STAT\", action=2 (READ)</li><li><i>Returns</i>: stats</li></ul>",
        "operationId": "getStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StatPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STAT",
          "action": "2"
        }
      },
      "post": {
        "tags": [
          "StatConfiguration"
        ],
        "summary": "Create stat",
        "description": "Create stat.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STAT\", action=1 (CREATE)</li><li><i>Returns</i>: created stat template</li></ul>",
        "operationId": "createStat",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StatCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create stat successfully",
            "schema": {
              "$ref": "#/definitions/StatInfo"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12271</td><td>Stat template with code [{statCode}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STAT",
          "action": "1"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/stats/search": {
      "get": {
        "tags": [
          "StatConfiguration"
        ],
        "summary": "Query stats by keyword",
        "description": "Query stats stats by keyword.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STAT\", action=2 (READ)</li><li><i>Returns<i>: stats</li></ul>",
        "operationId": "queryStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "keyword",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StatPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STAT",
          "action": "2"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/stats/export": {
      "get": {
        "tags": [
          "StatConfiguration"
        ],
        "summary": "Export all stat configurations",
        "description": "Export all stat configurations for a given namespace into file  At current, only JSON file is supported.<p>Other detail info:<ul><li><i>*Required permission*: resource=\"ADMIN:NAMESPACE:{namespace}:STAT\", action=2 (READ)</li></ul>",
        "operationId": "exportStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful export of stat configs"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STAT",
          "action": "2"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/stats/import": {
      "post": {
        "tags": [
          "StatConfiguration"
        ],
        "summary": "Import stat configurations",
        "description": "Import stat configurations for a given namespace from file. At current, only JSON file is supported.<p>Other detail info:<ul><li><i>*Required permission*: resource=\"ADMIN:NAMESPACE:{namespace}:STAT\", action=1 (CREATE)</li></ul>",
        "operationId": "importStats",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "replaceExisting",
            "in": "query",
            "description": "replaceExisting",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StatImportInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>70138</td><td>Stats data for namespace [{namespace}] is invalid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STAT",
          "action": "1"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/users/{userId}/statitems/value/bulk": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Bulk update user's statitems value",
        "description": "Bulk update user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li></ul>",
        "operationId": "bulkIncUserStatItem_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemInc"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      },
      "patch": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Bulk update user's statitems value",
        "description": "Bulk update user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li></ul>",
        "operationId": "bulkIncUserStatItemValue_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemInc"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/users/{userId}/statitems": {
      "get": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "List user's statItems",
        "description": "List user's statItems.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=2 (READ)</li><li><i>Returns</i>: stat items</li></ul>",
        "operationId": "getUserStatItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCodes",
            "in": "query",
            "description": "stat codes",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "tags",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserStatItemPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "2"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/users/{userId}/statitems/bulk": {
      "post": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Bulk create user's statItems",
        "description": "Bulk create user's statItems.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=1 (CREATE)</li><li><i>Returns</i>: bulk created result</li>",
        "operationId": "bulkCreateUserStatItems",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemCreate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "1"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/users/{userId}/statitems/value/reset/bulk": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Bulk reset user's statitems value",
        "description": "Bulk reset user's statitems value for given namespace and user.  \nOther detail info:\n+ *Required permission*: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)\n+ *Returns*: bulk updated result",
        "operationId": "bulkResetUserStatItem_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemReset"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems": {
      "post": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Create user's statItem",
        "description": "Create statItem for a user.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=1 (CREATE)</li><li><i>Returns</i>: created user's statItem</li></ul>",
        "operationId": "createUserStatItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Create user statItem successfully"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12241</td><td>Stat [{statCode}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12274</td><td>Stat item with code [{statCode}] of user [{profileId}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "1"
        }
      },
      "delete": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Delete User's statItems",
        "description": "This endpoint is for testing purpose. Use this endpoint for cleaning up after testing.<br>Delete user's statItems given stat code.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=8 (DELETE)</li><li><i>Returns</i>: no content</li></li>",
        "operationId": "deleteUserStatItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "delete successfully"
          },
          "401": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12242</td><td>Stat item of [{statCode}] of user [{profileId}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "8"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems/value/reset": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Reset user's statitem value",
        "description": "Reset user's statitem value for a given namespace and user.\nUser's statitem value will be reset to the default value defined in the statistic configuration.\n\nOther detail info:\n+ *Required permission*: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)\n+ *Returns*: updated user's statItem",
        "operationId": "resetUserStatItemValue",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat code",
            "required": true,
            "type": "string"
          },
          {
            "name": "additionalKey",
            "in": "query",
            "description": "additional key",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StatResetInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StatItemIncResult"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>12221</td><td>Invalid stat operator, expect [{expected}] but actual [{actual}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>12241</td><td>Stat [{statCode}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v1/admin/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems/value": {
      "patch": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Update user's statitem value",
        "description": "Update user's statitem value.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated user's statItem</li></ul>",
        "operationId": "incUserStatItemValue",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat code",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StatItemInc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StatItemIncResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12221</td><td>Invalid stat operator, expect [{expected}] but actual [{actual}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12241</td><td>Stat [{statCode}] cannot be found in namespace [{namespace}]</td></tr><tr><td>12242</td><td>Stat item of [{statCode}] of user [{profileId}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12273</td><td>Stat [{statCode}] is not decreasable</td></tr><tr><td>12275</td><td>[{action}] value: [{value}] of stat [{statCode}]  is out of range while minimum [{minimum}] and maximum [{maximum}] in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v1/public/namespaces/{namespace}/statitems/value/bulk": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Public bulk update multiple user's statitems value",
        "description": "Public bulk update multiple user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:STATITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li></ul>",
        "operationId": "publicBulkIncUserStatItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkUserStatItemInc"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:STATITEM",
          "action": "4"
        }
      },
      "patch": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Public bulk update multiple user's statitems value",
        "description": "Public bulk update multiple user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:STATITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li></ul>",
        "operationId": "publicBulkIncUserStatItemValue",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkUserStatItemInc"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v1/public/namespaces/{namespace}/statitems/bulk": {
      "get": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Public bulk fetch statitems value",
        "description": "Public bulk fetch multiple user's statitem value for a given namespace and statCode.  \nOther detail info:\n+ *Required permission*: resource=\"NAMESPACE:{namespace}:STATITEM\", action=2 (READ)\n+ *Returns*: list of user's statItem",
        "operationId": "bulkFetchStatItems_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "query",
            "description": "stat code",
            "required": true,
            "type": "string"
          },
          {
            "name": "userIds",
            "in": "query",
            "description": "comma separated user Ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserStatItemInfo"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:STATITEM",
          "action": "2"
        }
      }
    },
    "/v1/public/namespaces/{namespace}/statitems/value/reset/bulk": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Public bulk reset multiple user's statitems value",
        "description": "Bulk reset multiple user's statitems value. \nUser's statitem value will be reset to the default value defined in the statistic configuration.\n\nOther detail info:\n+ *Required permission*: resource=\"NAMESPACE:{namespace}:STATITEM\", action=4 (UPDATE)\n+ *Returns*: bulk updated result",
        "operationId": "bulkResetUserStatItem_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkUserStatItemReset"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v1/public/namespaces/{namespace}/stats": {
      "post": {
        "tags": [
          "StatConfiguration"
        ],
        "summary": "Create stat",
        "description": "Create stat.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:STAT\", action=1 (CREATE)</li><li><i>Returns</i>: created stat template</li></ul>",
        "operationId": "createStat_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StatCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create stat successfully",
            "schema": {
              "$ref": "#/definitions/StatInfo"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12271</td><td>Stat template with code [{statCode}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:STAT",
          "action": "1"
        }
      }
    },
    "/v1/public/namespaces/{namespace}/users/{userId}/statitems/value/bulk": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Public bulk update user's statitems value",
        "description": "Public bulk update user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li></ul>",
        "operationId": "publicBulkIncUserStatItem_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemInc"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      },
      "patch": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Public bulk update user's statitems value",
        "description": "Public bulk update user's statitems value.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: bulk updated result</li>",
        "operationId": "bulkIncUserStatItemValue_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemInc"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v1/public/namespaces/{namespace}/users/{userId}/statitems": {
      "get": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Public list user's statItems",
        "description": "Public list all statItems by pagination.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=2 (READ)</li><li><i>Returns</i>: stat items</li></ul>",
        "operationId": "publicQueryUserStatItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCodes",
            "in": "query",
            "description": "stat codes",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "tags",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserStatItemPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "2"
        }
      }
    },
    "/v1/public/namespaces/{namespace}/users/{userId}/statitems/bulk": {
      "post": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Bulk create user's statItems",
        "description": "Bulk create statItems.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=1 (CREATE)</li><li><i>Returns</i>: bulk created result</li></ul>",
        "operationId": "publicBulkCreateUserStatItems",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemCreate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "1"
        }
      }
    },
    "/v1/public/namespaces/{namespace}/users/{userId}/statitems/value/reset/bulk": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Public bulk reset user's statitems value",
        "description": "Public bulk reset user's statitems value for given namespace and user.  \nOther detail info:\n+ *Required permission*: resource=\"NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)\n+ *Returns*: bulk updated result",
        "operationId": "bulkResetUserStatItem_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemReset"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v1/public/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems/value": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Public update user's statitem value",
        "description": "Public update user's statitem value.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated user's statItem</li></ul>",
        "operationId": "publicIncUserStatItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat code",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StatItemInc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StatItemIncResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12221</td><td>Invalid stat operator, expect [{expected}] but actual [{actual}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12241</td><td>Stat [{statCode}] cannot be found in namespace [{namespace}]</td></tr><tr><td>12242</td><td>Stat item of [{statCode}] of user [{profileId}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12273</td><td>Stat [{statCode}] is not decreasable</td></tr><tr><td>12275</td><td>[{action}] value: [{value}] of stat [{statCode}]  is out of range while minimum [{minimum}] and maximum [{maximum}] in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      },
      "patch": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Public update user's statitem value",
        "description": "Public update user's statitem value.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated user's statItem</li></ul>",
        "operationId": "publicIncUserStatItemValue",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat code",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StatItemInc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StatItemIncResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12221</td><td>Invalid stat operator, expect [{expected}] but actual [{actual}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12241</td><td>Stat [{statCode}] cannot be found in namespace [{namespace}]</td></tr><tr><td>12242</td><td>Stat item of [{statCode}] of user [{profileId}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12273</td><td>Stat [{statCode}] is not decreasable</td></tr><tr><td>12275</td><td>[{action}] value: [{value}] of stat [{statCode}]  is out of range while minimum [{minimum}] and maximum [{maximum}] in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v1/public/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems": {
      "post": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Create user's statItem",
        "description": "Create user's statItem.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=1 (CREATE)</li><li><i>Returns</i>: created user's statItem</li></ul>",
        "operationId": "publicCreateUserStatItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Create user statItem successfully"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12241</td><td>Stat [{statCode}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12274</td><td>Stat item with code [{statCode}] of user [{profileId}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "1"
        }
      },
      "delete": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Delete User's statItems",
        "description": "Delete user's statItems given stat code.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=8 (DELETE)</li><li><i>Returns</i>: no content</li></li>",
        "operationId": "deleteUserStatItems_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "delete successfully"
          },
          "401": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12242</td><td>Stat item of [{statCode}] of user [{profileId}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "8"
        }
      }
    },
    "/v1/public/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems/value/reset": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Public reset user's statitem value",
        "description": "Reset user's statitem value for a given namespace and user.\nUser's statitem value will be reset to the default value defined in the statistic configuration.\n\nOther detail info:\n+ *Required permission*: resource=\"NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)\n+ *Returns*: updated user's statItem",
        "operationId": "resetUserStatItemValue_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StatItemIncResult"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>12221</td><td>Invalid stat operator, expect [{expected}] but actual [{actual}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>12241</td><td>Stat [{statCode}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v2/admin/namespaces/{namespace}/statitems/value/bulk": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Bulk update multiple user's statitems value",
        "description": "Bulk update multiple user's statitems value with specific update strategy.  \nThere are four supported update strategies:\n+ *OVERRIDE*: update user statitem with the new value\n+ *INCREMENT*: increment user statitem with the specified value\n+ *MAX*: update user statitem with the specified value if it's larger than the existing value\n+ *MIN*: update user statitem with the specified value if it's lower than the existing value\n\nOther detail info:\n+ *Required permission*: resource=\"ADMIN:NAMESPACE:{namespace}:STATITEM\", action=4 (UPDATE)\n+ *Returns*: bulk updated result",
        "operationId": "bulkUpdateUserStatItemV2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkUserStatItemUpdate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v2/admin/namespaces/{namespace}/users/{userId}/statitems/value/bulk": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Bulk update user's statitems value",
        "description": "Bulk update user's statitems value for given namespace and user with specific update strategy.  \nThere are four supported update strategies:\n+ *OVERRIDE*: update user statitem with the new value\n+ *INCREMENT*: increment user statitem with the specified value\n+ *MAX*: update user statitem with the specified value if it's larger than the existing value\n+ *MIN*: update user statitem with the specified value if it's lower than the existing value\n\nThe *additionalKey* parameter will be suffixed to *userId* and is used to support multi level user's statitems, such as character's statitems. \nIf provided, user's statitems will be saved with key: *userId_additionalKey* \n\nOther detail info:\n+ *Required permission*: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)\n+ *Returns*: bulk updated result",
        "operationId": "bulkUpdateUserStatItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "additionalKey",
            "in": "query",
            "description": "additional key",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemUpdate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v2/admin/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems/value": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Update user's statitem value",
        "description": "Update user's statitem value for a given namespace and user with a certain update strategy.\nThere are four supported update strategies:\n+ *OVERRIDE*: update user statitem with the new value\n+ *INCREMENT*: increment user statitem with the specified value\n+ *MAX*: update user statitem with the specified value if it's larger than the existing value\n+ *MIN*: update user statitem with the specified value if it's lower than the existing value\n\nThe *additionalKey* parameter will be suffixed to *userId* and is used to support multi level user's statitems, such as character's statitems. \nIf provided, user's statitems will be saved with key: *userId_additionalKey* \n\nOther detail info:\n+ *Required permission*: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)\n+ *Returns*: updated user's statItem",
        "operationId": "updateUserStatItemValue",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat code",
            "required": true,
            "type": "string"
          },
          {
            "name": "additionalKey",
            "in": "query",
            "description": "additional key",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StatItemUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StatItemIncResult"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>12221</td><td>Invalid stat operator, expect [{expected}] but actual [{actual}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>12241</td><td>Stat [{statCode}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12273</td><td>Stat [{statCode}] is not decreasable</td></tr><tr><td>12275</td><td>[{action}] value: [{value}] of stat [{statCode}] is out of range while minimum [{minimum}] and maximum [{maximum}] in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v2/admin/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems": {
      "delete": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Delete User's statItems",
        "description": "Delete user's stat items for given namespace, statCode, and user Id. \nIf query param *additionalKey* is provided, it will delete user stat items of specific key (i.e. characterName). \nOtherwise, it will delete all stat items related to the user Id. \n<br>Delete user's statItems given stat code.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=8 (DELETE)</li><li><i>Returns</i>: no content</li></li>",
        "operationId": "deleteUserStatItems_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat code",
            "required": true,
            "type": "string"
          },
          {
            "name": "additionalKey",
            "in": "query",
            "description": "additional key",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "delete successfully"
          },
          "401": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12242</td><td>Stat item of [{statCode}] of user [{profileId}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "8"
        }
      }
    },
    "/v2/public/namespaces/{namespace}/statitems/value/bulk": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Public bulk update multiple user's statitems value",
        "description": "Public bulk update multiple user's statitems value with specific update strategy.  \nThere are four supported update strategies:\n+ *OVERRIDE*: update user statitem with the new value\n+ *INCREMENT*: increment user statitem with the specified value\n+ *MAX*: update user statitem with the specified value if it's larger than the existing value\n+ *MIN*: update user statitem with the specified value if it's lower than the existing value\n\nOther detail info:\n+ *Required permission*: resource=\"NAMESPACE:{namespace}:STATITEM\", action=4 (UPDATE)\n+ *Returns*: bulk updated result",
        "operationId": "bulkUpdateUserStatItem_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkUserStatItemUpdate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v2/public/namespaces/{namespace}/users/{userId}/statitems/value/bulk": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Public bulk update user's statitems value",
        "description": "Public bulk update user's statitems value for given namespace and user with specific update strategy.  \nThere are four supported update strategies:\n+ *OVERRIDE*: update user statitem with the new value\n+ *INCREMENT*: increment user statitem with the specified value\n+ *MAX*: update user statitem with the specified value if it's larger than the existing value\n+ *MIN*: update user statitem with the specified value if it's lower than the existing value\n\nThe *additionalKey* parameter will be suffixed to *userId* and is used to support multi level user's statitems, such as character's statitems. \nIf provided, user's statitems will be saved with key: *userId_additionalKey* \n\nOther detail info:\n+ *Required permission*: resource=\"NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)\n+ *Returns*: bulk updated result",
        "operationId": "bulkUpdateUserStatItem_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "additionalKey",
            "in": "query",
            "description": "additional key",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemUpdate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkStatItemOperationResult"
              }
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      }
    },
    "/v2/public/namespaces/{namespace}/users/{userId}/stats/{statCode}/statitems/value": {
      "put": {
        "tags": [
          "UserStatistic"
        ],
        "summary": "Public update user's statitem value",
        "description": "Public update user's statitem value for a given namespace and user with a certain update strategy. \nThere are four supported update strategies:\n+ *OVERRIDE*: update user statitem with the new value\n+ *INCREMENT*: increment user statitem with the specified value\n+ *MAX*: update user statitem with the specified value if it's larger than the existing value\n+ *MIN*: update user statitem with the specified value if it's lower than the existing value\n\nThe *additionalKey* parameter will be suffixed to *userId* and is used to support multi level user's statitems, such as character's statitems. \nIf provided, user's statitems will be saved with key: *userId_additionalKey* \n\nOther detail info:\n+ *Required permission*: resource=\"NAMESPACE:{namespace}:USER:{userId}:STATITEM\", action=4 (UPDATE)\n+ *Returns*: updated user's statItem",
        "operationId": "updateUserStatItemValue_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "statCode",
            "in": "path",
            "description": "stat code",
            "required": true,
            "type": "string"
          },
          {
            "name": "additionalKey",
            "in": "query",
            "description": "additional key",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StatItemUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StatItemIncResult"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>12221</td><td>Invalid stat operator, expect [{expected}] but actual [{actual}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>12241</td><td>Stat [{statCode}] cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12273</td><td>Stat [{statCode}] is not decreasable</td></tr><tr><td>12275</td><td>[{action}] value: [{value}] of stat [{statCode}] is out of range while minimum [{minimum}] and maximum [{maximum}] in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:STATITEM",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/config": {
      "get": {
        "tags": [
          "SlotConfig"
        ],
        "summary": "Returns a namespace slot configuration",
        "description": "Get slot configuration for a given namespace. In case slot configuration is not set, the default will be returned.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:SLOTCONFIG\", action=2 (READ)</li><li><i>Returns</i>: namespace slot config info</li></ul>",
        "operationId": "getNamespaceSlotConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NamespaceSlotConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:SLOTCONFIG",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "SlotConfig"
        ],
        "summary": "Update a namespace slot configuration",
        "description": "Update a slot namespace configuration.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:SLOTCONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated namespace slot config</li></ul>",
        "operationId": "updateNamespaceSlotConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SlotConfigUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NamespaceSlotConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:SLOTCONFIG",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "SlotConfig"
        ],
        "summary": "Deletes a namespace slot configuration",
        "description": "Deletes a namespace slot configuration, the configuration will be default after delete.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:SLOTCONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteNamespaceSlotConfig",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful delete of namespace slot config"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:SLOTCONFIG",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/slots/{slotId}": {
      "get": {
        "tags": [
          "Slot"
        ],
        "summary": "Returns slot data",
        "description": "Get slot data.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SLOTDATA\", action=2 (READ)</li><li><i>Returns</i>: slot data</li></ul>",
        "operationId": "getSlotData",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Slot ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Slot data",
            "schema":{
              "type":"string",
              "format": "binary"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Slot [{slotId}] not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SLOTDATA",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/slots": {
      "get": {
        "tags": [
          "Slot"
        ],
        "summary": "Returns list of slots for given user",
        "description": "Get slots for a given user.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SLOTDATA\", action=2 (READ)</li><li><i>Returns</i>: list of slots</li></ul>",
        "operationId": "getUserNamespaceSlots",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SlotInfo"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SLOTDATA",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/config": {
      "get": {
        "tags": [
          "SlotConfig"
        ],
        "summary": "Returns a user slot configuration",
        "description": "Get a user slot configuration in given namespace. In case the user slot configuration is not set, the namespace configuration will be returned.<br>Other detail info:<ul><li>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SLOTCONFIG\", action=2 (READ)</li><li>Returns</i>: slot config info</li>",
        "operationId": "getUserSlotConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserSlotConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SLOTCONFIG",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "SlotConfig"
        ],
        "summary": "Update a user slot configuration",
        "description": "Update a user slot configuration in given namespace.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SLOTCONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated slot config</li>",
        "operationId": "updateUserSlotConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SlotConfigUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserSlotConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SLOTCONFIG",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "SlotConfig"
        ],
        "summary": "Deletes a user slot configuration",
        "description": "Deletes a user slot configuration in given namespace, the namespace slot configuration will be returned after delete.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SLOTCONFIG\", action=8 (DELETE)</li></li>",
        "operationId": "deleteUserSlotConfig",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful delete of user/namespace slot config"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SLOTCONFIG",
          "action": "8"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/slots/{slotId}": {
      "get": {
        "tags": [
          "Slot"
        ],
        "summary": "Returns slot data",
        "description": "Get slot data.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:SLOTDATA\", action=2 (READ)</li><li><i>Returns</i>: slot data</li></ul>",
        "operationId": "publicGetSlotData",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Slot ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "suscessfull operation",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Slot [{slotId}] not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SLOTDATA",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "Slot"
        ],
        "summary": "Updates a slot",
        "description": "Updates a slot.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:SLOTDATA\", action=4 (UPDATE)</li><li><i>Returns</i>: updated slot</li></ul>",
        "operationId": "publicUpdateUserNamespaceSlot",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Slot ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "label",
            "in": "query",
            "description": "Label",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Tags",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "customAttribute",
            "in": "formData",
            "description": "Custom attribute",
            "required": false,
            "type": "string"
          },
          {
            "name": "checksum",
            "in": "formData",
            "description": "File checksum",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SlotInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12121</td><td>Checksum mismatch for [{filename}]</td></tr><tr><td>12122</td><td>[{filename}] exceeds the upload limit size of [{sizeLimit}] bytes</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Slot [{slotId}] not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SLOTDATA",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "Slot"
        ],
        "summary": "Deletes the slot",
        "description": "Deletes the slot.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:SLOTDATA\", action=8 (DELETE)</li></ul>",
        "operationId": "publicDeleteUserNamespaceSlot",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Slot ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful delete of a slot"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Slot [{slotId}] not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SLOTDATA",
          "action": "8"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/slots": {
      "get": {
        "tags": [
          "Slot"
        ],
        "summary": "Returns slots for given user",
        "description": "Get list of slots for a given user in namespace.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:SLOTDATA\", action=2 (READ)</li><li><i>Returns</i>: list of slots</li></ul>",
        "operationId": "publicGetUserNamespaceSlots",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SlotInfo"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SLOTDATA",
          "action": "2"
        }
      },
      "post": {
        "tags": [
          "Slot"
        ],
        "summary": "Creates a slot",
        "description": "Creates a slot.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:SLOTDATA\", action=1 (CREATE)</li><li><i>Returns</i>: created slot info</li></ul>",
        "operationId": "publicCreateUserNamespaceSlot",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "label",
            "in": "query",
            "description": "Label",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Tags",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "customAttribute",
            "in": "formData",
            "description": "Custom attribute",
            "required": false,
            "type": "string"
          },
          {
            "name": "checksum",
            "in": "formData",
            "description": "File checksum, base64 encoded md5",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful create of a slot"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12121</td><td>Checksum mismatch for [{filename}]</td></tr><tr><td>12122</td><td>[{filename}] exceeds the upload limit size of [{sizeLimit}] bytes</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12171</td><td>User [{userId}] exceed max slot count [{maxCount}] in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SLOTDATA",
          "action": "1"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/slots/{slotId}/metadata": {
      "put": {
        "tags": [
          "Slot"
        ],
        "summary": "Updates the slot metadata",
        "description": "Updates the slot metadata.<br>Other detail info:<ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:SLOTDATA\", action=4 (UPDATE)</li><li><i>Returns</i>: updated slot</li></ul>",
        "operationId": "publicUpdateUserNamespaceSlotMetadata",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Slot ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SlotMetadataUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SlotInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Slot [{slotId}] not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SLOTDATA",
          "action": "4"
        }
      }
    }
  },
  "securityDefinitions": {
    "authorization": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "GameProfileHeader": {
      "type": "object",
      "properties": {
        "profileId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "profileName": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GameProfileInfo": {
      "type": "object",
      "properties": {
        "profileId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "profileName": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "statistics": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "achievements": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inventories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ErrorEntity": {
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "description": "numeric error code"
        },
        "errorMessage": {
          "type": "string",
          "description": "error message"
        },
        "messageVariables": {
          "type": "object",
          "description": "message variables",
          "additionalProperties": {
            "type": "string"
          }
        },
        "devStackTrace": {
          "type": "string",
          "description": "internal server error stack trace in configured environment"
        }
      }
    },
    "FieldValidationError": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorField": {
          "type": "string"
        },
        "errorValue": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "messageVariables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ValidationErrorEntity": {
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "description": "numeric error code"
        },
        "errorMessage": {
          "type": "string",
          "description": "error message"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldValidationError"
          }
        }
      }
    },
    "GameProfileRequest": {
      "type": "object",
      "properties": {
        "profileName": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "statistics": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "achievements": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inventories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Attribute": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "GameProfilePublicInfo": {
      "type": "object",
      "properties": {
        "profileId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "profileName": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        }
      }
    },
    "UserGameProfiles": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "gameProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GameProfilePublicInfo"
          }
        }
      }
    },
    "GlobalStatItemInfo": {
      "type": "object",
      "required": [
        "createdAt",
        "namespace",
        "statCode",
        "statName",
        "updatedAt",
        "value"
      ],
      "properties": {
        "statCode": {
          "type": "string"
        },
        "statName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "tags": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "GlobalStatItemPagingSlicedResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GlobalStatItemInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "Paging": {
      "type": "object",
      "properties": {
        "previous": {
          "type": "string"
        },
        "next": {
          "type": "string"
        }
      }
    },
    "BulkStatItemOperationResult": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "statCode": {
          "type": "string"
        },
        "details": {
          "type": "object"
        }
      }
    },
    "BulkUserStatItemInc": {
      "type": "object",
      "required": [
        "statCode",
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string"
        },
        "statCode": {
          "type": "string"
        },
        "inc": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "UserStatItemInfo": {
      "type": "object",
      "required": [
        "createdAt",
        "namespace",
        "statCode",
        "statName",
        "updatedAt",
        "userId",
        "value"
      ],
      "properties": {
        "statCode": {
          "type": "string"
        },
        "statName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "tags": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "BulkUserStatItemReset": {
      "type": "object",
      "required": [
        "statCode",
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string"
        },
        "statCode": {
          "type": "string"
        }
      }
    },
    "StatInfo": {
      "type": "object",
      "required": [
        "createdAt",
        "defaultValue",
        "incrementOnly",
        "name",
        "namespace",
        "setAsGlobal",
        "setBy",
        "statCode",
        "status",
        "updatedAt"
      ],
      "properties": {
        "statCode": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "INIT",
            "TIED"
          ]
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "minimum": {
          "type": "number",
          "format": "double"
        },
        "maximum": {
          "type": "number",
          "format": "double"
        },
        "defaultValue": {
          "type": "number",
          "format": "double"
        },
        "incrementOnly": {
          "type": "boolean"
        },
        "setAsGlobal": {
          "type": "boolean"
        },
        "setBy": {
          "type": "string",
          "enum": [
            "CLIENT",
            "SERVER"
          ]
        },
        "tags": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "StatUpdate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "StatPagingSlicedResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "StatCreate": {
      "type": "object",
      "required": [
        "defaultValue",
        "name",
        "setBy",
        "statCode"
      ],
      "properties": {
        "statCode": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "minimum": {
          "type": "number",
          "format": "double"
        },
        "maximum": {
          "type": "number",
          "format": "double"
        },
        "defaultValue": {
          "type": "number",
          "format": "double"
        },
        "incrementOnly": {
          "type": "boolean"
        },
        "setAsGlobal": {
          "type": "boolean"
        },
        "setBy": {
          "type": "string",
          "enum": [
            "CLIENT",
            "SERVER"
          ]
        },
        "tags": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "StatImportInfo": {
      "type": "object",
      "required": [
        "failedConfigs",
        "ignoredConfigs",
        "newConfigs",
        "replacedConfigs"
      ],
      "properties": {
        "newConfigs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "replacedConfigs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ignoredConfigs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "failedConfigs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BulkStatItemInc": {
      "type": "object",
      "required": [
        "statCode"
      ],
      "properties": {
        "statCode": {
          "type": "string"
        },
        "inc": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "UserStatItemPagingSlicedResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserStatItemInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "BulkStatItemCreate": {
      "type": "object",
      "required": [
        "statCode"
      ],
      "properties": {
        "statCode": {
          "type": "string"
        }
      }
    },
    "BulkStatItemReset": {
      "type": "object",
      "required": [
        "statCode"
      ],
      "properties": {
        "statCode": {
          "type": "string"
        }
      }
    },
    "StatItemIncResult": {
      "type": "object",
      "required": [
        "currentValue"
      ],
      "properties": {
        "currentValue": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "StatResetInfo": {
      "type": "object",
      "properties": {
        "additionalData": {
          "type": "object",
          "description": "Additional data to be published in event payload",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "StatItemInc": {
      "type": "object",
      "properties": {
        "inc": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "BulkUserStatItemUpdate": {
      "type": "object",
      "required": [
        "statCode",
        "updateStrategy",
        "userId",
        "value"
      ],
      "properties": {
        "userId": {
          "type": "string"
        },
        "additionalKey": {
          "type": "string",
          "description": "Additional key to identify multi level user's statitems, e.g. character's statitems"
        },
        "statCode": {
          "type": "string"
        },
        "updateStrategy": {
          "type": "string",
          "enum": [
            "OVERRIDE",
            "INCREMENT",
            "MAX",
            "MIN"
          ]
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "additionalData": {
          "type": "object",
          "description": "Additional data to be published in event payload",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "BulkStatItemUpdate": {
      "type": "object",
      "required": [
        "statCode",
        "updateStrategy",
        "value"
      ],
      "properties": {
        "statCode": {
          "type": "string"
        },
        "updateStrategy": {
          "type": "string",
          "enum": [
            "OVERRIDE",
            "INCREMENT",
            "MAX",
            "MIN"
          ]
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "additionalData": {
          "type": "object",
          "description": "Additional data to be published in event payload",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "StatItemUpdate": {
      "type": "object",
      "required": [
        "updateStrategy",
        "value"
      ],
      "properties": {
        "updateStrategy": {
          "type": "string",
          "enum": [
            "OVERRIDE",
            "INCREMENT",
            "MAX",
            "MIN"
          ]
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "additionalData": {
          "type": "object",
          "description": "Additional data to be published in event payload",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "NamespaceSlotConfigInfo": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "maxSlots": {
          "type": "integer",
          "format": "int32"
        },
        "maxSlotSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SlotConfigUpdate": {
      "type": "object",
      "properties": {
        "maxSlots": {
          "type": "integer",
          "format": "int32"
        },
        "maxSlotSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SlotInfo": {
      "type": "object",
      "properties": {
        "slotId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "originalName": {
          "type": "string"
        },
        "storedName": {
          "type": "string"
        },
        "mimeType": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "dateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "dateModified": {
          "type": "string",
          "format": "date-time"
        },
        "dateAccessed": {
          "type": "string",
          "format": "date-time"
        },
        "checksum": {
          "type": "string",
          "description": "base64 encoded md5"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customAttribute": {
          "type": "string"
        }
      }
    },
    "UserSlotConfigInfo": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "maxSlots": {
          "type": "integer",
          "format": "int32"
        },
        "maxSlotSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SlotMetadataUpdate": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customAttribute": {
          "type": "string"
        }
      }
    }
  }
}
