// Code generated by go-swagger; DO NOT EDIT.

package matchmaking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/matchmaking-sdk/pkg/matchmakingclientmodels"
)

// GetSingleMatchmakingChannelReader is a Reader for the GetSingleMatchmakingChannel structure.
type GetSingleMatchmakingChannelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSingleMatchmakingChannelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSingleMatchmakingChannelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSingleMatchmakingChannelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSingleMatchmakingChannelUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetSingleMatchmakingChannelForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetSingleMatchmakingChannelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetSingleMatchmakingChannelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewGetSingleMatchmakingChannelOK creates a GetSingleMatchmakingChannelOK with default headers values
func NewGetSingleMatchmakingChannelOK() *GetSingleMatchmakingChannelOK {
	return &GetSingleMatchmakingChannelOK{}
}

/*GetSingleMatchmakingChannelOK handles this case with default header values.

  OK
*/
type GetSingleMatchmakingChannelOK struct {
	Payload *matchmakingclientmodels.ModelsChannelV1
}

func (o *GetSingleMatchmakingChannelOK) Error() string {
	return fmt.Sprintf("[GET /matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}][%d] getSingleMatchmakingChannelOK  %+v", 200, o.Payload)
}

func (o *GetSingleMatchmakingChannelOK) GetPayload() *matchmakingclientmodels.ModelsChannelV1 {
	return o.Payload
}

func (o *GetSingleMatchmakingChannelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(matchmakingclientmodels.ModelsChannelV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSingleMatchmakingChannelBadRequest creates a GetSingleMatchmakingChannelBadRequest with default headers values
func NewGetSingleMatchmakingChannelBadRequest() *GetSingleMatchmakingChannelBadRequest {
	return &GetSingleMatchmakingChannelBadRequest{}
}

/*GetSingleMatchmakingChannelBadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type GetSingleMatchmakingChannelBadRequest struct {
	Payload *matchmakingclientmodels.ResponseErrorV1
}

func (o *GetSingleMatchmakingChannelBadRequest) Error() string {
	return fmt.Sprintf("[GET /matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}][%d] getSingleMatchmakingChannelBadRequest  %+v", 400, o.Payload)
}

func (o *GetSingleMatchmakingChannelBadRequest) GetPayload() *matchmakingclientmodels.ResponseErrorV1 {
	return o.Payload
}

func (o *GetSingleMatchmakingChannelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(matchmakingclientmodels.ResponseErrorV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSingleMatchmakingChannelUnauthorized creates a GetSingleMatchmakingChannelUnauthorized with default headers values
func NewGetSingleMatchmakingChannelUnauthorized() *GetSingleMatchmakingChannelUnauthorized {
	return &GetSingleMatchmakingChannelUnauthorized{}
}

/*GetSingleMatchmakingChannelUnauthorized handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>
*/
type GetSingleMatchmakingChannelUnauthorized struct {
	Payload *matchmakingclientmodels.ResponseErrorV1
}

func (o *GetSingleMatchmakingChannelUnauthorized) Error() string {
	return fmt.Sprintf("[GET /matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}][%d] getSingleMatchmakingChannelUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSingleMatchmakingChannelUnauthorized) GetPayload() *matchmakingclientmodels.ResponseErrorV1 {
	return o.Payload
}

func (o *GetSingleMatchmakingChannelUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(matchmakingclientmodels.ResponseErrorV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSingleMatchmakingChannelForbidden creates a GetSingleMatchmakingChannelForbidden with default headers values
func NewGetSingleMatchmakingChannelForbidden() *GetSingleMatchmakingChannelForbidden {
	return &GetSingleMatchmakingChannelForbidden{}
}

/*GetSingleMatchmakingChannelForbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permissions</td></tr><tr><td>20014</td><td>invalid audience</td></tr><tr><td>20015</td><td>insufficient scope</td></tr></table>
*/
type GetSingleMatchmakingChannelForbidden struct {
	Payload *matchmakingclientmodels.ResponseErrorV1
}

func (o *GetSingleMatchmakingChannelForbidden) Error() string {
	return fmt.Sprintf("[GET /matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}][%d] getSingleMatchmakingChannelForbidden  %+v", 403, o.Payload)
}

func (o *GetSingleMatchmakingChannelForbidden) GetPayload() *matchmakingclientmodels.ResponseErrorV1 {
	return o.Payload
}

func (o *GetSingleMatchmakingChannelForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(matchmakingclientmodels.ResponseErrorV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSingleMatchmakingChannelNotFound creates a GetSingleMatchmakingChannelNotFound with default headers values
func NewGetSingleMatchmakingChannelNotFound() *GetSingleMatchmakingChannelNotFound {
	return &GetSingleMatchmakingChannelNotFound{}
}

/*GetSingleMatchmakingChannelNotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>510110</td><td>channel not found</td></tr></table>
*/
type GetSingleMatchmakingChannelNotFound struct {
	Payload *matchmakingclientmodels.ResponseErrorV1
}

func (o *GetSingleMatchmakingChannelNotFound) Error() string {
	return fmt.Sprintf("[GET /matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}][%d] getSingleMatchmakingChannelNotFound  %+v", 404, o.Payload)
}

func (o *GetSingleMatchmakingChannelNotFound) GetPayload() *matchmakingclientmodels.ResponseErrorV1 {
	return o.Payload
}

func (o *GetSingleMatchmakingChannelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(matchmakingclientmodels.ResponseErrorV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSingleMatchmakingChannelInternalServerError creates a GetSingleMatchmakingChannelInternalServerError with default headers values
func NewGetSingleMatchmakingChannelInternalServerError() *GetSingleMatchmakingChannelInternalServerError {
	return &GetSingleMatchmakingChannelInternalServerError{}
}

/*GetSingleMatchmakingChannelInternalServerError handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>
*/
type GetSingleMatchmakingChannelInternalServerError struct {
	Payload *matchmakingclientmodels.ResponseErrorV1
}

func (o *GetSingleMatchmakingChannelInternalServerError) Error() string {
	return fmt.Sprintf("[GET /matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}][%d] getSingleMatchmakingChannelInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSingleMatchmakingChannelInternalServerError) GetPayload() *matchmakingclientmodels.ResponseErrorV1 {
	return o.Payload
}

func (o *GetSingleMatchmakingChannelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(matchmakingclientmodels.ResponseErrorV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
