// Code generated by go-swagger; DO NOT EDIT.

package iamclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelThirdPartyLoginPlatformCredentialResponse model third party login platform credential response
//
// swagger:model model.ThirdPartyLoginPlatformCredentialResponse
type ModelThirdPartyLoginPlatformCredentialResponse struct {

	// a c s URL
	// Required: true
	ACSURL *string `json:"ACSURL"`

	// a w s cognito region
	// Required: true
	AWSCognitoRegion *string `json:"AWSCognitoRegion"`

	// a w s cognito user pool
	// Required: true
	AWSCognitoUserPool *string `json:"AWSCognitoUserPool"`

	// app Id
	// Required: true
	AppID *string `json:"AppId"`

	// client Id
	// Required: true
	ClientID *string `json:"ClientId"`

	// environment
	// Required: true
	Environment *string `json:"Environment"`

	// federation metadata URL
	// Required: true
	FederationMetadataURL *string `json:"FederationMetadataURL"`

	// is active
	// Required: true
	IsActive *bool `json:"IsActive"`

	// key ID
	// Required: true
	KeyID *string `json:"KeyID"`

	// namespace
	// Required: true
	Namespace *string `json:"Namespace"`

	// organization Id
	// Required: true
	OrganizationID *string `json:"OrganizationId"`

	// platform Id
	// Required: true
	PlatformID *string `json:"PlatformId"`

	// redirect Uri
	// Required: true
	RedirectURI *string `json:"RedirectUri"`

	// secret
	// Required: true
	Secret *string `json:"Secret"`

	// team ID
	// Required: true
	TeamID *string `json:"TeamID"`
}

// Validate validates this model third party login platform credential response
func (m *ModelThirdPartyLoginPlatformCredentialResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACSURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAWSCognitoRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAWSCognitoUserPool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFederationMetadataURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validateACSURL(formats strfmt.Registry) error {

	if err := validate.Required("ACSURL", "body", m.ACSURL); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validateAWSCognitoRegion(formats strfmt.Registry) error {

	if err := validate.Required("AWSCognitoRegion", "body", m.AWSCognitoRegion); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validateAWSCognitoUserPool(formats strfmt.Registry) error {

	if err := validate.Required("AWSCognitoUserPool", "body", m.AWSCognitoUserPool); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("AppId", "body", m.AppID); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("ClientId", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("Environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validateFederationMetadataURL(formats strfmt.Registry) error {

	if err := validate.Required("FederationMetadataURL", "body", m.FederationMetadataURL); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("IsActive", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validateKeyID(formats strfmt.Registry) error {

	if err := validate.Required("KeyID", "body", m.KeyID); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("Namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("OrganizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validatePlatformID(formats strfmt.Registry) error {

	if err := validate.Required("PlatformId", "body", m.PlatformID); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validateRedirectURI(formats strfmt.Registry) error {

	if err := validate.Required("RedirectUri", "body", m.RedirectURI); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validateSecret(formats strfmt.Registry) error {

	if err := validate.Required("Secret", "body", m.Secret); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialResponse) validateTeamID(formats strfmt.Registry) error {

	if err := validate.Required("TeamID", "body", m.TeamID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelThirdPartyLoginPlatformCredentialResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelThirdPartyLoginPlatformCredentialResponse) UnmarshalBinary(b []byte) error {
	var res ModelThirdPartyLoginPlatformCredentialResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
