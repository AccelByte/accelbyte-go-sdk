// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSessionByUserIDsParams creates a new GetSessionByUserIDsParams object
// with the default values initialized.
func NewGetSessionByUserIDsParams() *GetSessionByUserIDsParams {
	var ()
	return &GetSessionByUserIDsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSessionByUserIDsParamsWithTimeout creates a new GetSessionByUserIDsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSessionByUserIDsParamsWithTimeout(timeout time.Duration) *GetSessionByUserIDsParams {
	var ()
	return &GetSessionByUserIDsParams{

		timeout: timeout,
	}
}

// NewGetSessionByUserIDsParamsWithContext creates a new GetSessionByUserIDsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSessionByUserIDsParamsWithContext(ctx context.Context) *GetSessionByUserIDsParams {
	var ()
	return &GetSessionByUserIDsParams{

		Context: ctx,
	}
}

// NewGetSessionByUserIDsParamsWithHTTPClient creates a new GetSessionByUserIDsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSessionByUserIDsParamsWithHTTPClient(client *http.Client) *GetSessionByUserIDsParams {
	var ()
	return &GetSessionByUserIDsParams{
		HTTPClient: client,
	}
}

/*GetSessionByUserIDsParams contains all the parameters to send to the API endpoint
for the get session by user i ds operation typically these are written to a http.Request
*/
type GetSessionByUserIDsParams struct {

	/*Namespace
	  namespace of the game

	*/
	Namespace string
	/*UserIds
	  comma separated user ids

	*/
	UserIds string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get session by user i ds params
func (o *GetSessionByUserIDsParams) WithTimeout(timeout time.Duration) *GetSessionByUserIDsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get session by user i ds params
func (o *GetSessionByUserIDsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get session by user i ds params
func (o *GetSessionByUserIDsParams) WithContext(ctx context.Context) *GetSessionByUserIDsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get session by user i ds params
func (o *GetSessionByUserIDsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get session by user i ds params
func (o *GetSessionByUserIDsParams) WithHTTPClient(client *http.Client) *GetSessionByUserIDsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get session by user i ds params
func (o *GetSessionByUserIDsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNamespace adds the namespace to the get session by user i ds params
func (o *GetSessionByUserIDsParams) WithNamespace(namespace string) *GetSessionByUserIDsParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get session by user i ds params
func (o *GetSessionByUserIDsParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithUserIds adds the userIds to the get session by user i ds params
func (o *GetSessionByUserIDsParams) WithUserIds(userIds string) *GetSessionByUserIDsParams {
	o.SetUserIds(userIds)
	return o
}

// SetUserIds adds the userIds to the get session by user i ds params
func (o *GetSessionByUserIDsParams) SetUserIds(userIds string) {
	o.UserIds = userIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetSessionByUserIDsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// query param user_ids
	qrUserIds := o.UserIds
	qUserIds := qrUserIds
	if qUserIds != "" {
		if err := r.SetQueryParam("user_ids", qUserIds); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
