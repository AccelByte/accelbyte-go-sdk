// Code generated by go-swagger; DO NOT EDIT.

package notification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/lobby-sdk/pkg/lobbyclientmodels"
)

// GetNotificationsReader is a Reader for the GetNotifications structure.
type GetNotificationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNotificationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNotificationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNotificationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetNotificationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetNotificationsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetNotificationsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested GET /notification/namespaces/{namespace}/users/{userId} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewGetNotificationsOK creates a GetNotificationsOK with default headers values
func NewGetNotificationsOK() *GetNotificationsOK {
	return &GetNotificationsOK{}
}

/*GetNotificationsOK handles this case with default header values.

  OK
*/
type GetNotificationsOK struct {
	Payload []*lobbyclientmodels.ModelNotificationResponse
}

func (o *GetNotificationsOK) Error() string {
	return fmt.Sprintf("[GET /notification/namespaces/{namespace}/users/{userId}][%d] getNotificationsOK  %+v", 200, o.Payload)
}

func (o *GetNotificationsOK) GetPayload() []*lobbyclientmodels.ModelNotificationResponse {
	return o.Payload
}

func (o *GetNotificationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationsBadRequest creates a GetNotificationsBadRequest with default headers values
func NewGetNotificationsBadRequest() *GetNotificationsBadRequest {
	return &GetNotificationsBadRequest{}
}

/*GetNotificationsBadRequest handles this case with default header values.

  Bad Request
*/
type GetNotificationsBadRequest struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *GetNotificationsBadRequest) Error() string {
	return fmt.Sprintf("[GET /notification/namespaces/{namespace}/users/{userId}][%d] getNotificationsBadRequest  %+v", 400, o.Payload)
}

func (o *GetNotificationsBadRequest) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *GetNotificationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationsUnauthorized creates a GetNotificationsUnauthorized with default headers values
func NewGetNotificationsUnauthorized() *GetNotificationsUnauthorized {
	return &GetNotificationsUnauthorized{}
}

/*GetNotificationsUnauthorized handles this case with default header values.

  Unauthorized
*/
type GetNotificationsUnauthorized struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *GetNotificationsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /notification/namespaces/{namespace}/users/{userId}][%d] getNotificationsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetNotificationsUnauthorized) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *GetNotificationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationsForbidden creates a GetNotificationsForbidden with default headers values
func NewGetNotificationsForbidden() *GetNotificationsForbidden {
	return &GetNotificationsForbidden{}
}

/*GetNotificationsForbidden handles this case with default header values.

  Forbidden
*/
type GetNotificationsForbidden struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *GetNotificationsForbidden) Error() string {
	return fmt.Sprintf("[GET /notification/namespaces/{namespace}/users/{userId}][%d] getNotificationsForbidden  %+v", 403, o.Payload)
}

func (o *GetNotificationsForbidden) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *GetNotificationsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationsNotFound creates a GetNotificationsNotFound with default headers values
func NewGetNotificationsNotFound() *GetNotificationsNotFound {
	return &GetNotificationsNotFound{}
}

/*GetNotificationsNotFound handles this case with default header values.

  Not Found
*/
type GetNotificationsNotFound struct {
	Payload *lobbyclientmodels.RestapiErrorResponseBody
}

func (o *GetNotificationsNotFound) Error() string {
	return fmt.Sprintf("[GET /notification/namespaces/{namespace}/users/{userId}][%d] getNotificationsNotFound  %+v", 404, o.Payload)
}

func (o *GetNotificationsNotFound) GetPayload() *lobbyclientmodels.RestapiErrorResponseBody {
	return o.Payload
}

func (o *GetNotificationsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(lobbyclientmodels.RestapiErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
