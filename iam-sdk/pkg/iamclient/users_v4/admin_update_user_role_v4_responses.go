// Code generated by go-swagger; DO NOT EDIT.

package users_v4

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// AdminUpdateUserRoleV4Reader is a Reader for the AdminUpdateUserRoleV4 structure.
type AdminUpdateUserRoleV4Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminUpdateUserRoleV4Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminUpdateUserRoleV4OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminUpdateUserRoleV4BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAdminUpdateUserRoleV4Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAdminUpdateUserRoleV4NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewAdminUpdateUserRoleV4UnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewAdminUpdateUserRoleV4InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested PUT /iam/v4/admin/namespaces/{namespace}/users/{userId}/roles returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAdminUpdateUserRoleV4OK creates a AdminUpdateUserRoleV4OK with default headers values
func NewAdminUpdateUserRoleV4OK() *AdminUpdateUserRoleV4OK {
	return &AdminUpdateUserRoleV4OK{}
}

/*AdminUpdateUserRoleV4OK handles this case with default header values.

  Operation succeeded
*/
type AdminUpdateUserRoleV4OK struct {
	Payload *iamclientmodels.ModelListUserRolesV4Response
}

func (o *AdminUpdateUserRoleV4OK) Error() string {
	return fmt.Sprintf("[PUT /iam/v4/admin/namespaces/{namespace}/users/{userId}/roles][%d] adminUpdateUserRoleV4OK  %+v", 200, o.Payload)
}

func (o *AdminUpdateUserRoleV4OK) GetPayload() *iamclientmodels.ModelListUserRolesV4Response {
	return o.Payload
}

func (o *AdminUpdateUserRoleV4OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.ModelListUserRolesV4Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateUserRoleV4BadRequest creates a AdminUpdateUserRoleV4BadRequest with default headers values
func NewAdminUpdateUserRoleV4BadRequest() *AdminUpdateUserRoleV4BadRequest {
	return &AdminUpdateUserRoleV4BadRequest{}
}

/*AdminUpdateUserRoleV4BadRequest handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type AdminUpdateUserRoleV4BadRequest struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminUpdateUserRoleV4BadRequest) Error() string {
	return fmt.Sprintf("[PUT /iam/v4/admin/namespaces/{namespace}/users/{userId}/roles][%d] adminUpdateUserRoleV4BadRequest  %+v", 400, o.Payload)
}

func (o *AdminUpdateUserRoleV4BadRequest) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminUpdateUserRoleV4BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateUserRoleV4Forbidden creates a AdminUpdateUserRoleV4Forbidden with default headers values
func NewAdminUpdateUserRoleV4Forbidden() *AdminUpdateUserRoleV4Forbidden {
	return &AdminUpdateUserRoleV4Forbidden{}
}

/*AdminUpdateUserRoleV4Forbidden handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20003</td><td>forbidden access</td></tr></table>
*/
type AdminUpdateUserRoleV4Forbidden struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminUpdateUserRoleV4Forbidden) Error() string {
	return fmt.Sprintf("[PUT /iam/v4/admin/namespaces/{namespace}/users/{userId}/roles][%d] adminUpdateUserRoleV4Forbidden  %+v", 403, o.Payload)
}

func (o *AdminUpdateUserRoleV4Forbidden) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminUpdateUserRoleV4Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateUserRoleV4NotFound creates a AdminUpdateUserRoleV4NotFound with default headers values
func NewAdminUpdateUserRoleV4NotFound() *AdminUpdateUserRoleV4NotFound {
	return &AdminUpdateUserRoleV4NotFound{}
}

/*AdminUpdateUserRoleV4NotFound handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr></table>
*/
type AdminUpdateUserRoleV4NotFound struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminUpdateUserRoleV4NotFound) Error() string {
	return fmt.Sprintf("[PUT /iam/v4/admin/namespaces/{namespace}/users/{userId}/roles][%d] adminUpdateUserRoleV4NotFound  %+v", 404, o.Payload)
}

func (o *AdminUpdateUserRoleV4NotFound) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminUpdateUserRoleV4NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateUserRoleV4UnprocessableEntity creates a AdminUpdateUserRoleV4UnprocessableEntity with default headers values
func NewAdminUpdateUserRoleV4UnprocessableEntity() *AdminUpdateUserRoleV4UnprocessableEntity {
	return &AdminUpdateUserRoleV4UnprocessableEntity{}
}

/*AdminUpdateUserRoleV4UnprocessableEntity handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>10183</td><td>unprocessable entity</td></tr></table>
*/
type AdminUpdateUserRoleV4UnprocessableEntity struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminUpdateUserRoleV4UnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /iam/v4/admin/namespaces/{namespace}/users/{userId}/roles][%d] adminUpdateUserRoleV4UnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AdminUpdateUserRoleV4UnprocessableEntity) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminUpdateUserRoleV4UnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUpdateUserRoleV4InternalServerError creates a AdminUpdateUserRoleV4InternalServerError with default headers values
func NewAdminUpdateUserRoleV4InternalServerError() *AdminUpdateUserRoleV4InternalServerError {
	return &AdminUpdateUserRoleV4InternalServerError{}
}

/*AdminUpdateUserRoleV4InternalServerError handles this case with default header values.

  <table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>
*/
type AdminUpdateUserRoleV4InternalServerError struct {
	Payload *iamclientmodels.RestErrorResponse
}

func (o *AdminUpdateUserRoleV4InternalServerError) Error() string {
	return fmt.Sprintf("[PUT /iam/v4/admin/namespaces/{namespace}/users/{userId}/roles][%d] adminUpdateUserRoleV4InternalServerError  %+v", 500, o.Payload)
}

func (o *AdminUpdateUserRoleV4InternalServerError) GetPayload() *iamclientmodels.RestErrorResponse {
	return o.Payload
}

func (o *AdminUpdateUserRoleV4InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.RestErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
