// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentProviderConfigInfo payment provider config info
//
// swagger:model PaymentProviderConfigInfo
type PaymentProviderConfigInfo struct {

	// aggregate payment provider, allow empty value
	// Enum: [ADYEN XSOLLA]
	Aggregate string `json:"aggregate,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// paymentMerchantConfigId
	// Required: true
	PaymentMerchantConfigID *string `json:"paymentMerchantConfigId"`

	// region
	// Required: true
	Region *string `json:"region"`

	// sandbox taxjar api token
	SandboxTaxJarAPIToken string `json:"sandboxTaxJarApiToken,omitempty"`

	// special payment providers = ['ALIPAY', 'WXPAY'], allow empty value
	Specials []string `json:"specials"`

	// taxjar api token, required when taxJarEnabled=true and useGlobalTaxJarApiToken=false
	TaxJarAPIToken string `json:"taxJarApiToken,omitempty"`

	// taxjar integration enabled
	TaxJarEnabled bool `json:"taxJarEnabled"`

	// if use global taxjar token
	UseGlobalTaxJarAPIToken bool `json:"useGlobalTaxJarApiToken"`
}

// Validate validates this payment provider config info
func (m *PaymentProviderConfigInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMerchantConfigID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var paymentProviderConfigInfoTypeAggregatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADYEN","XSOLLA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentProviderConfigInfoTypeAggregatePropEnum = append(paymentProviderConfigInfoTypeAggregatePropEnum, v)
	}
}

const (

	// PaymentProviderConfigInfoAggregateADYEN captures enum value "ADYEN"
	PaymentProviderConfigInfoAggregateADYEN string = "ADYEN"

	// PaymentProviderConfigInfoAggregateXSOLLA captures enum value "XSOLLA"
	PaymentProviderConfigInfoAggregateXSOLLA string = "XSOLLA"
)

// prop value enum
func (m *PaymentProviderConfigInfo) validateAggregateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentProviderConfigInfoTypeAggregatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentProviderConfigInfo) validateAggregate(formats strfmt.Registry) error {

	if swag.IsZero(m.Aggregate) { // not required
		return nil
	}

	// value enum
	if err := m.validateAggregateEnum("aggregate", "body", m.Aggregate); err != nil {
		return err
	}

	return nil
}

func (m *PaymentProviderConfigInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PaymentProviderConfigInfo) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *PaymentProviderConfigInfo) validatePaymentMerchantConfigID(formats strfmt.Registry) error {

	if err := validate.Required("paymentMerchantConfigId", "body", m.PaymentMerchantConfigID); err != nil {
		return err
	}

	return nil
}

func (m *PaymentProviderConfigInfo) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

var paymentProviderConfigInfoSpecialsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADYEN","ALIPAY","CHECKOUT","PAYPAL","STRIPE","WALLET","WXPAY","XSOLLA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentProviderConfigInfoSpecialsItemsEnum = append(paymentProviderConfigInfoSpecialsItemsEnum, v)
	}
}

func (m *PaymentProviderConfigInfo) validateSpecialsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentProviderConfigInfoSpecialsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentProviderConfigInfo) validateSpecials(formats strfmt.Registry) error {

	if swag.IsZero(m.Specials) { // not required
		return nil
	}

	for i := 0; i < len(m.Specials); i++ {

		// value enum
		if err := m.validateSpecialsItemsEnum("specials"+"."+strconv.Itoa(i), "body", m.Specials[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentProviderConfigInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentProviderConfigInfo) UnmarshalBinary(b []byte) error {
	var res PaymentProviderConfigInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
