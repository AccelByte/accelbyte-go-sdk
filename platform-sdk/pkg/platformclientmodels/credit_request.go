// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreditRequest A DTO for wallet's credit
//
// swagger:model CreditRequest
type CreditRequest struct {

	// amount
	// Required: true
	// Minimum: 1
	Amount *int64 `json:"amount"`

	// this amount expire time, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
	// Format: date-time
	ExpireAt *strfmt.DateTime `json:"expireAt,omitempty"`

	// origin, balance origin decided on the type of wallet, default is System
	// Enum: [Playstation Xbox Steam Epic Stadia IOS GooglePlay Twitch Nintendo System Other]
	Origin string `json:"origin,omitempty"`

	// reason, max length is 127
	Reason string `json:"reason,omitempty"`

	// source, purchase for default
	// Enum: [PURCHASE IAP PROMOTION ACHIEVEMENT REFERRAL_BONUS REDEEM_CODE REWARD GIFT REFUND OTHER]
	Source string `json:"source,omitempty"`
}

// Validate validates this credit request
func (m *CreditRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpireAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreditRequest) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.MinimumInt("amount", "body", int64(*m.Amount), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CreditRequest) validateExpireAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpireAt) { // not required
		return nil
	}

	if err := validate.FormatOf("expireAt", "body", "date-time", m.ExpireAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var creditRequestTypeOriginPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Playstation","Xbox","Steam","Epic","Stadia","IOS","GooglePlay","Twitch","Nintendo","System","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		creditRequestTypeOriginPropEnum = append(creditRequestTypeOriginPropEnum, v)
	}
}

const (

	// CreditRequestOriginPlaystation captures enum value "Playstation"
	CreditRequestOriginPlaystation string = "Playstation"

	// CreditRequestOriginXbox captures enum value "Xbox"
	CreditRequestOriginXbox string = "Xbox"

	// CreditRequestOriginSteam captures enum value "Steam"
	CreditRequestOriginSteam string = "Steam"

	// CreditRequestOriginEpic captures enum value "Epic"
	CreditRequestOriginEpic string = "Epic"

	// CreditRequestOriginStadia captures enum value "Stadia"
	CreditRequestOriginStadia string = "Stadia"

	// CreditRequestOriginIOS captures enum value "IOS"
	CreditRequestOriginIOS string = "IOS"

	// CreditRequestOriginGooglePlay captures enum value "GooglePlay"
	CreditRequestOriginGooglePlay string = "GooglePlay"

	// CreditRequestOriginTwitch captures enum value "Twitch"
	CreditRequestOriginTwitch string = "Twitch"

	// CreditRequestOriginNintendo captures enum value "Nintendo"
	CreditRequestOriginNintendo string = "Nintendo"

	// CreditRequestOriginSystem captures enum value "System"
	CreditRequestOriginSystem string = "System"

	// CreditRequestOriginOther captures enum value "Other"
	CreditRequestOriginOther string = "Other"
)

// prop value enum
func (m *CreditRequest) validateOriginEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, creditRequestTypeOriginPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreditRequest) validateOrigin(formats strfmt.Registry) error {

	if swag.IsZero(m.Origin) { // not required
		return nil
	}

	// value enum
	if err := m.validateOriginEnum("origin", "body", m.Origin); err != nil {
		return err
	}

	return nil
}

var creditRequestTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PURCHASE","IAP","PROMOTION","ACHIEVEMENT","REFERRAL_BONUS","REDEEM_CODE","REWARD","GIFT","REFUND","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		creditRequestTypeSourcePropEnum = append(creditRequestTypeSourcePropEnum, v)
	}
}

const (

	// CreditRequestSourcePURCHASE captures enum value "PURCHASE"
	CreditRequestSourcePURCHASE string = "PURCHASE"

	// CreditRequestSourceIAP captures enum value "IAP"
	CreditRequestSourceIAP string = "IAP"

	// CreditRequestSourcePROMOTION captures enum value "PROMOTION"
	CreditRequestSourcePROMOTION string = "PROMOTION"

	// CreditRequestSourceACHIEVEMENT captures enum value "ACHIEVEMENT"
	CreditRequestSourceACHIEVEMENT string = "ACHIEVEMENT"

	// CreditRequestSourceREFERRALBONUS captures enum value "REFERRAL_BONUS"
	CreditRequestSourceREFERRALBONUS string = "REFERRAL_BONUS"

	// CreditRequestSourceREDEEMCODE captures enum value "REDEEM_CODE"
	CreditRequestSourceREDEEMCODE string = "REDEEM_CODE"

	// CreditRequestSourceREWARD captures enum value "REWARD"
	CreditRequestSourceREWARD string = "REWARD"

	// CreditRequestSourceGIFT captures enum value "GIFT"
	CreditRequestSourceGIFT string = "GIFT"

	// CreditRequestSourceREFUND captures enum value "REFUND"
	CreditRequestSourceREFUND string = "REFUND"

	// CreditRequestSourceOTHER captures enum value "OTHER"
	CreditRequestSourceOTHER string = "OTHER"
)

// prop value enum
func (m *CreditRequest) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, creditRequestTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreditRequest) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreditRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreditRequest) UnmarshalBinary(b []byte) error {
	var res CreditRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
