// Code generated by go-swagger; DO NOT EDIT.

package platformclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdminOrderCreate admin order create
//
// swagger:model AdminOrderCreate
type AdminOrderCreate struct {

	// currency code, should match currency code in item region data
	// Required: true
	CurrencyCode *string `json:"currencyCode"`

	// currency namespace, if options.skipPriceValidation is true, then this is required. If current namespace is publisher namespace, then currency namespace must be publisher namespace; if current is game namespace, currency namespace must be the same game namespace or publisher namespace
	CurrencyNamespace string `json:"currencyNamespace,omitempty"`

	// Discounted price of order, this should match (item_discounted_price * quantity) ifitem discounted price is available, otherwise it should equal to (item_price * quantity)
	// Required: true
	DiscountedPrice *int32 `json:"discountedPrice"`

	// extra field to store external order information
	Ext map[string]interface{} `json:"ext,omitempty"`

	// item id
	// Required: true
	ItemID *string `json:"itemId"`

	// language value from language tag, allowed format: en, en-US.<p>Supported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)</p>
	Language string `json:"language,omitempty"`

	// Creation options
	Options *OrderCreationOptions `json:"options,omitempty"`

	// platform
	// Enum: [Epic GooglePlay IOS Nintendo Other Playstation Steam Xbox]
	Platform string `json:"platform,omitempty"`

	// Price of order, should match (item_price * quantity)
	// Required: true
	Price *int32 `json:"price"`

	// Quantity of item, min is 1
	// Required: true
	Quantity *int32 `json:"quantity"`

	// country value from ISO countries
	// Required: true
	Region *string `json:"region"`

	// custom return url for real payment, user will be redirected to this url once payment is finished
	ReturnURL string `json:"returnUrl,omitempty"`

	// sandbox
	Sandbox bool `json:"sandbox"`
}

// Validate validates this admin order create
func (m *AdminOrderCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscountedPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdminOrderCreate) validateCurrencyCode(formats strfmt.Registry) error {

	if err := validate.Required("currencyCode", "body", m.CurrencyCode); err != nil {
		return err
	}

	return nil
}

func (m *AdminOrderCreate) validateDiscountedPrice(formats strfmt.Registry) error {

	if err := validate.Required("discountedPrice", "body", m.DiscountedPrice); err != nil {
		return err
	}

	return nil
}

func (m *AdminOrderCreate) validateItemID(formats strfmt.Registry) error {

	if err := validate.Required("itemId", "body", m.ItemID); err != nil {
		return err
	}

	return nil
}

func (m *AdminOrderCreate) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

var adminOrderCreateTypePlatformPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Epic","GooglePlay","IOS","Nintendo","Other","Playstation","Steam","Xbox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adminOrderCreateTypePlatformPropEnum = append(adminOrderCreateTypePlatformPropEnum, v)
	}
}

const (

	// AdminOrderCreatePlatformEpic captures enum value "Epic"
	AdminOrderCreatePlatformEpic string = "Epic"

	// AdminOrderCreatePlatformGooglePlay captures enum value "GooglePlay"
	AdminOrderCreatePlatformGooglePlay string = "GooglePlay"

	// AdminOrderCreatePlatformIOS captures enum value "IOS"
	AdminOrderCreatePlatformIOS string = "IOS"

	// AdminOrderCreatePlatformNintendo captures enum value "Nintendo"
	AdminOrderCreatePlatformNintendo string = "Nintendo"

	// AdminOrderCreatePlatformOther captures enum value "Other"
	AdminOrderCreatePlatformOther string = "Other"

	// AdminOrderCreatePlatformPlaystation captures enum value "Playstation"
	AdminOrderCreatePlatformPlaystation string = "Playstation"

	// AdminOrderCreatePlatformSteam captures enum value "Steam"
	AdminOrderCreatePlatformSteam string = "Steam"

	// AdminOrderCreatePlatformXbox captures enum value "Xbox"
	AdminOrderCreatePlatformXbox string = "Xbox"
)

// prop value enum
func (m *AdminOrderCreate) validatePlatformEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, adminOrderCreateTypePlatformPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdminOrderCreate) validatePlatform(formats strfmt.Registry) error {

	if swag.IsZero(m.Platform) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlatformEnum("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *AdminOrderCreate) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *AdminOrderCreate) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *AdminOrderCreate) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdminOrderCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdminOrderCreate) UnmarshalBinary(b []byte) error {
	var res AdminOrderCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
