{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "jib.noice.accelbyte.io",
  "info": {
    "description": "Justice Platform Service",
    "version": "3.24.0",
    "title": "justice-platform-service",
    "contact": {
      "name": "Engineering Team at AccelByte",
      "url": "https://accelbyte.io",
      "email": "engineering@accelbyte.io"
    }
  },
  "securityDefinitions": {
    "authorization": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "name": "Item"
    },
    {
      "name": "Category"
    },
    {
      "name": "Store"
    },
    {
      "name": "Fulfillment"
    },
    {
      "name": "Entitlement"
    },
    {
      "name": "Order"
    },
    {
      "name": "Order(Dedicated)"
    },
    {
      "name": "Currency"
    },
    {
      "name": "Wallet"
    },
    {
      "name": "Payment"
    },
    {
      "name": "Payment(Dedicated)"
    },
    {
      "name": "PaymentConfig"
    },
    {
      "name": "PaymentAccount"
    },
    {
      "name": "PaymentStation"
    },
    {
      "name": "IAP"
    },
    {
      "name": "Reward"
    }
  ],
  "basePath": "/platform",
  "paths": {
    "/admin/namespaces/{namespace}/items/{itemId}/app": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Get an app info",
        "description": "This API is used to get an app info.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: app data</li></ul>",
        "operationId": "getApp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullAppInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "Item"
        ],
        "summary": "Update an app",
        "description": "This API is used to update an app.<p>An app update example:<p><pre><code>{\r\n  \"developer\": \"accelbyte\",\r\n  \"publisher\": \"accelbyte\",\r\n  \"websiteUrl\": \"http://accelbyte.io\",\r\n  \"forumUrl\": \"http://accelbyte.io\",\r\n  \"platforms\": \\[\"Windows(allowed values: Windows, MacOS, Linux, IOS, Android)\"\\],\r\n  \"platformRequirements\": \\{\r\n    \"Windows\": \\[\r\n      \\{\r\n        \"label\":\"minimum(can be minimum or recommended)\",\r\n        \"osVersion\":\"os version\",\r\n        \"processor\":\"processor\",\r\n        \"ram\":\"RAM\",\r\n        \"graphics\":\"graphics\",\r\n        \"directXVersion\":\"directXVersion\",\r\n        \"diskSpace\":\"diskSpace\",\r\n        \"soundCard\":\"soundCard\",\r\n        \"additionals\":\"additionals\"\r\n      \\}\r\n     \\]\r\n  \\},\r\n  \"carousel\": \\[\r\n    \\{\r\n      \"type\":\"image(allowed values: image, video)\",\r\n      \"videoSource\":\"generic(allowed values:generic, youtube, viemo)\",\r\n      \"url\":\"url\",\r\n      \"alt\":\"alternative url or text\",\r\n      \"thumbnailUrl\":\"thumbnail url\",\r\n      \"previewUrl\":\"preview url\",\r\n    \\}\r\n  \\],\r\n  \"localizations\": \\{\r\n    \"en\": \\{\r\n      \"slogan\":\"slogan\",\r\n      \"announcement\":\"announcement\",\r\n    \\}\r\n  \\},\r\n  \"primaryGenre\": \"Action\",\r\n  \"genres\": \\[\"Action\", \"Adventure\"\\],\r\n  \"players\": \\[\"Single\"\\],\r\n  \"releaseDate\": \"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"\r\n}</code></pre>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated app data</li></ul>",
        "operationId": "updateApp",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AppUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullAppInfo"
            }
          },
          "404": {
            "description": "<table><tr><tdErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/categories/{categoryPath}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get category",
        "description": "This API is used to get category by category path.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=2 (READ)</li><li><i>Returns</i>: category data</li></ul>",
        "operationId": "getCategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "categoryPath",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullCategoryInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "Category"
        ],
        "summary": "Update category",
        "description": "This API is used to update category. <p> The category update data is a category object, example as:<pre><code>{\r\n\t\"storeId\": \"store-id\",\r\n\t\"localizationDisplayNames\": {\"en\" : \"Games\"}\r\n}</code></pre>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=4 (UPDATE)</li><li><i>Returns</i>: the updated category data</li></ul>",
        "operationId": "updateCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "categoryPath",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CategoryUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullCategoryInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Delete category",
        "description": "This API is used to delete category by category path. <p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=8 (DELETE)</li><li><i>Returns</i>: the deleted category data</li></ul>",
        "operationId": "deleteCategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "categoryPath",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullCategoryInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30272</td><td>Category [{categoryPath}] is not empty in namespace [{namespace}]</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/categories/basic": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "List categories' basic info",
        "description": "This API is used to list all categories' basic info of a store ordered by category path.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=2 (READ)</li><li><i>Returns</i>: list of categories' paths</li></ul>",
        "operationId": "listCategoriesBasic",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BasicCategoryInfo"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/categories/{categoryPath}/descendants": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get descendant categories",
        "description": "This API is used to get descendant categories by category path.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=2 (READ)</li><li><i>Returns</i>: list of descendant categories data</li></ul>",
        "operationId": "getDescendantCategories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "categoryPath",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FullCategoryInfo"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/categories/{categoryPath}/children": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get child categories",
        "description": "This API is used to get child categories by category path.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=2 (READ)</li><li><i>Returns</i>: list of child categories data</li></ul>",
        "operationId": "getChildCategories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "categoryPath",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FullCategoryInfo"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/categories": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get root categories",
        "description": "This API is used to get root categories.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=2 (READ)</li><li><i>Returns</i>: root category data</li></ul>",
        "operationId": "getRootCategories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FullCategoryInfo"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY",
          "action": "2"
        }
      },
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Create category",
        "description": "This API is used to create category.<p>A category is a path separated by \"/\". A category also has localized display names. Example:<p><pre><code>{\r\n\t\"categoryPath\": \"/games\",\r\n\t\"localizationDisplayNames\": \\{\"en\" : \"Games\"}\r\n}</code></pre>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=1 (CREATE)</li><li><i>Returns</i>: created category data</li></ul>",
        "operationId": "createCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CategoryCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullCategoryInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30271</td><td>Category [{categoryPath}] already exists in namespace [{namespace}]</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY",
          "action": "1"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Get an item",
        "description": "This API is used to get an item.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: item data</li></ul>",
        "operationId": "getItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "Item"
        ],
        "summary": "Update an item",
        "description": "This API is used to update an item.<p>An item update example:<p><pre><code>{\r\n\t\"categoryPath\": \"/games\",\r\n\t\"localizations\": \\{\r\n       \"en\": \\{\r\n           \"title\":\"required\",\r\n           \"description\":\"optional\",\r\n           \"longDescription\":\"optional\",\r\n           \"localExt\": \\{\r\n                  \"properties\":\\[\r\n                                   \\{\r\n                                       \"key1\":\"value1\",\r\n                                       \"key2\":\"value2\"\r\n                                   \\}\r\n                  \\],\r\n                  \"functions\":\\[\r\n                                   \\{\r\n                                       \"key1\":\"value1\",\r\n                                       \"key2\":\"value2\"\r\n                                   \\}\r\n                 \\]\r\n           \\}\r\n       \\}\r\n   \\},\r\n   \"images\": \\[\r\n     \\{\r\n           \"as\":\"optional, image for\",\r\n           \"caption\":\"optional\",\r\n           \"height\":10,\r\n           \"width\":10,\r\n           \"imageUrl\":\"http://img-url-required\",\r\n           \"smallImageUrl\":\"http://small-img-url-required\"\r\n     \\}\r\n   \\],\r\n   \"thumbnailUrl\": \"optional, thumbnail url\",\r\n   \"status\": \"ACTIVE\",\r\n   \"itemType\": \"APP(allowed: [APP,COINS,INGAMEITEM,CODE,BUNDLE])\",\r\n   \"name\": \"optional\",\r\n   \"entitlementType\": \"DURABLE(allowed:[DURABLE,CONSUMABLE], should be CONSUMABLE when item type is COINS)\", \r\n   \"useCount\": 1(optional, required if the entitlement type is consumable),\r\n   \"stackable\": false,\r\n   \"appId\": \"optional, required if itemType is APP\",\r\n   \"baseAppId\": \"optional, set value of game app id if you want to link to a game\",\r\n   \"appType\": \"GAME(optional, required if itemType is APP)\",\r\n   \"sku\": \"optional, commonly unique item code\",\r\n   \"targetCurrencyCode\": \"optional, required if itemType is COINS\",\r\n   \"targetNamespace\": \"optional, required when itemType is INGAMEITEM, the targetNamespace will only take effect when the item\r\n   created belongs to the publisher namespace\",\r\n   \"regionData\": \\{\r\n       \"US(store's default region is required)\": \\[\r\n         \\{\r\n            \"price\":10,\r\n            \"discountPercentage\":0(integer, optional, range[0,100], discountedPrice = price\\*((100 - discountPercentage) \\* 0.01),\r\n              if it is not 0, will use it to calculate discounted price),\r\n            \"discountAmount\":0(integer, optional, range[0,itemPrice], will use it to calculate discounted price if discountPercentage is 0),\r\n            \"currencyCode\":\"code(required, example: USD)\",\r\n            \"currencyNamespace\":\"test-ns-required\",\r\n            \"trialPrice\":5(required while fixedTrialCycles set, should >=0 and <= price, will same as price if not present),\r\n            \"purchaseAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\r\n            \"expireAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\r\n            \"discountPurchaseAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\r\n            \"discountExpireAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"\r\n         \\}\r\n       \\]\r\n   \\},\r\n   \"itemIds\": \\[\r\n       \"itemId\"\r\n   \\],\r\n   \"recurring\": \\{\r\n       \"cycle\":\"MONTHLY(allowed: [WEEKLY,MONTHLY,QUARTERLY,YEARLY])\",\r\n       \"fixedFreeDays\":0(integer, fixed free days, 0 means not set),\r\n       \"fixedTrialCycles\":0(integer, fixed trial cycles, 0 means not set, will not take effect if fixedFreeDays set),\r\n       \"graceDays\":7(integer, recurring grace days, retry recurring charge within configured days if charge fail, default 7)\r\n   \\},\r\n   \"tags\": \\[\r\n       \"tag\"\r\n   \\],\r\n   \"features\": \\[\r\n       \"feature\"\r\n   \\],\r\n   \"clazz\": \"weapon\",\r\n   \"boothName\": \"C_campaign1\",\r\n   \"displayOrder\": 1000,\r\n   \"ext\": \\{\r\n       \"properties\":\\[\r\n           \\{\r\n               \"key1\":\"value1\",\r\n               \"key2\":\"value2\"\r\n           \\}\r\n       \\],\r\n       \"functions\":\\[\r\n           \\{\r\n               \"key1\":\"value1\",\r\n               \"key2\":\"value2\"\r\n           \\}\r\n       \\]\r\n   \\},\r\n   \"maxCountPerUser\": 1(integer, optional, -1 means UNLIMITED),\r\n   \"maxCount\": 1(integer, optional, -1 means UNLIMITED, new value should >= old value if both old value and new value is\r\n   limited, unset when item type is CODE)\r\n}</code></pre>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated item data</li></ul>",
        "operationId": "updateItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30322</td><td>Bundle item [{itemId}] can't be bundled</td></tr><tr><td>30325</td><td>Code item [{itemId}] can't be bundled</td></tr><tr><td>30326</td><td>Subscription item [{itemId}] can't be bundled</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr><tr><td>30321</td><td>Invalid item discount amount</td></tr><tr><td>30022</td><td>Default region [{region}] is required</td></tr><tr><td>30323</td><td>Target namespace is required</td></tr><tr><td>30327</td><td>Invalid item trial price</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr><tr><td>30371</td><td>Item maxCount not allow reduce</td></tr><tr><td>30372</td><td>ItemType is not updatable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "Item"
        ],
        "summary": "Delete an item",
        "description": "This API is used to delete an item permanently, usually for test purpose.<b>DO NOT delete already published item.</b><p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete item successfully"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/bySku": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Get item by sku",
        "description": "This API is used to get the item by sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)<li><i>Returns</i>: the item with sku</li></ul>",
        "operationId": "getItemBySku",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "sku",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30343</td><td>Item of sku [{sku}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/bySku/locale": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Get an item by sku in locale",
        "description": "This API is used to get an item by sku in specific locale. If item not exist in specific region, default region item will return.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: item data</li></ul>",
        "operationId": "getLocaleItemBySku",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "sku",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "populateBundle",
            "in": "query",
            "description": "whether populate bundled items if it's a bundle",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PopulatedItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30343</td><td>Item of sku [{sku}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/return": {
      "put": {
        "tags": [
          "Item"
        ],
        "summary": "Return item",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This api is used for returning a published item while the item is maxCount limited, it will increase the sale available count if orderNo already acquired.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li></ul>",
        "operationId": "returnItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemReturnRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Return item successfully"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/features/{feature}": {
      "put": {
        "tags": [
          "Item"
        ],
        "summary": "Feature an item",
        "description": "Add a feature to an item.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated item</li></ul>",
        "operationId": "featureItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "feature",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "Item"
        ],
        "summary": "Defeature an item",
        "description": "Remove a feature from an item.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated item</li></ul>",
        "operationId": "defeatureItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "feature",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/itemId/bySku": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Get itemId by sku",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This API is used to get the itemId by sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)<li><i>Returns</i>: the itemId with sku</li></ul>",
        "operationId": "getItemIdBySku",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "sku",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemId"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30343</td><td>Item of sku [{sku}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/byAppId": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Get item by appId",
        "description": "This API is used to get the item by appId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)<li><i>Returns</i>: the item with that appId</li></ul>",
        "operationId": "getItemByAppId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30342</td><td>Item of appId [{appId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/uncategorized": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Query uncategorized items",
        "description": "This API is used to query uncategorized items within a store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: the list of uncategorized items</li></ul>",
        "operationId": "queryUncategorizedItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is name:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc Make sure to always use more than one sort if the first sort is not an unique valuefor example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "required": false,
            "type": "string",
            "default": "name:asc"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemPagingSlicedResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/byCriteria": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Query items by criteria",
        "description": "This API is used to query items by criteria within a store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: the list of items</li></ul>",
        "operationId": "queryItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "categoryPath",
            "in": "query",
            "description": "category path",
            "required": false,
            "type": "string"
          },
          {
            "name": "itemType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APP",
              "COINS",
              "INGAMEITEM",
              "BUNDLE",
              "CODE",
              "SUBSCRIPTION"
            ]
          },
          {
            "name": "appType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "GAME",
              "SOFTWARE",
              "DLC",
              "DEMO"
            ]
          },
          {
            "name": "baseAppId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "tags, separate multiple value by commas parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "features",
            "in": "query",
            "description": "features, separate multiple value by commas parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "region",
            "in": "query",
            "description": "exist in region",
            "required": false,
            "type": "string"
          },
          {
            "name": "availableDate",
            "in": "query",
            "description": "allowed format: \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z , filter date include(purchaseAt, expireAt)",
            "required": false,
            "type": "string"
          },
          {
            "name": "targetNamespace",
            "in": "query",
            "description": "targetNamespace",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is name:asc,displayOrder:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc. Make sure to always use more than one sort if the first sort is not an unique valuefor example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "required": false,
            "type": "string",
            "default": "name:asc,displayOrder:asc"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemPagingSlicedResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/acquire": {
      "put": {
        "tags": [
          "Item"
        ],
        "summary": "Acquire item",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This api is used for acquiring a published item while the item is maxCount limited, it will decrease the sale available count.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: acquire result</li></ul>",
        "operationId": "acquireItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemAcquireRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemAcquireResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/search": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Search items by keyword",
        "description": "This API is used to search items by keyword in title, description and long description within a store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)<li><i>Returns</i>: the list of items</li></ul>",
        "operationId": "searchItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyword",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/enable": {
      "put": {
        "tags": [
          "Item"
        ],
        "summary": "Enable an item",
        "description": "Enable an item.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated item</li></ul>",
        "operationId": "enableItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/locale/byIds": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Bulk get locale items",
        "description": "This API is used to bulk get locale items. If item not exist in specific region, default region item will return.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: the list of items info</li></ul>",
        "operationId": "bulkGetLocaleItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "itemIds",
            "in": "query",
            "description": "commas separated item ids",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemInfo"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/dynamic": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Get item dynamic data",
        "description": "Get item dynamic data for published item.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: item dynamic data</li></ul>",
        "operationId": "getItemDynamicData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemDynamicDataInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/items": {
      "post": {
        "tags": [
          "Item"
        ],
        "summary": "Create an Item",
        "description": "This API is used to create an item. APP item only can created in publisher namespace.<p>An item create example:<p><pre><code>{\r\n   \"categoryPath\": \"/games\",\r\n   \"localizations\": \\{\r\n       \"en\": \\{\r\n           \"title\":\"required\",\r\n           \"description\":\"optional\",\r\n           \"longDescription\":\"optional\",\r\n           \"localExt\": \\{\r\n                  \"properties\":\\[\r\n                                   \\{\r\n                                       \"key1\":\"value1\",\r\n                                       \"key2\":\"value2\"\r\n                                   \\}\r\n                  \\],\r\n                  \"functions\":\\[\r\n                                   \\{\r\n                                       \"key1\":\"value1\",\r\n                                       \"key2\":\"value2\"\r\n                                   \\}\r\n                 \\]\r\n           \\}\r\n        \\}\r\n   \\},\r\n   \"images\": \\[\r\n     \\{\r\n           \"as\":\"optional, image for\",\r\n           \"caption\":\"optional\",\r\n           \"height\":10,\r\n           \"width\":10,\r\n           \"imageUrl\":\"http://img-url-required\",\r\n           \"smallImageUrl\":\"http://small-img-url-required\"\r\n     \\}\r\n   \\],\r\n   \"thumbnailUrl\": \"optional, thumbnail url\",\r\n   \"status\": \"ACTIVE\",\r\n   \"itemType\": \"APP(allowed: [APP,COINS,INGAMEITEM,CODE,BUNDLE])\",\r\n   \"name\": \"required, also will be used as entitlement name\",\r\n   \"entitlementType\": \"DURABLE(allowed:[DURABLE,CONSUMABLE], should be CONSUMABLE when item type is COINS)\", \r\n   \"useCount\": 1(optional, required if the entitlement type is consumable),\r\n   \"stackable\": false,\r\n   \"appId\": \"optional, required if itemType is APP\",\r\n   \"appType\": \"GAME(optional, required if itemType is APP)\",\r\n   \"baseAppId\": \"optional, set value of game app id if you want to link to a game\",\r\n   \"targetCurrencyCode\": \"optional, required if itemType is COINS\",\r\n   \"targetNamespace\": \"optional, required when itemType is INGAMEITEM, the targetNamespace will only take effect when the item\r\n   created belongs to the publisher namespace\",\r\n   \"sku\": \"optional, commonly unique item code\",\r\n   \"regionData\": \\{\r\n       \"US(store's default region is required)\": \\[\r\n         \\{\r\n            \"price\":10,\r\n            \"discountPercentage\": 0(integer, optional, range[0,100], discountedPrice = price  \\* ((100 - discountPercentage) \\* 0.01),\r\n              will use it to calculate discounted price if it is not 0),\r\n            \"discountAmount\":0(integer, optional, range[0,itemPrice], will use it to calculate discounted price if discountPercentage is 0),\r\n            \"currencyCode\":\"code(required, example: USD)\",\r\n            \"currencyNamespace\":\"test-ns-required\",\r\n            \"trialPrice\":5(required while fixedTrialCycles set, should >=0 and <= price, will same as price if not present),\r\n            \"purchaseAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\r\n            \"expireAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\r\n            \"discountPurchaseAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\r\n            \"discountExpireAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"\r\n         \\}\r\n       \\]\r\n   \\},\r\n   \"itemIds\": \\[\r\n       \"itemId\"\r\n   \\],\r\n   \"recurring\": \\{\r\n       \"cycle\":\"MONTHLY(allowed: [WEEKLY,MONTHLY,QUARTERLY,YEARLY])\",\r\n       \"fixedFreeDays\":0(integer, fixed free days, 0 means not set),\r\n       \"fixedTrialCycles\":0(integer, fixed trial cycles, 0 means not set, will not take effect if fixedFreeDays set),\r\n       \"graceDays\":7(integer, recurring grace days, retry recurring charge within configured days if charge fail, default 7)\r\n   \\},\r\n   \"tags\": \\[\r\n       \"tag\"\r\n   \\],\r\n   \"features\": \\[\r\n       \"feature\"\r\n   \\],\r\n   \"clazz\": \"weapon\",\r\n   \"boothName\": \"C_campaign1\",\r\n   \"displayOrder\": 1000,\r\n   \"ext\": \\{\r\n       \"properties\":\\[\r\n           \\{\r\n               \"key1\":\"value1\",\r\n               \"key2\":\"value2\"\r\n           \\}\r\n       \\],\r\n       \"functions\":\\[\r\n           \\{\r\n               \"key1\":\"value1\",\r\n               \"key2\":\"value2\"\r\n           \\}\r\n       \\]\r\n   \\},\r\n   \"maxCountPerUser\": 1(integer, optional, -1 means UNLIMITED),\r\n   \"maxCount\": 1(integer, optional, -1 means UNLIMITED, unset when itemType is CODE)\r\n}</code></pre>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=1 (CREATE)</li><li><i>Returns</i>: created item data</li></ul>",
        "operationId": "createItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30322</td><td>Bundle item [{itemId}] can't be bundled</td></tr><tr><td>30325</td><td>Code item [{itemId}] can't be bundled</td></tr><tr><td>30326</td><td>Subscription item [{itemId}] can't be bundled</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr><tr><td>30321</td><td>Invalid item discount amount</td></tr><tr><td>30022</td><td>Default region [{region}] is required</td></tr><tr><td>30323</td><td>Target namespace is required</td></tr><tr><td>30327</td><td>Invalid item trial price</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr><tr><td>30373</td><td>ItemType [{itemType}] is not allowed in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "1"
        }
      },
      "put": {
        "tags": [
          "Item"
        ],
        "summary": "Sync an in game item",
        "description": "This API is used to sync an in game item in game namespace to publisher namespace, at current BUNDLE can't be synced.<p>The synced item has an additional field targetItemId besides targetNamespace, mostly this item should not modified manually again. <p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: item data</li></ul>",
        "operationId": "syncInGameItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InGameItemSync"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr><tr><td>30022</td><td>Default region [{region}] is required</td></tr><tr><td>30324</td><td>Invalid namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr><tr><td>30373</td><td>ItemType [{itemType}] is not allowed in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/locale": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Get an item in locale",
        "description": "This API is used to get an item in specific locale. If item not exist in specific region, default region item will return.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: item data</li></ul>",
        "operationId": "getLocaleItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "populateBundle",
            "in": "query",
            "description": "whether populate bundled items if it's a bundle",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PopulatedItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/byFeatures/basic": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "List basic items by features",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This API is used to list basic items by features.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: the list of basic items</li></ul>",
        "operationId": "listBasicItemsByFeatures",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "features",
            "in": "query",
            "description": "features",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BasicItem"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/disable": {
      "put": {
        "tags": [
          "Item"
        ],
        "summary": "Disable an item",
        "description": "Disable an item.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated item</li></ul>",
        "operationId": "disableItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/stores/published/backup": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Get a published store's backup",
        "description": "This API is used to get a store's backup. <p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li><li><i>Returns</i>: store backup info</li></ul>",
        "operationId": "getPublishedStoreBackup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreBackupInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30143</td><td>Published store [{storeId}] backup doest not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/stores/{storeId}": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Get a store",
        "description": "This API is used to get a store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li><li><i>Returns</i>: store data</li></ul>",
        "operationId": "getStore",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "Update a store",
        "description": "This API is used to Update a store basic info.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=4 (UPDATE)</li><li><i>Returns</i>: updated store data</li></ul>",
        "operationId": "updateStore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StoreUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30171</td><td>Store [{store}] can't change default language to [{language}]</td></tr><tr><td>30172</td><td>Store [{store}] can't change default region to [{region}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "Store"
        ],
        "summary": "Delete a store",
        "description": "This API is used to delete a store. Only non published store can be deleted.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=8 (DELETE)</li><li><i>Returns</i>: store</li></ul>",
        "operationId": "deleteStore",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/stores": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "List stores",
        "description": "This API is used to list stores in a namespace.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li><li><i>Returns</i>: the list of stores</li></ul>",
        "operationId": "listStores",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StoreInfo"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE",
          "action": "2"
        }
      },
      "post": {
        "tags": [
          "Store"
        ],
        "summary": "Create a store",
        "description": "This API is used to create a non published store in a namespace.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=1 (CREATE)</li><li><i>Returns</i>: created store data</li></ul>",
        "operationId": "createStore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StoreCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE",
          "action": "1"
        }
      }
    },
    "/admin/namespaces/{namespace}/stores/published": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Get published store",
        "description": "This API is used to get a published store basic info, exclude category and item information.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li><li><i>Returns</i>: store data</li></ul>",
        "operationId": "getPublishedStore",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE",
          "action": "2"
        }
      },
      "delete": {
        "tags": [
          "Store"
        ],
        "summary": "Delete published store",
        "description": "This API is used to delete published store including category and items before release to public.<p><b>Warning: Please do not use this API once published to public user.</b><p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=8 (DELETE)</li></ul>",
        "operationId": "deletePublishedStore",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/stores/{storeId}/clone": {
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "Clone a store",
        "description": "This API is used to clone a store. Usually clone a draft store to published store because published store can't directly edit content.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=1 (CREATE)</li><li><i>Returns</i>: clone store info</li></ul>",
        "operationId": "cloneStore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetStoreId",
            "in": "query",
            "description": "default is published store",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30122</td><td>Store's meta mismatch</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE",
          "action": "1"
        }
      }
    },
    "/admin/namespaces/{namespace}/stores/published/rollback": {
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "Rollback a published store",
        "description": "This API is used to rollback a published store. <p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=4 (UPDATE)</li><li><i>Returns</i>: updated store info</li></ul>",
        "operationId": "rollbackPublishedStore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30143</td><td>Published store [{storeId}] backup doest not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/stores/{storeId}/export": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Export a store",
        "description": "This API is used to export a store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li></ul>",
        "operationId": "exportStore",
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/stores/import": {
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "Import a store",
        "description": "This API is used to import a store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=4 (UPDATE)</li></ul>",
        "operationId": "importStore",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default we will use published store id,and will create published store if it dose not exist",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30121</td><td>Store data is invalid</td></tr><tr><td>30122</td><td>Store's meta mismatch</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE",
          "action": "4"
        }
      }
    },
    "/public/namespaces/{namespace}/items/{itemId}/app/locale": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Get an app in locale",
        "description": "This API is used to get an app in locale. If app not exist in specific region, default region app will return.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store app)</li><li><i>Returns</i>: app data</li></ul>",
        "operationId": "publicGetApp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/categories/{categoryPath}/children": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get Child Categories",
        "description": "This API is used to get child categories by category path.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store category)</li><li><i>Returns</i>: list of child categories data</li></ul>",
        "operationId": "publicGetChildCategories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "categoryPath",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryInfo"
              }
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/categories/{categoryPath}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get Category",
        "description": "This API is used to get category by category path.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1 (CREATE)(user with this permission can view draft store category)</li><li><i>Returns</i>: category data</li></ul>",
        "operationId": "publicGetCategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "categoryPath",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CategoryInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/categories": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get Root Categories",
        "description": "This API is used to get root categories.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store category)</li><li><i>Returns</i>: root category data</li></ul>",
        "operationId": "publicGetRootCategories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryInfo"
              }
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/categories/{categoryPath}/descendants": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get Descendant Categories",
        "description": "This API is used to get descendant categories by category path.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store category)</li><li><i>Returns</i>: list of descendant categories data</li></ul>",
        "operationId": "publicGetDescendantCategories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "categoryPath",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryInfo"
              }
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/categories/download": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Download store's structured categories",
        "description": "This API is used to download store's structured categories.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store content)</li><li><i>Returns</i>: structured categories</li></ul>",
        "operationId": "downloadCategories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HierarchicalCategoryInfo"
              }
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/items/bySku": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Get item by sku",
        "description": "This API is used to get the item by sku.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Returns</i>: the item with sku</li></ul>",
        "operationId": "publicGetItemBySku",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "sku",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30343</td><td>Item of sku [{sku}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/items/search": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Search items by keyword",
        "description": "This API is used to search items by keyword in title, description and long description, It's language constrained, also if item not exist in specific region, default region item will return.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Returns</i>: the list of items</li></ul>",
        "operationId": "publicSearchItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyword",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemPagingSlicedResult"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/items/byAppId": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Get item by appId",
        "description": "This API is used to get item by appId.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Returns</i>: the item with that appId</li></ul>",
        "operationId": "publicGetItemByAppId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30342</td><td>Item of appId [{appId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/items/{itemId}/locale": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Get an item in locale",
        "description": "This API is used to get an item in locale. If item not exist in specific region, default region item will return.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Returns</i>: item data</li></ul>",
        "operationId": "publicGetItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "populateBundle",
            "in": "query",
            "description": "whether populate bundled items if it's a bundle",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PopulatedItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/items/byCriteria": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Query items by criteria",
        "description": "This API is used to query items by criteria within a store. If item not exist in specific region, default region item will return.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Returns</i>: the list of items</li></ul>",
        "operationId": "publicQueryItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "categoryPath",
            "in": "query",
            "description": "category path",
            "required": false,
            "type": "string"
          },
          {
            "name": "itemType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APP",
              "COINS",
              "INGAMEITEM",
              "BUNDLE",
              "CODE",
              "SUBSCRIPTION"
            ]
          },
          {
            "name": "appType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "GAME",
              "SOFTWARE",
              "DLC",
              "DEMO"
            ]
          },
          {
            "name": "baseAppId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "tags, separate multiple value by commas parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "features",
            "in": "query",
            "description": "features, separate multiple value by commas parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is name:asc,displayOrder:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc. Make sure to always use more than one sort if the first sort is not an unique value for example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "required": false,
            "type": "string",
            "default": "name:asc,displayOrder:asc"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemPagingSlicedResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/items/{itemId}/dynamic": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Get item dynamic data",
        "description": "Get item dynamic data for a published item.<br>Other detail info: <ul><li><i>Returns</i>: item dynamic data</li></ul>",
        "operationId": "publicGetItemDynamicData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemDynamicDataInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/items/locale/byIds": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Bulk get locale items",
        "description": "This API is used to bulk get locale items. If item not exist in specific region, default region item will return.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store items)</li><li><i>Returns</i>: the list of items info</li></ul>",
        "operationId": "publicBulkGetItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "default is published store id",
            "required": false,
            "type": "string"
          },
          {
            "name": "itemIds",
            "in": "query",
            "description": "commas separated item ids",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemInfo"
              }
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/stores": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "List all stores",
        "description": "This API is used to list all stores in a namespace.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store)</li><li><i>Returns</i>: the list of stores</li></ul>",
        "operationId": "publicListStores",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StoreInfo"
              }
            }
          }
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/anonymization/entitlements": {
      "delete": {
        "tags": [
          "Anonymization"
        ],
        "summary": "anonymize entitlement",
        "description": "Anonymize entitlement. At current it will only anonymize entitlement, entitlement history and distribution receiver.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\", action=8 (DELETE)</li></ul>",
        "operationId": "anonymizeEntitlement",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/entitlements": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Query entitlements",
        "description": "Query entitlements.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: entitlement list</li></ul>",
        "operationId": "queryEntitlements",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APP",
              "ENTITLEMENT",
              "DISTRIBUTION",
              "CODE",
              "SUBSCRIPTION"
            ]
          },
          {
            "name": "appType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "GAME",
              "SOFTWARE",
              "DLC",
              "DEMO"
            ]
          },
          {
            "name": "entitlementName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/entitlements/{entitlementId}": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get entitlement",
        "description": "Get entitlement.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: entitlement</li></ul>",
        "operationId": "getEntitlement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/history": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get user entitlement history",
        "description": "Get user entitlement histories.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: list of entitlement history</li></ul>",
        "operationId": "getUserEntitlementHistories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EntitlementHistoryInfo"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/receivers": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get distribution receivers",
        "description": "Get distribution receivers for a specific game user by dedicated server.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION\", action=2 (READ)</li><li><i>Returns</i>: distribution receiver info list</li></ul>",
        "operationId": "getUserDistributionReceivers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "game namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "game user id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DistributionReceiverInfo"
              }
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31123</td><td>Publisher namespace [{namespace}] is not distributable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/bySku": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get user entitlement by sku",
        "description": "Get user entitlement by sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "getUserEntitlementBySku",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sku",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APP",
              "ENTITLEMENT",
              "DISTRIBUTION",
              "CODE",
              "SUBSCRIPTION"
            ]
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31143</td><td>Entitlement with sku [{sku}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Query user entitlements",
        "description": "Query entitlements for a specific user.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: entitlement list</li></ul>",
        "operationId": "queryUserEntitlements",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APP",
              "ENTITLEMENT",
              "DISTRIBUTION",
              "CODE",
              "SUBSCRIPTION"
            ]
          },
          {
            "name": "appType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "GAME",
              "SOFTWARE",
              "DLC",
              "DEMO"
            ]
          },
          {
            "name": "entitlementName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      },
      "post": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Grant user entitlement",
        "description": "Grant user entitlement.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=1 (CREATE)</li><li><i>Returns</i>: granted entitlement</li></ul>",
        "operationId": "grantUserEntitlement",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EntitlementGrant"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StackableEntitlementInfo"
              }
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "1"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/revoke/byIds": {
      "put": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Revoke user's entitlements by ids",
        "description": "Revoke user's entitlements by ids.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: revoke entitlements count</li></ul>",
        "operationId": "revokeUserEntitlements",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementIds",
            "in": "query",
            "description": "separate multiple value by commas parameter.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BulkOperationResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get user entitlement",
        "description": "Get user entitlement.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: entitlement</li></ul>",
        "operationId": "getUserEntitlement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Update user entitlement",
        "description": "Update user entitlement. If update CONSUMABLE entitlement useCount to 0, the status will be CONSUMED, if update quantity of DISTRIBUTION, the status will be DISTRIBUTED.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: updated entitlement</li></ul>",
        "operationId": "updateUserEntitlement",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitlementUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31171</td><td>Entitlement [{entitlementId}] already revoked</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/bySku": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get user entitlement ownership by sku",
        "description": "Get user entitlement ownership by sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "getUserEntitlementOwnershipBySku",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sku",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APP",
              "ENTITLEMENT",
              "DISTRIBUTION",
              "CODE",
              "SUBSCRIPTION"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/receivers/{extUserId}": {
      "post": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Create distribution receiver",
        "description": "Create distribution receiver for a specific user by dedicated server. Once user distribution receiver created, user can distribute distribution to receiver.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION\", action=1 (CREATE)</li></ul>",
        "operationId": "createUserDistributionReceiver",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "game namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "game user id",
            "required": true,
            "type": "string"
          },
          {
            "name": "extUserId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DistributionReceiverCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "create distribution receiver successfully"
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31271</td><td>Distribution receiver of user [{userId}] and extUserId [{extUserId}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION",
          "action": "1"
        }
      },
      "put": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Update distribution receiver",
        "description": "Update distribution receiver for a specific user by dedicated server. It will create a new one if not exists.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION\", action=4 (UPDATE)</li></ul>",
        "operationId": "updateUserDistributionReceiver",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "game namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "game user id",
            "required": true,
            "type": "string"
          },
          {
            "name": "extUserId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DistributionReceiverCreate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "create distribution receiver successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Delete distribution receiver",
        "description": "Delete a distribution receiver for a specific user by dedicated server.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteUserDistributionReceiver",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "game namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "game user id",
            "required": true,
            "type": "string"
          },
          {
            "name": "extUserId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "delete a distribution receiver successfully"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31241</td><td>Distribution receiver of user [{userId}] and extUserId [{extUserId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/byAppId": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get user app entitlement by appId",
        "description": "Get user app entitlement by appId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "getUserAppEntitlementByAppId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppEntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31142</td><td>Entitlement with appId [{appId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/byAppId": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get user app entitlement ownership by appId",
        "description": "Get user app entitlement ownership by appId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "getUserAppEntitlementOwnershipByAppId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/disable": {
      "put": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Disable user entitlement",
        "description": "Disable user entitlement if entitlement, only active entitlement can be disable, disabled entitlement can't consume/distribute.<br><b>Like revoke, it will lose the entitlement ownership, except disabled entitlement can enable.</b><br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: disable entitlement</li></ul>",
        "operationId": "disableUserEntitlement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31172</td><td>Entitlement [{entitlementId}] not active</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/decrement": {
      "put": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Consume user entitlement",
        "description": "Consume user entitlement. If the entitlement useCount is 0, the status will be CONSUMED.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: consumed entitlement</li></ul>",
        "operationId": "consumeUserEntitlement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitlementDecrement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31171</td><td>Entitlement [{entitlementId}] already revoked</td></tr><tr><td>31172</td><td>Entitlement [{entitlementId}] not active</td></tr><tr><td>31173</td><td>Entitlement [{entitlementId}] is not consumable</td></tr><tr><td>31174</td><td>Entitlement [{entitlementId}] already consumed</td></tr><tr><td>31176</td><td>Entitlement [{entitlementId}] use count is insufficient</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/enable": {
      "put": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Enable user entitlement",
        "description": "Enable user entitlement.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: enable entitlement</li></ul>",
        "operationId": "enableUserEntitlement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31171</td><td>Entitlement [{entitlementId}] already revoked</td></tr><tr><td>31174</td><td>Entitlement [{entitlementId}] already consumed</td></tr><tr><td>31175</td><td>Entitlement [{entitlementId}] already distributed</td></tr><tr><td>31177</td><td>Permanent item already owned</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/byAppType": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Query app entitlements by appType",
        "description": "Query app entitlements by appType.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2<li><i>Returns</i>: app entitlement pagination</li></ul>",
        "operationId": "queryUserEntitlementsByAppType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "GAME",
              "SOFTWARE",
              "DLC",
              "DEMO"
            ]
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppEntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/anyOf": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Exists any user active entitlement",
        "description": "Exists any user active entitlement of specified items.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "existsAnyUserActiveEntitlementByItemIds",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemIds",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/any": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Exists any user active entitlement",
        "description": "Exists any user active entitlement of specified itemIds, skus and appIds<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "existsAnyUserActiveEntitlement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "appIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "skus",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/revoke": {
      "put": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Revoke user entitlement",
        "description": "Revoke user entitlement.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: revoke entitlement</li></ul>",
        "operationId": "revokeUserEntitlement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "4"
        }
      }
    },
    "/public/namespaces/{namespace}/users/me/entitlements/ownership/byAppId": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get my app entitlement ownership by appId",
        "description": "Get my app entitlement ownership by appId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:ENTITLEMENT\", action=2 (READ)</li><li><i>Path's namespace</i> : <ul><li>can be filled with <b>publisher namespace</b> in order to get <b>publisher namespace app entitlement ownership</b></li></ul></li></ul>",
        "operationId": "publicGetMyAppEntitlementOwnershipByAppId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/me/entitlements/ownership/any": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Exists any my active entitlement",
        "description": "Exists any my active entitlement of specified itemIds, skus and appIds<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicExistsAnyMyActiveEntitlement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "appIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "skus",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/me/entitlements/ownership/bySku": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get my entitlement ownership by sku",
        "description": "Get my entitlement ownership by sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:ENTITLEMENT\", action=2 (READ)</li><li><i>Path's namespace</i> : <ul><li>can be filled with <b>publisher namespace</b> in order to get <b>publisher namespace entitlement ownership by sku</b></li><li>can be filled with <b>game namespace</b> in order to get <b>game namespace entitlement ownership by sku</b></li></ul></li></ul>",
        "operationId": "publicGetMyEntitlementOwnershipBySku",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sku",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APP",
              "ENTITLEMENT",
              "DISTRIBUTION",
              "CODE",
              "SUBSCRIPTION"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/ownership/any": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Exists any user active entitlement",
        "description": "Exists any user active entitlement of specified itemIds, skus and appIds<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicExistsAnyUserActiveEntitlement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "appIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "skus",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/byAppId": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get user app entitlement by appId",
        "description": "Get user app entitlement by appId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicGetUserAppEntitlementByAppId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppEntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31142</td><td>Entitlement with appId [{appId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/receivers/{extUserId}": {
      "post": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Create user distribution receiver",
        "description": "Create distribution receiver for a specific user. Once user distribution receiver created, user can distribute distribution to receiver.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION\", action=1 (CREATE)</li></ul>",
        "operationId": "publicCreateUserDistributionReceiver",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "game namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "game user id",
            "required": true,
            "type": "string"
          },
          {
            "name": "extUserId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DistributionReceiverCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "create distribution receiver successfully"
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31271</td><td>Distribution receiver of user [{userId}] and extUserId [{extUserId}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION",
          "action": "1"
        }
      },
      "put": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Update user distribution receiver",
        "description": "Update distribution receiver for a specific user. It will create a new one if not exist.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION\", action=4 (UPDATE)</li></ul>",
        "operationId": "publicUpdateUserDistributionReceiver",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "game namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "game user id",
            "required": true,
            "type": "string"
          },
          {
            "name": "extUserId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DistributionReceiverCreate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "update distribution receiver successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Delete a user distribution receiver",
        "description": "Delete a distribution receiver for a specific user.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION\", action=8 (DELETE)</li></ul>",
        "operationId": "publicDeleteUserDistributionReceiver",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "game namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "game user id",
            "required": true,
            "type": "string"
          },
          {
            "name": "extUserId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "delete a distribution receiver successfully"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31241</td><td>Distribution receiver of user [{userId}] and extUserId [{extUserId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION",
          "action": "8"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/ownership/bySku": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get user entitlement ownership by sku",
        "description": "Get user entitlement ownership by sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicGetUserEntitlementOwnershipBySku",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sku",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APP",
              "ENTITLEMENT",
              "DISTRIBUTION",
              "CODE",
              "SUBSCRIPTION"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Query user entitlements",
        "description": "Query user entitlements for a specific user.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: entitlement list</li></ul>",
        "operationId": "publicQueryUserEntitlements",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APP",
              "ENTITLEMENT",
              "DISTRIBUTION",
              "CODE",
              "SUBSCRIPTION"
            ]
          },
          {
            "name": "appType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "GAME",
              "SOFTWARE",
              "DLC",
              "DEMO"
            ]
          },
          {
            "name": "entitlementName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get user entitlement",
        "description": "Get user entitlement.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: entitlement</li></ul>",
        "operationId": "publicGetUserEntitlement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/ownership/byAppId": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get user app entitlement ownership by appId",
        "description": "Get user app entitlement ownership by appId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicGetUserAppEntitlementOwnershipByAppId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/bySku": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get user entitlement by sku",
        "description": "Get user entitlement by sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicGetUserEntitlementBySku",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sku",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APP",
              "ENTITLEMENT",
              "DISTRIBUTION",
              "CODE",
              "SUBSCRIPTION"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31143</td><td>Entitlement with sku [{sku}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/receivers": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Get distribution receivers",
        "description": "Get distribution receivers in a specific namespace.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION\", action=2 (READ)</li><li><i>Returns</i>: distribution receiver info list</li></ul>",
        "operationId": "publicGetUserDistributionReceivers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "publisher namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "publisher user id",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetNamespace",
            "in": "query",
            "description": "target game namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DistributionReceiverInfo"
              }
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31123</td><td>Publisher namespace [{namespace}] is not distributable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20017</td><td>user [{userId}] in namespace [{namespaceA}] does not linked in [{namespaceB}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/distribute": {
      "put": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Distribute my distribution",
        "description": "Distribute my distribution with my user credentials. After successfully distributed, a notification will be send to configured web hook<br><p><strong>Notification Body:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Description</td></tr><tr><td>payload</td><td>String</td><td>Business object in compact json string </td></tr><tr><td>sign</td><td>String</td><td>Sha1 hex signature for payload and private key</td></tr></table><p><strong>Notification Body Example:</strong></p><pre><code style='overflow: auto'>{\r\n       \"payload\":\"{\n           \\\"namespace\\\": \\\"publisherNamespace\\\",\n           \\\"targetNamespace\\\": \\\"game1\\\",\n           \\\"targetUserId\\\": \\\"94451623768940d58416ca33ca767ec3\\\",\n           \\\"issuedAt\\\": \\\"2018-07-26T07:11:16.547Z\\\",\n           \\\"type\\\": \\\"distribution\\\",\n           \\\"extUserId\\\": \\\"1234abcd\\\",\n           \\\"sku\\\": \\\"1234asdf\\\",\n           \\\"quantity\\\": 1,\n           \\\"nonceStr\\\": \\\"34c1dcf3eb58455eb161465bbfc0b590\\\"\n       }\",\r\n       \"sign\":\"e31fb92516cc9faaf50ad70343e1293acec6f3d5\"\r\n}</pre></code></pre></code><p><strong>Payload Parameters:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Description</td></tr><tr><td>namespace</td><td>String</td><td>The publisher namespace</td></tr><tr><td>targetNamespace</td><td>String</td><td>The target game namespace</td></tr><tr><td>targetUserId</td><td>String</td><td>The user id in target game namespace</td></tr><tr><td>issuedAt</td><td>String</td><td>Issue time</td></tr><tr><td>type</td><td>String</td><td>Notification type, it is a fixed value 'distribution'</td></tr><tr><td>extUserId</td><td>String</td><td>Unique identity, e.g. character id</td></tr><tr><td>sku</td><td>String</td><td>Item unique identity</td></tr><tr><td>quantity</td><td>Integer</td><td>quantity</td></tr><tr><td>nonceStr</td><td>String</td><td>Random string, max length is 32, can be timestamp or uuid</td></tr></table></pre><h4>Encryption Rule:</h4><p>Concat payload json string and private key and then do sha1Hex.</p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION\", action=4 (UPDATE)</li></ul>",
        "operationId": "publicDistributeUserDistribution",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "publisher namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "publisher user id",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "description": "distributable entitlement id",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetNamespace",
            "in": "query",
            "description": "target game namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "extUserId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "quantity",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31121</td><td>Entitlement [{entitlementId}] is not distributable</td></tr><tr><td>31122</td><td>Exceed entitlement available distribute quantity</td></tr><tr><td>31123</td><td>Publisher namespace [{namespace}] is not distributable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20017</td><td>user [{userId}] in namespace [{namespaceA}] does not linked in [{namespaceB}]</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr><tr><td>31241</td><td>Distribution receiver of user [{userId}] and extUserId [{extUserId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:DISTRIBUTION",
          "action": "4"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/byAppType": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Query app entitlements by appType",
        "description": "Query app entitlements by appType.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: app entitlement pagination</li></ul>",
        "operationId": "publicQueryUserEntitlementsByAppType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "GAME",
              "SOFTWARE",
              "DLC",
              "DEMO"
            ]
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppEntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/decrement": {
      "put": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Consume user entitlement",
        "description": "Consume user entitlement. If the entitlement useCount is 0, the status will be CONSUMED.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: consumed entitlement</li></ul>",
        "operationId": "publicConsumeUserEntitlement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitlementDecrement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31171</td><td>Entitlement [{entitlementId}] already revoked</td></tr><tr><td>31172</td><td>Entitlement [{entitlementId}] not active</td></tr><tr><td>31173</td><td>Entitlement [{entitlementId}] is not consumable</td></tr><tr><td>31174</td><td>Entitlement [{entitlementId}] already consumed</td></tr><tr><td>31176</td><td>Entitlement [{entitlementId}] use count is insufficient</td></tr><tr><td>31178</td><td>Entitlement [{entitlementId}] out of time range</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/anonymization/fulfillment": {
      "delete": {
        "tags": [
          "Anonymization"
        ],
        "summary": "anonymize fulfillment",
        "description": "Anonymize fulfillment. At current it will only anonymize fulfillment history.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\", action=8 (DELETE)</li></ul>",
        "operationId": "anonymizeFulfillment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/fulfillment/history": {
      "get": {
        "tags": [
          "Fulfillment"
        ],
        "summary": "Query fulfillment histories",
        "description": "Query fulfillment histories in a namespace.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:FULFILLMENT\", action=2 (READ)</li><li><i>Returns</i>: query fulfillment history</li></ul>",
        "operationId": "queryFulfillmentHistories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAIL"
            ]
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentHistoryPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:FULFILLMENT",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/fulfillment": {
      "post": {
        "tags": [
          "Fulfillment"
        ],
        "summary": "Fulfill item",
        "description": "Fulfill item.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT\", action=1 (CREATED)</li><li><i>Returns</i>: fulfillment result</li></ul>",
        "operationId": "fulfillItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FulfillmentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35121</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per day</td></tr><tr><td>35122</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per transaction</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35125</td><td>Balance exceed max balance [{maxAmount}]</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr><tr><td>38122</td><td>Subscription endDate required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT",
          "action": "1"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/fulfillment/code": {
      "post": {
        "tags": [
          "Fulfillment"
        ],
        "summary": "Redeem campaign code",
        "description": "Redeem campaign code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT\", action=1 (CREATED)</li><li><i>Returns</i>: fulfillment result</li></ul>",
        "operationId": "publicRedeemCode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FulfillCodeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35121</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per day</td></tr><tr><td>35122</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per transaction</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35125</td><td>Balance exceed max balance [{maxAmount}]</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>37142</td><td>Code [{code}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37172</td><td>Campaign [{campaignId}] is inactive in namespace [{namespace}]</td></tr><tr><td>37173</td><td>Code [{code}] is inactive in namespace [{namespace}]</td></tr><tr><td>37174</td><td>Exceeded max redeem count per code [{maxCount}]</td></tr><tr><td>37175</td><td>Exceeded max redeem count per code per user [{maxCount}]</td></tr><tr><td>37177</td><td>Code redemption not started</td></tr><tr><td>37178</td><td>Code redemption already ended</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT",
          "action": "1"
        }
      }
    },
    "/admin/namespaces/{namespace}/currencies": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "List currencies",
        "description": "List currencies of a namespace.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CURRENCY\", action=2 (READ)</li><li><i>Returns</i>: Currency List</li></ul>",
        "operationId": "listCurrencies",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CurrencyInfo"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY",
          "action": "2"
        }
      },
      "post": {
        "tags": [
          "Currency"
        ],
        "summary": "Create a currency",
        "description": "Create a currency.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CURRENCY\", action=1 (CREATE)</li><li><i>Returns</i>: created currency</li></ul>",
        "operationId": "createCurrency",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CurrencyCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencyInfo"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36171</td><td>Currency [{currencyCode}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY",
          "action": "1"
        }
      }
    },
    "/admin/namespaces/{namespace}/currencies/{currencyCode}/summary": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Get currency summary",
        "description": "Get currency summary by code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CURRENCY\", action=2 (READ)</li><li><i>Returns</i>: simplified Currency</li></ul>",
        "operationId": "getCurrencySummary",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "currencyCode",
            "in": "path",
            "description": "currencyCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencySummary"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/currencies/{currencyCode}": {
      "put": {
        "tags": [
          "Currency"
        ],
        "summary": "Update a currency",
        "description": "Update a currency by currency code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CURRENCY\", action=4 (UPDATE)</li><li><i>Returns</i>: updated currency</li></ul>",
        "operationId": "updateCurrency",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "currencyCode",
            "in": "path",
            "description": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CurrencyUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencyInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "Currency"
        ],
        "summary": "Delete a currency",
        "description": "Delete a currency by currency code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CURRENCY\", action=8 (DELETE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "deleteCurrency",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currencyCode",
            "in": "path",
            "description": "currencyCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencyInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/currencies/{currencyCode}/config": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Get currency config",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> Get currency config by code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CURRENCY\", action=2 (READ)</li><li><i>Returns</i>: simplified Currency</li></ul>",
        "operationId": "getCurrencyConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "currencyCode",
            "in": "path",
            "description": "currencyCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencyConfig"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/currencies": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "list currencies",
        "description": "List currencies of a namespace.<br>Other detail info: <ul><li><i>Returns</i>: Currency List</li></ul>",
        "operationId": "publicListCurrencies",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CurrencyInfo"
              }
            }
          }
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}/transactions": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "List user wallet transactions",
        "description": "List user wallet transactions ordered by create time desc.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: wallet transaction info</li></ul>",
        "operationId": "listUserWalletTransactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "name": "walletId",
            "in": "path",
            "description": "walletId",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletTransactionPagingSlicedResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/checkTransactionCreditLimit": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Check credit transaction limit",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> Check credit transaction limit of user wallet by currency code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=2 (READ)</li></ul>",
        "operationId": "checkTransactionCreditLimit",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreditRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "check successfully and not limited"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35121</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per day</td></tr><tr><td>35122</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per transaction</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35125</td><td>Balance exceed max balance [{maxAmount}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}/enable": {
      "put": {
        "tags": [
          "Wallet"
        ],
        "summary": "Enable a user wallet",
        "description": "enable a user wallet.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=4 (UPDATE)</li></ul>",
        "operationId": "enableUserWallet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "name": "walletId",
            "in": "path",
            "description": "walletId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}/debit": {
      "put": {
        "tags": [
          "Wallet"
        ],
        "summary": "Debit a user wallet",
        "description": "Debit a user wallet.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=4 (UPDATE)</li></ul>",
        "operationId": "debitUserWallet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DebitRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35124</td><td>Wallet [{currencyCode}] has insufficient balance</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get a user wallet",
        "description": "get a user wallet.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: wallet info</li></ul>",
        "operationId": "getUserWallet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}/disable": {
      "put": {
        "tags": [
          "Wallet"
        ],
        "summary": "Disable a user wallet",
        "description": "disable a user wallet.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=4 (UPDATE)</li></ul>",
        "operationId": "disableUserWallet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "name": "walletId",
            "in": "path",
            "description": "walletId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/credit": {
      "put": {
        "tags": [
          "Wallet"
        ],
        "summary": "Credit a user wallet by currency code",
        "description": "Credit a user wallet by currency code, if wallet not exists, it will create a new wallet.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=4 (UPDATE)</li></ul>",
        "operationId": "creditUserWallet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreditRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35121</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per day</td></tr><tr><td>35122</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per transaction</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35125</td><td>Balance exceed max balance [{maxAmount}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/payment": {
      "put": {
        "tags": [
          "Wallet"
        ],
        "summary": "Pay with user wallet by currency code",
        "description": "Pay with user wallet by currency code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=4 (UPDATE)</li></ul>",
        "operationId": "payWithUserWallet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35121</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per day</td></tr><tr><td>35122</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per transaction</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35124</td><td>Wallet [{currencyCode}] has insufficient balance</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/anonymization/wallets": {
      "delete": {
        "tags": [
          "Anonymization"
        ],
        "summary": "anonymize wallet",
        "description": "Anonymize wallet. At current it will only anonymize wallet, wallet transaction.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\", action=8 (DELETE)</li></ul>",
        "operationId": "anonymizeWallet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/wallets": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Query wallets",
        "description": "Query wallets.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: paginated wallets info</li></ul>",
        "operationId": "queryWallets",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "userId",
            "required": false,
            "type": "string"
          },
          {
            "name": "currencyCode",
            "in": "query",
            "description": "currencyCode",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:WALLET",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/wallets/{walletId}": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get a wallet by wallet id",
        "description": "get a wallet by wallet id.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: wallet info</li></ul>",
        "operationId": "getWallet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:WALLET",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/me/wallets/{currencyCode}": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get my wallet by currency code and namespace",
        "description": "get my wallet by currency code and namespace.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: wallet info</li><li><i>Path's namespace</i> : <ul>   <li>can be filled with <b>publisher namespace</b> in order to get <b>publisher user wallet</b></li>   <li>can be filled with <b>game namespace</b> in order to get <b>game user wallet</b></li>   </ul></li></ul>",
        "operationId": "publicGetMyWallet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:WALLET",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/transactions": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "List wallet transactions by currency code",
        "description": "List wallet transactions by currency code ordered by create time desc.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: wallet transaction info</li></ul>",
        "operationId": "publicListUserWalletTransactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "name": "currencyCode",
            "in": "path",
            "description": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletTransactionPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:WALLET",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get a wallet by currency code",
        "description": "get a wallet by currency code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: wallet info</li></ul>",
        "operationId": "publicGetWallet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:WALLET",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/rewards/export": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Export all reward configurations",
        "description": "Export reward configurations for a given namespace into file. At current, only JSON file is supported.<p>Other detail info:<ul><li><i>*Required permission*: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=2 (READ)</li></ul>",
        "operationId": "exportRewards",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful export of reward configs"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/rewards/{rewardId}": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get a reward",
        "description": "This API is used to get reward by reward Id.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=2 (READ)</li><li><i>Returns</i>: reward instance</li></ul>",
        "operationId": "getReward",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "rewardId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34041</td><td>Reward [{rewardId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "Reward"
        ],
        "summary": "Update a reward",
        "description": "This API is used to update a reward.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=4 (UPDATE)</li><li><i>Returns</i>: reward instance</li></ul>",
        "operationId": "updateReward",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "rewardId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RewardUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34041</td><td>Reward [{rewardId}] does not exist in namespace [{namespace}]</td></tr><tr><td>34042</td><td>Reward item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34072</td><td>Duplicate reward condition [{rewardConditionName}] found in reward [{rewardCode}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "Reward"
        ],
        "summary": "Delete a reward",
        "description": "This API is used to delete a reward by reward Id. <p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=8 (DELETE)</li><li><i>Returns</i>: the deleted reward data</li></ul>",
        "operationId": "deleteReward",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "rewardId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34041</td><td>Reward [{rewardId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/rewards/import": {
      "post": {
        "tags": [
          "Reward"
        ],
        "summary": "Import reward configurations",
        "description": "Import reward configurations for a given namespace from file. At current, only JSON file is supported.<p>Other detail info:<ul><li><i>*Required permission*: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=1 (CREATE)</li></ul>",
        "operationId": "importRewards",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "replaceExisting",
            "in": "query",
            "description": "replaceExisting",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful import of reward configs"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34021</td><td>Reward data for namespace [{namespace}] is invalid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD",
          "action": "1"
        }
      }
    },
    "/admin/namespaces/{namespace}/rewards": {
      "post": {
        "tags": [
          "Reward"
        ],
        "summary": "Create a reward",
        "description": "This API is used to create a reward.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=1 (CREATE)</li><li><i>Returns</i>: created reward data</li></ul>",
        "operationId": "createReward",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RewardCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34042</td><td>Reward item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34071</td><td>Reward with code [{rewardCode}] already exists in namespace [{namespace}]</td></tr><tr><td>34072</td><td>Duplicate reward condition [{rewardConditionName}] found in reward [{rewardCode}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD",
          "action": "1"
        }
      }
    },
    "/admin/namespaces/{namespace}/rewards/byCriteria": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Query rewards by criteria",
        "description": "This API is used to query rewards by criteria.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=2 (READ)</li><li><i>Returns</i>: the list of rewards</li></ul>",
        "operationId": "queryRewards",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "eventTopic",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is name:asc,displayOrder:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc",
            "required": false,
            "type": "string",
            "default": "name:asc,displayOrder:asc"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardPagingSlicedResult"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/rewards/{rewardId}": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get a reward",
        "description": "This API is used to get reward by reward Id.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:REWARD\", action=2 (READ)</li><li><i>Returns</i>: reward instance</li></ul>",
        "operationId": "getReward_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "rewardId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34041</td><td>Reward [{rewardId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/rewards/byCriteria": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Query rewards by criteria",
        "description": "This API is used to query rewards by criteria.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:REWARD\", action=2 (READ)</li><li><i>Returns</i>: the list of rewards</li></ul>",
        "operationId": "queryRewards_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "eventTopic",
            "in": "query",
            "description": "event topic",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is name:asc,displayOrder:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc",
            "required": false,
            "type": "string",
            "default": "name:asc,displayOrder:asc"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardPagingSlicedResult"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:REWARD",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/orders/stats": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Order Statistics",
        "description": "Get Order Statistics.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: order statistics</li></ul>",
        "operationId": "getOrderStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderStatistics"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ORDER",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/orders/{orderNo}/refund": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Refund order",
        "description": "Refund order by orderNo.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ORDER\", action=4 (UPDATE)</li></ul>",
        "operationId": "refundOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNo",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderRefundCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32171</td><td>Order [{orderNo}] is not refundable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ORDER",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/orders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Query orders",
        "description": "Query orders.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: query orders</li></ul>",
        "operationId": "queryOrders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INIT",
              "CHARGED",
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "FULFILLED",
              "FULFILL_FAILED",
              "REFUNDING",
              "REFUNDED",
              "REFUND_FAILED",
              "CLOSED",
              "DELETED"
            ]
          },
          {
            "name": "orderNos",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is createdTime:desc, support sort group, e.g. sortBy=status:asc,createdTime:desc",
            "required": false,
            "type": "string",
            "default": "createdTime:desc"
          },
          {
            "name": "withTotal",
            "in": "query",
            "description": "return total in slice result when true",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderPagingResult"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ORDER",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/orders/{orderNo}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get order",
        "description": "Get order by orderNo.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: order instance</li></ul>",
        "operationId": "getOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:ORDER",
          "action": "2"
        }
      }
    },
    "/admin/orders": {
      "get": {
        "tags": [
          "Order(Dedicated)"
        ],
        "summary": "Sync orders",
        "description": "Sync orders. If response contains nextEvaluatedKey, please use it as query param in the next call to fetch the next batch, a batch has 1000 elements or less.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:ORDER\", action=2 (READ)</li><li><i>Returns</i>: sync orders</li></ul>",
        "operationId": "syncOrders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "include ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": true,
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "exclude ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": true,
            "type": "string"
          },
          {
            "name": "nextEvaluatedKey",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderSyncResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:ORDER",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/receipt.pdf": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Download user order receipt",
        "description": "Download user order receipt by orderNo.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: order receipt pdf</li></ul>",
        "operationId": "downloadUserOrderReceipt",
        "produces": [
          "application/pdf"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32173</td><td>Receipt of order [{orderNo}] is not downloadable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/history": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get user order histories",
        "description": "Get user order history.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: get order history</li></ul>",
        "operationId": "getUserOrderHistories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderHistoryInfo"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Query user orders",
        "description": "Query user orders.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: get order</li></ul>",
        "operationId": "queryUserOrders",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INIT",
              "CHARGED",
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "FULFILLED",
              "FULFILL_FAILED",
              "REFUNDING",
              "REFUNDED",
              "REFUND_FAILED",
              "CLOSED",
              "DELETED"
            ]
          },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders/countOfItem": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get the count of purchased item",
        "description": "This API is used to get the count of purchased item which is the order target.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: Item purchased count</li></ul>",
        "operationId": "countOfPurchasedItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PurchasedItemCount"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get an order",
        "description": "Get an order.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: get order</li></ul>",
        "operationId": "getUserOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update order status",
        "description": "Update order status.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=4 (UPDATE)</li><li><i>Returns</i>: updated order</li></ul>",
        "operationId": "updateUserOrderStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNo",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/fulfill": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Fulfill an order",
        "description": "Fulfill an order if the order is charged but fulfill failed.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=4 (UPDATE)</li><li><i>Returns</i>: fulfilled order</li></ul>",
        "operationId": "fulfillUserOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35121</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per day</td></tr><tr><td>35122</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per transaction</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35125</td><td>Balance exceed max balance [{maxAmount}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32172</td><td>Invalid order status [{status}] for order [{orderNo}]</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/notifications": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Web hook for payment notification",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This API is used as a web hook for payment notification from justice payment service.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=4 (UPDATE)</li><li><i>Returns</i>: Process result</li></ul>",
        "operationId": "processUserOrderNotification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNo",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TradeNotification"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "process successfully"
          },
          "400": {
            "description": "process failed"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/grant": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get user order grant",
        "description": "Get user order grant that fulfilled by this order.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: get order grant</li></ul>",
        "operationId": "getUserOrderGrant",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderGrantInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/orders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Query user orders",
        "description": "Query user orders.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: get order</li></ul>",
        "operationId": "publicQueryUserOrders",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INIT",
              "CHARGED",
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "FULFILLED",
              "FULFILL_FAILED",
              "REFUNDING",
              "REFUNDED",
              "REFUND_FAILED",
              "CLOSED",
              "DELETED"
            ]
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "2"
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create an order",
        "description": "Create an order. The result contains the checkout link and payment token. User with permission SANDBOX will create sandbox order that not real paid for xsolla/alipay and not validate price for wxpay.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=1 (CREATE)</li><li><i>Optional permission(user with this permission will create sandbox order)</i>: resource=\"SANDBOX\", action=1 (CREATE)</li><li>It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT</li><li><i>Returns</i>: created order</li></ul>",
        "operationId": "publicCreateUserOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32121</td><td>Order price mismatch</td></tr><tr><td>32122</td><td>Item type [{itemType}] does not support</td></tr><tr><td>35121</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per day</td></tr><tr><td>35122</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per transaction</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35124</td><td>Wallet [{currencyCode}] has insufficient balance</td></tr><tr><td>35125</td><td>Balance exceed max balance [{maxAmount}]</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32175</td><td>User [{userId}] exceed item max count [{maxCount}] of per user</td></tr><tr><td>32176</td><td>Exceed item [{itemId}] max count [{maxCount}]</td></tr><tr><td>31177</td><td>Permanent item already owned</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "1"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get user order",
        "description": "Get user order.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: get order</li></ul>",
        "operationId": "publicGetUserOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}/receipt.pdf": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Download user order receipt",
        "description": "Download user order receipt by orderNo.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: order receipt pdf</li></ul>",
        "operationId": "publicDownloadUserOrderReceipt",
        "produces": [
          "application/pdf"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32173</td><td>Receipt of order [{orderNo}] is not downloadable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}/cancel": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Cancel user order",
        "description": "Cancel user order.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=4 (UPDATE)</li><li><i>Returns</i>: cancelled order</li></ul>",
        "operationId": "publicCancelUserOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32177</td><td>Order [{orderNo}] is not cancelable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "4"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}/history": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get user order histories",
        "description": "Get user order histories.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: get order history</li></ul>",
        "operationId": "publicGetUserOrderHistories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderHistoryInfo"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/payment/notifications": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Query payment notifications",
        "description": "Query payment notifications.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT:NOTIFICATION\", action=2 (READ)</li><li><i>Returns</i>: Payment notifications</li></ul>",
        "operationId": "queryPaymentNotifications",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentOrderNo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "externalId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PROCESSED",
              "ERROR",
              "WARN",
              "IGNORED"
            ]
          },
          {
            "name": "notificationType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "notificationSource",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "WALLET",
              "XSOLLA",
              "ADYEN",
              "STRIPE",
              "CHECKOUT",
              "ALIPAY",
              "WXPAY",
              "PAYPAL"
            ]
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "allowed format: \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "allowed format: \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentNotificationPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT:NOTIFICATION",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/payment/orders/{paymentOrderNo}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get payment order",
        "description": "Get payment order by paymentOrderNo.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=2 (READ)</li><li><i>Returns</i>: payment order instance</li></ul>",
        "operationId": "getPaymentOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentOrderNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "Payment"
        ],
        "summary": "Charge payment order without payment flow",
        "description": "<b>[TEST FACILITY ONLY]</b> Charge payment order without payment flow for unpaid payment order, usually for test usage to simulate real currency payment process.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: payment order instance</li></ul>",
        "operationId": "chargePaymentOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentOrderNo",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOrderChargeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33322</td><td>Payment provider [{paymentProvider}] not supported</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33171</td><td>Invalid payment order status [{status}] for payment order [{paymentOrderNo}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/payment/orders/byExtTxId": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "List external order No by external transaction id",
        "description": "List external order No by external transaction id.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=2 (READ)</li><li><i>Returns</i>: payment orders</li></ul>",
        "operationId": "listExtOrderNoByExtTxId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "extTxId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/payment/orders/{paymentOrderNo}/status": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get payment order charge status",
        "description": "Get payment order charge status.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=2 (READ)</li><li><i>Returns</i>: payment order charge status</li></ul>",
        "operationId": "getPaymentOrderChargeStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentOrderNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderChargeStatus"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/payment/orders": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Query payment orders",
        "description": "Query payment orders.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=2 (READ)</li><li><i>Returns</i>: query payment orders</li></ul>",
        "operationId": "queryPaymentOrders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INIT",
              "AUTHORISED",
              "AUTHORISE_FAILED",
              "CHARGED",
              "CHARGE_FAILED",
              "NOTIFICATION_OF_CHARGEBACK",
              "REQUEST_FOR_INFORMATION",
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "REFUNDING",
              "REFUNDED",
              "REFUND_FAILED",
              "DELETED"
            ]
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "EXTERNAL",
              "INTERNAL"
            ]
          },
          {
            "name": "extTxId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT",
          "action": "2"
        }
      },
      "post": {
        "tags": [
          "Payment(Dedicated)"
        ],
        "summary": "Create payment order by dedicated server",
        "description": "<p>This API is used to create payment order from non justice service. e.g. from dedicated server, the result contains the payment station url.</p><p><strong>Path Parameter:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>Namespace that payment order resides in, should be publisher namespace if it's a Steam like platform that share <br>payment config cross namespaces, otherwise it's the game namespace</td></tr></table><p><strong>Request Body Parameters:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>extOrderNo</td><td>String</td><td>Yes</td><td>External order number, it should be unique in invoker order system</td></tr><tr><td>sku</td><td>String</td><td>No</td><td>Item identity</td></tr><tr><td>targetNamespace</td><td>String</td><td>Yes</td><td>The game namespace</td></tr><tr><td>targetUserId</td><td>String</td><td>Yes</td><td>User id for the order owner in game namespace</td></tr><tr><td>extUserId</td><td>String</td><td>No</td><td>External user id, can be user character id </td></tr><tr><td>price</td><td>int</td><td>Yes</td><td>price which should be greater than 0</td></tr><tr><td>title</td><td>String</td><td>Yes</td><td>Item title</td></tr><tr><td>description</td><td>String</td><td>Yes</td><td>Item description</td></tr><tr><td>currencyCode</td><td>String</td><td>No</td><td>Currency code, default is USD</td></tr><tr><td>currencyNamespace</td><td>String</td><td>No</td><td>Currency namespace, default is publisher namespace</td></tr><tr><td>region</td><td>String</td><td>No</td><td>Country of the user, will get from user info if not present</td></tr><tr><td>language</td><td>String</td><td>No</td><td>Language of the user</td></tr><tr><td>sandbox</td><td>Boolean</td><td>No</td><td>set to true will create sandbox order that not real paid for xsolla/alipay and will not validate <br>price for wxpay.</td></tr><tr><td>returnUrl</td><td>String</td><td>No</td><td>customized return url for redirect once payment finished, leave unset to use configuration in <br>namespace</td></tr><tr><td>notifyUrl</td><td>String</td><td>No</td><td>customized notify url for payment web hook, leave unset to use configuration in namespace</td></tr><tr><td>customParameters</td><td>String</td><td>No</td><td>Custom parameters</td></tr></table></pre><p><strong>Request Body Example:</strong></p><pre><code style='overflow: auto'>{\r\n           \"extOrderNo\": \"123456789\",\n           \"sku\": \"sku\",\n           \"targetNamespace\": \"game1\",\n           \"targetUserId\": \"94451623768940d58416ca33ca767ec3\",\n           \"extUserId\": \"678\",\n           \"title\": \"Frostmourne\",\n           \"description\\\": \"Here was power. Here was despair\",\n           \"price\": 100,\n           \"region\": \"CN\", \n           \"language\": \"zh-CN\", \n           \"currencyCode\": \"USD\",\n           \"currencyNamespace\": \"accelbyte\"\r\n}</pre></code><h4>Payment Notification:</h4><p>After user complete the payment, it will send notification to configured web hook, http status code should return 200 or 204 once you resolve notification successfully, otherwise payment system will retry notification in interval</p><p><strong>Payment notification parameter:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>payload</td><td>String</td><td>Yes</td><td>Payment notification payload in json string </td></tr><tr><td>sign</td><td>String</td><td>Yes</td><td>sha1 hex signature for payload and private key</td></tr></table></pre><p><strong>Payment notification parameter Example:</strong></p><pre><code style='overflow: auto'>{\r\n       \"payload\": \"{\n           \\\"type\\\": \\\"payment\\\",\n           \\\"nonceStr\\\": \\\"34c1dcf3eb58455eb161465bbfc0b590\\\",\n           \\\"paymentOrderNo\\\": \\\"18081239088\\\",\n           \\\"namespace\\\": \\\"accelbyte\\\",\n           \\\"targetNamespace\\\": \\\"game1\\\",\n           \\\"targetUserId\\\": \\\"94451623768940d58416ca33ca767ec3\\\",\n           \\\"extOrderNo\\\": \\\"123456789\\\",\n           \\\"sku\\\": \\\"sku\\\",\n           \\\"extUserId\\\": \\\"678\\\",\n           \\\"price\\\": 100,\n           \\\"paymentProvider\\\": \\\"XSOLLA\\\",\n           \\\"vat\\\": 0,\n           \\\"salesTax\\\": 0,\n           \\\"paymentProviderFee\\\": 0,\n           \\\"paymentMethodFee\\\": 0,\n           \\\"currency\\\": {\n                   \\\"currencyCode\\\": \\\"USD\\\",\n                   \\\"currencySymbol\\\": \\\"$\\\",\n                   \\\"currencyType\\\": \\\"REAL\\\",\n                   \\\"namespace\\\": \\\"accelbyte\\\",\n                   \\\"decimals\\\": 2\n               },\n           \\\"status\\\": \\\"CHARGED\\\",\n           \\\"createdTime\\\": \\\"2018-07-28T00:39:16.274Z\\\",\n           \\\"chargedTime\\\": \\\"2018-07-28T00:39:16.274Z\\\"\n       }\",\r\n       \"sign\":\"e31fb92516cc9faaf50ad70343e1293acec6f3d5\"\r\n}</pre></code><p><strong>Payment notification payload parameter list:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>type</td><td>String</td><td>Yes</td><td>Notification type: 'payment'</td></tr><tr><td>paymentOrderNo</td><td>String</td><td>Yes</td><td>Payment system generated order number</td></tr><tr><td>extOrderNo</td><td>String</td><td>No</td><td>External order number that passed by invoker</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>Namespace that related payment order resides in</td></tr><tr><td>targetNamespace</td><td>String</td><td>Yes</td><td>The game namespace</td></tr><tr><td>targetUserId</td><td>String</td><td>Yes</td><td>The user id in game namespace</td></tr><tr><td>sku</td><td>String</td><td>No</td><td>Item identify, it will return if pass it when create payment</td></tr><tr><td>extUserId</td><td>String</td><td>No</td><td>External user id, can be character id, it will return if pass it when create payment</td></tr><tr><td>price</td><td>int</td><td>Yes</td><td>Price of item</td></tr><tr><td>paymentProvider</td><td>String</td><td>Yes</td><td>Payment provider, allowed values: xsolla/alipay/wxpay/wallet</td></tr><tr><td>vat</td><td>int</td><td>Yes</td><td>Payment order VAT</td></tr><tr><td>salesTax</td><td>int</td><td>Yes</td><td>Payment order sales tax</td></tr><tr><td>paymentProviderFee</td><td>int</td><td>Yes</td><td>Payment provider fee</td></tr><tr><td>paymentMethodFee</td><td>int</td><td>Yes</td><td>Payment method fee</td></tr><tr><td>currency</td><td>Map</td><td>Yes</td><td>Payment order currency info</td></tr><tr><td>status</td><td>String</td><td>Yes</td><td>Payment order status</td></tr><tr><td>statusReason</td><td>String</td><td>No</td><td>Payment order status reason</td></tr><tr><td>createdTime</td><td>Datetime</td><td>No</td><td>The time of the order created</td></tr><tr><td>chargedTime</td><td>Datetime</td><td>No</td><td>The time of the order charged</td></tr><tr><td>customParameters</td><td>Map</td><td>No</td><td>custom parameters, will return if pass it when create payment</td></tr><tr><td>nonceStr</td><td>String</td><td>Yes</td><td>Random string, max length is 32, can be timestamp or uuid</td></tr></table></pre><p><strong>Currency info parameter list:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>currencyCode</td><td>String</td><td>Yes</td><td>Currency Code</td></tr><tr><td>currencySymbol</td><td>String</td><td>Yes</td><td>Currency Symbol</td></tr><tr><td>currencyType</td><td>String</td><td>Yes</td><td>Currency type(REAL/VIRTUAL)</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>Currency namespace</td></tr><tr><td>decimals</td><td>int</td><td>Yes</td><td>Currency decimals</td></tr></table></pre><h4>Encryption Rule:</h4><p>Concat payload json string and private key and then do sha1Hex.</p><h4>Other detail info:</h4> <ul><li><i>Token type</i>: client token</li><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=1 (CREATE)</li><li><i>Optional permission(user with this permission will create sandbox order)</i>: resource=\"SANDBOX\", action=1 (CREATE)</li><li>It will be forbidden while the target user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT</li><li><b>cross namespace allowed</b></li><li><i>Returns</i>: created payment order info</li></ul>",
        "operationId": "createPaymentOrderByDedicated",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExternalPaymentOrderCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderCreateResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33121</td><td>Recurring payment failed with code: [{errorCode}] and message: [{errorMessage}]</td></tr><tr><td>33122</td><td>Subscription not match when create payment order</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr><tr><td>33145</td><td>Recurring token not found</td></tr><tr><td>20008</td><td>user [{userId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr><tr><td>33173</td><td>ExtOrderNo [{extOrderNo}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT",
          "action": "1"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/payment/orders": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Create payment order",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This API is used to create payment order from justice service. The result contains the payment station url.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT\", action=1 (CREATE)</li><li>It will be forbidden while the user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT</li><li><i>Returns</i>: created order</li></ul>",
        "operationId": "createUserPaymentOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOrderCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33121</td><td>Recurring payment failed with code: [{errorCode}] and message: [{errorMessage}]</td></tr><tr><td>33122</td><td>Subscription not match when create payment order</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr><tr><td>33145</td><td>Recurring token not found</td></tr><tr><td>20008</td><td>user [{userId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT",
          "action": "1"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/payment/orders/{paymentOrderNo}/refund": {
      "put": {
        "tags": [
          "Payment"
        ],
        "summary": "Refund payment order",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This API is used to refund order by paymentOrderNo from justice service.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT\", action=4 (UPDATE)</li></ul>",
        "operationId": "refundUserPaymentOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentOrderNo",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOrderRefund"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33172</td><td>Payment order [{paymentOrderNo}] is not refundable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT",
          "action": "4"
        }
      }
    },
    "/admin/payment/orders": {
      "get": {
        "tags": [
          "Payment(Dedicated)"
        ],
        "summary": "Sync payment orders",
        "description": "Sync payment orders. If response contains nextEvaluatedKey, please use it as query param in the next call to fetch the next batch, a batch has 1000 elements or less.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT\", action=2 (READ)</li><li><i>Returns</i>: sync payment orders</li></ul>",
        "operationId": "syncPaymentOrders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "include ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": true,
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "exclude ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": true,
            "type": "string"
          },
          {
            "name": "nextEvaluatedKey",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderSyncResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT",
          "action": "2"
        }
      }
    },
    "/admin/namespaces/{namespace}/payment/orders/{paymentOrderNo}/refund": {
      "put": {
        "tags": [
          "Payment(Dedicated)"
        ],
        "summary": "Refund payment order by dedicated server",
        "description": "<p>This API is used to refund payment order by paymentOrderNo from non justice service. e.g. dedicated server. <ul><li>if the status field of response json is \"REFUNDED\", usually wallet paid, it indicates payment order already refunded</li><li>if the status field of response json is \"REFUNDING\", usually real money paid, platform will send notification to registered notify url once refund successfully</li> </ul></p><p><strong>Path Parameter:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>Namespace that payment order resides in</td></tr><tr><td>paymentOrderNo</td><td>String</td><td>Yes</td><td>Payment order number</td></tr></table></pre><p><strong>Request Body Parameters:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>description</td><td>String</td><td>Yes</td><td>Refund description</td></tr></table></pre><p><strong>Request Body Example:</strong></p><pre><code style='overflow: auto'>{\r\n           \"description\": \"Repeated item.\"\r\n}</pre></code><h4>Refund Notification:</h4><p>It will send notification to configured web hook after refund successfully, http status code should return 200 or 204 once you resolve notification successfully, otherwise payment system will retry notification in interval</p><p><strong>Refund notification parameter:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>payload</td><td>String</td><td>Yes</td><td>Refund notification payload in json string </td></tr><tr><td>sign</td><td>String</td><td>Yes</td><td>sha1 hex signature for payload and private key</td></tr></table></pre><p><strong>Refund notification Example:</strong></p><pre><code style='overflow: auto'>{\r\n       \"payload\": \"{\n           \\\"type\\\": \\\"payment\\\",\n           \\\"nonceStr\\\": \\\"34c1dcf3eb58455eb161465bbfc0b590\\\",\n           \\\"paymentOrderNo\\\": \\\"18081239088\\\",\n           \\\"namespace\\\": \\\"accelbyte\\\",\n           \\\"targetNamespace\\\": \\\"game1\\\",\n           \\\"targetUserId\\\": \\\"94451623768940d58416ca33ca767ec3\\\",\n           \\\"extOrderNo\\\": \\\"123456789\\\",\n           \\\"sku\\\": \\\"sku\\\",\n           \\\"extUserId\\\": \\\"678\\\",\n           \\\"price\\\": 100,\n           \\\"paymentProvider\\\": \\\"XSOLLA\\\",\n           \\\"vat\\\": 0,\n           \\\"salesTax\\\": 0,\n           \\\"paymentProviderFee\\\": 0,\n           \\\"paymentMethodFee\\\": 0,\n           \\\"currency\\\": {\n                   \\\"currencyCode\\\": \\\"USD\\\",\n                   \\\"currencySymbol\\\": \\\"$\\\",\n                   \\\"currencyType\\\": \\\"REAL\\\",\n                   \\\"namespace\\\": \\\"accelbyte\\\",\n                   \\\"decimals\\\": 2\n               },\n           \\\"status\\\": \\\"REFUNDED\\\",\n           \\\"createdTime\\\": \\\"2018-07-28T00:39:16.274Z\\\",\n           \\\"chargedTime\\\": \\\"2018-07-28T00:39:16.274Z\\\",\n           \\\"refundedTime\\\": \\\"2018-07-28T00:39:16.274Z\\\"\n       }\",\r\n       \"sign\":\"e31fb92516cc9faaf50ad70343e1293acec6f3d5\"\r\n}</pre></code><p><strong>Refund notification payload parameter list:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>type</td><td>String</td><td>Yes</td><td>Notification type: 'payment'</td></tr><tr><td>paymentOrderNo</td><td>String</td><td>Yes</td><td>Payment system generated order number</td></tr><tr><td>extOrderNo</td><td>String</td><td>No</td><td>External order number that passed by invoker</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>Namespace that related payment order resides in</td></tr><tr><td>targetNamespace</td><td>String</td><td>Yes</td><td>The game namespace</td></tr><tr><td>targetUserId</td><td>String</td><td>Yes</td><td>The user id in game namespace</td></tr><tr><td>sku</td><td>String</td><td>No</td><td>Item identify, it will return if pass it when create payment</td></tr><tr><td>extUserId</td><td>String</td><td>No</td><td>External user id, can be character id, it will return if pass it when create payment</td></tr><tr><td>price</td><td>int</td><td>Yes</td><td>Price of item</td></tr><tr><td>paymentProvider</td><td>String</td><td>Yes</td><td>Payment provider: xsolla/alipay/wxpay/wallet</td></tr><tr><td>vat</td><td>int</td><td>Yes</td><td>Payment order VAT</td></tr><tr><td>salesTax</td><td>int</td><td>Yes</td><td>Payment order sales tax</td></tr><tr><td>paymentProviderFee</td><td>int</td><td>Yes</td><td>Payment provider fee</td></tr><tr><td>paymentMethodFee</td><td>int</td><td>Yes</td><td>Payment method fee</td></tr><tr><td>currency</td><td>Map</td><td>Yes</td><td>Payment order currency info</td></tr><tr><td>status</td><td>String</td><td>Yes</td><td>Payment order status</td></tr><tr><td>statusReason</td><td>String</td><td>No</td><td>Payment order refund status reason</td></tr><tr><td>createdTime</td><td>Datetime</td><td>No</td><td>The time of the order created</td></tr><tr><td>chargedTime</td><td>Datetime</td><td>No</td><td>The time of the order charged</td></tr><tr><td>refundedTime</td><td>Datetime</td><td>No</td><td>The time of the order refunded</td></tr><tr><td>customParameters</td><td>Map</td><td>No</td><td>custom parameters, will return if pass it when create payment</td></tr><tr><td>nonceStr</td><td>String</td><td>Yes</td><td>Random string, max length is 32, </td></tr></table></pre><p><strong>Currency info parameter list:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>currencyCode</td><td>String</td><td>Yes</td><td>Currency Code</td></tr><tr><td>currencySymbol</td><td>String</td><td>Yes</td><td>Currency Symbol</td></tr><tr><td>currencyType</td><td>String</td><td>Yes</td><td>Currency type(REAL/VIRTUAL)</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>Currency namespace</td></tr><tr><td>decimals</td><td>int</td><td>Yes</td><td>Currency decimals</td></tr></table></pre><h4>Encryption Rule:</h4><p>Concat payload json string and private key and then do sha1Hex.</p><h4>Other detail info:</h4> <ul><li><i>Token type</i>: client token</li><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=4 (UPDATE)</li><li><b>cross namespace allowed</b></li></ul>",
        "operationId": "refundPaymentOrderByDedicated",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentOrderNo",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOrderRefund"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderRefundResult"
            }
          },
          "204": {
            "description": "Refund successfully"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33172</td><td>Payment order [{paymentOrderNo}] is not refundable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/xbl/cert": {
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Upload xbl business partner cert file",
        "description": "Upload xbl business partner cert file.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated xbl iap config</li></ul>",
        "operationId": "updateXblBPCertFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "password",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/XblIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/epicgames": {
      "get": {
        "tags": [
          "IAP"
        ],
        "summary": "Get epicgames iap config",
        "description": "Get epic games iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: epic games iap config</li></ul>",
        "operationId": "getEpicGamesIAPConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EpicGamesIAPConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39243</td><td>EpicGames config does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Update epic games iap config",
        "description": "Update epic games iap config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated epic games iap config</li></ul>",
        "operationId": "updateEpicGamesIAPConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EpicGamesIAPConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EpicGamesIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "IAP"
        ],
        "summary": "Delete epic games iap config",
        "description": "Delete epic games iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteEpicGamesIAPConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/xbl": {
      "get": {
        "tags": [
          "IAP"
        ],
        "summary": "Get xbox iap config",
        "description": "Get xbox iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: xbox iap config</li></ul>",
        "operationId": "getXblIAPConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/XblIAPConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39242</td><td>XBL config does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Update xbl iap config",
        "description": "Update xbl iap config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated xbl iap config</li></ul>",
        "operationId": "updateXblIAPConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XblIAPConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/XblIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "IAP"
        ],
        "summary": "Delete xbl iap config",
        "description": "Delete xbl iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteXblAPConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/apple": {
      "get": {
        "tags": [
          "IAP"
        ],
        "summary": "Get apple iap config",
        "description": "Get apple iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: apple iap config</li></ul>",
        "operationId": "getAppleIAPConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Update apple iap config",
        "description": "Update apple iap config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated apple iap config</li></ul>",
        "operationId": "updateAppleIAPConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AppleIAPConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "IAP"
        ],
        "summary": "Delete apple iap config",
        "description": "Delete apple iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteAppleIAPConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/playstation": {
      "get": {
        "tags": [
          "IAP"
        ],
        "summary": "Get playstation iap config",
        "description": "Get playstation iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: playstation iap config</li></ul>",
        "operationId": "getPlayStationIAPConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayStationIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Update playstation iap config",
        "description": "Update playstation iap config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated playstation iap config</li></ul>",
        "operationId": "updatePlaystationIAPConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlaystationIAPConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayStationIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "IAP"
        ],
        "summary": "Delete playstation iap config",
        "description": "Delete playstation iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deletePlaystationIAPConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/google": {
      "get": {
        "tags": [
          "IAP"
        ],
        "summary": "Get google iap config",
        "description": "Get google iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: google iap config</li></ul>",
        "operationId": "getGoogleIAPConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoogleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Update google iap config",
        "description": "Update google iap config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated google iap config</li></ul>",
        "operationId": "updateGoogleIAPConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoogleIAPConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoogleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "IAP"
        ],
        "summary": "Delete google iap config",
        "description": "Delete google iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteGoogleIAPConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/google/cert": {
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Upload google play p12 file",
        "description": "Upload google play p12 file.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated google iap config</li></ul>",
        "operationId": "updateGoogleP12File",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoogleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/steam": {
      "get": {
        "tags": [
          "IAP"
        ],
        "summary": "Get steam iap config",
        "description": "Get steam iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: steam iap config</li></ul>",
        "operationId": "getSteamIAPConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SteamIAPConfig"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Update steam iap config",
        "description": "Update steam iap config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated steam iap config</li></ul>",
        "operationId": "updateSteamIAPConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SteamIAPConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SteamIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "IAP"
        ],
        "summary": "Delete steam iap config",
        "description": "Delete steam iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteSteamIAPConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/stadia": {
      "get": {
        "tags": [
          "IAP"
        ],
        "summary": "Get stadia iap config",
        "description": "Get stadia iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: stadia iap config</li></ul>",
        "operationId": "getStadiaIAPConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StadiaIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "2"
        }
      },
      "delete": {
        "tags": [
          "IAP"
        ],
        "summary": "Delete stadia iap config",
        "description": "Delete stadia iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteStadiaIAPConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "8"
        }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/stadia/cert": {
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Upload stadia json config file",
        "description": "Upload stadia json config file.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated stadia iap config</li></ul>",
        "operationId": "updateStadiaJsonConfigFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StadiaIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/iap/mock/receipt": {
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Mock fulfill iap item.",
        "description": "<b>[TEST FACILITY ONLY]</b> Mock fulfill iap item without validate receipt.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "mockFulfillIAPItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MockIAPReceipt"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Fulfill item successfully"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35121</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per day</td></tr><tr><td>35122</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per transaction</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35125</td><td>Balance exceed max balance [{maxAmount}]</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr><tr><td>38122</td><td>Subscription endDate required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP",
          "action": "4"
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/iap": {
      "get": {
        "tags": [
          "IAP"
        ],
        "summary": "Query IAP orders",
        "description": "Query IAP orders.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP\", action=2 (READ)</li><li><i>Returns</i>: paginated iap orders</li></ul>",
        "operationId": "queryUserIAPOrders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APPLE",
              "GOOGLE",
              "PLAYSTATION",
              "STEAM",
              "XBOX",
              "STADIA",
              "EPICGAMES"
            ]
          },
          {
            "name": "productId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "VERIFIED",
              "FULFILLED",
              "FAILED"
            ]
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/IAPOrderPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/steam/sync": {
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Sync steam inventory.",
        "description": "Sync steam inventory's items.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "syncSteamInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SteamSyncRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP",
          "action": "4"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/apple/receipt": {
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Fulfill apple iap item.",
        "description": "Verify apple iap receipt and fulfill item.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "publicFulfillAppleIAPItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AppleIAPReceipt"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Fulfill item successfully"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39121</td><td>Apple iap receipt verify failed with status code [{statusCode}]</td></tr><tr><td>35121</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per day</td></tr><tr><td>35122</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per transaction</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35125</td><td>Balance exceed max balance [{maxAmount}]</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr><tr><td>38122</td><td>Subscription endDate required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39141</td><td>Apple iap receipt of transaction [{transactionId}] for productId [{}] does not exist</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39171</td><td>The bundle id in namespace [{namespace}] expect [{expected}] but was [{actual}]</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP",
          "action": "4"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/psn/sync": {
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Synchronize with entitlements in PSN Store.",
        "description": "Synchronize with entitlements in PSN Store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: result of synchronization</li></ul>",
        "operationId": "publicReconcilePlayStationStore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayStationReconcileResult"
              }
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39123</td><td>PSN Sync failed with status code [{statusCode}] and psnAuthCode is [{psnAuthCode}]</td></tr>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP",
          "action": "4"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/stadia/sync": {
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Sync stadia inventory.",
        "description": "Sync stadia entitlements.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "syncStadiaEntitlement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StadiaSyncRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP",
          "action": "4"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/google/receipt": {
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Fulfill google iap item.",
        "description": "Verify google iap receipt and fulfill item.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "publicFulfillGoogleIAPItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoogleIAPReceipt"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Fulfill item successfully"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39122</td><td>Google iap receipt is invalid with status code [{statusCode}] and error message [{message}]</td></tr><tr><td>35121</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per day</td></tr><tr><td>35122</td><td>Transaction amount [{actualAmount}] exceed max amount [{maxAmount}] per transaction</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35125</td><td>Balance exceed max balance [{maxAmount}]</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr><tr><td>38122</td><td>Subscription endDate required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39172</td><td>The order id in namespace [{namespace}] expect [{expected}] but was [{actual}]</td></tr><tr><td>39173</td><td>The purchase status of google play order [{orderId}] in namespace [{namespace}] expect [{expected}] but was [{actual}]</td></tr><tr><td>39174</td><td>The google iap purchase time of order [{orderId}] in namespace [{namespace}] expect [{expected}] but was [{actual}]</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP",
          "action": "4"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/xbl/sync": {
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Sync Xbox inventory.",
        "description": "Sync Xbox inventory's items.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "syncXboxInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XblReconcileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/XblReconcileResult"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP",
          "action": "4"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/epicgames/sync": {
      "put": {
        "tags": [
          "IAP"
        ],
        "summary": "Sync epic games inventory.",
        "description": "Sync epic games inventory's items.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "syncEpicGamesInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EpicGamesReconcileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EpicGamesReconcileResult"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/checkoutconfig": {
      "put": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Update checkout.com config",
        "description": "Update checkout.com config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateCheckoutConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "validate",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CheckoutConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/matched": {
      "get": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Debug matched payment merchant config(internal)",
        "description": "Debug matched payment merchant config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: payment merchant config info</li></ul>",
        "operationId": "debugMatchedPaymentMerchantConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "description": "namespace",
            "required": false,
            "type": "string",
            "default": "*"
          },
          {
            "name": "region",
            "in": "query",
            "description": "region",
            "required": false,
            "type": "string",
            "default": "*"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "2"
        }
      }
    },
    "/admin/payment/config/merchant/checkoutconfig/test": {
      "post": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Test checkout.com configuration",
        "description": "Test checkout.com configuration. <h4>Check List:</h4> <ul><li>publicKey</li><li>secretKey</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: test result</li></ul>",
        "operationId": "testCheckoutConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CheckoutConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/adyenconfig/test": {
      "post": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Test adyen configuration",
        "description": "Test adyen configuration. <h4>Check List:</h4> <ul><li>apiKey</li><li>merchantAccount</li></ul><h4>Non-check list:</h4><ul><li>notificationHmacKey</li><li>notificationUsername</li><li>notificationPassword</li><li>liveEndpointUrlPrefix</li><li>allowedPaymentMethods</li><li>blockedPaymentMethods</li><li>settings</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: test adyen config</li></ul>",
        "operationId": "testAdyenConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AdyenConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/{id}": {
      "get": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Get payment merchant config",
        "description": "Get payment merchant config by id.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: payment merchant config info</li></ul>",
        "operationId": "getPaymentMerchantConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "2"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/stripeconfig/test": {
      "get": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Test stripe configuration by id",
        "description": "Test stripe configuration in payment merchant config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: test adyen config</li></ul>",
        "operationId": "testStripeConfigById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "2"
        }
      }
    },
    "/admin/payment/config/merchant/stripeconfig/test": {
      "post": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Test stripe configuration",
        "description": "Test stripe configuration. <h4>Check List:</h4> <ul><li>secretKey</li><li>allowedPaymentMethodTypes</li></ul><h4>Non-check list:</h4><ul><li>publishableKey</li><li>webhookSecret</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: test adyen config</li></ul>",
        "operationId": "testStripeConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StripeConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/wxpayconfig/test": {
      "get": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Test wxPay configuration by id",
        "description": "Test WxPay configuration in payment merchant config. Reference: <a href=\"https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1\">WxPay Document</a>.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: test WxPay config</li></ul>",
        "operationId": "testWxPayConfigById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "2"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/stripeconfig": {
      "put": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Update stripe config",
        "description": "Update stripe config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateStripeConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "validate",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StripeConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/adyenconfig": {
      "put": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Update adyen config",
        "description": "Update adyen config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateAdyenConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "validate",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AdyenConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/checkoutconfig/test": {
      "get": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Test checkout.com configuration by id",
        "description": "Test checkout.com configuration in payment merchant config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: test result</li></ul>",
        "operationId": "testCheckoutConfigById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "2"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/alipayconfig": {
      "put": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Update alipay configuration",
        "description": "Update alipay configuration.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateAliPayConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "validate",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AliPayConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/wxpayconfig": {
      "put": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Update wxpay configuration",
        "description": "Update wxpay configuration.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateWxPayConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "validate",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WxPayConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/paypalconfig/test": {
      "post": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Test PayPal configuration",
        "description": "Test PayPal configuration. <h4>Check List:</h4> <ul><li>clientID</li><li>clientSecret</li></ul><h4>Non-check list:</h4><ul><li>webHookId</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: test result</li></ul>",
        "operationId": "testPayPalConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PayPalConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/alipayconfig/test": {
      "get": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Test Alipay configuration by id",
        "description": "Test AliPay configuration in payment merchant config. Reference: <a href=\"https://docs.open.alipay.com/270/alipay.trade.page.pay\">Alipay Document</a>.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: test alipay config</li></ul>",
        "operationId": "testAliPayConfigById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "2"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/adyenconfig/test": {
      "get": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Test adyen configuration by id",
        "description": "Test adyen configuration in payment merchant config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: test adyen config</li></ul>",
        "operationId": "testAdyenConfigById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "2"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/xsollaconfig": {
      "put": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Update xsolla configuration",
        "description": "Update xsolla configuration. Reference: <a href=\"https://developers.xsolla.com/?#simple-checkout\">Xsolla Document</a>.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateXsollaConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "validate",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XsollaConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/paypalconfig/test": {
      "get": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Test PayPal configuration by id",
        "description": "Test PayPal configuration in payment merchant config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: test result</li></ul>",
        "operationId": "testPayPalConfigById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>33045</td><td>errors.net.accelbyte.platform.payment.payment_merchant_config_not_found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "2"
        }
      }
    },
    "/admin/payment/config/merchant/xsollaconfig/test": {
      "post": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Test xsolla configuration",
        "description": "Check xsolla configuration, Reference: <a href=\"https://developers.xsolla.com/?#simple-checkout\">Xsolla Document</a>.<h4>Check List:</h4> <ul><li>merchantId</li><li>projectId</li><li>apiKey</li></ul><h4>Non-check list:</h4><ul><li>projectSecretKey</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: test result</li></ul>",
        "operationId": "testXsollaConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XsollaConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/wxpayconfig/cert": {
      "put": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Upload wxpay cert file",
        "description": "Upload wxpay cert file.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateWxPayConfigCert",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/wxpayconfig/test": {
      "post": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Test wxPay configuration",
        "description": "Test WxPay configuration. Reference: <a href=\"https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1\">WxPay Document</a>.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: test WxPay config</li></ul>",
        "operationId": "testWxPayConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WxPayConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/alipayconfig/test": {
      "post": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Test Alipay configuration",
        "description": "Test AliPay configuration.Reference: <a href=\"https://docs.open.alipay.com/270/alipay.trade.page.pay\">Alipay Document</a>.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: test result</li></ul>",
        "operationId": "testAliPayConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AliPayConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/xsollauiconfig": {
      "put": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Update xsolla UI configuration",
        "description": "Update xsolla UI configuration.Reference: <a href=\"https://developers.xsolla.com/api.html#ui-integrations\">Xsolla Document</a>.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateXsollaUIConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XsollaPaywallConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/paypalconfig": {
      "put": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Update PayPal config",
        "description": "Update PayPal config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updatePayPalConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "validate",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PayPalConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    },
    "/admin/payment/config/merchant/{id}/xsollaconfig/test": {
      "get": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Test xsolla configuration by id",
        "description": "Test xsolla configuration in payment merchant config. Reference: <a href=\"https://developers.xsolla.com/?#simple-checkout\">Xsolla Document</a>.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: test xsolla config</li></ul>",
        "operationId": "testXsollaConfigById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/payment/accounts": {
      "get": {
        "tags": [
          "PaymentAccount"
        ],
        "summary": "Get payment accounts",
        "description": "Get payment accounts.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT\", action=2 (READ)</li><li><i>Returns</i>: Payment account list</li></ul>",
        "operationId": "publicGetPaymentAccounts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentAccount"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT",
          "action": "2"
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/payment/accounts/{type}/{id}": {
      "delete": {
        "tags": [
          "PaymentAccount"
        ],
        "summary": "Delete payment account",
        "description": "Delete payment account.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT\", action=8 (DELETE)</li><li><i>Returns</i>:</li></ul>",
        "operationId": "publicDeletePaymentAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "path",
            "description": "payment account type",
            "required": true,
            "type": "string",
            "enum": [
              "card",
              "paypal"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "payment account id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "delete a payment account successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT",
          "action": "8"
        }
      }
    },
    "/public/namespaces/{namespace}/payment/orders/{paymentOrderNo}/status": {
      "get": {
        "tags": [
          "PaymentStation"
        ],
        "summary": "Check payment order paid status",
        "description": "Check payment order paid status.<br>Other detail info: <ul><li><i>Returns</i>: Payment order paid result</li></ul>",
        "operationId": "publicCheckPaymentOrderPaidStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentOrderNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderPaidResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/tax": {
      "get": {
        "tags": [
          "PaymentStation"
        ],
        "summary": "get tax result of a payment order",
        "description": "Check and get a payment order's should pay tax.<br>Other detail info: <ul><li><i>Returns</i>: tax result</li></ul>",
        "operationId": "getPaymentTaxValue",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentProvider",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "WALLET",
              "XSOLLA",
              "ADYEN",
              "STRIPE",
              "CHECKOUT",
              "ALIPAY",
              "WXPAY",
              "PAYPAL"
            ]
          },
          {
            "name": "paymentOrderNo",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "zipCode",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaxResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33123</td><td>Invalid zipcode</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/orders/{paymentOrderNo}/pay": {
      "post": {
        "tags": [
          "PaymentStation"
        ],
        "summary": "Do payment",
        "description": "Do payment(For now, this only support checkout.com).<br>Other detail info: <ul><li><i>Returns</i>: Payment process result</li></ul>",
        "operationId": "pay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentOrderNo",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentProvider",
            "in": "query",
            "description": "payment provider",
            "required": false,
            "type": "string",
            "default": "CHECKOUT",
            "enum": [
              "WALLET",
              "XSOLLA",
              "ADYEN",
              "STRIPE",
              "CHECKOUT",
              "ALIPAY",
              "WXPAY",
              "PAYPAL"
            ]
          },
          {
            "name": "zipCode",
            "in": "query",
            "description": "zip code",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProcessResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33322</td><td>Payment provider [{paymentProvider}] not supported</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33171</td><td>Invalid payment order status [{status}] for payment order [{paymentOrderNo}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/publicconfig": {
      "get": {
        "tags": [
          "PaymentStation"
        ],
        "summary": "Get payment provider public config",
        "description": "Get payment provider public config, at current only Strip provide public config.<br>Other detail info: <ul><li><i>Returns</i>: Public config</li></ul>",
        "operationId": "getPaymentPublicConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentProvider",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "WALLET",
              "XSOLLA",
              "ADYEN",
              "STRIPE",
              "CHECKOUT",
              "ALIPAY",
              "WXPAY",
              "PAYPAL"
            ]
          },
          {
            "name": "region",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/returnurl": {
      "get": {
        "tags": [
          "PaymentStation"
        ],
        "summary": "Normalize payment return url",
        "description": "Normalize payment return url for payment provider<br>Payment response: <table><tr><td>Field</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>orderNo</td><td>String</td><td>Yes</td><td>order no</td></tr><tr><td>paymentStatus</td><td>String</td><td>Yes</td><td><ul><li>DONE: The payment was successfully completed.</li><li>CANCELLED: The payment was cancelled by the shopper before completion, or the shopper returned to the merchant's site before completing the transaction.</li><li>PENDING: Inform the shopper that you've received their order, and are waiting for the payment to be completed.\n\nWhen the shopper has completed the payment you will receive a successful AUTHORISATION.</li><li>RECEIVED: Inform the shopper that you've received their order, and are waiting for the payment to clear.</li><li>UNKNOWN: An error occurred during the payment processing.</li><li>FAILED: Shopper paid failed because of various reasons.</li></ul></td></tr><tr><td>reason</td><td>String</td><td>No</td><td>payment status reason</td></tr></table>Other detail info: <ul><li><i>xsolla</i>: parameters 'user_id', 'foreinginvoice', 'invoice_id' and 'status' will be automatically added to the link</li><li><i>adyen</i>: https://docs.adyen.com/developers/checkout/web-sdk</li></ul>",
        "operationId": "publicNormalizePaymentReturnUrl",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "returnUrl",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNo",
            "in": "query",
            "description": "Platform order no",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentOrderNo",
            "in": "query",
            "description": "Platform payment order no",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentProvider",
            "in": "query",
            "description": "Platform payment provider",
            "required": true,
            "type": "string",
            "enum": [
              "WALLET",
              "XSOLLA",
              "ADYEN",
              "STRIPE",
              "CHECKOUT",
              "ALIPAY",
              "WXPAY",
              "PAYPAL"
            ]
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "foreinginvoice",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "invoice_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resultCode",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "payload",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "description": "PayPal token",
            "required": false,
            "type": "string"
          },
          {
            "name": "PayerID",
            "in": "query",
            "description": "PayPal payer id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/methods": {
      "get": {
        "tags": [
          "PaymentStation"
        ],
        "summary": "Get payment methods",
        "description": "Get payment methods.<br>Other detail info: <ul><li><i>Returns</i>: Payment method list</li></ul>",
        "operationId": "publicGetPaymentMethods",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentOrderNo",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethod"
              }
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/orders/{paymentOrderNo}/info": {
      "get": {
        "tags": [
          "PaymentStation"
        ],
        "summary": "Get payment order info",
        "description": "Get payment order info.<br>Other detail info: <ul><li><i>Returns</i>: Payment order details</li></ul>",
        "operationId": "publicGetUnpaidPaymentOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentOrderNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderDetails"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr><tr><td>20008</td><td>user [{userId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33171</td><td>Invalid payment order status [{status}] for payment order [{paymentOrderNo}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/qrcode": {
      "get": {
        "tags": [
          "PaymentStation"
        ],
        "summary": "Get qrcode",
        "description": "Get qrcode.<br>Other detail info: <ul><li><i>Returns</i>: QRCode image stream</li></ul>",
        "operationId": "publicGetQRCode",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/customization": {
      "get": {
        "tags": [
          "PaymentStation"
        ],
        "summary": "Get payment provider customization",
        "description": "Get payment provider customization, at current only Adyen provide customization.<br>Other detail info: <ul><li><i>Returns</i>: customization</li></ul>",
        "operationId": "getPaymentCustomization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentProvider",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "WALLET",
              "XSOLLA",
              "ADYEN",
              "STRIPE",
              "CHECKOUT",
              "ALIPAY",
              "WXPAY",
              "PAYPAL"
            ]
          },
          {
            "name": "region",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "sandbox",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customization"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/link": {
      "post": {
        "tags": [
          "PaymentStation"
        ],
        "summary": "Get payment url",
        "description": "Get payment url.<br>Other detail info: <ul><li><i>Returns</i>: Get payment link</li></ul>",
        "operationId": "publicGetPaymentUrl",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentUrlCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentUrl"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33321</td><td>Payment provider [{paymentProvider}] not support currency [{currency}]</td></tr><tr><td>33322</td><td>Payment provider [{paymentProvider}] not supported</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr><tr><td>20008</td><td>user [{userId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/admin/payment/config/provider": {
      "get": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Query payment provider config",
        "description": "Query payment provider config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: payment provider config list</li></ul>",
        "operationId": "queryPaymentProviderConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "description": "namespace",
            "required": false,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "description": "region",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "2"
        }
      },
      "post": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Create payment provider config",
        "description": "Create payment provider config.<br><pre><p><strong>Request Body Parameters:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>namespace, * indicates all namespace</td></tr><tr><td>region</td><td>String</td><td>Yes</td><td>region, * indicates all regions</td></tr><tr><td>aggregate</td><td>String</td><td>No</td><td>aggregate payment provider, such as XSOLLA, ADYEN, STRIPE</td></tr><tr><td>specials</td><td>List</td><td>No</td><td>special payment provider, such as ALIPAY, WXPAY</td></tr></table></pre>payment provider applied has priority: <ol><li>namespace and region match</li><li>namespace matches and region is *</li><li>region matches and namespace is *</li><li>namespace and region are *</li></ol>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=1 (CREATE)</li><li><i>Returns</i>: payment provider config</li></ul>",
        "operationId": "createPaymentProviderConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33221</td><td>TaxJar api token required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33271</td><td>Payment provider config for namespace [{namespace}] and region [{region}] already exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "1"
        }
      }
    },
    "/admin/payment/config/provider/aggregate": {
      "get": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Get aggregate payment providers",
        "description": "Get aggregate payment providers, such as XSOLLA, ADYEN.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: payment provider list</li></ul>",
        "operationId": "getAggregatePaymentProviders",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "WALLET",
                  "XSOLLA",
                  "ADYEN",
                  "STRIPE",
                  "CHECKOUT",
                  "ALIPAY",
                  "WXPAY",
                  "PAYPAL"
                ]
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "2"
        }
      }
    },
    "/admin/payment/config/provider/matched": {
      "get": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Debug matched payment provider config(internal)",
        "description": "Debug matched payment provider config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: payment provider config</li></ul>",
        "operationId": "debugMatchedPaymentProviderConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "description": "namespace",
            "required": false,
            "type": "string",
            "default": "*"
          },
          {
            "name": "region",
            "in": "query",
            "description": "region",
            "required": false,
            "type": "string",
            "default": "*"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33241</td><td>Payment provider config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "2"
        }
      }
    },
    "/admin/payment/config/provider/special": {
      "get": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Get special payment providers",
        "description": "Get special payment providers, such as ALIPAY, WXPAY.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: payment provider list</li></ul>",
        "operationId": "getSpecialPaymentProviders",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "WALLET",
                  "XSOLLA",
                  "ADYEN",
                  "STRIPE",
                  "CHECKOUT",
                  "ALIPAY",
                  "WXPAY",
                  "PAYPAL"
                ]
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "2"
        }
      }
    },
    "/admin/payment/config/provider/{id}": {
      "put": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Update payment provider config",
        "description": "Update payment provider config.<br><pre><p><strong>Request Body Parameters:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>namespace, * indicates all namespace</td></tr><tr><td>region</td><td>String</td><td>Yes</td><td>region, * indicates all regions</td></tr><tr><td>aggregate</td><td>String</td><td>No</td><td>aggregate payment provider, such as XSOLLA, ADYEN, STRIPE</td></tr><tr><td>specials</td><td>List</td><td>No</td><td>special payment provider, such as ALIPAY, WXPAY</td></tr></table></pre>payment provider applied has priority: <ol><li>namespace and region match</li><li>namespace matches and region is *</li><li>region matches and namespace is *</li><li>namespace and region are *</li></ol>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: payment provider config</li></ul>",
        "operationId": "updatePaymentProviderConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33221</td><td>TaxJar api token required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33241</td><td>Payment provider config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33271</td><td>Payment provider config for namespace [{namespace}] and region [{region}] already exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      },
      "delete": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Delete payment provider config",
        "description": "Delete payment provider config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=8 (DELETE)</li><li><i>Returns</i>: payment provider config</li></ul>",
        "operationId": "deletePaymentProviderConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33241</td><td>Payment provider config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "8"
        }
      }
    },
    "/admin/payment/config/tax": {
      "get": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Get payment global tax config",
        "description": "Get payment global tax config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: payment provider list</li></ul>",
        "operationId": "getPaymentTaxConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentTaxConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "2"
        }
      },
      "put": {
        "tags": [
          "PaymentConfig"
        ],
        "summary": "Update payment global tax config",
        "description": "Update payment tax config.<br><pre><p><strong>Request Body Parameters:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>taxJarEnabled</td><td>Boolean</td><td>false</td></tr><tr><td>taxJarApiToken</td><td>String</td><td>false</td><td>required, when taxJarEnabled is true and there is no existing token</td></tr><tr><td>sandboxTaxJarApiToken</td><td>String</td><td>false</td><td>optional</td></tr><tr><td>taxJarProductCodesMapping</td><td>Map</td><td>No</td><td>kye is item type and value is Product tax code, currently support those item types: APP, COINS, INGAMEITEM, BUNDLE, CODE, SUBSCRIPTION</td></tr></table></pre></ol>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: payment global tax config</li></ul>",
        "operationId": "updatePaymentTaxConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTaxConfigEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentTaxConfigInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33221</td><td>TaxJar api token required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "x-authorization": {
          "resource": "ADMIN:PAYMENT:CONFIG",
          "action": "4"
        }
      }
    }
  },
  "definitions": {
    "FulfillmentError": {
      "type": "object",
      "properties": {
        "httpStatus": {
          "type": "integer",
          "format": "int32",
          "description": "http status"
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "error code"
        },
        "message": {
          "type": "string",
          "description": "error message"
        }
      }
    },
    "FulfillmentItem": {
      "type": "object",
      "required": [
        "itemId",
        "quantity"
      ],
      "properties": {
        "itemId": {
          "type": "string",
          "description": "item id"
        },
        "itemName": {
          "type": "string",
          "description": "item name"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "quantity"
        }
      }
    },
    "EntitlementHistoryInfo": {
      "type": "object",
      "required": [
        "action",
        "createdAt",
        "entitlementId",
        "namespace",
        "operator",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "entitlementId": {
          "type": "string",
          "description": "The id of entitlement"
        },
        "namespace": {
          "type": "string",
          "description": "The namespace of entitlement"
        },
        "action": {
          "type": "string",
          "description": "The action of entitlement, like GRANT, REVOKE",
          "enum": [
            "GRANT",
            "UPDATE",
            "DECREMENT",
            "REVOKE",
            "DISABLE",
            "ENABLE",
            "DISTRIBUTE"
          ]
        },
        "operator": {
          "type": "string",
          "description": "The operator"
        },
        "userId": {
          "type": "string",
          "description": "The owner id of entitlement"
        },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "The use count of a consumable entitlement."
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The quantity of a distribution entitlement after perform the action."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "History create time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "History update time"
        }
      }
    },
    "DistributionReceiverInfo": {
      "type": "object",
      "required": [
        "extUserId",
        "namespace",
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "description": "user that this receiver belong to"
        },
        "namespace": {
          "type": "string",
          "description": "name that this receiver located in"
        },
        "extUserId": {
          "type": "string",
          "description": "external user id, commonly it's the character id"
        },
        "attributes": {
          "type": "object",
          "description": "receiver custom attributes",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "EntitlementGrant": {
      "type": "object",
      "required": [
        "itemId",
        "itemNamespace",
        "quantity"
      ],
      "properties": {
        "itemId": {
          "type": "string",
          "description": "itemId"
        },
        "grantedCode": {
          "type": "string",
          "description": "grantedCode, the granted code"
        },
        "itemNamespace": {
          "type": "string",
          "description": "itemNamespace"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "quantity"
        },
        "source": {
          "type": "string",
          "description": "source",
          "enum": [
            "PURCHASE",
            "IAP",
            "PROMOTION",
            "ACHIEVEMENT",
            "REFERRAL_BONUS",
            "REDEEM_CODE",
            "OTHER"
          ]
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement start date time",
          "x-nullable": true
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement end date time",
          "x-nullable": true
        },
        "region": {
          "type": "string",
          "description": "country value from ISO countries"
        },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US"
        }
      },
      "description": "A DTO object for granting entitlement API call."
    },
    "StackableEntitlementInfo": {
      "type": "object",
      "required": [
        "clazz",
        "createdAt",
        "grantedAt",
        "id",
        "itemId",
        "itemNamespace",
        "name",
        "namespace",
        "source",
        "status",
        "type",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "entitlement id"
        },
        "namespace": {
          "type": "string",
          "description": "entitlement namespace"
        },
        "clazz": {
          "type": "string",
          "description": "entitlement class",
          "enum": [
            "APP",
            "ENTITLEMENT",
            "DISTRIBUTION",
            "CODE",
            "SUBSCRIPTION"
          ]
        },
        "type": {
          "type": "string",
          "description": "entitlement type",
          "enum": [
            "DURABLE",
            "CONSUMABLE"
          ]
        },
        "status": {
          "type": "string",
          "description": "entitlement status",
          "enum": [
            "ACTIVE",
            "INACTIVE",
            "CONSUMED",
            "DISTRIBUTED",
            "REVOKED"
          ]
        },
        "appId": {
          "type": "string",
          "description": "appId if entitlement is an app"
        },
        "appType": {
          "type": "string",
          "description": "appType if entitlement is an app",
          "enum": [
            "GAME",
            "SOFTWARE",
            "DLC",
            "DEMO"
          ]
        },
        "sku": {
          "type": "string",
          "description": "sku for purchased item"
        },
        "userId": {
          "type": "string",
          "description": "userId for this entitlement"
        },
        "itemId": {
          "type": "string",
          "description": "itemId of the entitlement"
        },
        "grantedCode": {
          "type": "string",
          "description": "grantedCode, the granted code"
        },
        "itemNamespace": {
          "type": "string",
          "description": "itemNamespace for the purchased item"
        },
        "name": {
          "type": "string",
          "description": "entitlement name"
        },
        "features": {
          "type": "array",
          "description": "entitlement features",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "useCount for entitlement"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "purchased quantity for distribution, required if DISTRIBUTION"
        },
        "source": {
          "type": "string",
          "description": "entitlement source",
          "enum": [
            "PURCHASE",
            "IAP",
            "PROMOTION",
            "ACHIEVEMENT",
            "REFERRAL_BONUS",
            "REDEEM_CODE",
            "OTHER"
          ]
        },
        "distributedQuantity": {
          "type": "integer",
          "format": "int32",
          "description": "distributed quantity for distribution, required if DISTRIBUTION"
        },
        "targetNamespace": {
          "type": "string",
          "description": "targetNamespace for distribution"
        },
        "itemSnapshot": {
          "description": "itemSnapshot for distribution",
          "$ref": "#/definitions/ItemSnapshot"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement start date"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement end date"
        },
        "stackable": {
          "type": "boolean",
          "description": "whether the CONSUMABLE entitlement is stackable"
        },
        "grantedAt": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement granted at"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement created at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement updated at"
        },
        "stackedUseCount": {
          "type": "integer",
          "format": "int32",
          "description": "CONSUMABLE entitlement stacked use count"
        },
        "stackedQuantity": {
          "type": "integer",
          "format": "int32",
          "description": "DISTRIBUTION entitlement stacked quantity"
        }
      }
    },
    "EntitlementUpdate": {
      "type": "object",
      "properties": {
        "nullFieldList": {
          "type": "array",
          "description": "nullFieldList",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "description": "status",
          "enum": [
            "ACTIVE",
            "INACTIVE",
            "CONSUMED",
            "DISTRIBUTED",
            "REVOKED"
          ]
        },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "useCount of a consumable entitlement"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "purchased quantity of a distributable entitlement"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "start date of the entitlement. yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "end date of the entitlement. yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        }
      },
      "description": "A DTO object for updating entitlement API call. Leave the field empty if don't want to update."
    },
    "BulkOperationResult": {
      "type": "object",
      "properties": {
        "affected": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DistributionReceiverCreate": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "description": "receiver custom attributes",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "A DTO object for creating distribution receiver."
    },
    "AppEntitlementInfo": {
      "type": "object",
      "required": [
        "grantedAt",
        "namespace",
        "status",
        "userId"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "entitlement namespace"
        },
        "appId": {
          "type": "string",
          "description": "appId for APP type entitlement"
        },
        "appType": {
          "type": "string",
          "description": "appType for APP type entitlement",
          "enum": [
            "GAME",
            "SOFTWARE",
            "DLC",
            "DEMO"
          ]
        },
        "sku": {
          "type": "string",
          "description": "unique sku no for item"
        },
        "userId": {
          "type": "string",
          "description": "entitlement owner"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement start date"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement end date"
        },
        "grantedAt": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement granted at"
        },
        "status": {
          "type": "string",
          "description": "entitlement status",
          "enum": [
            "ACTIVE",
            "INACTIVE",
            "CONSUMED",
            "DISTRIBUTED",
            "REVOKED"
          ]
        },
        "itemSnapshot": {
          "description": "itemSnapshot for distribution",
          "$ref": "#/definitions/ItemSnapshot"
        }
      }
    },
    "EntitlementDecrement": {
      "type": "object",
      "properties": {
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "the count to decrease, 1 for default"
        }
      },
      "description": "A DTO object for entitlement decrement."
    },
    "AppEntitlementPagingSlicedResult": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppEntitlementInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "FulfillmentHistoryInfo": {
      "type": "object",
      "required": [
        "createdAt",
        "id",
        "namespace",
        "status",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "id"
        },
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "userId": {
          "type": "string",
          "description": "userId"
        },
        "orderNo": {
          "type": "string",
          "description": "orderNo"
        },
        "code": {
          "type": "string",
          "description": "redeemed code"
        },
        "fulfillItems": {
          "type": "array",
          "description": "items should do fulfillment",
          "items": {
            "$ref": "#/definitions/FulfillmentItem"
          }
        },
        "grantedItemIds": {
          "type": "array",
          "description": "item ids already granted",
          "items": {
            "type": "string"
          }
        },
        "entitlementSummaries": {
          "type": "array",
          "description": "entitlement granted",
          "items": {
            "$ref": "#/definitions/EntitlementSummary"
          }
        },
        "creditSummaries": {
          "type": "array",
          "description": "credit granted",
          "items": {
            "$ref": "#/definitions/CreditSummary"
          }
        },
        "status": {
          "type": "string",
          "description": "fulfillment status",
          "enum": [
            "SUCCESS",
            "FAIL"
          ]
        },
        "fulfillmentError": {
          "description": "fulfillment error detail",
          "$ref": "#/definitions/FulfillmentError"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "created at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updated at"
        }
      }
    },
    "FulfillmentHistoryPagingSlicedResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "description": "data",
          "items": {
            "$ref": "#/definitions/FulfillmentHistoryInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "FulfillCodeRequest": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "campaign code"
        },
        "region": {
          "type": "string",
          "description": "country value from ISO countries"
        },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US"
        }
      }
    },
    "HierarchicalCategoryInfo": {
      "type": "object",
      "required": [
        "categoryPath",
        "childCategories",
        "createdAt",
        "displayName",
        "namespace",
        "parentCategoryPath",
        "updatedAt"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Category namespace"
        },
        "parentCategoryPath": {
          "type": "string",
          "description": "Parent category path"
        },
        "categoryPath": {
          "type": "string",
          "description": "Category path"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Category created time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Category updated time"
        },
        "displayName": {
          "type": "string",
          "description": "Category display name"
        },
        "childCategories": {
          "type": "array",
          "description": "Child category list",
          "items": {
            "$ref": "#/definitions/HierarchicalCategoryInfo"
          }
        },
        "root": {
          "type": "boolean"
        }
      }
    },
    "CategoryInfo": {
      "type": "object",
      "required": [
        "categoryPath",
        "createdAt",
        "displayName",
        "namespace",
        "parentCategoryPath",
        "updatedAt"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Category namespace"
        },
        "parentCategoryPath": {
          "type": "string",
          "description": "Parent category path"
        },
        "categoryPath": {
          "type": "string",
          "description": "Category path"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Category created time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Category updated time"
        },
        "displayName": {
          "type": "string",
          "description": "Category display name"
        },
        "root": {
          "type": "boolean"
        }
      }
    },
    "AppInfo": {
      "type": "object",
      "required": [
        "itemId",
        "namespace"
      ],
      "properties": {
        "slogan": {
          "type": "string",
          "description": "slogan"
        },
        "announcement": {
          "type": "string",
          "description": "announcement"
        },
        "itemId": {
          "type": "string",
          "description": "item id"
        },
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "carousel": {
          "type": "array",
          "description": "carousel",
          "items": {
            "$ref": "#/definitions/Slide"
          }
        },
        "developer": {
          "type": "string",
          "description": "developer"
        },
        "publisher": {
          "type": "string",
          "description": "publisher"
        },
        "websiteUrl": {
          "type": "string",
          "description": "website url"
        },
        "forumUrl": {
          "type": "string",
          "description": "forum url"
        },
        "platforms": {
          "type": "array",
          "description": "supported platforms",
          "items": {
            "type": "string",
            "enum": [
              "Windows",
              "MacOS",
              "Linux",
              "IOS",
              "Android"
            ]
          }
        },
        "platformRequirements": {
          "type": "object",
          "description": "platform requirements",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Requirement"
            }
          }
        },
        "primaryGenre": {
          "type": "string",
          "description": "primary genre",
          "enum": [
            "Action",
            "Adventure",
            "Casual",
            "FreeToPlay",
            "Indie",
            "MassivelyMultiplayer",
            "Racing",
            "RPG",
            "Simulation",
            "Sports",
            "Strategy"
          ]
        },
        "genres": {
          "type": "array",
          "description": "genres",
          "items": {
            "type": "string",
            "enum": [
              "Action",
              "Adventure",
              "Casual",
              "FreeToPlay",
              "Indie",
              "MassivelyMultiplayer",
              "Racing",
              "RPG",
              "Simulation",
              "Sports",
              "Strategy"
            ]
          }
        },
        "players": {
          "type": "array",
          "description": "players",
          "items": {
            "type": "string",
            "enum": [
              "Single",
              "Multi",
              "CrossPlatformMulti",
              "MMO",
              "Coop",
              "LocalCoop"
            ]
          }
        },
        "releaseDate": {
          "type": "string",
          "format": "date-time",
          "description": "release date"
        },
        "region": {
          "type": "string",
          "description": "region"
        },
        "language": {
          "type": "string",
          "description": "language"
        }
      }
    },
    "StoreCreate": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "title": {
          "type": "string",
          "description": "Title, it should starts and ends with alphabets uppercase/lowercase or numeric, allowed separators ',.- and white-space, max length is 127"
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "supportedLanguages": {
          "type": "array",
          "description": "Languages, BCP 47 language tag",
          "items": {
            "type": "string"
          }
        },
        "supportedRegions": {
          "type": "array",
          "description": "Store supported regions, should be ISO3166-1 alpha-2 two letter",
          "items": {
            "type": "string"
          }
        },
        "defaultRegion": {
          "type": "string",
          "description": "Default region, should be ISO3166-1 alpha-2 two letter, default is US"
        },
        "defaultLanguage": {
          "type": "string",
          "description": "Default language, BCP 47 language tag, default is en"
        }
      },
      "description": "A DTO object for creating store API call."
    },
    "StoreUpdate": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "title": {
          "type": "string",
          "description": "Title, it should starts and ends with alphabets uppercase/lowercase or numeric, allowed separators ',.- and white-space, max length is 127"
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "supportedLanguages": {
          "type": "array",
          "description": "Languages, BCP 47 language tag",
          "items": {
            "type": "string"
          }
        },
        "supportedRegions": {
          "type": "array",
          "description": "Store supported regions, should be ISO3166-1 alpha-2 two letter",
          "items": {
            "type": "string"
          }
        },
        "defaultRegion": {
          "type": "string",
          "description": "Default region, should be ISO3166-1 alpha-2 two letter"
        },
        "defaultLanguage": {
          "type": "string",
          "description": "Default language, BCP 47 language tag"
        }
      },
      "description": "A DTO object for updating store API call."
    },
    "StoreInfo": {
      "type": "object",
      "required": [
        "createdAt",
        "defaultLanguage",
        "defaultRegion",
        "namespace",
        "published",
        "storeId",
        "supportedLanguages",
        "supportedRegions",
        "title",
        "updatedAt"
      ],
      "properties": {
        "storeId": {
          "type": "string",
          "description": "Store id"
        },
        "namespace": {
          "type": "string",
          "description": "The namespace"
        },
        "title": {
          "type": "string",
          "description": "Store title"
        },
        "description": {
          "type": "string",
          "description": "Store description"
        },
        "published": {
          "type": "boolean",
          "description": "If Store is published"
        },
        "supportedLanguages": {
          "type": "array",
          "description": "Store supported language",
          "items": {
            "type": "string"
          }
        },
        "supportedRegions": {
          "type": "array",
          "description": "Store supported regions",
          "items": {
            "type": "string"
          }
        },
        "defaultRegion": {
          "type": "string",
          "description": "Default region"
        },
        "defaultLanguage": {
          "type": "string",
          "description": "Default language"
        },
        "publishedTime": {
          "type": "string",
          "format": "date-time",
          "description": "Store published time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Store created time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Store updated time"
        }
      }
    },
    "StoreBackupInfo": {
      "type": "object",
      "required": [
        "autoBackup",
        "createdAt",
        "id",
        "name",
        "storeId",
        "updatedAt"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Backup id"
        },
        "autoBackup": {
          "type": "boolean",
          "description": "Is auto backup"
        },
        "name": {
          "type": "string",
          "description": "Backup name"
        },
        "storeId": {
          "type": "string",
          "description": "Backup store id"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Backup created time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Backup updated time"
        }
      }
    },
    "ItemId": {
      "type": "object",
      "required": [
        "itemId"
      ],
      "properties": {
        "itemId": {
          "type": "string",
          "description": "itemId"
        }
      }
    },
    "BasicItem": {
      "type": "object",
      "required": [
        "createdAt",
        "entitlementType",
        "itemId",
        "itemType",
        "name",
        "namespace",
        "status",
        "updatedAt"
      ],
      "properties": {
        "itemId": {
          "type": "string",
          "description": "Item id"
        },
        "appId": {
          "type": "string",
          "description": "App id, required when itemType is APP"
        },
        "appType": {
          "type": "string",
          "description": "App type, required when itemType is APP",
          "enum": [
            "GAME",
            "SOFTWARE",
            "DLC",
            "DEMO"
          ]
        },
        "baseAppId": {
          "type": "string",
          "description": "Base app id"
        },
        "sku": {
          "type": "string",
          "description": "Sku"
        },
        "namespace": {
          "type": "string",
          "description": "Item namespace"
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "entitlementType": {
          "type": "string",
          "description": "Entitlement type",
          "enum": [
            "DURABLE",
            "CONSUMABLE"
          ]
        },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS"
        },
        "status": {
          "type": "string",
          "description": "Item status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        },
        "itemType": {
          "type": "string",
          "description": "Item type",
          "enum": [
            "APP",
            "COINS",
            "INGAMEITEM",
            "BUNDLE",
            "CODE",
            "SUBSCRIPTION"
          ]
        },
        "tags": {
          "type": "array",
          "description": "Tags",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "features": {
          "type": "array",
          "description": "Features",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "created at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updated at"
        }
      }
    },
    "Localization": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "title": {
          "type": "string",
          "description": "title info"
        },
        "description": {
          "type": "string",
          "description": "description info"
        },
        "longDescription": {
          "type": "string",
          "description": "long description info"
        },
        "localExt": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "InGameItemSync": {
      "type": "object",
      "required": [
        "categoryPath",
        "targetItemId",
        "targetNamespace"
      ],
      "properties": {
        "targetNamespace": {
          "type": "string",
          "description": "game namespace"
        },
        "targetItemId": {
          "type": "string",
          "description": "item id in game namespace"
        },
        "categoryPath": {
          "type": "string",
          "example": "/games",
          "description": "the new category path for the synced item, A path separated by \"/\", will not show in store if it set to blank"
        }
      }
    },
    "ItemCreate": {
      "type": "object",
      "required": [
        "categoryPath",
        "entitlementType",
        "itemType",
        "localizations",
        "name",
        "regionData",
        "status"
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "description": "Item Type",
          "enum": [
            "APP",
            "COINS",
            "INGAMEITEM",
            "BUNDLE",
            "CODE",
            "SUBSCRIPTION"
          ]
        },
        "name": {
          "type": "string",
          "description": "Name, max length is 127"
        },
        "entitlementType": {
          "type": "string",
          "description": "Entitlement Type",
          "enum": [
            "DURABLE",
            "CONSUMABLE"
          ]
        },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Represent entitlement count when entitlement type is \"CONSUMABLE\", and represent coin count when itemType is \"COINS\""
        },
        "stackable": {
          "type": "boolean",
          "description": "Whether to stack the entitlement when entitlement type is \"CONSUMABLE\""
        },
        "appId": {
          "type": "string",
          "description": "appId, required if appType is present, alpha numeric, max length is 255"
        },
        "appType": {
          "type": "string",
          "description": "appType",
          "enum": [
            "GAME",
            "SOFTWARE",
            "DLC",
            "DEMO"
          ]
        },
        "baseAppId": {
          "type": "string",
          "description": "baseAppId, can set value of game appId if want to link to a game, only publisher namespace item will take effect"
        },
        "targetCurrencyCode": {
          "type": "string",
          "description": "target currency code, required if item type is \"COINS\""
        },
        "targetNamespace": {
          "type": "string",
          "description": "target namespace, require when sell a game's item on the publisher namespace"
        },
        "categoryPath": {
          "type": "string",
          "example": "/games",
          "description": "Category Path, A path separated by \"/\", will not show in store if it set to blank, max length is 255"
        },
        "localizations": {
          "type": "object",
          "description": "Localization, key language, value localization content",
          "additionalProperties": {
            "$ref": "#/definitions/Localization"
          }
        },
        "status": {
          "type": "string",
          "description": "status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        },
        "sku": {
          "type": "string",
          "description": "sku, allowed characters from a-zA-Z0-9_:- and start/end in alphanumeric, max length is 127"
        },
        "images": {
          "type": "array",
          "description": "images",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "thumbnail Url"
        },
        "regionData": {
          "type": "object",
          "description": "region data map, key is region, value is region data list",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RegionDataItem"
            }
          }
        },
        "itemIds": {
          "type": "array",
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": {
            "type": "string"
          }
        },
        "recurring": {
          "description": "recurring for subscription",
          "$ref": "#/definitions/Recurring"
        },
        "tags": {
          "type": "array",
          "description": "Tags, allowed characters from a-zA-Z:_- with length range from 1 to 30, should start and end in upper/lowercase, an item has max 5 tags.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "features": {
          "type": "array",
          "description": "Features, allowed characters from a-zA-Z0-9_:- and start/end in alphanumeric with length range from 1 to 127",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "maxCountPerUser": {
          "type": "integer",
          "format": "int32",
          "description": "Max count per user, -1 means UNLIMITED"
        },
        "maxCount": {
          "type": "integer",
          "format": "int32",
          "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE"
        },
        "boothName": {
          "type": "string",
          "description": "booth name to get tickets while ItemType is CODE, Campaign or KeyGroup should located in targetNamespace if targetNamespace not null"
        },
        "displayOrder": {
          "type": "integer",
          "format": "int32",
          "description": "display order"
        },
        "clazz": {
          "type": "string",
          "description": "customized item clazz"
        },
        "ext": {
          "type": "object",
          "description": "customized item properties",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "description": "A DTO object for creating item API call."
    },
    "AppLocalization": {
      "type": "object",
      "properties": {
        "slogan": {
          "type": "string",
          "description": "slogan"
        },
        "announcement": {
          "type": "string",
          "description": "announcement"
        }
      }
    },
    "Requirement": {
      "type": "object",
      "required": [
        "label"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "label, value can be:minimum,recommended"
        },
        "osVersion": {
          "type": "string",
          "description": "OS version, max length is 255"
        },
        "processor": {
          "type": "string",
          "description": "processor, max length is 255"
        },
        "ram": {
          "type": "string",
          "description": "RAM, max length is 255"
        },
        "graphics": {
          "type": "string",
          "description": "graphics, max length is 255"
        },
        "directXVersion": {
          "type": "string",
          "description": "directX version, max length is 255"
        },
        "diskSpace": {
          "type": "string",
          "description": "disk space, max length is 255"
        },
        "soundCard": {
          "type": "string",
          "description": "sound card, max length is 255"
        },
        "additionals": {
          "type": "string",
          "description": "other requirement, max length is 255"
        }
      }
    },
    "Slide": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "slide type",
          "enum": [
            "image",
            "video"
          ]
        },
        "videoSource": {
          "type": "string",
          "description": "video source",
          "enum": [
            "generic",
            "youtube",
            "vimeo"
          ]
        },
        "url": {
          "type": "string",
          "description": "url"
        },
        "alt": {
          "type": "string",
          "description": "alt"
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "thumbnail url"
        },
        "previewUrl": {
          "type": "string",
          "description": "preview url"
        }
      }
    },
    "ItemAcquireResult": {
      "type": "object",
      "required": [
        "maxCount",
        "success"
      ],
      "properties": {
        "success": {
          "type": "boolean",
          "description": "acquire result"
        },
        "maxCount": {
          "type": "integer",
          "format": "int32",
          "description": "max count"
        }
      }
    },
    "ItemAcquireRequest": {
      "type": "object",
      "required": [
        "count",
        "orderNo"
      ],
      "properties": {
        "orderNo": {
          "type": "string",
          "description": "order no"
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "acquire count"
        }
      }
    },
    "FullItemPagingSlicedResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "description": "data",
          "items": {
            "$ref": "#/definitions/FullItemInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "ItemReturnRequest": {
      "type": "object",
      "required": [
        "orderNo"
      ],
      "properties": {
        "orderNo": {
          "type": "string",
          "description": "orderNo"
        }
      }
    },
    "ItemUpdate": {
      "type": "object",
      "required": [
        "entitlementType",
        "itemType"
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "description": "Item Type",
          "enum": [
            "APP",
            "COINS",
            "INGAMEITEM",
            "BUNDLE",
            "CODE",
            "SUBSCRIPTION"
          ]
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "entitlementType": {
          "type": "string",
          "description": "Entitlement Type",
          "enum": [
            "DURABLE",
            "CONSUMABLE"
          ]
        },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Represent entitlement count when entitlement type is \"CONSUMABLE\", and represent coin count when itemType is \"COINS\""
        },
        "stackable": {
          "type": "boolean",
          "description": "Whether to stack the entitlement when entitlement type is \"CONSUMABLE\""
        },
        "appId": {
          "type": "string",
          "description": "appId, required if appType is present, alpha numeric, max length is 255"
        },
        "appType": {
          "type": "string",
          "description": "appType",
          "enum": [
            "GAME",
            "SOFTWARE",
            "DLC",
            "DEMO"
          ]
        },
        "baseAppId": {
          "type": "string",
          "description": "baseAppId, can set value of game appId if want to link to a game, only publisher namespace item will take effect"
        },
        "targetCurrencyCode": {
          "type": "string",
          "description": "target currency code, required if item type is \"COINS\""
        },
        "targetNamespace": {
          "type": "string",
          "description": "target namespace, require when sell a game's item on the publisher namespace"
        },
        "categoryPath": {
          "type": "string",
          "example": "/games",
          "description": "Category Path, A path separated by \"/\", will not show in store if it set to blank, max length is 255"
        },
        "images": {
          "type": "array",
          "description": "images",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "thumbnail Url"
        },
        "localizations": {
          "type": "object",
          "description": "Localization, key language, value localization content",
          "additionalProperties": {
            "$ref": "#/definitions/Localization"
          }
        },
        "status": {
          "type": "string",
          "description": "status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        },
        "sku": {
          "type": "string",
          "description": "sku, allowed characters from a-zA-Z0-9_:- and start/end in alphanumeric, max length is 127"
        },
        "regionData": {
          "type": "object",
          "description": "region data map, key is region, value is region data list",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RegionDataItem"
            }
          }
        },
        "itemIds": {
          "type": "array",
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": {
            "type": "string"
          }
        },
        "recurring": {
          "description": "recurring for subscription",
          "$ref": "#/definitions/Recurring"
        },
        "tags": {
          "type": "array",
          "description": "Tags, allowed characters from a-zA-Z:_- with length range from 1 to 30, should start and end in upper/lowercase, an item has max 5 tags.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "features": {
          "type": "array",
          "description": "Features, allowed characters from a-zA-Z0-9_:- and start/end in alphanumeric with length range from 1 to 127",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "maxCountPerUser": {
          "type": "integer",
          "format": "int32",
          "description": "Max count per user, -1 means UNLIMITED"
        },
        "maxCount": {
          "type": "integer",
          "format": "int32",
          "description": "Max count, -1 means UNLIMITED, new value should >= old value if both old value and new value is limited, unset when itemType is CODE"
        },
        "boothName": {
          "type": "string",
          "description": "booth name to get tickets while ItemType is CODE, Campaign or KeyGroup should located in targetNamespace if targetNamespace not null"
        },
        "displayOrder": {
          "type": "integer",
          "format": "int32",
          "description": "display order"
        },
        "clazz": {
          "type": "string",
          "description": "customized item clazz"
        },
        "ext": {
          "type": "object",
          "description": "customized item properties",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "description": "A DTO object for updating item API call."
    },
    "FullItemInfo": {
      "type": "object",
      "required": [
        "categoryPath",
        "createdAt",
        "entitlementType",
        "itemId",
        "itemType",
        "localizations",
        "name",
        "namespace",
        "regionData",
        "status",
        "updatedAt"
      ],
      "properties": {
        "itemId": {
          "type": "string",
          "description": "Item id"
        },
        "appId": {
          "type": "string",
          "description": "App id, required when itemType is APP"
        },
        "appType": {
          "type": "string",
          "description": "App type, required when itemType is APP",
          "enum": [
            "GAME",
            "SOFTWARE",
            "DLC",
            "DEMO"
          ]
        },
        "baseAppId": {
          "type": "string",
          "description": "Base app id"
        },
        "namespace": {
          "type": "string",
          "description": "Item namespace"
        },
        "sku": {
          "type": "string",
          "description": "Sku"
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "entitlementType": {
          "type": "string",
          "description": "Entitlement type",
          "enum": [
            "DURABLE",
            "CONSUMABLE"
          ]
        },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS"
        },
        "stackable": {
          "type": "boolean",
          "description": "Whether stack the CONSUMABLE entitlement"
        },
        "categoryPath": {
          "type": "string",
          "description": "Item category path"
        },
        "images": {
          "type": "array",
          "description": "images",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "thumbnail url"
        },
        "localizations": {
          "type": "object",
          "description": "Item localizations",
          "additionalProperties": {
            "$ref": "#/definitions/Localization"
          }
        },
        "status": {
          "type": "string",
          "description": "Item status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        },
        "itemType": {
          "type": "string",
          "description": "Item type",
          "enum": [
            "APP",
            "COINS",
            "INGAMEITEM",
            "BUNDLE",
            "CODE",
            "SUBSCRIPTION"
          ]
        },
        "targetNamespace": {
          "type": "string",
          "description": "The target namespace of a cross namespace item"
        },
        "targetCurrencyCode": {
          "type": "string",
          "description": "The target currency code of coin Item"
        },
        "targetItemId": {
          "type": "string",
          "description": "Target item id if this item is mapping from game namespace"
        },
        "regionData": {
          "type": "object",
          "description": "Item region data",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RegionDataItem"
            }
          }
        },
        "recurring": {
          "description": "recurring for subscription",
          "$ref": "#/definitions/Recurring"
        },
        "itemIds": {
          "type": "array",
          "description": "Bundle item's item ids",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "description": "Tags",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "features": {
          "type": "array",
          "description": "Features",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "maxCountPerUser": {
          "type": "integer",
          "format": "int32",
          "description": "Max count per user, -1 means UNLIMITED"
        },
        "maxCount": {
          "type": "integer",
          "format": "int32",
          "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE"
        },
        "clazz": {
          "type": "string",
          "description": "customized item clazz"
        },
        "ext": {
          "type": "object",
          "description": "customized item properties",
          "additionalProperties": {
            "type": "object"
          }
        },
        "boothName": {
          "type": "string",
          "description": "booth name to get tickets while it's item type is CODE"
        },
        "displayOrder": {
          "type": "integer",
          "format": "int32",
          "description": "display order"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "created at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updated at"
        }
      }
    },
    "CategoryCreate": {
      "type": "object",
      "required": [
        "categoryPath",
        "localizationDisplayNames"
      ],
      "properties": {
        "categoryPath": {
          "type": "string",
          "example": "/games",
          "description": "Category Path, A path separated by \"/\", start with \"/\" and end with combination of case of letters and numbers, max length is 255, min length is 2"
        },
        "localizationDisplayNames": {
          "type": "object",
          "description": "Display name, key is language, value is display name, value max length is 255",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "A DTO object for creating category API call."
    },
    "BasicCategoryInfo": {
      "type": "object",
      "required": [
        "categoryPath",
        "createdAt",
        "namespace",
        "parentCategoryPath",
        "updatedAt"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Category namespace"
        },
        "parentCategoryPath": {
          "type": "string",
          "description": "Parent category path"
        },
        "categoryPath": {
          "type": "string",
          "description": "Category path"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Category created time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Category updated time"
        },
        "root": {
          "type": "boolean"
        }
      }
    },
    "CategoryUpdate": {
      "type": "object",
      "required": [
        "localizationDisplayNames"
      ],
      "properties": {
        "localizationDisplayNames": {
          "type": "object",
          "description": "Display name, key is language, value is display name, value max length is 255",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "A DTO object for updating category API call."
    },
    "FullCategoryInfo": {
      "type": "object",
      "required": [
        "categoryPath",
        "createdAt",
        "localizationDisplayNames",
        "namespace",
        "parentCategoryPath",
        "updatedAt"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Category namespace"
        },
        "parentCategoryPath": {
          "type": "string",
          "description": "Parent category path"
        },
        "categoryPath": {
          "type": "string",
          "description": "Category path"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Category created time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Category updated time"
        },
        "localizationDisplayNames": {
          "type": "object",
          "description": "Category localization display name",
          "additionalProperties": {
            "type": "string"
          }
        },
        "root": {
          "type": "boolean"
        }
      }
    },
    "AppUpdate": {
      "type": "object",
      "properties": {
        "carousel": {
          "type": "array",
          "description": "carousel",
          "items": {
            "$ref": "#/definitions/Slide"
          }
        },
        "developer": {
          "type": "string",
          "description": "developer, it should starts and ends with alphabets uppercase/lowercase or numeric, allowed separators, these symbols ',.-, and white-space, max length is 48"
        },
        "publisher": {
          "type": "string",
          "description": "publisher, it should starts and ends with alphabets uppercase/lowercase or numeric, allowed separators, these symbols ',.-, and white-space, max length is 48"
        },
        "websiteUrl": {
          "type": "string",
          "description": "website url, max length is 2000"
        },
        "forumUrl": {
          "type": "string",
          "description": "forum url, max length 2000"
        },
        "platforms": {
          "type": "array",
          "description": "supported platforms",
          "items": {
            "type": "string",
            "enum": [
              "Windows",
              "MacOS",
              "Linux",
              "IOS",
              "Android"
            ]
          }
        },
        "platformRequirements": {
          "type": "object",
          "description": "platform requirements",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Requirement"
            }
          }
        },
        "localizations": {
          "type": "object",
          "description": "localizations",
          "additionalProperties": {
            "$ref": "#/definitions/AppLocalization"
          }
        },
        "primaryGenre": {
          "type": "string",
          "description": "primary genre",
          "enum": [
            "Action",
            "Adventure",
            "Casual",
            "FreeToPlay",
            "Indie",
            "MassivelyMultiplayer",
            "Racing",
            "RPG",
            "Simulation",
            "Sports",
            "Strategy"
          ]
        },
        "genres": {
          "type": "array",
          "description": "genres",
          "items": {
            "type": "string",
            "enum": [
              "Action",
              "Adventure",
              "Casual",
              "FreeToPlay",
              "Indie",
              "MassivelyMultiplayer",
              "Racing",
              "RPG",
              "Simulation",
              "Sports",
              "Strategy"
            ]
          }
        },
        "players": {
          "type": "array",
          "description": "players",
          "items": {
            "type": "string",
            "enum": [
              "Single",
              "Multi",
              "CrossPlatformMulti",
              "MMO",
              "Coop",
              "LocalCoop"
            ]
          }
        },
        "releaseDate": {
          "type": "string",
          "format": "date-time",
          "description": "release date in format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        }
      }
    },
    "FullAppInfo": {
      "type": "object",
      "required": [
        "itemId",
        "namespace"
      ],
      "properties": {
        "itemId": {
          "type": "string",
          "description": "item id"
        },
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "carousel": {
          "type": "array",
          "description": "carousel",
          "items": {
            "$ref": "#/definitions/Slide"
          }
        },
        "developer": {
          "type": "string",
          "description": "developer"
        },
        "publisher": {
          "type": "string",
          "description": "publisher"
        },
        "websiteUrl": {
          "type": "string",
          "description": "website url"
        },
        "forumUrl": {
          "type": "string",
          "description": "forum url"
        },
        "platforms": {
          "type": "array",
          "description": "supported platforms",
          "items": {
            "type": "string",
            "enum": [
              "Windows",
              "MacOS",
              "Linux",
              "IOS",
              "Android"
            ]
          }
        },
        "platformRequirements": {
          "type": "object",
          "description": "platform requirements",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Requirement"
            }
          }
        },
        "localizations": {
          "type": "object",
          "description": "localizations",
          "additionalProperties": {
            "$ref": "#/definitions/AppLocalization"
          }
        },
        "primaryGenre": {
          "type": "string",
          "description": "primary genre",
          "enum": [
            "Action",
            "Adventure",
            "Casual",
            "FreeToPlay",
            "Indie",
            "MassivelyMultiplayer",
            "Racing",
            "RPG",
            "Simulation",
            "Sports",
            "Strategy"
          ]
        },
        "genres": {
          "type": "array",
          "description": "genres",
          "items": {
            "type": "string",
            "enum": [
              "Action",
              "Adventure",
              "Casual",
              "FreeToPlay",
              "Indie",
              "MassivelyMultiplayer",
              "Racing",
              "RPG",
              "Simulation",
              "Sports",
              "Strategy"
            ]
          }
        },
        "players": {
          "type": "array",
          "description": "players",
          "items": {
            "type": "string",
            "enum": [
              "Single",
              "Multi",
              "CrossPlatformMulti",
              "MMO",
              "Coop",
              "LocalCoop"
            ]
          }
        },
        "releaseDate": {
          "type": "string",
          "format": "date-time",
          "description": "release date"
        }
      }
    },
    "CreditSummary": {
      "type": "object",
      "required": [
        "amount",
        "namespace",
        "userId",
        "walletId"
      ],
      "properties": {
        "walletId": {
          "type": "string",
          "description": "wallet id"
        },
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "userId": {
          "type": "string",
          "description": "user id"
        },
        "amount": {
          "type": "integer",
          "format": "int64",
          "description": "amount"
        }
      }
    },
    "EntitlementSummary": {
      "type": "object",
      "required": [
        "clazz",
        "createdAt",
        "id",
        "namespace",
        "type",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "entitlement id"
        },
        "namespace": {
          "type": "string",
          "description": "entitlement namespace"
        },
        "userId": {
          "type": "string",
          "description": "userId for this entitlement"
        },
        "clazz": {
          "type": "string",
          "description": "entitlement class",
          "enum": [
            "APP",
            "ENTITLEMENT",
            "DISTRIBUTION",
            "CODE",
            "SUBSCRIPTION"
          ]
        },
        "type": {
          "type": "string",
          "description": "entitlement type",
          "enum": [
            "DURABLE",
            "CONSUMABLE"
          ]
        },
        "stackable": {
          "type": "boolean",
          "description": "Whether the CONSUMABLE entitlement is stackable"
        },
        "stackedUseCount": {
          "type": "integer",
          "format": "int32",
          "description": "CONSUMABLE entitlement stacked use count"
        },
        "stackedQuantity": {
          "type": "integer",
          "format": "int32",
          "description": "DISTRIBUTION entitlement stacked quantity"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "created at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updated at"
        },
        "grantedCode": {
          "type": "string",
          "description": "granted code"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "start date time",
          "x-nullable": true
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "end date time",
          "x-nullable": true
        }
      }
    },
    "FulfillmentResult": {
      "type": "object",
      "required": [
        "namespace",
        "userId"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "userId": {
          "type": "string",
          "description": "userId"
        },
        "entitlementSummaries": {
          "type": "array",
          "description": "entitlement granted",
          "items": {
            "$ref": "#/definitions/EntitlementSummary"
          }
        },
        "creditSummaries": {
          "type": "array",
          "description": "credit granted",
          "items": {
            "$ref": "#/definitions/CreditSummary"
          }
        }
      }
    },
    "FulfillmentRequest": {
      "type": "object",
      "required": [
        "itemId",
        "quantity"
      ],
      "properties": {
        "itemId": {
          "type": "string",
          "description": "itemId"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "quantity"
        },
        "orderNo": {
          "type": "string",
          "description": "orderNo"
        },
        "source": {
          "type": "string",
          "description": "source",
          "enum": [
            "PURCHASE",
            "IAP",
            "PROMOTION",
            "ACHIEVEMENT",
            "REFERRAL_BONUS",
            "REDEEM_CODE",
            "OTHER"
          ]
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "start date time",
          "x-nullable": true
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "end date time",
          "x-nullable": true
        },
        "region": {
          "type": "string",
          "description": "region"
        },
        "language": {
          "type": "string",
          "description": "language"
        }
      },
      "description": "A DTO object for fulfillment request API call."
    },
    "ItemPagingSlicedResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "description": "data",
          "items": {
            "$ref": "#/definitions/ItemInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "ErrorEntity": {
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "description": "numeric error code"
        },
        "errorMessage": {
          "type": "string",
          "description": "error message"
        },
        "messageVariables": {
          "type": "object",
          "description": "message variables",
          "additionalProperties": {
            "type": "string"
          }
        },
        "devStackTrace": {
          "type": "string",
          "description": "internal server error stack trace in configured environment"
        }
      }
    },
    "ValidationErrorEntity": {
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "description": "numeric error code"
        },
        "errorMessage": {
          "type": "string",
          "description": "error message"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldValidationError"
          }
        }
      }
    },
    "Ownership": {
      "type": "object",
      "required": [
        "owned"
      ],
      "properties": {
        "owned": {
          "type": "boolean",
          "description": "ownership"
        }
      }
    },
    "CurrencyInfo": {
      "type": "object",
      "required": [
        "createdAt",
        "currencyCode",
        "currencySymbol",
        "currencyType",
        "decimals",
        "maxAmountPerTransaction",
        "maxBalanceAmount",
        "maxTransactionAmountPerDay",
        "namespace",
        "updatedAt"
      ],
      "properties": {
        "currencyCode": {
          "type": "string",
          "description": "currency code, alphabet uppercase"
        },
        "localizationDescriptions": {
          "type": "object",
          "description": "Description, key is language, value is description max length is 255",
          "additionalProperties": {
            "type": "string"
          }
        },
        "currencySymbol": {
          "type": "string",
          "description": "currency symbol, max length is 8"
        },
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "currencyType": {
          "type": "string",
          "description": "currency type",
          "enum": [
            "REAL",
            "VIRTUAL"
          ]
        },
        "decimals": {
          "type": "integer",
          "format": "int32",
          "description": "decimals"
        },
        "maxAmountPerTransaction": {
          "type": "integer",
          "format": "int64",
          "description": "max amount of per transaction, default is -1, means no limit"
        },
        "maxTransactionAmountPerDay": {
          "type": "integer",
          "format": "int64",
          "description": "max transaction amount per day, default is -1, means no limit"
        },
        "maxBalanceAmount": {
          "type": "integer",
          "format": "int64",
          "description": "max balance amount of the currency, default is -1, means no limit"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "created at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updated at"
        }
      }
    },
    "PopulatedItemInfo": {
      "type": "object",
      "required": [
        "categoryPath",
        "createdAt",
        "entitlementType",
        "itemId",
        "itemType",
        "language",
        "name",
        "namespace",
        "region",
        "status",
        "title",
        "updatedAt"
      ],
      "properties": {
        "title": {
          "type": "string",
          "description": "title info"
        },
        "description": {
          "type": "string",
          "description": "description info"
        },
        "longDescription": {
          "type": "string",
          "description": "long description info"
        },
        "itemId": {
          "type": "string",
          "description": "Item id"
        },
        "appId": {
          "type": "string",
          "description": "App id, required when itemType is APP"
        },
        "appType": {
          "type": "string",
          "description": "App type, required when itemType is APP",
          "enum": [
            "GAME",
            "SOFTWARE",
            "DLC",
            "DEMO"
          ]
        },
        "baseAppId": {
          "type": "string",
          "description": "Base app id"
        },
        "sku": {
          "type": "string",
          "description": "Sku"
        },
        "namespace": {
          "type": "string",
          "description": "Item namespace"
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "entitlementType": {
          "type": "string",
          "description": "Entitlement type",
          "enum": [
            "DURABLE",
            "CONSUMABLE"
          ]
        },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS"
        },
        "stackable": {
          "type": "boolean",
          "description": "Whether stack the CONSUMABLE entitlement"
        },
        "categoryPath": {
          "type": "string",
          "description": "Item category path"
        },
        "status": {
          "type": "string",
          "description": "Item status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        },
        "itemType": {
          "type": "string",
          "description": "Item type",
          "enum": [
            "APP",
            "COINS",
            "INGAMEITEM",
            "BUNDLE",
            "CODE",
            "SUBSCRIPTION"
          ]
        },
        "targetNamespace": {
          "type": "string",
          "description": "The target namespace of a cross namespace item"
        },
        "targetCurrencyCode": {
          "type": "string",
          "description": "Target currency code of coin item"
        },
        "targetItemId": {
          "type": "string",
          "description": "Target item id if this item is mapping from game namespace"
        },
        "images": {
          "type": "array",
          "description": "images",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "thumbnail url"
        },
        "regionData": {
          "type": "array",
          "description": "Region data",
          "items": {
            "$ref": "#/definitions/RegionDataItem"
          }
        },
        "recurring": {
          "description": "recurring for subscription",
          "$ref": "#/definitions/Recurring"
        },
        "itemIds": {
          "type": "array",
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "description": "Tags",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "features": {
          "type": "array",
          "description": "Features",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "maxCountPerUser": {
          "type": "integer",
          "format": "int32",
          "description": "Max count per user, -1 means UNLIMITED"
        },
        "maxCount": {
          "type": "integer",
          "format": "int32",
          "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE"
        },
        "clazz": {
          "type": "string",
          "description": "customized item clazz"
        },
        "boothName": {
          "type": "string",
          "description": "booth name to get tickets while it's item type is CODE"
        },
        "displayOrder": {
          "type": "integer",
          "format": "int32",
          "description": "display order"
        },
        "ext": {
          "type": "object",
          "description": "customized item properties",
          "additionalProperties": {
            "type": "object"
          }
        },
        "region": {
          "type": "string",
          "description": "region"
        },
        "language": {
          "type": "string",
          "description": "language"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "created at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updated at"
        },
        "items": {
          "type": "array",
          "description": "bundle items, only has value when item is bundle and is populated",
          "items": {
            "$ref": "#/definitions/ItemInfo"
          }
        },
        "localExt": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ItemDynamicDataInfo": {
      "type": "object",
      "required": [
        "availableCount",
        "itemId",
        "namespace",
        "userAvailableCount",
        "userPurchaseLimit"
      ],
      "properties": {
        "itemId": {
          "type": "string",
          "description": "item id"
        },
        "namespace": {
          "type": "string",
          "description": "item namespace"
        },
        "availableCount": {
          "type": "integer",
          "format": "int32",
          "description": "the available count of this item, -1 means UNLIMITED, corresponding to maxCount"
        },
        "userAvailableCount": {
          "type": "integer",
          "format": "int64",
          "description": "the available count of this item for current user, -1 means UNLIMITED, corresponding to maxCountPerUser"
        },
        "userPurchaseLimit": {
          "type": "integer",
          "format": "int64",
          "description": "the max count that user can do purchase, -1 means UNLIMITED"
        }
      }
    },
    "ItemInfo": {
      "type": "object",
      "required": [
        "categoryPath",
        "createdAt",
        "entitlementType",
        "itemId",
        "itemType",
        "language",
        "name",
        "namespace",
        "region",
        "status",
        "title",
        "updatedAt"
      ],
      "properties": {
        "title": {
          "type": "string",
          "description": "title info"
        },
        "description": {
          "type": "string",
          "description": "description info"
        },
        "longDescription": {
          "type": "string",
          "description": "long description info"
        },
        "itemId": {
          "type": "string",
          "description": "Item id"
        },
        "appId": {
          "type": "string",
          "description": "App id, required when itemType is APP"
        },
        "appType": {
          "type": "string",
          "description": "App type, required when itemType is APP",
          "enum": [
            "GAME",
            "SOFTWARE",
            "DLC",
            "DEMO"
          ]
        },
        "baseAppId": {
          "type": "string",
          "description": "Base app id"
        },
        "sku": {
          "type": "string",
          "description": "Sku"
        },
        "namespace": {
          "type": "string",
          "description": "Item namespace"
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "entitlementType": {
          "type": "string",
          "description": "Entitlement type",
          "enum": [
            "DURABLE",
            "CONSUMABLE"
          ]
        },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS"
        },
        "stackable": {
          "type": "boolean",
          "description": "Whether stack the CONSUMABLE entitlement"
        },
        "categoryPath": {
          "type": "string",
          "description": "Item category path"
        },
        "status": {
          "type": "string",
          "description": "Item status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        },
        "itemType": {
          "type": "string",
          "description": "Item type",
          "enum": [
            "APP",
            "COINS",
            "INGAMEITEM",
            "BUNDLE",
            "CODE",
            "SUBSCRIPTION"
          ]
        },
        "targetNamespace": {
          "type": "string",
          "description": "The target namespace of a cross namespace item"
        },
        "targetCurrencyCode": {
          "type": "string",
          "description": "Target currency code of coin item"
        },
        "targetItemId": {
          "type": "string",
          "description": "Target item id if this item is mapping from game namespace"
        },
        "images": {
          "type": "array",
          "description": "images",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "thumbnail url"
        },
        "regionData": {
          "type": "array",
          "description": "Region data",
          "items": {
            "$ref": "#/definitions/RegionDataItem"
          }
        },
        "recurring": {
          "description": "recurring for subscription",
          "$ref": "#/definitions/Recurring"
        },
        "itemIds": {
          "type": "array",
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "description": "Tags",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "features": {
          "type": "array",
          "description": "Features",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "maxCountPerUser": {
          "type": "integer",
          "format": "int32",
          "description": "Max count per user, -1 means UNLIMITED"
        },
        "maxCount": {
          "type": "integer",
          "format": "int32",
          "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE"
        },
        "clazz": {
          "type": "string",
          "description": "customized item clazz"
        },
        "boothName": {
          "type": "string",
          "description": "booth name to get tickets while it's item type is CODE"
        },
        "displayOrder": {
          "type": "integer",
          "format": "int32",
          "description": "display order"
        },
        "ext": {
          "type": "object",
          "description": "customized item properties",
          "additionalProperties": {
            "type": "object"
          }
        },
        "region": {
          "type": "string",
          "description": "region"
        },
        "language": {
          "type": "string",
          "description": "language"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "created at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updated at"
        },
        "localExt": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "Paging": {
      "type": "object",
      "properties": {
        "previous": {
          "type": "string"
        },
        "next": {
          "type": "string"
        }
      }
    },
    "FieldValidationError": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorField": {
          "type": "string"
        },
        "errorValue": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "messageVariables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Image": {
      "type": "object",
      "required": [
        "height",
        "imageUrl",
        "smallImageUrl",
        "width"
      ],
      "properties": {
        "as": {
          "type": "string",
          "description": "image for"
        },
        "caption": {
          "type": "string",
          "description": "image caption"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "height"
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "width"
        },
        "imageUrl": {
          "type": "string",
          "description": "imageUrl"
        },
        "smallImageUrl": {
          "type": "string",
          "description": "smallImageUrl"
        }
      }
    },
    "RegionDataItem": {
      "type": "object",
      "required": [
        "currencyCode",
        "currencyNamespace",
        "currencyType",
        "price"
      ],
      "properties": {
        "price": {
          "type": "integer",
          "format": "int32",
          "description": "price value, set to 0 if it's free"
        },
        "discountPercentage": {
          "type": "integer",
          "format": "int32",
          "description": "Discount percentageï¼Œdefault is 0, if this value is not 0, it will override the discountAmount",
          "minimum": 0,
          "maximum": 100
        },
        "discountAmount": {
          "type": "integer",
          "format": "int32",
          "description": "Discount amount, min is 0, max is price",
          "minimum": 0
        },
        "discountedPrice": {
          "type": "integer",
          "format": "int32"
        },
        "currencyCode": {
          "type": "string",
          "example": "USD",
          "description": "currency code"
        },
        "currencyType": {
          "type": "string",
          "description": "currency type",
          "enum": [
            "REAL",
            "VIRTUAL"
          ]
        },
        "currencyNamespace": {
          "type": "string",
          "description": "currency namespace"
        },
        "trialPrice": {
          "type": "integer",
          "format": "int32",
          "description": "trial price, required while fixedTrialCycles set, should &gt;=0 and &lt;= price, default same as trialPrice"
        },
        "purchaseAt": {
          "type": "string",
          "format": "date-time",
          "description": "PurchaseAt"
        },
        "expireAt": {
          "type": "string",
          "format": "date-time",
          "description": "ExpireAt"
        },
        "discountPurchaseAt": {
          "type": "string",
          "format": "date-time",
          "description": "DiscountPurchaseAt"
        },
        "discountExpireAt": {
          "type": "string",
          "format": "date-time",
          "description": "Discount expire date time"
        }
      },
      "description": "Region data"
    },
    "Recurring": {
      "type": "object",
      "required": [
        "cycle",
        "fixedFreeDays",
        "fixedTrialCycles",
        "graceDays"
      ],
      "properties": {
        "cycle": {
          "type": "string",
          "description": "recurring cycle",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "QUARTERLY",
            "YEARLY"
          ]
        },
        "fixedFreeDays": {
          "type": "integer",
          "format": "int32",
          "description": "fixed free days, 0 means not set"
        },
        "fixedTrialCycles": {
          "type": "integer",
          "format": "int32",
          "description": "fixed trial cycles, 0 means not set"
        },
        "graceDays": {
          "type": "integer",
          "format": "int32",
          "description": "recurring grace days, retry recurring charge within configured days if charge fail, default 7"
        }
      }
    },
    "EntitlementPagingSlicedResult": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntitlementInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "EntitlementInfo": {
      "type": "object",
      "required": [
        "clazz",
        "createdAt",
        "grantedAt",
        "id",
        "itemId",
        "itemNamespace",
        "name",
        "namespace",
        "source",
        "status",
        "type",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "entitlement id"
        },
        "namespace": {
          "type": "string",
          "description": "entitlement namespace"
        },
        "clazz": {
          "type": "string",
          "description": "entitlement class",
          "enum": [
            "APP",
            "ENTITLEMENT",
            "DISTRIBUTION",
            "CODE",
            "SUBSCRIPTION"
          ]
        },
        "type": {
          "type": "string",
          "description": "entitlement type",
          "enum": [
            "DURABLE",
            "CONSUMABLE"
          ]
        },
        "status": {
          "type": "string",
          "description": "entitlement status",
          "enum": [
            "ACTIVE",
            "INACTIVE",
            "CONSUMED",
            "DISTRIBUTED",
            "REVOKED"
          ]
        },
        "appId": {
          "type": "string",
          "description": "appId if entitlement is an app"
        },
        "appType": {
          "type": "string",
          "description": "appType if entitlement is an app",
          "enum": [
            "GAME",
            "SOFTWARE",
            "DLC",
            "DEMO"
          ]
        },
        "sku": {
          "type": "string",
          "description": "sku for purchased item"
        },
        "userId": {
          "type": "string",
          "description": "userId for this entitlement"
        },
        "itemId": {
          "type": "string",
          "description": "itemId of the entitlement"
        },
        "grantedCode": {
          "type": "string",
          "description": "grantedCode, the granted code"
        },
        "itemNamespace": {
          "type": "string",
          "description": "itemNamespace for the purchased item"
        },
        "name": {
          "type": "string",
          "description": "entitlement name"
        },
        "features": {
          "type": "array",
          "description": "entitlement features",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "useCount for entitlement"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "purchased quantity for distribution, required if DISTRIBUTION"
        },
        "source": {
          "type": "string",
          "description": "entitlement source",
          "enum": [
            "PURCHASE",
            "IAP",
            "PROMOTION",
            "ACHIEVEMENT",
            "REFERRAL_BONUS",
            "REDEEM_CODE",
            "OTHER"
          ]
        },
        "distributedQuantity": {
          "type": "integer",
          "format": "int32",
          "description": "distributed quantity for distribution, required if DISTRIBUTION"
        },
        "targetNamespace": {
          "type": "string",
          "description": "targetNamespace for distribution"
        },
        "itemSnapshot": {
          "description": "itemSnapshot for distribution",
          "$ref": "#/definitions/ItemSnapshot"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement start date",
          "x-nullable": true
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement end date",
          "x-nullable": true
        },
        "stackable": {
          "type": "boolean",
          "description": "Whether the CONSUMABLE entitlement is stackable"
        },
        "grantedAt": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement granted at"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement created at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "entitlement updated at"
        }
      }
    },
    "ItemSnapshot": {
      "type": "object",
      "required": [
        "entitlementType",
        "itemId",
        "itemType",
        "language",
        "name",
        "namespace",
        "region",
        "title"
      ],
      "properties": {
        "itemId": {
          "type": "string",
          "description": "Item id"
        },
        "appId": {
          "type": "string",
          "description": "App id, required when itemType is APP"
        },
        "appType": {
          "type": "string",
          "description": "App type, required when itemType is APP",
          "enum": [
            "GAME",
            "SOFTWARE",
            "DLC",
            "DEMO"
          ]
        },
        "baseAppId": {
          "type": "string",
          "description": "Base app Id"
        },
        "sku": {
          "type": "string",
          "description": "Sku"
        },
        "namespace": {
          "type": "string",
          "description": "Item's namespace"
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "entitlementType": {
          "type": "string",
          "description": "Entitlement type",
          "enum": [
            "DURABLE",
            "CONSUMABLE"
          ]
        },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS"
        },
        "stackable": {
          "type": "boolean",
          "description": "Whether stack the CONSUMABLE entitlement"
        },
        "itemType": {
          "type": "string",
          "description": "Item type",
          "enum": [
            "APP",
            "COINS",
            "INGAMEITEM",
            "BUNDLE",
            "CODE",
            "SUBSCRIPTION"
          ]
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "thumbnail url"
        },
        "targetNamespace": {
          "type": "string",
          "description": "The target namespace of a cross namespace item"
        },
        "targetCurrencyCode": {
          "type": "string",
          "description": "Target currency code of coin item"
        },
        "targetItemId": {
          "type": "string",
          "description": "Target item id of mapping from game namespace to publisher namespace"
        },
        "title": {
          "type": "string",
          "description": "title info"
        },
        "description": {
          "type": "string",
          "description": "description"
        },
        "regionDataItem": {
          "description": "Region data",
          "$ref": "#/definitions/RegionDataItem"
        },
        "recurring": {
          "description": "recurring for subscription",
          "$ref": "#/definitions/Recurring"
        },
        "itemIds": {
          "type": "array",
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": {
            "type": "string"
          }
        },
        "features": {
          "type": "array",
          "description": "supported features",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "maxCountPerUser": {
          "type": "integer",
          "format": "int32",
          "description": "Max count per user, -1 means UNLIMITED"
        },
        "maxCount": {
          "type": "integer",
          "format": "int32",
          "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE"
        },
        "boothName": {
          "type": "string",
          "description": "booth name to get tickets while it's item type is CODE"
        },
        "region": {
          "type": "string",
          "description": "region"
        },
        "language": {
          "type": "string",
          "description": "language"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updatedAt"
        }
      }
    },
    "CurrencyCreate": {
      "type": "object",
      "required": [
        "currencyCode"
      ],
      "properties": {
        "currencyCode": {
          "type": "string",
          "description": "currency code, alphabet uppercase"
        },
        "localizationDescriptions": {
          "type": "object",
          "description": "Description, key is language, value is description max length is 255",
          "additionalProperties": {
            "type": "string"
          }
        },
        "currencySymbol": {
          "type": "string",
          "description": "currency symbol, max length is 8"
        },
        "currencyType": {
          "type": "string",
          "enum": [
            "REAL",
            "VIRTUAL"
          ]
        },
        "decimals": {
          "type": "integer",
          "format": "int32",
          "description": "decimals, commonly set 2 if real currency or 0 if virtual currency"
        },
        "maxAmountPerTransaction": {
          "type": "integer",
          "format": "int64",
          "description": "max amount of per transaction, default is -1, means no limit"
        },
        "maxTransactionAmountPerDay": {
          "type": "integer",
          "format": "int64",
          "description": "max transaction amount per day, default is -1, means no limit"
        },
        "maxBalanceAmount": {
          "type": "integer",
          "format": "int64",
          "description": "max balance amount of the currency, default is -1, means no limit"
        }
      },
      "description": "A DTO for creating currency"
    },
    "CurrencySummary": {
      "type": "object",
      "required": [
        "currencyCode",
        "currencySymbol",
        "currencyType",
        "decimals",
        "namespace"
      ],
      "properties": {
        "currencyCode": {
          "type": "string",
          "description": "currency code, alphabet uppercase"
        },
        "currencySymbol": {
          "type": "string",
          "description": "currency symbol, max length is 8"
        },
        "currencyType": {
          "type": "string",
          "description": "currency type",
          "enum": [
            "REAL",
            "VIRTUAL"
          ]
        },
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "decimals": {
          "type": "integer",
          "format": "int32",
          "description": "decimals"
        }
      }
    },
    "CurrencyUpdate": {
      "type": "object",
      "properties": {
        "localizationDescriptions": {
          "type": "object",
          "description": "Description, key is language, value is description max length is 255",
          "additionalProperties": {
            "type": "string"
          }
        },
        "maxAmountPerTransaction": {
          "type": "integer",
          "format": "int64",
          "description": "max amount of per transaction, -1 means no limit"
        },
        "maxTransactionAmountPerDay": {
          "type": "integer",
          "format": "int64",
          "description": "max transaction amount per day, -1 means no limit"
        },
        "maxBalanceAmount": {
          "type": "integer",
          "format": "int64",
          "description": "max balance amount of the currency, -1 means no limit"
        }
      },
      "description": "A DTO for update currency"
    },
    "CurrencyConfig": {
      "type": "object",
      "required": [
        "currencySymbol",
        "maxAmountPerTransaction",
        "maxBalanceAmount",
        "maxTransactionAmountPerDay"
      ],
      "properties": {
        "maxAmountPerTransaction": {
          "type": "integer",
          "format": "int64",
          "description": "max amount of per transaction"
        },
        "maxTransactionAmountPerDay": {
          "type": "integer",
          "format": "int64",
          "description": "max transaction amount per day"
        },
        "maxBalanceAmount": {
          "type": "integer",
          "format": "int64",
          "description": "max balance amount of the currency"
        },
        "currencySymbol": {
          "type": "string",
          "description": "currency symbol"
        }
      },
      "description": "currency config"
    },
    "WalletTransactionPagingSlicedResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "description": "data",
          "items": {
            "$ref": "#/definitions/WalletTransactionInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "CreditRequest": {
      "type": "object",
      "required": [
        "amount"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64",
          "description": "amount",
          "minimum": 1
        },
        "source": {
          "type": "string",
          "description": "source, purchase for default",
          "enum": [
            "PURCHASE",
            "IAP",
            "PROMOTION",
            "ACHIEVEMENT",
            "REFERRAL_BONUS",
            "REDEEM_CODE",
            "REFUND",
            "OTHER"
          ]
        },
        "reason": {
          "type": "string",
          "description": "reason, max length is 127"
        }
      },
      "description": "A DTO for wallet's credit"
    },
    "DebitRequest": {
      "type": "object",
      "required": [
        "amount"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64",
          "description": "amount",
          "minimum": 1
        },
        "reason": {
          "type": "string",
          "description": "reason"
        }
      },
      "description": "A DTO for wallet's debit"
    },
    "WalletInfo": {
      "type": "object",
      "required": [
        "balance",
        "createdAt",
        "currencyCode",
        "currencySymbol",
        "id",
        "namespace",
        "status",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "wallet id"
        },
        "namespace": {
          "type": "string",
          "description": "wallet namespace"
        },
        "userId": {
          "type": "string",
          "description": "user id"
        },
        "currencyCode": {
          "type": "string",
          "description": "currency code"
        },
        "currencySymbol": {
          "type": "string",
          "description": "currency symbol"
        },
        "balance": {
          "type": "integer",
          "format": "int64",
          "description": "balance"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "created at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updated at"
        },
        "status": {
          "type": "string",
          "description": "status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        }
      }
    },
    "PaymentRequest": {
      "type": "object",
      "required": [
        "amount"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64",
          "description": "amount",
          "minimum": 0
        }
      },
      "description": "A DTO for wallet's payment"
    },
    "WalletPagingSlicedResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "description": "data",
          "items": {
            "$ref": "#/definitions/WalletInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "RewardInfo": {
      "type": "object",
      "required": [
        "eventTopic",
        "namespace",
        "rewardId"
      ],
      "properties": {
        "rewardId": {
          "type": "string",
          "description": "Reward id"
        },
        "namespace": {
          "type": "string",
          "description": "Reward namespace"
        },
        "rewardCode": {
          "type": "string",
          "description": "Reward code"
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "eventTopic": {
          "type": "string",
          "description": "event topic to listen to"
        },
        "rewardConditions": {
          "type": "array",
          "description": "list of reward condition",
          "items": {
            "$ref": "#/definitions/RewardCondition"
          }
        },
        "maxAwarded": {
          "type": "integer",
          "format": "int32",
          "description": "Max awarded"
        },
        "maxAwardedPerUser": {
          "type": "integer",
          "format": "int32",
          "description": "Max awarded per user"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "created at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updated at"
        }
      }
    },
    "RewardItem": {
      "type": "object",
      "properties": {
        "itemId": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RewardCreate": {
      "type": "object",
      "required": [
        "eventTopic",
        "rewardCode"
      ],
      "properties": {
        "rewardCode": {
          "type": "string",
          "description": "Reward code"
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "eventTopic": {
          "type": "string",
          "description": "event topic to listen to"
        },
        "rewardConditions": {
          "type": "array",
          "description": "list of reward condition",
          "items": {
            "$ref": "#/definitions/RewardCondition"
          }
        },
        "maxAwarded": {
          "type": "integer",
          "format": "int32",
          "description": "Max awarded"
        },
        "maxAwardedPerUser": {
          "type": "integer",
          "format": "int32",
          "description": "Max awarded per user"
        }
      }
    },
    "RewardUpdate": {
      "type": "object",
      "required": [
        "eventTopic",
        "rewardCode"
      ],
      "properties": {
        "rewardCode": {
          "type": "string",
          "description": "rewardCode"
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "eventTopic": {
          "type": "string",
          "description": "event topic to listen to"
        },
        "rewardConditions": {
          "type": "array",
          "description": "list of reward condition",
          "items": {
            "$ref": "#/definitions/RewardCondition"
          }
        },
        "maxAwarded": {
          "type": "integer",
          "format": "int32",
          "description": "Max awarded"
        },
        "maxAwardedPerUser": {
          "type": "integer",
          "format": "int32",
          "description": "Max awarded per user"
        }
      }
    },
    "RewardPagingSlicedResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "description": "data",
          "items": {
            "$ref": "#/definitions/RewardInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "WalletTransactionInfo": {
      "type": "object",
      "required": [
        "amount",
        "createdAt",
        "currencyCode",
        "namespace",
        "operator",
        "updatedAt",
        "userId",
        "walletAction",
        "walletId"
      ],
      "properties": {
        "walletId": {
          "type": "string",
          "description": "wallet id"
        },
        "amount": {
          "type": "integer",
          "format": "int64",
          "description": "Transaction amount, it is absolute value."
        },
        "reason": {
          "type": "string",
          "description": "Reason of the transaction"
        },
        "namespace": {
          "type": "string",
          "description": "Wallet namespace"
        },
        "userId": {
          "type": "string",
          "description": "Wallet owner's userId"
        },
        "operator": {
          "type": "string",
          "description": "Operator userId or ClientId"
        },
        "walletAction": {
          "type": "string",
          "description": "Action type",
          "enum": [
            "CREDIT",
            "PAYMENT",
            "DEBIT"
          ]
        },
        "currencyCode": {
          "type": "string",
          "description": "Transaction currency code"
        },
        "balanceSource": {
          "type": "string",
          "description": "The source of credit"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Transaction created time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Transaction updated time"
        }
      }
    },
    "RewardCondition": {
      "type": "object",
      "properties": {
        "conditionName": {
          "type": "string"
        },
        "condition": {
          "type": "string"
        },
        "eventName": {
          "type": "string"
        },
        "rewardItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RewardItem"
          }
        }
      }
    },
    "OrderStatistics": {
      "type": "object",
      "required": [
        "statusCount",
        "total"
      ],
      "properties": {
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "Total"
        },
        "statusCount": {
          "type": "object",
          "description": "Status count",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "OrderRefundCreate": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "order refund description"
        }
      }
    },
    "OrderInfo": {
      "type": "object",
      "required": [
        "createdAt",
        "currency",
        "discountedPrice",
        "expireTime",
        "itemId",
        "namespace",
        "orderNo",
        "paymentRemainSeconds",
        "price",
        "quantity",
        "sandbox",
        "status",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "orderNo": {
          "type": "string",
          "description": "Order number"
        },
        "paymentOrderNo": {
          "type": "string",
          "description": "Payment order number"
        },
        "namespace": {
          "type": "string",
          "description": "Order namespace"
        },
        "userId": {
          "type": "string",
          "description": "User id"
        },
        "itemId": {
          "type": "string",
          "description": "Item id"
        },
        "sandbox": {
          "type": "boolean",
          "description": "isSandbox, indicate if order is sandbox"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "Order quantity"
        },
        "price": {
          "type": "integer",
          "format": "int32",
          "description": "Order price"
        },
        "discountedPrice": {
          "type": "integer",
          "format": "int32",
          "description": "Order discounted price"
        },
        "paymentProvider": {
          "type": "string",
          "description": "Payment provider",
          "enum": [
            "WALLET",
            "XSOLLA",
            "ADYEN",
            "STRIPE",
            "CHECKOUT",
            "ALIPAY",
            "WXPAY",
            "PAYPAL"
          ]
        },
        "paymentMethod": {
          "type": "string",
          "description": "Payment method"
        },
        "tax": {
          "type": "integer",
          "format": "int32",
          "description": "Order total tax"
        },
        "vat": {
          "type": "integer",
          "format": "int32",
          "description": "Order VAT"
        },
        "salesTax": {
          "type": "integer",
          "format": "int32",
          "description": "Order sales tax"
        },
        "paymentProviderFee": {
          "type": "integer",
          "format": "int32",
          "description": "Payment provider fee"
        },
        "paymentMethodFee": {
          "type": "integer",
          "format": "int32",
          "description": "Payment method fee"
        },
        "currency": {
          "description": "Order currency info",
          "$ref": "#/definitions/CurrencySummary"
        },
        "paymentStationUrl": {
          "type": "string",
          "description": "Payment url info"
        },
        "itemSnapshot": {
          "description": "Item snapshot",
          "$ref": "#/definitions/ItemSnapshot"
        },
        "region": {
          "type": "string",
          "description": "Order created region"
        },
        "language": {
          "type": "string",
          "description": "Order created language"
        },
        "status": {
          "type": "string",
          "description": "Order status",
          "enum": [
            "INIT",
            "CHARGED",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "FULFILLED",
            "FULFILL_FAILED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "CLOSED",
            "DELETED"
          ]
        },
        "statusReason": {
          "type": "string",
          "description": "Order status reason"
        },
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order created"
        },
        "chargedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order charged"
        },
        "fulfilledTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order fulfilled"
        },
        "refundedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order refunded"
        },
        "chargebackTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order chargeback"
        },
        "chargebackReversedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order chargeback reversed"
        },
        "expireTime": {
          "type": "string",
          "format": "date-time",
          "description": "payment expire time"
        },
        "paymentRemainSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "payment remain seconds"
        },
        "ext": {
          "type": "object",
          "description": "extra field to store external order information",
          "additionalProperties": {
            "type": "object"
          }
        },
        "totalTax": {
          "type": "integer",
          "format": "int32",
          "description": "total tax"
        },
        "totalPrice": {
          "type": "integer",
          "format": "int32",
          "description": "total price"
        },
        "subtotalPrice": {
          "type": "integer",
          "format": "int32",
          "description": "subtotal price"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updatedAt"
        }
      }
    },
    "OrderPagingResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "description": "data",
          "items": {
            "$ref": "#/definitions/OrderInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "OrderSyncResult": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "nextEvaluatedKey": {
          "type": "string"
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "rvn": {
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "orderNo": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "paymentOrderNo": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "INIT",
            "CHARGED",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "FULFILLED",
            "FULFILL_FAILED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "CLOSED",
            "DELETED"
          ]
        },
        "sandbox": {
          "type": "boolean"
        },
        "itemId": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "price": {
          "type": "integer",
          "format": "int32"
        },
        "discountedPrice": {
          "type": "integer",
          "format": "int32"
        },
        "paymentProvider": {
          "type": "string",
          "enum": [
            "WALLET",
            "XSOLLA",
            "ADYEN",
            "STRIPE",
            "CHECKOUT",
            "ALIPAY",
            "WXPAY",
            "PAYPAL"
          ]
        },
        "paymentMethod": {
          "type": "string"
        },
        "tax": {
          "type": "integer",
          "format": "int32"
        },
        "vat": {
          "type": "integer",
          "format": "int32"
        },
        "salesTax": {
          "type": "integer",
          "format": "int32"
        },
        "paymentProviderFee": {
          "type": "integer",
          "format": "int32"
        },
        "paymentMethodFee": {
          "type": "integer",
          "format": "int32"
        },
        "currency": {
          "$ref": "#/definitions/CurrencySummary"
        },
        "paymentStationUrl": {
          "type": "string"
        },
        "statusReason": {
          "type": "string"
        },
        "createdTime": {
          "type": "string",
          "format": "date-time"
        },
        "chargedTime": {
          "type": "string",
          "format": "date-time"
        },
        "fulfilledTime": {
          "type": "string",
          "format": "date-time"
        },
        "refundedTime": {
          "type": "string",
          "format": "date-time"
        },
        "chargebackTime": {
          "type": "string",
          "format": "date-time"
        },
        "chargebackReversedTime": {
          "type": "string",
          "format": "date-time"
        },
        "returnUrl": {
          "type": "string"
        },
        "ext": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "itemSnapshot": {
          "$ref": "#/definitions/ItemSnapshot"
        },
        "region": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "countNamespace": {
          "type": "string"
        },
        "countItemId": {
          "type": "string"
        },
        "countUserId": {
          "type": "string"
        },
        "expireTime": {
          "type": "string",
          "format": "date-time"
        },
        "paymentRemainSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "charged": {
          "type": "boolean"
        },
        "free": {
          "type": "boolean"
        },
        "totalTax": {
          "type": "integer",
          "format": "int32"
        },
        "totalPrice": {
          "type": "integer",
          "format": "int32"
        },
        "subtotalPrice": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "OrderHistoryInfo": {
      "type": "object",
      "required": [
        "action",
        "createdAt",
        "namespace",
        "operator",
        "orderNo",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "orderNo": {
          "type": "string",
          "description": "The Order number"
        },
        "operator": {
          "type": "string",
          "description": "The operator to this order"
        },
        "action": {
          "type": "string",
          "description": "The action of the order",
          "enum": [
            "INIT",
            "CHARGED",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "FULFILLED",
            "FULFILL_FAILED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "CLOSE",
            "DELETED",
            "SET_STATUS"
          ]
        },
        "reason": {
          "type": "string",
          "description": "The reason of this operation"
        },
        "namespace": {
          "type": "string",
          "description": "The namespace of this order"
        },
        "userId": {
          "type": "string",
          "description": "The owner of the order"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "created at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updated at"
        }
      }
    },
    "OrderPagingSlicedResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "description": "data",
          "items": {
            "$ref": "#/definitions/OrderInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "PurchasedItemCount": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "OrderUpdate": {
      "type": "object",
      "required": [
        "status",
        "statusReason"
      ],
      "properties": {
        "status": {
          "type": "string",
          "description": "status",
          "enum": [
            "INIT",
            "CHARGED",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "FULFILLED",
            "FULFILL_FAILED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "CLOSED",
            "DELETED"
          ]
        },
        "statusReason": {
          "type": "string",
          "description": "update status reason"
        }
      },
      "description": "A DTO object for updating order API call."
    },
    "TradeNotification": {
      "type": "object",
      "required": [
        "currency",
        "extOrderNo",
        "issuedAt",
        "namespace",
        "nonceStr",
        "paymentOrderNo",
        "paymentProvider",
        "price",
        "sandbox",
        "status",
        "type"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "namespace which event issues from"
        },
        "userId": {
          "type": "string",
          "description": "user id in namespace, will be null if there's targetUserId"
        },
        "issuedAt": {
          "type": "string",
          "format": "date-time",
          "description": "event issued at"
        },
        "type": {
          "type": "string",
          "description": "notification type: distribution, payment"
        },
        "targetNamespace": {
          "type": "string",
          "description": "target namespace, usually it's the game namespace"
        },
        "targetUserId": {
          "type": "string",
          "description": "target user id, usually it's the user id in game namespace"
        },
        "nonceStr": {
          "type": "string",
          "description": "Random string"
        },
        "paymentOrderNo": {
          "type": "string",
          "description": "Payment order number"
        },
        "extOrderNo": {
          "type": "string",
          "description": "Order number"
        },
        "sku": {
          "type": "string",
          "description": "optional, unique identity for the item"
        },
        "extUserId": {
          "type": "string",
          "description": "optional, external user id, can be the character id"
        },
        "sandbox": {
          "type": "boolean",
          "description": "isSandbox, indicate if order is sandbox"
        },
        "price": {
          "type": "integer",
          "format": "int32",
          "description": "Payment order price"
        },
        "paymentProvider": {
          "type": "string",
          "description": "Payment provider",
          "enum": [
            "WALLET",
            "XSOLLA",
            "ADYEN",
            "STRIPE",
            "CHECKOUT",
            "ALIPAY",
            "WXPAY",
            "PAYPAL"
          ]
        },
        "paymentMethod": {
          "type": "string",
          "description": "Payment method"
        },
        "tax": {
          "type": "integer",
          "format": "int32",
          "description": "Payment total tax"
        },
        "vat": {
          "type": "integer",
          "format": "int32",
          "description": "Payment order VAT"
        },
        "salesTax": {
          "type": "integer",
          "format": "int32",
          "description": "Payment order sales tax"
        },
        "paymentProviderFee": {
          "type": "integer",
          "format": "int32",
          "description": "Payment provider fee"
        },
        "paymentMethodFee": {
          "type": "integer",
          "format": "int32",
          "description": "Payment method fee"
        },
        "currency": {
          "description": "Payment order currency info",
          "$ref": "#/definitions/CurrencySummary"
        },
        "paymentStationUrl": {
          "type": "string",
          "description": "Payment station url"
        },
        "status": {
          "type": "string",
          "description": "Payment order status",
          "enum": [
            "INIT",
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGED",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REQUEST_FOR_INFORMATION",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "DELETED"
          ]
        },
        "statusReason": {
          "type": "string",
          "description": "Payment order status reason"
        },
        "authorisedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order authorised"
        },
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order created"
        },
        "chargedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order charged"
        },
        "refundedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order refunded"
        },
        "chargebackTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order chargeback"
        },
        "chargebackReversedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order chargeback reversed"
        },
        "customParameters": {
          "type": "object",
          "description": "User custom parameters",
          "additionalProperties": {
            "type": "object"
          }
        },
        "metadata": {
          "type": "object",
          "description": "metadata",
          "additionalProperties": {
            "type": "string"
          }
        },
        "subscriptionId": {
          "type": "string",
          "description": "Subscription id if exist"
        },
        "totalTax": {
          "type": "integer",
          "format": "int32",
          "description": "total tax"
        },
        "totalPrice": {
          "type": "integer",
          "format": "int32",
          "description": "total price"
        },
        "subtotalPrice": {
          "type": "integer",
          "format": "int32",
          "description": "subtotal price"
        },
        "extTxId": {
          "type": "string",
          "description": "External transaction id"
        },
        "txEndTime": {
          "type": "string",
          "format": "date-time",
          "description": "Transaction end date time"
        },
        "additionalData": {
          "description": "additional data",
          "$ref": "#/definitions/AdditionalData"
        }
      }
    },
    "OrderGrantInfo": {
      "type": "object",
      "properties": {
        "entitlements": {
          "type": "array",
          "description": "Order entitlement list",
          "items": {
            "$ref": "#/definitions/EntitlementSummary"
          }
        },
        "credits": {
          "type": "array",
          "description": "Order credit list",
          "items": {
            "$ref": "#/definitions/CreditSummary"
          }
        }
      }
    },
    "OrderCreate": {
      "type": "object",
      "required": [
        "currencyCode",
        "discountedPrice",
        "itemId",
        "price",
        "quantity"
      ],
      "properties": {
        "itemId": {
          "type": "string",
          "description": "item id"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "Quantity of item, min is 1"
        },
        "price": {
          "type": "integer",
          "format": "int32",
          "description": "Price of order, should match (item_price * quantity)"
        },
        "discountedPrice": {
          "type": "integer",
          "format": "int32",
          "description": "Discounted price of order, this should match (item_discounted_price * quantity) ifitem discounted price is available, otherwise it should equal to (item_price * quantity)"
        },
        "currencyCode": {
          "type": "string",
          "description": "currency code, should match currency code in item region data"
        },
        "region": {
          "type": "string",
          "description": "country value from ISO countries"
        },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US"
        },
        "returnUrl": {
          "type": "string",
          "description": "custom return url for real payment, user will be redirected to this url once payment is finished"
        },
        "ext": {
          "type": "object",
          "description": "extra field to store external order information",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "AdditionalData": {
      "type": "object",
      "properties": {
        "cardSummary": {
          "type": "string"
        }
      }
    },
    "PaymentNotificationPagingSlicedResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "description": "data",
          "items": {
            "$ref": "#/definitions/PaymentNotificationInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "PaymentOrderInfo": {
      "type": "object",
      "required": [
        "channel",
        "createdAt",
        "currency",
        "extOrderNo",
        "namespace",
        "paymentOrderNo",
        "paymentProvider",
        "price",
        "sandbox",
        "status",
        "title",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "paymentOrderNo": {
          "type": "string",
          "description": "Payment order number"
        },
        "namespace": {
          "type": "string",
          "description": "Payment order namespace"
        },
        "userId": {
          "type": "string",
          "description": "User id"
        },
        "targetNamespace": {
          "type": "string",
          "description": "The game namespace if it's an external in-game-purchase that resides in publisher namespace"
        },
        "targetUserId": {
          "type": "string",
          "description": "The user id in game namespace if it's an external in-game-purchase that resides in publisher namespace"
        },
        "extOrderNo": {
          "type": "string",
          "description": "External order number"
        },
        "sku": {
          "type": "string",
          "description": "optional, unique identity for the item"
        },
        "extUserId": {
          "type": "string",
          "description": "optional, external user id, can be the character id"
        },
        "sandbox": {
          "type": "boolean",
          "description": "isSandbox, indicate if order is sandbox"
        },
        "price": {
          "type": "integer",
          "format": "int32",
          "description": "Payment order price"
        },
        "paymentProvider": {
          "type": "string",
          "description": "Payment provider",
          "enum": [
            "WALLET",
            "XSOLLA",
            "ADYEN",
            "STRIPE",
            "CHECKOUT",
            "ALIPAY",
            "WXPAY",
            "PAYPAL"
          ]
        },
        "paymentMethod": {
          "type": "string",
          "description": "Payment method"
        },
        "region": {
          "type": "string",
          "description": "Payment user region"
        },
        "language": {
          "type": "string",
          "description": "Payment user language"
        },
        "tax": {
          "type": "integer",
          "format": "int32",
          "description": "Payment total tax"
        },
        "vat": {
          "type": "integer",
          "format": "int32",
          "description": "Payment order VAT"
        },
        "salesTax": {
          "type": "integer",
          "format": "int32",
          "description": "Payment order sales tax"
        },
        "paymentProviderFee": {
          "type": "integer",
          "format": "int32",
          "description": "Payment provider fee"
        },
        "paymentMethodFee": {
          "type": "integer",
          "format": "int32",
          "description": "Payment method fee"
        },
        "currency": {
          "description": "Payment order currency info",
          "$ref": "#/definitions/CurrencySummary"
        },
        "paymentStationUrl": {
          "type": "string",
          "description": "Payment url"
        },
        "transactions": {
          "type": "array",
          "description": "Payment order transactions",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "status": {
          "type": "string",
          "description": "Payment order status",
          "enum": [
            "INIT",
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGED",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REQUEST_FOR_INFORMATION",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "DELETED"
          ]
        },
        "statusReason": {
          "type": "string",
          "description": "Payment order status reason"
        },
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order created"
        },
        "authorisedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order authorised"
        },
        "chargedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order charged"
        },
        "refundedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order refunded"
        },
        "chargebackTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order chargeback time"
        },
        "chargebackReversedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order chargeback reversed time"
        },
        "returnUrl": {
          "type": "string",
          "description": "The return url if customized"
        },
        "notifyUrl": {
          "type": "string",
          "description": "The notify url if customized"
        },
        "title": {
          "type": "string",
          "description": "Order title"
        },
        "description": {
          "type": "string",
          "description": "Order description"
        },
        "itemType": {
          "type": "string",
          "description": "Order item type",
          "enum": [
            "APP",
            "COINS",
            "INGAMEITEM",
            "BUNDLE",
            "CODE",
            "SUBSCRIPTION"
          ]
        },
        "channel": {
          "type": "string",
          "description": "Payment order channel: EXTERNAL or INTERNAL",
          "enum": [
            "EXTERNAL",
            "INTERNAL"
          ]
        },
        "customParameters": {
          "type": "object",
          "description": "User custom parameters",
          "additionalProperties": {
            "type": "object"
          }
        },
        "subscriptionId": {
          "type": "string",
          "description": "subscriptionId, payment token will be saved for recurring payment"
        },
        "recurringPaymentOrderNo": {
          "type": "string",
          "description": "recurring payment order which has recurring token, will do recurring payment if present, otherwise start normal payment flow"
        },
        "charging": {
          "type": "boolean",
          "description": "if charging is true, means user have finished transaction, platform is waiting for payment notification"
        },
        "omitNotification": {
          "type": "boolean",
          "description": "TEST PURPOSE, if set it will not send async notification to the API invoker, only can set true while this payment is sandbox"
        },
        "metadata": {
          "type": "object",
          "description": "metadata",
          "additionalProperties": {
            "type": "string"
          }
        },
        "totalTax": {
          "type": "integer",
          "format": "int32",
          "description": "total tax"
        },
        "totalPrice": {
          "type": "integer",
          "format": "int32",
          "description": "total price"
        },
        "subtotalPrice": {
          "type": "integer",
          "format": "int32",
          "description": "subtotal price"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updatedAt"
        }
      }
    },
    "PaymentOrderChargeRequest": {
      "type": "object",
      "required": [
        "paymentProvider"
      ],
      "properties": {
        "paymentProvider": {
          "type": "string",
          "description": "payment provider",
          "enum": [
            "WALLET",
            "XSOLLA",
            "ADYEN",
            "STRIPE",
            "CHECKOUT",
            "ALIPAY",
            "WXPAY",
            "PAYPAL"
          ]
        },
        "paymentMethod": {
          "type": "string",
          "description": "payment method"
        },
        "extTxId": {
          "type": "string",
          "description": "external transaction id"
        }
      }
    },
    "PaymentOrderChargeStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "INIT",
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGED",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REQUEST_FOR_INFORMATION",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "DELETED"
          ]
        },
        "charging": {
          "type": "boolean"
        }
      }
    },
    "PaymentOrderPagingSlicedResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "description": "data",
          "items": {
            "$ref": "#/definitions/PaymentOrderInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "ExternalPaymentOrderCreate": {
      "type": "object",
      "required": [
        "description",
        "extOrderNo",
        "price",
        "targetNamespace",
        "targetUserId",
        "title"
      ],
      "properties": {
        "extOrderNo": {
          "type": "string",
          "description": "External order id"
        },
        "sku": {
          "type": "string",
          "description": "optional, unique identity for the item"
        },
        "extUserId": {
          "type": "string",
          "description": "optional, external user id, can be the character id"
        },
        "price": {
          "type": "integer",
          "format": "int32",
          "description": "Price of order"
        },
        "title": {
          "type": "string",
          "description": "Order title"
        },
        "description": {
          "type": "string",
          "description": "Order desc, max length 2000"
        },
        "itemType": {
          "type": "string",
          "enum": [
            "APP",
            "COINS",
            "INGAMEITEM",
            "BUNDLE",
            "CODE",
            "SUBSCRIPTION"
          ]
        },
        "currencyCode": {
          "type": "string",
          "description": "currency code, default is USD"
        },
        "currencyNamespace": {
          "type": "string",
          "description": "currency namespace, default is publisher namespace"
        },
        "region": {
          "type": "string",
          "description": "country value from ISO countries"
        },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US"
        },
        "sandbox": {
          "type": "boolean",
          "description": "TEST PURPOSE, sandbox(Active in real currency mode), default is false"
        },
        "returnUrl": {
          "type": "string",
          "description": "custom return url for real payment, user will be redirected to this url once payment is finished"
        },
        "notifyUrl": {
          "type": "string",
          "description": "custom notify url for real payment, send notification to this url once payment action is finished"
        },
        "customParameters": {
          "type": "object",
          "description": "custom parameters",
          "additionalProperties": {
            "type": "object"
          }
        },
        "subscriptionId": {
          "type": "string",
          "description": "subscriptionId, payment token will be saved for recurring payment"
        },
        "recurringPaymentOrderNo": {
          "type": "string",
          "description": "recurring payment order which has recurring token, will do recurring payment if present, otherwise start normal payment flow"
        },
        "omitNotification": {
          "type": "boolean",
          "description": "TEST PURPOSE, if set it will not send async notification to the API invoker, only can set true while this payment is sandbox"
        },
        "metadata": {
          "type": "object",
          "description": "metadata",
          "additionalProperties": {
            "type": "string"
          }
        },
        "targetNamespace": {
          "type": "string",
          "description": "The game namespace"
        },
        "targetUserId": {
          "type": "string",
          "description": "The user id in game namespace"
        }
      }
    },
    "PaymentOrderCreateResult": {
      "type": "object",
      "required": [
        "createdTime",
        "namespace",
        "paymentOrderNo",
        "status"
      ],
      "properties": {
        "paymentOrderNo": {
          "type": "string",
          "description": "Payment order number"
        },
        "namespace": {
          "type": "string",
          "description": "Payment order namespace"
        },
        "targetNamespace": {
          "type": "string",
          "description": "Game namespace"
        },
        "targetUserId": {
          "type": "string",
          "description": "User id in game namespace"
        },
        "status": {
          "type": "string",
          "description": "Payment order status",
          "enum": [
            "INIT",
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGED",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REQUEST_FOR_INFORMATION",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "DELETED"
          ]
        },
        "paymentStationUrl": {
          "type": "string",
          "description": "Payment url"
        },
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order created"
        }
      }
    },
    "PaymentOrderSyncResult": {
      "type": "object",
      "properties": {
        "paymentOrders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentOrder"
          }
        },
        "nextEvaluatedKey": {
          "type": "string"
        }
      }
    },
    "PaymentNotificationInfo": {
      "type": "object",
      "required": [
        "createdAt",
        "id",
        "namespace",
        "notification",
        "notificationSource",
        "notificationType",
        "paymentOrderNo",
        "status",
        "updatedAt"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "id"
        },
        "paymentOrderNo": {
          "type": "string",
          "description": "payment order No"
        },
        "externalId": {
          "type": "string",
          "description": "external id"
        },
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "notificationType": {
          "type": "string",
          "description": "notification type"
        },
        "notification": {
          "type": "object",
          "description": "notification payload"
        },
        "status": {
          "type": "string",
          "description": "status",
          "enum": [
            "PROCESSED",
            "ERROR",
            "WARN",
            "IGNORED"
          ]
        },
        "notificationSource": {
          "type": "string",
          "description": "payment provider",
          "enum": [
            "WALLET",
            "XSOLLA",
            "ADYEN",
            "STRIPE",
            "CHECKOUT",
            "ALIPAY",
            "WXPAY",
            "PAYPAL"
          ]
        },
        "statusReason": {
          "type": "string",
          "description": "status reason"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "createdAt"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updatedAt"
        }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "txId": {
          "type": "string"
        },
        "amount": {
          "type": "integer",
          "format": "int32"
        },
        "tax": {
          "type": "integer",
          "format": "int32"
        },
        "vat": {
          "type": "integer",
          "format": "int32"
        },
        "salesTax": {
          "type": "integer",
          "format": "int32"
        },
        "paymentProviderFee": {
          "type": "integer",
          "format": "int32"
        },
        "paymentMethodFee": {
          "type": "integer",
          "format": "int32"
        },
        "currency": {
          "$ref": "#/definitions/CurrencySummary"
        },
        "type": {
          "type": "string",
          "enum": [
            "AUTHORISATION",
            "CHARGE",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REQUEST_FOR_INFORMATION",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "REFUND",
            "REFUND_FAILED"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "FINISHED",
            "FAILED"
          ]
        },
        "provider": {
          "type": "string",
          "enum": [
            "WALLET",
            "XSOLLA",
            "ADYEN",
            "STRIPE",
            "CHECKOUT",
            "ALIPAY",
            "WXPAY",
            "PAYPAL"
          ]
        },
        "paymentMethod": {
          "type": "string"
        },
        "merchantId": {
          "type": "string"
        },
        "extTxId": {
          "type": "string"
        },
        "extStatusCode": {
          "type": "string"
        },
        "extMessage": {
          "type": "string"
        },
        "txEndTime": {
          "type": "string",
          "format": "date-time"
        },
        "additionalData": {
          "$ref": "#/definitions/AdditionalData"
        },
        "notified": {
          "type": "boolean"
        }
      }
    },
    "PaymentOrder": {
      "type": "object",
      "properties": {
        "rvn": {
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "paymentOrderNo": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "INIT",
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGED",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REQUEST_FOR_INFORMATION",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "DELETED"
          ]
        },
        "sandbox": {
          "type": "boolean"
        },
        "extOrderNo": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "itemType": {
          "type": "string",
          "enum": [
            "APP",
            "COINS",
            "INGAMEITEM",
            "BUNDLE",
            "CODE",
            "SUBSCRIPTION"
          ]
        },
        "price": {
          "type": "integer",
          "format": "int32"
        },
        "sku": {
          "type": "string"
        },
        "extUserId": {
          "type": "string"
        },
        "targetNamespace": {
          "type": "string"
        },
        "targetUserId": {
          "type": "string"
        },
        "paymentProvider": {
          "type": "string",
          "enum": [
            "WALLET",
            "XSOLLA",
            "ADYEN",
            "STRIPE",
            "CHECKOUT",
            "ALIPAY",
            "WXPAY",
            "PAYPAL"
          ]
        },
        "paymentMethod": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "tax": {
          "type": "integer",
          "format": "int32"
        },
        "vat": {
          "type": "integer",
          "format": "int32"
        },
        "salesTax": {
          "type": "integer",
          "format": "int32"
        },
        "paymentProviderFee": {
          "type": "integer",
          "format": "int32"
        },
        "paymentMethodFee": {
          "type": "integer",
          "format": "int32"
        },
        "currency": {
          "$ref": "#/definitions/CurrencySummary"
        },
        "paymentStationUrl": {
          "type": "string"
        },
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "statusReason": {
          "type": "string"
        },
        "createdTime": {
          "type": "string",
          "format": "date-time"
        },
        "chargedTime": {
          "type": "string",
          "format": "date-time"
        },
        "authorisedTime": {
          "type": "string",
          "format": "date-time"
        },
        "refundedTime": {
          "type": "string",
          "format": "date-time"
        },
        "chargebackTime": {
          "type": "string",
          "format": "date-time"
        },
        "chargebackReversedTime": {
          "type": "string",
          "format": "date-time"
        },
        "returnUrl": {
          "type": "string"
        },
        "channel": {
          "type": "string",
          "enum": [
            "EXTERNAL",
            "INTERNAL"
          ]
        },
        "notifyUrl": {
          "type": "string"
        },
        "customParameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "charging": {
          "type": "boolean"
        },
        "subscriptionId": {
          "type": "string"
        },
        "recurringPaymentOrderNo": {
          "type": "string"
        },
        "omitNotification": {
          "type": "boolean"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "totalTax": {
          "type": "integer",
          "format": "int32"
        },
        "totalPrice": {
          "type": "integer",
          "format": "int32"
        },
        "subtotalPrice": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "XblIAPConfigInfo": {
      "type": "object",
      "required": [
        "namespace"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "relyingPartyCert": {
          "type": "string",
          "description": "relyingPartyCert"
        },
        "businessPartnerCertFileName": {
          "type": "string",
          "description": "businessPartnerCertFileName"
        },
        "password": {
          "type": "string",
          "description": "password"
        }
      }
    },
    "EpicGamesIAPConfigInfo": {
      "type": "object",
      "required": [
        "namespace",
        "sandboxId"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "sandboxId": {
          "type": "string",
          "description": "epic games sandbox id"
        }
      }
    },
    "EpicGamesIAPConfigRequest": {
      "type": "object",
      "required": [
        "sandboxId"
      ],
      "properties": {
        "sandboxId": {
          "type": "string",
          "description": "sandboxId"
        }
      }
    },
    "XblIAPConfigRequest": {
      "type": "object",
      "required": [
        "relyingPartyCert"
      ],
      "properties": {
        "relyingPartyCert": {
          "type": "string",
          "description": "relyingPartyCert"
        }
      }
    },
    "AppleIAPConfigInfo": {
      "type": "object",
      "required": [
        "bundleId",
        "namespace"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "bundleId": {
          "type": "string",
          "description": "bundleId"
        },
        "password": {
          "type": "string",
          "description": "password"
        }
      }
    },
    "AppleIAPConfigRequest": {
      "type": "object",
      "required": [
        "bundleId"
      ],
      "properties": {
        "bundleId": {
          "type": "string",
          "description": "bundleId"
        },
        "password": {
          "type": "string",
          "description": "password"
        }
      }
    },
    "PlayStationIAPConfigInfo": {
      "type": "object",
      "required": [
        "environment",
        "namespace"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "environment": {
          "type": "string",
          "description": "environment"
        }
      }
    },
    "PlaystationIAPConfigRequest": {
      "type": "object",
      "required": [
        "environment"
      ],
      "properties": {
        "environment": {
          "type": "string",
          "description": "environment"
        }
      }
    },
    "GoogleIAPConfigInfo": {
      "type": "object",
      "required": [
        "namespace"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "applicationName": {
          "type": "string",
          "description": "applicationName"
        },
        "serviceAccountId": {
          "type": "string",
          "description": "serviceAccountId"
        },
        "p12FileName": {
          "type": "string",
          "description": "p12 file"
        }
      }
    },
    "GoogleIAPConfigRequest": {
      "type": "object",
      "required": [
        "applicationName",
        "serviceAccountId"
      ],
      "properties": {
        "applicationName": {
          "type": "string",
          "description": "applicationName"
        },
        "serviceAccountId": {
          "type": "string",
          "description": "serviceAccountId"
        }
      }
    },
    "SteamIAPConfig": {
      "type": "object",
      "properties": {
        "rvn": {
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "publisherAuthenticationKey": {
          "type": "string"
        }
      }
    },
    "SteamIAPConfigInfo": {
      "type": "object",
      "required": [
        "namespace",
        "publisherAuthenticationKey"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "publisherAuthenticationKey": {
          "type": "string",
          "description": "steam publisher authentication key"
        }
      }
    },
    "SteamIAPConfigRequest": {
      "type": "object",
      "required": [
        "publisherAuthenticationKey"
      ],
      "properties": {
        "publisherAuthenticationKey": {
          "type": "string",
          "description": "publisherAuthenticationKey"
        }
      }
    },
    "StadiaIAPConfigInfo": {
      "type": "object",
      "required": [
        "namespace"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "jsonFile": {
          "type": "string",
          "description": "jsonFile"
        }
      }
    },
    "MockIAPReceipt": {
      "type": "object",
      "required": [
        "productId",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The IAP type.",
          "enum": [
            "APPLE",
            "GOOGLE",
            "PLAYSTATION",
            "STEAM",
            "XBOX",
            "STADIA",
            "EPICGAMES"
          ]
        },
        "productId": {
          "type": "string",
          "description": "The product identifier of the item that was purchased."
        },
        "region": {
          "type": "string",
          "description": "country value from ISO countries"
        },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US"
        }
      }
    },
    "IAPOrderPagingSlicedResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "description": "data",
          "items": {
            "$ref": "#/definitions/IAPOrderInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "SteamSyncRequest": {
      "type": "object",
      "required": [
        "appId",
        "steamId"
      ],
      "properties": {
        "steamId": {
          "type": "string",
          "description": "Steam ID of the user"
        },
        "appId": {
          "type": "string",
          "description": "Steam app id"
        },
        "region": {
          "type": "string",
          "description": "country value from ISO countries"
        },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US"
        }
      }
    },
    "AppleIAPReceipt": {
      "type": "object",
      "required": [
        "productId",
        "receiptData",
        "transactionId"
      ],
      "properties": {
        "productId": {
          "type": "string",
          "description": "The product identifier of the item that was purchased."
        },
        "transactionId": {
          "type": "string",
          "description": "The transaction identifier of the item that was purchased."
        },
        "receiptData": {
          "type": "string",
          "description": "The base64 encoded receipt data."
        },
        "excludeOldTransactions": {
          "type": "boolean",
          "description": "Only used for iOS7 style app receipts that contain auto-renewable or non-renewing subscriptions. If value is true, response includes only the latest renewal transaction for any subscriptions."
        },
        "region": {
          "type": "string",
          "description": "country value from ISO countries"
        },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US"
        }
      }
    },
    "PlayStationReconcileResult": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string"
        },
        "psnItemId": {
          "type": "string"
        },
        "itemId": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "VERIFIED",
            "FULFILLED",
            "FAILED"
          ]
        }
      }
    },
    "StadiaSyncRequest": {
      "type": "object",
      "required": [
        "appId",
        "stadiaPlayerId"
      ],
      "properties": {
        "stadiaPlayerId": {
          "type": "string",
          "description": "Stadia player id"
        },
        "appId": {
          "type": "string",
          "description": "app id"
        },
        "region": {
          "type": "string",
          "description": "country value from ISO countries"
        },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US"
        }
      }
    },
    "GoogleIAPReceipt": {
      "type": "object",
      "required": [
        "orderId",
        "packageName",
        "productId",
        "purchaseTime",
        "purchaseToken"
      ],
      "properties": {
        "orderId": {
          "type": "string",
          "description": "OrderId returned from google play"
        },
        "packageName": {
          "type": "string",
          "description": "App package name"
        },
        "productId": {
          "type": "string",
          "description": "Product id (SKU)"
        },
        "purchaseTime": {
          "type": "integer",
          "format": "int64",
          "description": "Purchase time returned from google play"
        },
        "purchaseToken": {
          "type": "string",
          "description": "Google play purchase token returned from google play"
        },
        "region": {
          "type": "string",
          "description": "country value from ISO countries"
        },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US"
        }
      }
    },
    "XblReconcileRequest": {
      "type": "object",
      "properties": {
        "xstsToken": {
          "type": "string",
          "description": "xstsToken"
        }
      }
    },
    "XblReconcileResult": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string"
        },
        "xboxProductId": {
          "type": "string"
        },
        "itemId": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "iapOrderStatus": {
          "type": "string",
          "enum": [
            "VERIFIED",
            "FULFILLED",
            "FAILED"
          ]
        }
      }
    },
    "EpicGamesReconcileRequest": {
      "type": "object",
      "properties": {
        "epicGamesJwtToken": {
          "type": "string",
          "description": "epicGamesJwtToken"
        }
      }
    },
    "EpicGamesReconcileResult": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string",
          "description": "Transaction ID"
        },
        "epicGamesItemId": {
          "type": "string",
          "description": "Epic games item ID"
        },
        "itemId": {
          "type": "string",
          "description": "Item ID"
        },
        "sku": {
          "type": "string",
          "description": "SKU"
        },
        "status": {
          "type": "string",
          "description": "IAP order status"
        }
      }
    },
    "IAPOrderInfo": {
      "type": "object",
      "required": [
        "iapOrderNo",
        "namespace",
        "status",
        "type",
        "userId"
      ],
      "properties": {
        "iapOrderNo": {
          "type": "string",
          "description": "iap order No"
        },
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "userId": {
          "type": "string",
          "description": "user id"
        },
        "productId": {
          "type": "string",
          "description": "product id"
        },
        "receiptData": {
          "type": "string",
          "description": "receipt data"
        },
        "transactionId": {
          "type": "string",
          "description": "transaction id"
        },
        "status": {
          "type": "string",
          "description": "status",
          "enum": [
            "VERIFIED",
            "FULFILLED",
            "FAILED"
          ]
        },
        "statusReason": {
          "type": "string",
          "description": "status reason"
        },
        "region": {
          "type": "string",
          "description": "region"
        },
        "language": {
          "type": "string",
          "description": "language"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "quantity"
        },
        "sandbox": {
          "type": "boolean",
          "description": "sandbox"
        },
        "type": {
          "type": "string",
          "description": "IAP type",
          "enum": [
            "APPLE",
            "GOOGLE",
            "PLAYSTATION",
            "STEAM",
            "XBOX",
            "STADIA",
            "EPICGAMES"
          ]
        },
        "fulfilledTime": {
          "type": "string",
          "format": "date-time",
          "description": "fulfill time if fulfilled"
        },
        "entitlements": {
          "type": "array",
          "description": "entitlement summary",
          "items": {
            "$ref": "#/definitions/EntitlementSummary"
          }
        },
        "credits": {
          "type": "array",
          "description": "credit summary",
          "items": {
            "$ref": "#/definitions/CreditSummary"
          }
        }
      }
    },
    "CheckoutConfig": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string",
          "description": "public key, max length is 4096"
        },
        "secretKey": {
          "type": "string",
          "description": "secret key, max length is 4096"
        }
      },
      "description": "A DTO object for updating checkout.com config."
    },
    "PaymentMerchantConfigInfo": {
      "type": "object",
      "required": [
        "createdAt",
        "id",
        "updatedAt"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "id"
        },
        "aliPayConfig": {
          "description": "aliPayConfig",
          "$ref": "#/definitions/AliPayConfig"
        },
        "aliPaySandboxConfig": {
          "description": "aliPaySandboxConfig",
          "$ref": "#/definitions/AliPayConfig"
        },
        "wxPayConfig": {
          "description": "wxPayConfig",
          "$ref": "#/definitions/WxPayConfigInfo"
        },
        "xsollaConfig": {
          "description": "xsollaConfig",
          "$ref": "#/definitions/XsollaConfig"
        },
        "xsollaPaywallConfig": {
          "description": "xsollaPaywallConfig",
          "$ref": "#/definitions/XsollaPaywallConfig"
        },
        "adyenConfig": {
          "description": "adyenConfig",
          "$ref": "#/definitions/AdyenConfig"
        },
        "adyenSandboxConfig": {
          "description": "adyenSandboxConfig",
          "$ref": "#/definitions/AdyenConfig"
        },
        "payPalConfig": {
          "description": "payPalConfig",
          "$ref": "#/definitions/PayPalConfig"
        },
        "payPalSandboxConfig": {
          "description": "payPalSandboxConfig",
          "$ref": "#/definitions/PayPalConfig"
        },
        "stripeConfig": {
          "description": "stripeConfig",
          "$ref": "#/definitions/StripeConfig"
        },
        "stripeSandboxConfig": {
          "description": "stripeSandboxConfig",
          "$ref": "#/definitions/StripeConfig"
        },
        "checkoutConfig": {
          "description": "checkoutConfig",
          "$ref": "#/definitions/CheckoutConfig"
        },
        "checkoutSandboxConfig": {
          "description": "checkoutSandboxConfig",
          "$ref": "#/definitions/CheckoutConfig"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "created at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updated at"
        }
      }
    },
    "TestResult": {
      "type": "object",
      "required": [
        "success"
      ],
      "properties": {
        "success": {
          "type": "boolean",
          "description": "success"
        },
        "msg": {
          "type": "string",
          "description": "error message"
        }
      }
    },
    "AdyenConfig": {
      "type": "object",
      "properties": {
        "apiKey": {
          "type": "string",
          "description": "api key, max length is 4096"
        },
        "merchantAccount": {
          "type": "string",
          "description": "merchant account, max length is 255"
        },
        "notificationHmacKey": {
          "type": "string",
          "description": "notification hmac key, max length is 4096"
        },
        "notificationUsername": {
          "type": "string",
          "description": "notification username, max length is 255"
        },
        "notificationPassword": {
          "type": "string",
          "description": "notification password, max length is 255"
        },
        "returnUrl": {
          "type": "string",
          "description": "return url, max length is 2000"
        },
        "liveEndpointUrlPrefix": {
          "type": "string",
          "description": "Provide the unique live url prefix from the \"API URLs and Response\" menu in the Adyen Customer Area. Under sandbox env, please input random words."
        },
        "authoriseAsCapture": {
          "type": "boolean",
          "description": "authorise as capture means no separated capture event"
        },
        "allowedPaymentMethods": {
          "type": "array",
          "description": "specifying the payment methods that are allowed to appear with the paymentMethod.type. paymentMethod.type of each payment method link: https://docs.adyen.com/developers/payment-methods",
          "items": {
            "type": "string"
          }
        },
        "blockedPaymentMethods": {
          "type": "array",
          "description": "specifying the payment methods that are blocked with the paymentMethod.type. paymentMethod.type of each payment method link: https://docs.adyen.com/developers/payment-methods",
          "items": {
            "type": "string"
          }
        },
        "settings": {
          "type": "string",
          "example": "{\"autoFocusOnLoad\":true,\"consolidateCards\":true,\"initialPMCount\":5,\"translations\":{\"deliveryAddress\":{\"en_US\":\"Shipping Address\",\"nl_NL\":\"Verzendadres\"}},\"paymentMethods\":{\"card\":{\"sfStyles\":{\"base\":{\"color\":\"#000\",\"fontSize\":\"14px\",\"lineHeight\":\"14px\",\"fontSmoothing\":\"antialiased\"},\"error\":{\"color\":\"red\"},\"placeholder\":{\"color\":\"#d8d8d8\"},\"validated\":{\"color\":\"green\"}},\"separateDateInputs\":false,\"placeholders\":{\"encryptedCardNumber\":\"4111 1111 1111 1111\",\"encryptedExpiryDate\":\"08/18\",\"encryptedSecurityCode\":\"737\"}}}}",
          "description": "Adyen settings json string, adyen settings docs: https://docs.adyen.com/checkout/web-sdk/customization/settings/"
        }
      },
      "description": "A DTO object for updating adyen config."
    },
    "AliPayConfig": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string",
          "description": "appId"
        },
        "privateKey": {
          "type": "string",
          "description": "privateKey"
        },
        "publicKey": {
          "type": "string",
          "description": "publicKey"
        },
        "returnUrl": {
          "type": "string",
          "description": "returnUrl"
        }
      },
      "description": "A DTO object for updating alipay config."
    },
    "StripeConfig": {
      "type": "object",
      "properties": {
        "publishableKey": {
          "type": "string",
          "description": "publishable key, max length is 4096"
        },
        "secretKey": {
          "type": "string",
          "description": "secret key, max length is 4096"
        },
        "webhookSecret": {
          "type": "string",
          "description": "webhook secret max length is 4096"
        },
        "allowedPaymentMethodTypes": {
          "type": "array",
          "description": "specifying the payment methods that are allowed to create payment intent. ",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "A DTO object for updating stripe config."
    },
    "WxPayConfigRequest": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string",
          "description": "wxpay appId"
        },
        "mchid": {
          "type": "string",
          "description": "wxpay mchid"
        },
        "key": {
          "type": "string",
          "description": "wxpay key"
        },
        "returnUrl": {
          "type": "string",
          "description": "return url"
        }
      },
      "description": "A DTO object for updating wxpay config."
    },
    "PayPalConfig": {
      "type": "object",
      "properties": {
        "clientID": {
          "type": "string",
          "description": "client id"
        },
        "clientSecret": {
          "type": "string",
          "description": "client secret, max length is 4096"
        },
        "webHookId": {
          "type": "string",
          "description": "web hook id"
        },
        "returnUrl": {
          "type": "string",
          "description": "return url, max length is 2048"
        }
      },
      "description": "A DTO object for updating PayPal config."
    },
    "XsollaConfig": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "integer",
          "format": "int32",
          "description": "merchant id"
        },
        "projectId": {
          "type": "integer",
          "format": "int32",
          "description": "project id"
        },
        "projectSecretKey": {
          "type": "string",
          "description": "project secret key, max length is 4096"
        },
        "apiKey": {
          "type": "string",
          "description": "api key, max length is 4096"
        },
        "flowCompletionUrl": {
          "type": "string",
          "description": "flow completion url, max length is 2000"
        }
      },
      "description": "A DTO object for updating xsolla config."
    },
    "XsollaPaywallConfig": {
      "type": "object",
      "required": [
        "device",
        "showCloseButton",
        "size",
        "theme"
      ],
      "properties": {
        "theme": {
          "type": "string",
          "description": "theme",
          "enum": [
            "DEFAULT",
            "DARK",
            "DEFAULT_DARK"
          ]
        },
        "size": {
          "type": "string",
          "description": "size",
          "enum": [
            "SMALL",
            "MEDIUM",
            "LARGE"
          ]
        },
        "device": {
          "type": "string",
          "description": "device",
          "enum": [
            "DESKTOP",
            "MOBILE"
          ]
        },
        "showCloseButton": {
          "type": "boolean",
          "description": "showCloseButton"
        }
      }
    },
    "XsollaPaywallConfigRequest": {
      "type": "object",
      "properties": {
        "theme": {
          "type": "string",
          "description": "Payment UI theme, DEFAULT for default.",
          "enum": [
            "DEFAULT",
            "DARK",
            "DEFAULT_DARK"
          ]
        },
        "size": {
          "type": "string",
          "description": "Payment UI size, MEDIUM for default.",
          "enum": [
            "SMALL",
            "MEDIUM",
            "LARGE"
          ]
        },
        "device": {
          "type": "string",
          "description": "Payment UI device type, DESKTOP for default",
          "enum": [
            "DESKTOP",
            "MOBILE"
          ]
        },
        "showCloseButton": {
          "type": "boolean",
          "description": "Whether to show a Close button in pay station. false by default"
        }
      }
    },
    "WxPayConfigInfo": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string",
          "description": "wxpay appId"
        },
        "mchid": {
          "type": "string",
          "description": "wxpay mchid"
        },
        "key": {
          "type": "string",
          "description": "wxpay key"
        },
        "certPath": {
          "type": "string",
          "description": "wxpay cert file name"
        },
        "returnUrl": {
          "type": "string",
          "description": "return url"
        }
      },
      "description": "A DTO object for wxpay config."
    },
    "PaymentAccount": {
      "type": "object",
      "required": [
        "id",
        "name",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Payment account id"
        },
        "type": {
          "type": "string",
          "description": "Payment account type",
          "enum": [
            "card",
            "paypal"
          ]
        },
        "name": {
          "type": "string",
          "description": "Payment account name, generally mask credit card number"
        }
      }
    },
    "PaymentOrderPaidResult": {
      "type": "object",
      "required": [
        "success"
      ],
      "properties": {
        "success": {
          "type": "boolean",
          "description": "success"
        }
      }
    },
    "TaxResult": {
      "type": "object",
      "properties": {
        "enableTax": {
          "type": "boolean",
          "description": "if enable tax"
        },
        "tax": {
          "type": "integer",
          "format": "int32",
          "description": "tax"
        },
        "formattedTax": {
          "type": "string",
          "description": "formattedTax"
        },
        "state": {
          "type": "string",
          "description": "state"
        }
      }
    },
    "PaymentToken": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "payment token(for checkout.com, this is card token)"
        }
      }
    },
    "PaymentProcessResult": {
      "type": "object",
      "required": [
        "pending",
        "success"
      ],
      "properties": {
        "success": {
          "type": "boolean",
          "description": "payment request process result"
        },
        "pending": {
          "type": "boolean",
          "description": "payment request process is pending"
        },
        "redirectUrl": {
          "type": "string",
          "description": "redirect url, exists when pending is true"
        },
        "reason": {
          "type": "string",
          "description": "failed reason"
        }
      }
    },
    "PaymentMethod": {
      "type": "object",
      "required": [
        "name",
        "paymentProvider"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "name"
        },
        "paymentProvider": {
          "type": "string",
          "description": "payment provider",
          "enum": [
            "WALLET",
            "XSOLLA",
            "ADYEN",
            "STRIPE",
            "CHECKOUT",
            "ALIPAY",
            "WXPAY",
            "PAYPAL"
          ]
        }
      }
    },
    "PaymentOrderDetails": {
      "type": "object",
      "required": [
        "charging",
        "currencyCode",
        "currencySymbol",
        "price",
        "sandbox",
        "title"
      ],
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Payment user display name"
        },
        "title": {
          "type": "string",
          "description": "Order title"
        },
        "description": {
          "type": "string",
          "description": "Order description"
        },
        "price": {
          "type": "string",
          "description": "Payment order price"
        },
        "currencyCode": {
          "type": "string",
          "description": "currency code"
        },
        "currencySymbol": {
          "type": "string",
          "description": "currency symbol"
        },
        "sandbox": {
          "type": "boolean",
          "description": "isSandbox, indicate if order is sandbox"
        },
        "region": {
          "type": "string",
          "description": "Payment user region"
        },
        "charging": {
          "type": "boolean",
          "description": "charging"
        }
      }
    },
    "Customization": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "string",
          "description": "settings"
        }
      }
    },
    "PaymentUrlCreate": {
      "type": "object",
      "required": [
        "paymentOrderNo",
        "paymentProvider"
      ],
      "properties": {
        "paymentOrderNo": {
          "type": "string",
          "description": "payment order number"
        },
        "paymentProvider": {
          "type": "string",
          "description": "payment provider",
          "enum": [
            "WALLET",
            "XSOLLA",
            "ADYEN",
            "STRIPE",
            "CHECKOUT",
            "ALIPAY",
            "WXPAY",
            "PAYPAL"
          ]
        },
        "zipCode": {
          "type": "string",
          "description": "payment zipCode"
        },
        "returnUrl": {
          "type": "string",
          "description": "returnUrl"
        },
        "ui": {
          "type": "string",
          "example": "{\"theme\":\"dark\",\"size\":\"medium\",\"version\":\"desktop\",\"desktop\":{\"header\":{\"close_button\": false}}}",
          "description": "ui, custom json string, ignore if payment provider not support or invalid setting."
        }
      }
    },
    "PaymentUrl": {
      "type": "object",
      "required": [
        "paymentProvider",
        "paymentType",
        "paymentUrl"
      ],
      "properties": {
        "paymentProvider": {
          "type": "string",
          "description": "payment provider",
          "enum": [
            "WALLET",
            "XSOLLA",
            "ADYEN",
            "STRIPE",
            "CHECKOUT",
            "ALIPAY",
            "WXPAY",
            "PAYPAL"
          ]
        },
        "paymentUrl": {
          "type": "string",
          "description": "payment url"
        },
        "returnUrl": {
          "type": "string",
          "description": "return url"
        },
        "paymentType": {
          "type": "string",
          "description": "payment type",
          "enum": [
            "QR_CODE",
            "LINK"
          ]
        }
      }
    },
    "PaymentProviderConfigPagingSlicedResult": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "description": "data",
          "items": {
            "$ref": "#/definitions/PaymentProviderConfigInfo"
          }
        },
        "paging": {
          "$ref": "#/definitions/Paging"
        }
      }
    },
    "PaymentProviderConfigEdit": {
      "type": "object",
      "required": [
        "namespace",
        "region"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "namespace, * indicates all namespace"
        },
        "region": {
          "type": "string",
          "description": "region, * indicates all regions"
        },
        "aggregate": {
          "type": "string",
          "description": "aggregate payment provider, allow empty value",
          "enum": [
            "XSOLLA",
            "ADYEN"
          ]
        },
        "specials": {
          "type": "array",
          "description": "special payment providers = ['ALIPAY', 'WXPAY'], allow empty value",
          "items": {
            "type": "string",
            "enum": [
              "WALLET",
              "XSOLLA",
              "ADYEN",
              "STRIPE",
              "CHECKOUT",
              "ALIPAY",
              "WXPAY",
              "PAYPAL"
            ]
          }
        },
        "taxJarEnabled": {
          "type": "boolean",
          "description": "taxjar api integration enable"
        },
        "taxJarApiToken": {
          "type": "string",
          "description": "taxjar api token, required when taxJarEnabled=true and useGlobalTaxJarApiToken=false"
        },
        "sandboxTaxJarApiToken": {
          "type": "string",
          "description": "sandbox taxjar api token"
        },
        "useGlobalTaxJarApiToken": {
          "type": "boolean",
          "description": "only works when taxJarEnabled=true, and if useGlobalTaxJarApiToken is true, we will reset the taxJarApiToken as null"
        }
      },
      "description": "A DTO object for creating/updating payment provider config"
    },
    "PaymentProviderConfigInfo": {
      "type": "object",
      "required": [
        "id",
        "namespace",
        "paymentMerchantConfigId",
        "region"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "id"
        },
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "region": {
          "type": "string",
          "description": "region"
        },
        "aggregate": {
          "type": "string",
          "description": "aggregate payment provider, allow empty value",
          "enum": [
            "XSOLLA",
            "ADYEN"
          ]
        },
        "specials": {
          "type": "array",
          "description": "special payment providers = ['ALIPAY', 'WXPAY'], allow empty value",
          "items": {
            "type": "string",
            "enum": [
              "WALLET",
              "XSOLLA",
              "ADYEN",
              "STRIPE",
              "CHECKOUT",
              "ALIPAY",
              "WXPAY",
              "PAYPAL"
            ]
          }
        },
        "paymentMerchantConfigId": {
          "type": "string",
          "description": "paymentMerchantConfigId"
        },
        "taxJarEnabled": {
          "type": "boolean",
          "description": "taxjar integration enabled"
        },
        "taxJarApiToken": {
          "type": "string",
          "description": "taxjar api token, required when taxJarEnabled=true and useGlobalTaxJarApiToken=false"
        },
        "sandboxTaxJarApiToken": {
          "type": "string",
          "description": "sandbox taxjar api token"
        },
        "useGlobalTaxJarApiToken": {
          "type": "boolean",
          "description": "if use global taxjar token"
        }
      }
    },
    "PaymentTaxConfigInfo": {
      "type": "object",
      "properties": {
        "taxJarEnabled": {
          "type": "boolean",
          "description": "if taxJar integration is enabled"
        },
        "taxJarApiToken": {
          "type": "string",
          "description": "taxJar API token"
        },
        "sandboxTaxJarApiToken": {
          "type": "string",
          "description": "sandbox taxJar API token"
        },
        "taxJarProductCodesMapping": {
          "type": "object",
          "description": "taxJar product codes mappings",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PaymentTaxConfigEdit": {
      "type": "object",
      "properties": {
        "taxJarEnabled": {
          "type": "boolean",
          "description": "if taxJar integration is enabled"
        },
        "taxJarApiToken": {
          "type": "string",
          "description": "taxJar API token"
        },
        "sandboxTaxJarApiToken": {
          "type": "string",
          "description": "sandbox taxJar API token"
        },
        "taxJarProductCodesMapping": {
          "type": "object",
          "description": "taxJar product codes mappings, allow item types: APP, COINS, INGAMEITEM, BUNDLE, CODE, SUBSCRIPTION",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "A DTO object for updating payment tax config"
    },
    "PaymentOrderRefund": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "order refund description"
        }
      }
    },
    "PaymentOrderRefundResult": {
      "type": "object",
      "required": [
        "createdTime",
        "namespace",
        "paymentOrderNo",
        "status"
      ],
      "properties": {
        "paymentOrderNo": {
          "type": "string",
          "description": "Payment order number"
        },
        "namespace": {
          "type": "string",
          "description": "Payment order namespace"
        },
        "targetNamespace": {
          "type": "string",
          "description": "Game namespace"
        },
        "targetUserId": {
          "type": "string",
          "description": "User id in game namespace"
        },
        "status": {
          "type": "string",
          "description": "Payment order status",
          "enum": [
            "INIT",
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGED",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REQUEST_FOR_INFORMATION",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "DELETED"
          ]
        },
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order created"
        },
        "refundedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order refunded"
        }
      }
    },
    "PaymentOrderCreate": {
      "type": "object",
      "required": [
        "description",
        "extOrderNo",
        "price",
        "title"
      ],
      "properties": {
        "extOrderNo": {
          "type": "string",
          "description": "External order id"
        },
        "sku": {
          "type": "string",
          "description": "optional, unique identity for the item"
        },
        "extUserId": {
          "type": "string",
          "description": "optional, external user id, can be the character id"
        },
        "price": {
          "type": "integer",
          "format": "int32",
          "description": "Price of order"
        },
        "title": {
          "type": "string",
          "description": "Order title"
        },
        "description": {
          "type": "string",
          "description": "Order desc, max length 2000"
        },
        "itemType": {
          "type": "string",
          "enum": [
            "APP",
            "COINS",
            "INGAMEITEM",
            "BUNDLE",
            "CODE",
            "SUBSCRIPTION"
          ]
        },
        "currencyCode": {
          "type": "string",
          "description": "currency code, default is USD"
        },
        "currencyNamespace": {
          "type": "string",
          "description": "currency namespace, default is publisher namespace"
        },
        "region": {
          "type": "string",
          "description": "country value from ISO countries"
        },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US"
        },
        "sandbox": {
          "type": "boolean",
          "description": "TEST PURPOSE, sandbox(Active in real currency mode), default is false"
        },
        "returnUrl": {
          "type": "string",
          "description": "custom return url for real payment, user will be redirected to this url once payment is finished"
        },
        "notifyUrl": {
          "type": "string",
          "description": "custom notify url for real payment, send notification to this url once payment action is finished"
        },
        "customParameters": {
          "type": "object",
          "description": "custom parameters",
          "additionalProperties": {
            "type": "object"
          }
        },
        "subscriptionId": {
          "type": "string",
          "description": "subscriptionId, payment token will be saved for recurring payment"
        },
        "recurringPaymentOrderNo": {
          "type": "string",
          "description": "recurring payment order which has recurring token, will do recurring payment if present, otherwise start normal payment flow"
        },
        "omitNotification": {
          "type": "boolean",
          "description": "TEST PURPOSE, if set it will not send async notification to the API invoker, only can set true while this payment is sandbox"
        },
        "metadata": {
          "type": "object",
          "description": "metadata",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    }
  }
}