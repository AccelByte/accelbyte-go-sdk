// Code generated by go-swagger; DO NOT EDIT.

package o_auth2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
)

// TokenIntrospectionV3Reader is a Reader for the TokenIntrospectionV3 structure.
type TokenIntrospectionV3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TokenIntrospectionV3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTokenIntrospectionV3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTokenIntrospectionV3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewTokenIntrospectionV3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /iam/v3/oauth/introspect returns an error %d: %s", response.Code(), string(data))
	}
}

// NewTokenIntrospectionV3OK creates a TokenIntrospectionV3OK with default headers values
func NewTokenIntrospectionV3OK() *TokenIntrospectionV3OK {
	return &TokenIntrospectionV3OK{}
}

/*TokenIntrospectionV3OK handles this case with default header values.

  OK
*/
type TokenIntrospectionV3OK struct {
	Payload *iamclientmodels.OauthmodelTokenIntrospectResponse
}

func (o *TokenIntrospectionV3OK) Error() string {
	return fmt.Sprintf("[POST /iam/v3/oauth/introspect][%d] tokenIntrospectionV3OK  %+v", 200, o.Payload)
}

func (o *TokenIntrospectionV3OK) GetPayload() *iamclientmodels.OauthmodelTokenIntrospectResponse {
	return o.Payload
}

func (o *TokenIntrospectionV3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.OauthmodelTokenIntrospectResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTokenIntrospectionV3BadRequest creates a TokenIntrospectionV3BadRequest with default headers values
func NewTokenIntrospectionV3BadRequest() *TokenIntrospectionV3BadRequest {
	return &TokenIntrospectionV3BadRequest{}
}

/*TokenIntrospectionV3BadRequest handles this case with default header values.

  invalid input
*/
type TokenIntrospectionV3BadRequest struct {
	Payload *iamclientmodels.OauthmodelErrorResponse
}

func (o *TokenIntrospectionV3BadRequest) Error() string {
	return fmt.Sprintf("[POST /iam/v3/oauth/introspect][%d] tokenIntrospectionV3BadRequest  %+v", 400, o.Payload)
}

func (o *TokenIntrospectionV3BadRequest) GetPayload() *iamclientmodels.OauthmodelErrorResponse {
	return o.Payload
}

func (o *TokenIntrospectionV3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.OauthmodelErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTokenIntrospectionV3Unauthorized creates a TokenIntrospectionV3Unauthorized with default headers values
func NewTokenIntrospectionV3Unauthorized() *TokenIntrospectionV3Unauthorized {
	return &TokenIntrospectionV3Unauthorized{}
}

/*TokenIntrospectionV3Unauthorized handles this case with default header values.

  invalid bearer or basic authorization header
*/
type TokenIntrospectionV3Unauthorized struct {
	Payload *iamclientmodels.OauthmodelErrorResponse
}

func (o *TokenIntrospectionV3Unauthorized) Error() string {
	return fmt.Sprintf("[POST /iam/v3/oauth/introspect][%d] tokenIntrospectionV3Unauthorized  %+v", 401, o.Payload)
}

func (o *TokenIntrospectionV3Unauthorized) GetPayload() *iamclientmodels.OauthmodelErrorResponse {
	return o.Payload
}

func (o *TokenIntrospectionV3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(iamclientmodels.OauthmodelErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
