// Code generated by go-swagger; DO NOT EDIT.

package iamclientmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelThirdPartyLoginPlatformCredentialRequest model third party login platform credential request
//
// swagger:model model.ThirdPartyLoginPlatformCredentialRequest
type ModelThirdPartyLoginPlatformCredentialRequest struct {

	// a c s URL
	// Required: true
	ACSURL *string `json:"ACSURL"`

	// app Id
	// Required: true
	AppID *string `json:"AppId"`

	// client Id
	// Required: true
	ClientID *string `json:"ClientId"`

	// environment
	// Required: true
	Environment *string `json:"Environment"`

	// federation metadata URL
	// Required: true
	FederationMetadataURL *string `json:"FederationMetadataURL"`

	// is active
	// Required: true
	IsActive *bool `json:"IsActive"`

	// organization Id
	// Required: true
	OrganizationID *string `json:"OrganizationId"`

	// redirect Uri
	// Required: true
	RedirectURI *string `json:"RedirectUri"`

	// secret
	// Required: true
	Secret *string `json:"Secret"`
}

// Validate validates this model third party login platform credential request
func (m *ModelThirdPartyLoginPlatformCredentialRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACSURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFederationMetadataURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialRequest) validateACSURL(formats strfmt.Registry) error {

	if err := validate.Required("ACSURL", "body", m.ACSURL); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialRequest) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("AppId", "body", m.AppID); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialRequest) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("ClientId", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialRequest) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("Environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialRequest) validateFederationMetadataURL(formats strfmt.Registry) error {

	if err := validate.Required("FederationMetadataURL", "body", m.FederationMetadataURL); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialRequest) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("IsActive", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialRequest) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("OrganizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialRequest) validateRedirectURI(formats strfmt.Registry) error {

	if err := validate.Required("RedirectUri", "body", m.RedirectURI); err != nil {
		return err
	}

	return nil
}

func (m *ModelThirdPartyLoginPlatformCredentialRequest) validateSecret(formats strfmt.Registry) error {

	if err := validate.Required("Secret", "body", m.Secret); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelThirdPartyLoginPlatformCredentialRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelThirdPartyLoginPlatformCredentialRequest) UnmarshalBinary(b []byte) error {
	var res ModelThirdPartyLoginPlatformCredentialRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
