// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AddUserPermissionReader is a Reader for the AddUserPermission structure.
type AddUserPermissionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddUserPermissionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAddUserPermissionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddUserPermissionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddUserPermissionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAddUserPermissionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAddUserPermissionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewAddUserPermissionNoContent creates a AddUserPermissionNoContent with default headers values
func NewAddUserPermissionNoContent() *AddUserPermissionNoContent {
	return &AddUserPermissionNoContent{}
}

/*AddUserPermissionNoContent handles this case with default header values.

  Operation succeeded
*/
type AddUserPermissionNoContent struct {
}

func (o *AddUserPermissionNoContent) Error() string {
	return fmt.Sprintf("[POST /iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}][%d] addUserPermissionNoContent ", 204)
}

func (o *AddUserPermissionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUserPermissionBadRequest creates a AddUserPermissionBadRequest with default headers values
func NewAddUserPermissionBadRequest() *AddUserPermissionBadRequest {
	return &AddUserPermissionBadRequest{}
}

/*AddUserPermissionBadRequest handles this case with default header values.

  Invalid request
*/
type AddUserPermissionBadRequest struct {
}

func (o *AddUserPermissionBadRequest) Error() string {
	return fmt.Sprintf("[POST /iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}][%d] addUserPermissionBadRequest ", 400)
}

func (o *AddUserPermissionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUserPermissionUnauthorized creates a AddUserPermissionUnauthorized with default headers values
func NewAddUserPermissionUnauthorized() *AddUserPermissionUnauthorized {
	return &AddUserPermissionUnauthorized{}
}

/*AddUserPermissionUnauthorized handles this case with default header values.

  Unauthorized access
*/
type AddUserPermissionUnauthorized struct {
}

func (o *AddUserPermissionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}][%d] addUserPermissionUnauthorized ", 401)
}

func (o *AddUserPermissionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUserPermissionForbidden creates a AddUserPermissionForbidden with default headers values
func NewAddUserPermissionForbidden() *AddUserPermissionForbidden {
	return &AddUserPermissionForbidden{}
}

/*AddUserPermissionForbidden handles this case with default header values.

  Forbidden
*/
type AddUserPermissionForbidden struct {
}

func (o *AddUserPermissionForbidden) Error() string {
	return fmt.Sprintf("[POST /iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}][%d] addUserPermissionForbidden ", 403)
}

func (o *AddUserPermissionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUserPermissionNotFound creates a AddUserPermissionNotFound with default headers values
func NewAddUserPermissionNotFound() *AddUserPermissionNotFound {
	return &AddUserPermissionNotFound{}
}

/*AddUserPermissionNotFound handles this case with default header values.

  Data not found
*/
type AddUserPermissionNotFound struct {
}

func (o *AddUserPermissionNotFound) Error() string {
	return fmt.Sprintf("[POST /iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}][%d] addUserPermissionNotFound ", 404)
}

func (o *AddUserPermissionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
